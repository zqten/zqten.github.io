{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1729838088967},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1729838176996},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1729838177203},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1729838177227},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1729838177202},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1729838177228},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1729838177229},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1729838177230},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1729838177230},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1729838177231},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1729838177231},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1729838177233},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1729838177232},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1729838177233},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1729838177234},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1729838177235},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1729838177234},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1729838177235},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1729838177236},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1729838177236},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1729838177237},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1729838177237},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1729838177238},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1729838177239},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1729838177239},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1729838177240},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1729838177240},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1729838177241},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1729838177242},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1729838177242},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1729838177243},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1729838177245},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1729838177246},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1729838177247},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1729838177246},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1729838177248},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1729838177065},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1729838177038},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1729838177118},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1729838177249},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1729838177124},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1729838177135},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1729838177137},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1729838177150},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1729838177186},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1729838177018},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1729838177010},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1729838177042},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1729838177079},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1729838177015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1729838177090},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1729838177097},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1729838177114},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1729838177105},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1729838177127},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1729838177143},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1729838177027},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1729838177057},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1729838177147},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1729838177140},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1729838177152},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1729838177206},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1729838177209},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1729838177227},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1729838177002},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1729838177201},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1729838177049},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1729838177072},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1729838177084},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1729838177132},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1729838177146},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1729838177210},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1729838177163},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1729838177211},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1729838177213},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1729838177220},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1729838177215},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1729838177221},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1729838177223},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1729838177224},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1729838177225},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1729838177226},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1729838177217},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1729838177222},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1729838177200},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1729838177195},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1729838177184},{"_id":"source/_posts/Python入门到实践第三版学习笔记.md","hash":"2239e741bb6453f6e49c835bb15644873525abcb","modified":1729838735032},{"_id":"source/investment.md","hash":"5a17280f79138f4b089d09a61c674a45d0110271","modified":1729840950907},{"_id":"source/philosophy.md.md","hash":"f2d0b49fdd201c5af87a1909a2ac498434caa4f8","modified":1729840981589},{"_id":"source/program.md","hash":"1ab5b82324e02cb0131e87bc5b0cc21a19be989b","modified":1729841024020},{"_id":"source/聪明的投资者笔记.md","hash":"f738ca04154c97d0f68f9d74cad4a22df08240d1","modified":1723173226066},{"_id":"source/_posts/2024-10-25-聪明的投资者笔记.md","hash":"62376a65c221cb2e4c2b13ede729380545f591a6","modified":1729841691700},{"_id":"source/_posts/2024-10-25-Python入门到实践第三版学习笔记.md","hash":"9ef9a99b95819d4d0176fe7e4df9624e12769b0a","modified":1729841532608},{"_id":"source/_posts/2024-10-25-Hexo建立博客教程.md","hash":"4badcd5708e25a7d2aadc9083e45eccaaa68ebee","modified":1729846422122}],"Category":[{"name":"编程","_id":"cm2oe5xwd00021kud65q25xoh"},{"name":"学习","parent":"cm2oe5xwd00021kud65q25xoh","_id":"cm2oe5xwf00051kudehm88rlx"},{"name":"投资","parent":"cm2oe5xwf00051kudehm88rlx","_id":"cm2oe5xwg00081kud6kckfa10"},{"name":"[object Object]","parent":"cm2oe5xwg00081kud6kckfa10","_id":"cm2oe91kp000c1kudduw3hwht"},{"name":"标签1","parent":"cm2oe91kp000c1kudduw3hwht","_id":"cm2oe91kr000d1kudbszt51r4"},{"name":"编程","parent":"cm2oe91kr000d1kudbszt51r4","_id":"cm2oe91ks000e1kudfpwy1ilu"},{"name":"[object Object]","parent":"cm2oe5xwf00051kudehm88rlx","_id":"cm2oe95m8000i1kuddazm33yl"},{"name":"标签1","parent":"cm2oe95m8000i1kuddazm33yl","_id":"cm2oe95m9000j1kudfh154oe4"},{"name":"编程","parent":"cm2oe95m9000j1kudfh154oe4","_id":"cm2oe95ma000k1kudev19f9kz"},{"name":"投资  tags:# 文章的标签","parent":"cm2oe5xwf00051kudehm88rlx","_id":"cm2oeag2o000o1kud0qak99ro"},{"name":"python","parent":"cm2oeag2o000o1kud0qak99ro","_id":"cm2oeag2p000p1kud8t9j41b2"},{"name":"编程","parent":"cm2oeag2p000p1kud8t9j41b2","_id":"cm2oeag2p000q1kud6acigyg1"},{"name":"tags:# 文章的标签","parent":"cm2oe5xwg00081kud6kckfa10","_id":"cm2oeas21000u1kud53n7ew6m"},{"name":"python","parent":"cm2oeas21000u1kud53n7ew6m","_id":"cm2oeas21000v1kud3pkadjmd"},{"name":"编程","parent":"cm2oeas21000v1kud3pkadjmd","_id":"cm2oeas21000w1kud562hdxnr"},{"name":"投资","_id":"cm2of06e0001l1kud4k4x1nmh"}],"Data":[],"Page":[{"title":"投资","type":"投资","layout":"投资","_content":"","source":"investment.md","raw":"---\ntitle: 投资    \ntype: 投资 # 这取决于你的主题是否支持此字段来区分页面和文章   \nlayout: 投资 # 指示使用哪个布局模板，这取决于你的主题   \n---","date":"2024-10-25T07:22:30.907Z","updated":"2024-10-25T07:22:30.907Z","path":"investment.html","_id":"cm2oek2d700181kudecgje3le","comments":1,"content":"","excerpt":"","more":""},{"title":"哲学","type":"哲学","layout":"哲学","_content":"","source":"philosophy.md.md","raw":"---\ntitle: 哲学   \ntype: 哲学 # 这取决于你的主题是否支持此字段来区分页面和文章   \nlayout: 哲学 # 指示使用哪个布局模板，这取决于你的主题   \n---","date":"2024-10-25T07:23:01.589Z","updated":"2024-10-25T07:23:01.589Z","path":"philosophy.md.html","_id":"cm2oekaj8001a1kud21k19wwx","comments":1,"content":"","excerpt":"","more":""},{"title":"编程","type":"编程","layout":"编程","_content":"","source":"program.md","raw":"---\ntitle: 编程   \ntype: 编程 # 这取决于你的主题是否支持此字段来区分页面和文章   \nlayout: 编程 # 指示使用哪个布局模板，这取决于你的主题   \n---","date":"2024-10-25T07:23:44.020Z","updated":"2024-10-25T07:23:44.020Z","path":"program.html","_id":"cm2oeo5fb001c1kud6qo89bnz","comments":1,"content":"","excerpt":"","more":""},{"_content":"# 聪明的投资者——投资指南\n\n---\n\n\n\n防御型投资者和进攻型投资者之间的主要区别在于：\n\n- 防御型投资者要限制自己向大的和领先的公司投资\n- 进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票\n\n评估普通股的规则：\n\n- 评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定\n\n- 收益能力一般代表对未来7年平均收益的预测\n\n- 上面的预测起点就是过去7到10年的真实情况\n\n- 把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动\n\n- 倍数应该反应未来收益更长期的变化\n\n  > 倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，**最大的倍数应该是20，最小的倍数应该是8**\n\n- 如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25\n\n- 如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%\n\n\n\n","source":"聪明的投资者笔记.md","raw":"# 聪明的投资者——投资指南\n\n---\n\n\n\n防御型投资者和进攻型投资者之间的主要区别在于：\n\n- 防御型投资者要限制自己向大的和领先的公司投资\n- 进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票\n\n评估普通股的规则：\n\n- 评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定\n\n- 收益能力一般代表对未来7年平均收益的预测\n\n- 上面的预测起点就是过去7到10年的真实情况\n\n- 把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动\n\n- 倍数应该反应未来收益更长期的变化\n\n  > 倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，**最大的倍数应该是20，最小的倍数应该是8**\n\n- 如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25\n\n- 如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%\n\n\n\n","date":"2024-10-10T04:06:28.698Z","updated":"2024-08-09T03:13:46.066Z","path":"聪明的投资者笔记.html","_id":"cm2oey11h001d1kudadx54grg","title":"","comments":1,"layout":"page","content":"<h1 id=\"聪明的投资者——投资指南\"><a href=\"#聪明的投资者——投资指南\" class=\"headerlink\" title=\"聪明的投资者——投资指南\"></a>聪明的投资者——投资指南</h1><hr>\n<p>防御型投资者和进攻型投资者之间的主要区别在于：</p>\n<ul>\n<li>防御型投资者要限制自己向大的和领先的公司投资</li>\n<li>进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票</li>\n</ul>\n<p>评估普通股的规则：</p>\n<ul>\n<li><p>评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定</p>\n</li>\n<li><p>收益能力一般代表对未来7年平均收益的预测</p>\n</li>\n<li><p>上面的预测起点就是过去7到10年的真实情况</p>\n</li>\n<li><p>把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动</p>\n</li>\n<li><p>倍数应该反应未来收益更长期的变化</p>\n<blockquote>\n<p>倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，<strong>最大的倍数应该是20，最小的倍数应该是8</strong></p>\n</blockquote>\n</li>\n<li><p>如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25</p>\n</li>\n<li><p>如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"聪明的投资者——投资指南\"><a href=\"#聪明的投资者——投资指南\" class=\"headerlink\" title=\"聪明的投资者——投资指南\"></a>聪明的投资者——投资指南</h1><hr>\n<p>防御型投资者和进攻型投资者之间的主要区别在于：</p>\n<ul>\n<li>防御型投资者要限制自己向大的和领先的公司投资</li>\n<li>进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票</li>\n</ul>\n<p>评估普通股的规则：</p>\n<ul>\n<li><p>评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定</p>\n</li>\n<li><p>收益能力一般代表对未来7年平均收益的预测</p>\n</li>\n<li><p>上面的预测起点就是过去7到10年的真实情况</p>\n</li>\n<li><p>把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动</p>\n</li>\n<li><p>倍数应该反应未来收益更长期的变化</p>\n<blockquote>\n<p>倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，<strong>最大的倍数应该是20，最小的倍数应该是8</strong></p>\n</blockquote>\n</li>\n<li><p>如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25</p>\n</li>\n<li><p>如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%</p>\n</li>\n</ul>\n"}],"Post":[{"title":"python入门学习笔记","date":"2024-10-24T16:00:00.000Z","_content":"\n# 第一部分 基础知识\n\n[回到主頁](https://zqten.github.io/)\n\n```cmd\n# python更新指令\npip install --upgrade python\n# pip更新指令\npython.exe -m pip install --upgrade pip\n# 国内镜像安装\npip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\npip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\npip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n# pip查看可更新包\npip list --outdated\n# 批量升级所有包,升级前先确认\npip-review --local --interactive\n# 一键升级所有包\npip-review --auto\n```\n\n前面的安装环节网络上讲得比书上的要详细多了，官方文档也讲得很清楚，所以这里就不在这里说了，有兴趣可以去访问官方网站[^😺^](https://www.python.org/)。\n\n## 第一章\t变量和简单的数据类型\n\n### 变量\n\n变量命名有一定的规则\n\n* 不能是数字开头，比如：**1_message**\n* 不能包含空格，比如：**mess age**\n* 不能是python里面的关键字，比如：print 或 def 等，python里面有很多关键字一般你打出来会高亮显示\n* 最好的变量名应该是既简短又有描述性，比如：name、student_name 等等。\n\n这里message是变量名，'Hello Python World!'是指向message变量的值。变量是可以重复赋值的，但它只会储存最后的值。\n\n```python\nmessage = 'Hello Python World!'\nprint(message)\nHello Python World!\n\nmessage = '你好!'\nprint(message)\n你好!\n```\n\n### 字符串\n\n有双引号或单引号包裹的内容就称为字符串，有些编程语言只有双引号是字符串。\n\n~~~python\n\"This is string.\"\n'This is string.'\n~~~\n\n**1.方法：title()、upper()、lower()**\n\n方法(method)是python对数据执行的操作，name后面的点(.)是让python对name变量执行 **title()** 方法指定的操作，这个方法就是把单词的手写字幕改成大写。**upper()**方法是让所有字母变成大写、**lower()**方法是让所有字母变成小写。还有一个方法修改字符串中的指定单词。**replace()**这个方法我们在后面的练习中会用到。\n\n~~~python\nname = \"zheng kai nan\"\nprint(name.title())\nZheng Kai Nan\n\nname = \"Zheng Kai Nan\"\nprint(name.upper())\nZHENG KAI NAN\nprint(name.lower())\nzheng kai nan\n\nname = \"zheng kai nan\"\nname_01 = name.replace(\"kai nan\", \"ji zhong\")\nprint(name)\nprint(name_01)\nzheng kai nan\nzheng ji zhong\n~~~\n\n**2.在字符串中插入变量**\n\n这个功能很常用，python的方式是在字符串的引号前面加一个 **f** 字母：\n\n~~~python\nfirst_name = \"zheng\"\nlast_name = \"kai nan\"\nfull_name = f\"{first_name} {last_name}\"\nprint(full_name)\nzheng kai nan\nprint(f\"Hello,{full_name.title()}!\")\nHello,Zheng Kai Nan!\n~~~\n\n**3.制表符和换行符控制字符串  \\t  \\n**\n\n在字符串中添加**\\t**、**\\n**可以缩进和换行，字符串引号前加**` r `**可以让取消里面所有转义符号：\n\n~~~python\nmessage = \"你知道这几种编程语言吗？Python Swift C++ Go Java\"\nprint(message)\n你知道这几种编程语言吗？Python Swift C++ Go Java\n\nmessage = \"\\t你知道这几种编程语言吗？Python Swift C++ Go Java\"\nprint(message)\n     你知道这几种编程语言吗？Python Swift C++ Go Java\n\nmessage = \"你知道这几种编程语言吗？\\nPython Swift C++ Go Java\"\nprint(message)\n你知道这几种编程语言吗？\nPython Swift C++ Go Java\n\n# 也可以同时使用\nmessage = \"你知道这几种编程语言吗？\\n\\tPython \\n\\tSwift \\n\\tC++ \\n\\tGo \\n\\tJava\"\nprint(message)\n你知道这几种编程语言吗？\n\tPython \n\tSwift \n\tC++ \n\tGo \n\tJava\n# 取消转义    \nprint(r\"\\nasd\") \n\\nasd\n~~~\n\n**4.删除字符串里面的空白rstrip()、lstrip()、strip()**\n\n有时候后输入字符串的时候会多输空格，在python里面多一个空格就意味着两个不同的字符串了。这里有3个方法：分别是**rstrip()、lstrip()、strip()**，*rstrip()*是删除字符串右边的空格，*lstrip()*是删除左边的空格，*strip()*是删除两边的空格。但是这种删除只是暂时的，要想永久删除就要重新赋值给变量。\n\n~~~python\nlanguage = ' python '\nprint(language.rstrip())\n' python'\nprint(language.lstrip())\n'python '\nprint(language.strip())\n'python'\n# 重新赋值给变量\nlanguage = language.strip()\nprint(language)\n'python'\n~~~\n\n**5.删除前缀和后缀 removeprefix()、removesuffix()**\n\n有些内容有统一的前缀，比如你有很多照片，前缀是某一个时间比如2023.7.25+名字或序号，你就只想要序号或名字就可以用到这个功能，还有就是URL里面的https://这个是网站前缀，就可以用*removeprefix()*括号里面填写你想删除的前缀，用引号括起来。这种方法的删除也是暂时的，要想永久删除需要重新赋值，和上面的删除空白一样。\n\n~~~python\n# 删除前缀\nTravel_photo = \"2023.7.25-镇远旅游照片\"\nprint(Travel_photo.removeprefix('2023.7.25-'))\n镇远旅游照片\nurl = \"https://www.baidu.com\"\nprint(url.removeprefix('https://'))\nwww.baidu.com\n\n#删除后缀\nfile_name = 'abc.jpg'\nprint(file_name.removesuffix('.jpg'))\nabc\n~~~\n\n### 数\n\n可以理解为数学里面的数字，用来计算或可视化数据\n\n**1.整数及其运算**\n\ninteger()或简写int()表示整数，**+、-、*、/** 这几个符号表示加减乘除，还有些复杂的后面会讲到，比如(**)两个星号代表乘方运算。\n\n~~~python\n2 + 3\n5\n3 ** 2\n9\n~~~\n\n**2.浮点数**\n\nfloat() 表示浮点数，就是带有小数点的数称为浮点数，数字同样都可以应用上面的计算符号。\n\n~~~python\n0.1 + 0.2\n0.3\n~~~\n\n**3.数字中的下划线**\n\n下划线用在数字中，并不会有其他的效果，只是方便我们更好观察。\n\n~~~python\nnumber = 1000_000_000\nprint(number)\n10000000000\n~~~\n\n**4.同时给多个变量赋值**\n\n同时给多个变量赋值，需要用逗号将变量名分开，对于要赋给变量的值也需要做同样的事情\n\n~~~python\nx,y,z = 1,2,3\nx = 1\ny = 2\nz = 3\n\n# 错误演示\nx,y,z = 1,2\nprint(x)\n发生异常: ValueError x\nnot enough values to unpack (expected 3, got 2)\n  File \"F:\\第一章变量和简单数据类型\\full_name.py\", line 7, in <module>\n    x, y, z = 1, 2\n    ^^^^^^^\nValueError: not enough values to unpack (expected 3, got 2)\n~~~\n\n**5.常量**\n\nPython里面没有常量(就是整个程序的生命周期不改变值的“变量”)，一般是用全大写字母来共同与其他程序员形成约定，遇到全大写字母的变量时，视为常量。\n\n~~~python\nNAME = \"太阳\"\n~~~\n\n**6.注释**\n\n注释的主要目的是阐述代码要做什么，以及是如何做的。\n\n~~~python\n# 打印出Hello World\nprint(\"Hello World\")\n~~~\n\n### 小结\n\n本章我们学习了如何使用变量，创建了描述性的变量名，学习了字符串是什么，以及如何使用全大写、全小写和首字母大写的方式显示字符串和制表符、换行符。还学习了如何删除字符串中多余的字符和空格，以及字符串中插入变量的方法。还学习了整数和浮点数，还有学习了写注释的目的。\n\n\n\n## 第二章\t列表简介\n\n### 列表是什么\n\n列表(list)由一系列按**特定顺序**排列的元素组成，一般给列表命名以复数形式，比如：name就用names。\n在python中列表用“[ ]”表示，每个元素用逗号隔开。列表里面有两个东西要搞清楚，一个是索引，一个是元素的值。要访问列表时使用索引和元素值都可以，列表的索引是从0开始的，所以要访问的n个元素就使用n-1的索引值。\n\n~~~python\n# 列表\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\nprint(bicycles)\n['trek', 'cannondale', 'redline', 'specialized']\n# 利用索引值访问列表元素\nprint(bicycles[0])\nprint(bicycles[3])\ntrek\nspecialized\n# 访问列表的倒数第一个元素\nprint(bicycles[-1])\nspecialized\n# 使用列表里面的元素到其他场景\nmessage = f'我喜欢{bicycles[0]}品牌的摩托车。'\nprint(message)\n我喜欢trek品牌的摩托车。\n~~~\n\n### 修改、添加和删除列表元素\n\n大多数列表将是动态的，意味着列表创建后，随着程序的运行将修改、增加、或删除其中的元素。\n这中间增加有**append()**方法在列表末尾添加元素，**insert()**在列表的指定位置插入元素。\n删除有**del 列表元素**将删除列表元素并且无法在访问这个元素了。\n**pop()**默认删除列表最后一个元素，也可以指定删除列表中的其他元素，在括号里面填上该元素的索引值就可以了。\n这里说下，pop()删除的元素可以赋值给一个变量继续使用，不像del不能在赋值和访问了。\n**remove()**方法是删除一个指定的元素值，列表有多个同样的值的话这个方法只删除第一个，要想全部删除就要使用循环。\n值得一提的是这个方法和pop()一样删除了的元素可以赋值给一个变量继续使用。\n\n~~~python\n# 修改列表元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nmotorcycles[0] = 'da yang'\nprint(motorcycles)\n['da yang', 'yamaha', 'suzuki']\n\n# 添加列表元素\n## 在列表末尾添加元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nmotorcycles.append('da yang')\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki', 'da yang']\n## 在列表的指定位置插入元素\nmotorcycles.insert(0, 'li fan')\nprint(motorcycles)\n['li fan', 'honda', 'yamaha', 'suzuki', 'da yang']\n\n# 删除列表元素\n## del方法删除\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\ndel motorcycles[0]\nprint(motorcycles)\n['yamaha', 'suzuki']\n## pop方法删除\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\npoped_motorcycles = motorcycles.pop()\nprint(motorcycles)\n['honda', 'yamaha']\nprint(poped_motorcycles)\nsuzuki\n### pop方法删除指定位置的元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nlast_motorcycles = motorcycles.pop(0)\nprint(motorcycles)\n['yamaha', 'suzuki']\nprint(last_motorcycles)\nhonda\n## remove()根据值删除元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nmid_motorcycles = 'yamaha'\nmotorcycles.remove(mid_motorcycles)\nprint(motorcycles)\n['honda', 'suzuki']\nprint(f'{mid_motorcycles.title()}')\nYamaha\n~~~\n\n\n\n### 列表管理\n\n**1.sort()**方法可以对列表**永久排序**，该方法是将列表按字母顺序或数字从小到大的顺序进行排序。\n\n~~~python\ncars = ['d', 'f', 'c', 'b', 'a', 'e']\nprint(cars)\n['d', 'f', 'c', 'b', 'a', 'e']\ncars.sort()\nprint(cars)\n['a', 'b', 'c', 'd', 'e', 'f']\n# 反向排序\ncars.sort(reverse=True)\nprint(cars)\n['f', 'e', 'd', 'c', 'b', 'a']\n# 反转列表,这是一种快捷方法\ncars = cars[::-1]\nprint(cars)\n['a', 'b', 'c', 'd', 'e', 'f']\n~~~\n\n\n\n**2. sorted()**方法是对列表进行**临时排序**。\n\n~~~python\n# 临时反向排序\nprint(sorted(cars, reverse=True))\n['a', 'b', 'c', 'd', 'e', 'f']\nprint(cars)\n['f', 'e', 'd', 'c', 'b', 'a']\n~~~\n\n\n\n**3.reverse()**方法是**永久反转排列**列表里面的元素。\n\n~~~python\ncars.reverse()\nprint(cars)\n['a', 'b', 'c', 'd', 'e', 'f']\n~~~\n\n\n\n**4.len()**方法可以快速获取列表长度，其显示的是列表内有多少个元素。\n\n~~~python\nprint(len(cars))\n6\n~~~\n\n**5.enumerate()** 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，**同时列出数据和数据下标**，一般用在 for 循环当中。\n\n~~~python\n>>> seq = ['one', 'two', 'three']\n>>> for i, element in enumerate(seq):\n...     print i, element\n...\n0 one\n1 two\n2 three\n~~~\n\n\n\n### 小节\n\n本章学习了什么是列表，以及如何使用列表内的元素。学习了定义列表，增删改列表内元素，以及如何对列表进行永久排序和临时排序，还学习了反转列表顺序和反向排序。\n\n\n\n## 第三章 操作列表\n\n### 遍历整个列表\n\n使用**for**循环可以很轻松的访问整个列表，以及对列表进行操作。这里值得一提的是for循环里面的变量名，在遍历列表是尽可能用列表的单数名，比如列表名为cars，那么for循环的变量尽量写成car。\n\n~~~python\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(magician)\n\nalice\ndavid\ncarolina\n# 进行其他操作\nfor magician in magicians:\n    print(f'{magician.title()},你的表演很精彩！')\n    print(f'谢谢你，{magician.title()}')\nprint('感谢你们每一个人的表演')\nAlice,你的表演很精彩！\n谢谢你，Alice\nDavid,你的表演很精彩！\n谢谢你，David\nCarolina,你的表演很精彩！\n谢谢你，Carolina\n感谢你们每一个人的表演\n~~~\n\n### 创建数值列表\n\n**range()**函数可以生成一系列数，但它实际上不会打印最后一个数，这是编程语言中常见的**差一**行为结果，要想打印最后个数需要使用**+1或者是使用比最后一个数大1的数**\n\n~~~python\nfor i in range(1, 5):\n    print(i, end=' ')\n1 2 3 4\n# 打印最后一位\nfor i in range(1, 5+1):\n    print(i, end=' ')\n1 2 3 4 5\n\n~~~\n\n**list()**函数可以将range()的结果直接转换为列表，方法是将range()作为list()的参数，同时range（）还可以指定步长。\n\n~~~python\nnumber = list(range(1, 6))\nprint(number)\n[1, 2, 3, 4, 5]\n# 从2开始到11结束，指定步长为2\neven_number = list(range(2, 11, 2))\nprint(even_number)\n[2, 4, 6, 8, 10]\n# 用for循环创建数值列表\nsquares = []\nfor value in range(1, 11):\n    square = value**2\n    squares.append(square)\nprint(squares)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n~~~\n\n\n\n使用这几个函数可以对数值列表进行统计**列表作为其参数**，min（）列表里面最小值，max（）列表里面最大值，sum（）列表所有数求和。\n\n~~~python\n# 简单统计数值列表\nvalues = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min(values))\n0\nprint(max(values))\n9\nprint(sum(values))\n45\n~~~\n\n**列表推导式**是一种简化方法，这种方法首先指定一个列表名（变量名），然后等号右边用中括号开始，括号内的排列顺序是表达式------for循环，这种方法需要经常练习。比如创建上面数值列表可以写成：\n\n~~~python\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n# 1到50的奇数之和游戏\njishu_num = list(range(1, 50, 2))\nprint(sum(jishu_num))\n625\nprint(sum([jishu for jishu in range(1, 50, 2)]))\n625\n~~~\n\n### 使用列表的一部分\n\n**切片**，要使用列表的一部分，其实就是使用列表的索引。使用的方法是在调用列表时在列表名后面[0:1]，这代表列表的第一个和第二个值，就是在列表索引值0,1的值。这里面也要注意差一行为。在一个班级需要评出前三名或后三名或部分名单时，切片可以起到很好的作用。\n\n~~~python\n# 切片\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\n# 索引值1到3的元素因为差一行为，所以并不会打印索引值3的元素\nprint(players[1:3])\n['martina', 'michael']\n# 索引值0到3的元素\nprint(players[:3])\n['charles', 'martina', 'michael']\n# 索引值1到列表最后一个的元素\nprint(players[1:])\n['martina', 'michael', 'florence', 'eli']\n# 索引值0到列表最后一个的元素\nprint(players[:])\n['charles', 'martina', 'michael', 'florence', 'eli']\n# 索引值为列表最后3个的元素\nprint(players[-3:])\n['michael', 'florence', 'eli']\n# 遍历切片\nprint('下面是我们的前三名')\nfor player in players[:3]:\n    print(player.title())\n下面是我们的前三名\nCharles\nMartina\nMichael\n~~~\n\n**复制列表或列表切片**\n\n需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变，要复制列表时尽量使用切片复制。\n\n~~~python\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\n\nyuwen_win = players[:3]\nprint('语文前三名是：')\nprint(yuwen_win)\n语文前三名是：\n['charles', 'martina', 'michael']\n\nshuxue_win = players[-3:]\nprint('数学前三名是：')\nprint(shuxue_win)\n数学前三名是：\n['michael', 'florence', 'eli']\n\n# 需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变\nnew_players = players\nprint(new_players)\n['charles', 'martina', 'michael', 'florence', 'eli']\nplayers.append('AAABBB')\nprint(new_players)\n['charles', 'martina', 'michael', 'florence', 'eli', 'AAABBB']\n~~~\n\n### 元组\n\n不可以改变值的列表，称为元组（tuple），元组和列表很像，但是列表是用方括号，而元组是用圆括号。虽然不可以修改元组里面的值，但是可以通过重新赋值改变该变量。\n\n~~~python\ndimensions = (200, 50)\nprint(dimensions)\n(200, 50)\n# 遍历\ndimensions = (400, 50)\nfor i in dimensions:\n    print(i)\n400\n50\n~~~\n\n### 设置代码格式\n\n为什么要设置代码格式？\n\n代码被阅读的次数远大于编写的次数。在编写完以后的多次阅读中，良好的代码格式可以让阅读花的时间很短。\nPEP 8 是设置代码指南，它建议每级缩进4个空格。每个编辑器（IDE）都可以设置，通常（tab）使用是最多的。\n每行长度建议不超过79个字符，但这并不是不可逾越的红线，刚开始学的时候不必在意，不过养成这样的习惯后，会对以后和别人合作带来很多方便。\n空行建议：不同内容建议用一个空行隔开，不建议使用3、4或多个空行来区隔，主要是空行多了影响阅读。\n\n### 小结\n\n本章学习了如何高效的处理列表中的元素，如何使用for循环遍历列表，如何创建简单的数值列表以及对数值列表执行的一些操作。还学习了如何使用切片对列表进行操作和复制，最后还学习了元组，以及设置代码格式。\n\n## 第四章 if语句\n\n编程时经常需要检查一系列的条件，并根据此决定采取什么措施。if语句让你能够检查程序的当前状态，并采取相应的措施。每条if语句的核心都是一个值为True或False的表达式。相应的符号有：==、!=、<、>、<=、>=。关键字有：if、elif、else。在检查多个条件时会用到与、或、非：他们的关键词是：and（两个都为真）、or（一个为真）、not（条件为假）。\n\n**示例**\n\n~~~python\n# 示例\ncars = ['audi', 'bmw', 'subaru', 'toyota']\nfor car in cars:\n    if car == 'bmw':\n        print(car.upper())\n    else:\n        print(car.title())\nAudi\nBMW\nSubaru\nToyota\n~~~\n\n### 条件测试\n\n~~~python\n>>> car = 'bmw'\n# ==是相等运算符，目的是比较等式两边的值是否相等，相等就是True否则就是False\n>>> car == 'bmw'\nTrue\n>>> car == 'toyota'\nFalse\n# 检查是忽略大小写可以用到字符串的方法upper（）或title（）等等\n>>> car.upper() == 'BMW'\nTrue\n~~~\n\n**检查是否不等**，这里用的符号是 != 。\n\n~~~python\nrequested_topping = 'mushrooms'\nif requested_topping != 'anchovies':\n    print('Hold the anhovies!')\nHold the anhovies!\n~~~\n\n**数值比较**\n\n~~~python\n>>> age = 18\n>>> age == 19\nFalse\n>>> age == 18  \nTrue\n\nanswer = 17\nif answer != 42:\n    print('这个数值不是42，请再次更改变量值！')\n这个数值不是42，请再次更改变量值！\n~~~\n\n**检查多个条件**\n\n~~~python\n>>> age_0 = 21\n>>> age_1 = 18\n# and\n>>> age_0 >=21 and age_1 >=21\nFalse\n# or\n>>> age_0 >=21 or age_1 >=21  \nTrue\n\n~~~\n\n**检查某个特定的值是否在或不在列表中**\n\n~~~python\n>>> number = [1,2,3,4,5]\n>>> 5 in number\nTrue\n>>> 9 in number\nFalse\n\nnumber = [1, 2, 3, 4, 5]\nnumber_0 = 8\nif number_0 not in number:\n    print(f'{number_0}不在我们的数字列表里面。我们把他加进来吧！')\n8不在我们的数字列表里面。我们把他加进来吧！\n~~~\n\n\n\n### if 语句\n\n在了解了条件测试之后，就可以编写if 语句了，具体使用哪一种取决于测试的条件数量。\n\n**最简单的if 语句**\n\n~~~python\nage = 18\nif age >= 18:\n    print('你已经成年了。')\n你已经成年了。\n~~~\n\n**if-else语句**\n\n~~~Python\nage = 17\nif age >= 18:\n    print('你已经成年了。')\nelse:\n    print('你还是未成年。')\n你还是未成年。\n~~~\n\n**if-elif-else语句**\n\n~~~python\nage = 12\nif age < 4:\n    print('你可以免费观看电影。')\nelif age < 18:\n    print('你可以半价购买电影票。')\nelse:\n    print('你需要购买全票。')\n你可以半价购买电影票。\n# 有些情况下是可以省略else这个代码块的\nif age < 4:\n    print('你可以免费观看电影。')\nelif age < 18:\n    print('你可以半价购买电影票。')\nelif age >= 18:\n    print('你需要购买全票。')\n你可以半价购买电影票。\n~~~\n\n\n\n### 使用if 语句处理列表\n\n**检查列表里面是否有相应的元素**\n\n~~~python\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    if number == 3:\n        print('这个列表里3是中间数')\n    else:\n        print(f'这个列表里有{number}.')\n这个列表里有1.\n这个列表里有2.\n这个列表里3是中间数\n这个列表里有4.\n这个列表里有5.\n~~~\n\n**确定列表是不是空列表**，列表为空时都是返回False。\n\n~~~python\nnumbers = []\nif numbers:\n    for number in numbers:\n        print(f'adding {number}')\n    print('\\n所有数字添加了')\nelse:\n    print('好像这里面没有数字诶!')\n好像这里面没有数字诶!\n~~~\n\n**多个列表**\n\n~~~python\nnumbers_0 = [0, 1, 2, 3, 4, 5]\nnumbers_1 = [6, 7, 8, 9, 0]\nprint(numbers_0)\nprint(numbers_1)\nfor number in numbers_1:\n    if number in numbers_0:\n        print(f'这两个列表都有 {number}')\n    else:\n        print(f'第一个列表里面没有 {number} 这个数。')\n[0, 1, 2, 3, 4, 5]\n[6, 7, 8, 9, 0]\n第一个列表里面没有 6 这个数。\n第一个列表里面没有 7 这个数。\n第一个列表里面没有 8 这个数。\n第一个列表里面没有 9 这个数。\n这两个列表都有 0\n~~~\n\n### 小结\n\n本章学习了if语句以及相关的关键词和符号，也使用for循环遍历列表时对某些元素做特出处理。\n\n## 第五章 字典\n\n字典就是储存多个有两种相关信息的元素，比如姓名及其年龄，单词及其含义等，字典的信息量也不守限制。\n\n### 一个简单的字典\n\n~~~python\nalien = {'color': 'bule', 'points': 5}\nprint(alien['color'])\nprint(alien['points'])\nbule\n5\n~~~\n\n### 使用字典\n\n字典（dictionary）是一系列的**键值对**，每个键都对应一个值，字典用放在花括号{ }中的一系列键值对表示。\n\n**访问字典中的值**\n\n~~~python\nalien = {'color': 'bule', 'points': 5}\nprint(alien['color'])\nbule\n~~~\n\n**添加键值对**\n\n~~~python\nalien['x_position'] = 0\nalien['y_position'] = 25\nprint(alien）\n{'color': 'bule', 'points': 5, 'x_position': 0, 'y_position': 25}\n~~~\n\n**创建一个空字典**\n\n~~~python\nalien = {}\nalien['color'] = 'blue'\nalien['x_position'] = 0\nalien['y_position'] = 25\nprint(alien)\n{'color': 'blue', 'x_position': 0, 'y_position': 25}\n~~~\n\n**修改字典中的值**\n\n~~~python\nalien['x_position'] = 10\nprint(alien)\n{'color': 'blue', 'x_position': 10, 'y_position': 25}\n~~~\n\n**删除键值对**\n\n~~~python\nalien['speed'] = 'medium'\nprint(alien)\n{'color': 'blue', 'x_position': 10, 'y_position': 25, 'speed': 'medium'}\n# 删除键值对\ndel alien['speed']\nprint(alien)\n{'color': 'blue', 'x_position': 10, 'y_position': 25}\n~~~\n\n**由类似对象组成字典**\n\n~~~python\nfavonlie_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'swift',\n    'phil': 'python',\n}\nfor key, value in favonlie_languages.items():\n    print(f'{key.title()}喜欢使用{value.title()}语言编程！')\nJen喜欢使用Python语言编程！\nSarah喜欢使用C语言编程！\nEdward喜欢使用Swift语言编程！\nPhil喜欢使用Python语言编程！\n~~~\n\n**使用get()方法来访问值**\n\n如果你访问的值不存在字典里，你直接访问的话会出现错误，这时候可以使用get()方法来访问，这个方法可以让你在访问不存在的值的时候返回一个默认值。\n\n~~~python\nalien = {'color': 'bule', 'points': 5}\nprint(alien['speed'])\n\n发生异常: KeyError\n'speed'\n  File \"favonlie_languages.py\", line 2, in <module>\n    print(alien['speed'])\n          ~~~~~^^^^^^^^^\nKeyError: 'speed'\n\nprint(alien.get('speed', '不好意思，没有这个索引且没有对应的值'))\n不好意思，没有这个索引且没有对应的值\nalien['speed'] = 'medium'\nprint(alien.get('speed', '不好意思，没有这个索引且没有对应的值'))\nmedium\n~~~\n\n### 遍历字典\n\n遍历字典中的内容有3个基本的关键词，items()字典中的键和值，有这个方法需要两个临时变量用于遍历字典、keys()遍历字典中的键、values()遍历字典中的值。\n\n**遍历所有键值对**\n\n~~~python\nlike_number = {\n    'a': '8',\n    'b': '7',\n    'c': '5',\n    'd': '9',\n}\nfor key, value in like_number.items():\n    print(f'{key.title()} like number is {value}')\nA like number is 8\nB like number is 7\nC like number is 5\nD like number is 9\n~~~\n\n**遍历所有键**\n\n~~~python\nfavonlie_languages = {\n    'jen': 'python',\n    'sarah': 'c#',\n    'edward': 'swift',\n    'phil': 'python',\n}\n# 遍历所有键\nfor name in favonlie_languages.keys():\n    print(name.title())\nJen\nSarah\nEdward\nPhil\n\n# 按特定顺序遍历字典中的所有键\nfor name in sorted(favonlie_languages.keys()):\n    print(f'Thank you {name.title()},you are welcome!')\nThank you Edward,you are welcome!\nThank you Jen,you are welcome!\nThank you Phil,you are welcome!\nThank you Sarah,you are welcome!\n\n# 遍历字典中的所有值\nprint('编程语言')\nfor language in favonlie_languages.values():\n    print(language)\n编程语言\npython\nc#\nswift\npython\n~~~\n\n**set()**方法用于提取列表或集合中的不同元素，如果有相同的只会提取一个。\n\n~~~python\nprint('编程语言')\nfor language in set(favonlie_languages.values()):\n    print(language.title())\n编程语言\nswift\nc#\npython\n\n# 集合表现形式，一般用花括号，但里面是没有键值对的，里面的元素表现跟列表一样\n>>> number = {1,2,3,4,5,6,7,8,9,1,2,3}\n>>> number\n{1, 2, 3, 4, 5, 6, 7, 8, 9}\n~~~\n\n### 嵌套\n\n有些时候需要将多个字典储存在列表中或将列表作为值储存在字典中，这中行为就成为嵌套。\n\n**字典列表**就是在列表中储存字典可以应用于用户信息等。\n\n~~~python\nalien_0 = {'color': 'red', 'points': 5}\nalien_1 = {'color': 'green', 'points': 10}\nalien_2 = {'color': 'blue', 'points': 15}\naliens = [alien_0, alien_1, alien_2]\nfor alien in aliens:\n    print(alien)\n{'color': 'red', 'points': 5}\n{'color': 'green', 'points': 10}\n{'color': 'blue', 'points': 15}\n\n# 创建一个用于储存外星人的空列表\naliens = []\n# 用for循环创建30个绿色的外星人\nfor alien_number in range(30):\n    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}\n    aliens.append(new_alien)\n# 打印前5个外星人\nfor alien in aliens[:5]:\n    print(alien)\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n# 显示创建了多少个外星人\nprint(f'创建了多少个外星人:{len(aliens)}')\n创建了多少个外星人:30\n# 修改前三个\nfor alien in aliens[:3]:\n    if alien['color'] == 'green':\n        alien['color'] = 'yellow'\n        alien['points'] = 10\n        alien['speed'] = 'medium'\nfor alien in aliens[:5]:\n    print(alien)\n{'color': 'yellow', 'points': 10, 'speed': 'medium'}\n{'color': 'yellow', 'points': 10, 'speed': 'medium'}\n{'color': 'yellow', 'points': 10, 'speed': 'medium'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n~~~\n\n**在字典中储存列表**可以用于食品配方等\n\n~~~python\npizza = {\n    'crust': 'think',\n    'toppings': ['mushrooms', 'extra cheese']\n}\nprint(\n    f'You ordered a {pizza[\"crust\"]}-crust pizza '\"with the following toppings:\")\nfor topping in pizza['toppings']:\n    print(f'\\t{topping}')\nYou ordered a think-crust pizza with the following toppings:\n\tmushrooms\n\textra cheese\n~~~\n\n**在字典中储存字典**\n\n~~~python\nuser = {\n    'aeinstein': {\n        'first': 'albert',\n        'last': 'einstein',\n        'location': 'princeton',\n    },\n    'mcurie': {\n        'first': 'marie',\n        'last': 'curie',\n        'location': 'paris',\n    }\n}\nfor username, user_info in user.items():\n    print(f'\\nUsername: {username}')\n    full_name = f\"{user_info['first']} {user_info['last']}\"\n    location = user_info['location']\n\n    print(f'\\tFullname: {full_name.title()}')\n    print(f'\\tLocation: {location.title()}')\n\nUsername: aeinstein\n\tFullname: Albert Einstein\n\tLocation: Princeton\n\nUsername: mcurie\n\tFullname: Marie Curie\n\tLocation: Paris\n~~~\n\n### 小结\n\n本章我们学习了如何定义字典，以及如何使用储存在字典中的信息。然后学习了如何访问和修改字典中的元素，以及如何遍历字典中的信息。还学习了如何遍历字典中的所有键值对、所有的键和所有的值。学习了如何在列表中嵌套字典，在字典中如何嵌套列表，在字典中嵌套字典。\n\n## 第六章 用户输入和while循环\n\n### input()函数的工作原理\n\ninput()函数让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，以便使用。input()函数接受一个参数，即要向用户显示的提示(prompt)。用户输入的内容Python默认为字符串，要想用户输入其他内容需要再input()前面制定类型，比如：要想用户输入的是数值 int(input(\"How old are you\"))。\n**注意：**有些文本编辑器不能运行提示用户输入的程序，要运行他们需要从终端运行。在cmd终端里面直接运行python文件就可以了，**格式是**：路径>py 文件名和文件后缀。有些python版本需要使用：路径>python 文件名和文件后缀。\n\n~~~python\n>>> message = input(\"tell me something, and I will repeat it back to you:\")\ntell me something, and I will repeat it back to you: hello world\n>>> print(message)\n hello world\n>>>   \n~~~\n\n**使用int()来获取数值输入**\n\n~~~python\n# 控制用户输入的内容为数字\n>>> age = int(input(\"How old are you: \"))\nHow old are you: 36\n>>> age>20\nTrue\n~~~\n\n**求模运算**是个很有用的工具，它将两个数相除并返回余数。\n\n~~~python\nnumber = int(input(\"请输入一个数，我可以判断是奇数还是偶数：\"))\nif number % 2 == 0:\n    print(\"这个数是偶数！\")\nelse:\n    print(\"这个数是奇数！\")\n请输入一个数，我可以判断是奇数还是偶数：50\n这个数是偶数！\n~~~\n\n### while 循环简介\n\nfor 循环用于针对集合中的每个元素执行一个代码块，而 while 循环这不断地运行，只到指定的条件不再满足为止。\n\n~~~python\nnumber = 1\nwhile number <= 5:\n    print(number, end=\" \")\n    number += 1\n1 2 3 4 5\n~~~\n\n**让用户选择何时退出**\n\n~~~python\n# 只要用户输入的不是‘quit’和‘exit’该循环就继续运行。\nprompt = \"我们来玩个游戏，看看你知不知道怎么退出这个游戏: \"\nmessage = \"\"\nwhile message != \"quit\" or message != \"exit\":\n    # 这里添加了一个lower方法目的是让用户输入的内容都变成小写和下面的if进行判断。\n    message = input(prompt).lower()\n    if message == \"quit\" or message == \"exit\":\n        print(\"恭喜你！\")\n        break\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: 2\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: 3\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: ExiT\n恭喜你！\n\n# 使用标志让用户选择何时退出\nprompt = \"我们来玩个游戏，看看你知不知道怎么退出这个游戏: \"\nactive = True\nwhile active:\n    message = input(prompt).lower()\n    if message == \"quit\" or message == \"exit\":\n        print(\"恭喜你！\")\n        active = False\n    else:\n        print(\"再想想退出的英文是什么？\")\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: qwe\n再想想退出的英文是什么？\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: QUIT\n恭喜你！\n~~~\n\n**break 退出循环**，不管条件满不满足，想立即退出 while 循环，不再运行后面的代码，可以使用 break 语句。上面的例子已经使用过一次了。我们再使用一个特别的例子。break 还可以用来退出遍历列表或字典的 for 循环。\n\n~~~python\nwhile True:\n    message = input(\"请你说说你喜欢哪个城市: \").lower()\n    if message == \"quit\" or message == \"exit\":\n        print(\"再见！\")\n        break\n    else:\n        print(f\"除了{message.title()}还有其他的城市么？\")\n请你说说你喜欢哪个城市: shang hai\n除了Shang Hai 还有其他的城市么？\n请你说说你喜欢哪个城市: QUIT\n再见！\n~~~\n\n**在循环中使用 continue** \n\n要返回循环的开头，并根据条件测试的结果决定是否继续执行循环，可以使用 continue 语句，他不像 break 那样不执行余下的代码并退出整个循环。\n\n~~~python\nnumber = 0\nwhile number < 10:\n    number += 1\n    if number % 2 == 0:\n        continue\n    print(number, end=\" \")\n1 3 5 7 9 \n~~~\n\n**避免无线循环**\n\nwhile 循环一定要设置退出条件，如果没有退出条件，while 循环就会无止境的一直执行代码。\n\n~~~python\nnumber = 0\nwhile number < 5:\n    print(number)\n~~~\n\n### 使用 while 循环处理列表和字典\n\nfor 循环是一种遍历列表的有效方式，但不应该在 for 循环中修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时修改它，可使用 while 循环。通过将 while 循环与列表和字典结合起来使用，可收集、存储并组织大量的输入，供以后查看和使用。**注意**，这里有个有意思的事情，就是列表里面是空的时候它的布尔值是 False ，列表里面有元素的时候，它的布尔值是 True 。\n\n**在列表之间移动元素**\n\n~~~python\n# 首先创建一个待验证的用户列表\n# 和一个用户储存已验证用户的空列表\nunconfirmed_users = ['admin', 'zqten', 'candace']\nconfirmed_users = []\n# 验证每个用户，直到没有未验证的用户为止\n# 将每个经过验证的用户添加到已验证用户列表中\nwhile unconfirmed_users:\n    current_user = unconfirmed_users.pop()\n    print(f'Verifying user: {current_user.title()}')\n    confirmed_users.append(current_user)\n# 显示所有的已验证的用户\nprint('\\nThe following users have been confirmed:')\nfor confirmed_user in confirmed_users:\n    print(confirmed_user.title())\n    \nVerifying user: Candace\nVerifying user: Zqten\nVerifying user: Admin\n\nThe following users have been confirmed:\nCandace\nZqten\nAdmin\n~~~\n\n**删除为特定值的所有列表元素**\n\n~~~python\n# 删除为特定值的所有列表元素\npets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nprint(pets)\nwhile 'cat' in pets:\n    pets.remove('cat')\nprint(pets)\n['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\n['dog', 'dog', 'goldfish', 'rabbit']\n~~~\n\n**使用用户输入填充字典**\n\n可以使用 while 循环提示用户输入任意多的信息。\n\n~~~python\n# 使用用户输入填充字典\nresponses = {}\n# 设置一个标志，指出调查是否继续\npolling_active = True\nprint('这是调查每个人的爱好，请根据提示输入。')\nwhile polling_active:\n    # 提示输入被调查者的名字和回答\n    name = input(\"请输入被调查者的名字：\")\n    response = input(\"请输入被调查者的回答：\")\n    # 将输入的数据储存在字典中\n    responses[name] = response\n    # 询问用户是否继续调查\n    repeat = input(\"是否有人继续参与调查？（yes/no）\")\n    if repeat == 'no':\n        polling_active = False\n    # 下面这段代码的目的是让用户输入yes和no，输入其他的会提示错误，如果是只判断退出循环条件的话，可以省略下面。\n    elif repeat == 'yes':\n        continue\n    else:\n        while repeat != 'yes' or repeat != 'no':\n            if repeat == 'no':\n                polling_active = False\n                break\n            elif repeat == 'yes':\n                break\n            else:\n                print(\"输入错误，请重新输入\")\n                repeat = input(\"是否有人继续参与调查？（yes/no）\")\n        if repeat == 'no':\n            polling_active = False\n\n# 输出调查结果\nprint('\\n---调查结果---')\nfor name, response in responses.items():\n    print(f\"{name}的爱好是: {response}。\")\n\n这是调查每个人的爱好，请根据提示输入。\n请输入被调查者的名字：刘翔\n请输入被调查者的回答：跨栏\n是否有人继续参与调查？（yes/no）不知道\n输入错误，请重新输入\n是否有人继续参与调查？（yes/no）yes\n请输入被调查者的名字：姚明\n请输入被调查者的回答：篮球\n是否有人继续参与调查？（yes/no）不知道\n输入错误，请重新输入\n是否有人继续参与调查？（yes/no）no\n\n---调查结果---\n刘翔的爱好是: 跨栏。\n姚明的爱好是: 篮球。\n~~~\n\n### 小结\n\n本章学习了如何在程序中使用 input() 来让用户提供信息，如何处理文本和数的输入，以及如何使用 while 循环让程序按用户的要求不断地运行。然后见识了多种控制 while 循环流程的方式：设置活动标志，使用 break 语句，以及使用 continue 语句。还学习了如何使用 while 循环在列表之间移动元素，以及如何从列表中删除所有包含特定值的元素。最后，学习了如何结合使用 while 循环和字典。\n\n## 第七章 函数\n\n函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用（call）该函数。当需要再程序中多次执行同一项任务时，无须反复编写完成该任务的代码，只需要调用执行该任务的函数，让Python运行其中的代码即可。\n\n### 定义函数\n\n定义函数的关键字是 def 。后面是函数名和括号，没有参数时可以是空括号，然后和 for 、while 一样也需要冒号，表示定义完成，换行后缩进表示要执行的代码块。\n\n~~~python\ndef greet_user():\n    '''显示简单的问候语'''\n    print(\"Hello World!\")\n\ngreet_user()\nHello World!\n~~~\n\n**向函数传递信息**\n\n~~~python\ndef greet_user(uesrname):\n    '''显示简单的问候语'''\n    print(f\"Hello,{uesrname}!\")\n\n\ngreet_user('zqten')\nHello,zqten!\n~~~\n\n**实参和形参**\n\n在上面的例子中，uesrname是一个形参，即函数完成工作所需要的信息。\n而 'zqten' 则是实参，即在调用函数时传递给函数的信息。\n\n### 传递实参\n\n传递实参有两种方式，一种是按照位置顺序传递，另一种是按照关键字传递。按照关键字传递实参不用考虑顺序，但要记得关键字。\n\n~~~python\ndef describe_pet(animal_type, pet_name: str):\n    '''显示宠物信息'''\n    print(f'\\nI have a {animal_type}.')\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n    \n# 按位置顺序传递实参\ndescribe_pet('cat', 'duoduo')\nI have a cat.\nMy cat's name is Duoduo.\n\n# 按关键字传递实参\ndescribe_pet(pet_name='nai cha', animal_type='dog')\nI have a dog.\nMy dog's name is Nai Cha.\n~~~\n\n**默认值**\n\n有些时候你想改变某个参数，但有些时候你想让这个参数先有一个默认值，后面调用的时候看情况是否修改。这种情况可以为参数设置一个默认值。如果没有设置默认值，在调用的时候也没有传递参数 Python 就会报错。\n\n~~~python\ndef describe_pet(animal_type='cat', pet_name='duo duo'):\n    '''显示宠物信息'''\n    print(f'\\nI have a {animal_type}.')\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n# 有默认值的情况下，可以不用传递参数，也可以看需要传递\ndescribe_pet()\nI have a cat.\nMy cat's name is Duo Duo.\n\ndescribe_pet('dog', 'nai cha')\nI have a dog.\nMy dog's name is Nai Cha.\n~~~\n\n### 返回值\n\n函数并非总是直接显示输出，它还可以处理一些数据，并返回一个或一组值，函数返回的值称为返回值。在函数中 **return** 语句将值返回到调用函数的那行代码，返回值能让你将程序的大部分繁重工作移到函数中，从而简化程序。\n\n**返回简单的值**\n\n~~~python\ndef get_formatted_name(first_name, last_name):\n    '''返回标准格式的姓名'''\n    full_name = f'{first_name} {last_name}'\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\nJimi Hendrix \n~~~\n\n**让实参变成可选**\n\n就是先设置参数的默认值，但这个默认值是一个空值。不需要的时候就不会出现，需要的时候只需要在调用的时候传递一个参数就可以。\n\n~~~python\ndef get_formatted_name(first_name, last_name, middle_name=''):\n    '''返回标准格式的姓名'''\n    full_name = f'{first_name} {last_name} {middle_name}'\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\nJimi Hendrix \n\nmusician = get_formatted_name('jimi', 'hendrix', 'YYY')\nprint(musician)\nJimi Hendrix Yyy\n~~~\n\n**返回字典**\n\n这里有个小小的细节，就是 age=None 是一个布尔值并且是 False 。意思就是这个参数并没有值返回 False 。如果为这个参数传递了一个值，它就返回 True 。\n\n~~~python\ndef build_person(first_name, last_name, age=None):\n    '''返回一个字典，其中包含一个人的信息'''\n    person = {'first': first_name, 'last': last_name}\n    if age:\n        person['age'] = age\n    return person\n\nmusician = build_person('jimi', 'hendeix')\nprint(musician)\n{'first': 'jimi', 'last': 'hendeix'}\n\nmusician = build_person('jimi', 'hendeix', age=36)\nprint(musician)\n{'first': 'jimi', 'last': 'hendeix', 'age': 36}\n~~~\n\n**结合使用函数和 while 循环**\n\n~~~python\ndef get_formatted_name(first_name, last_name, middle_name=''):\n    '''返回标准格式的姓名'''\n    full_name = f'{first_name} {last_name} {middle_name}'\n    return full_name.title()\n\nwhile True:\n    print('\\nPleasr tell me your name:')\n    print(\"(enter 'q' at any time to quit.)\")\n\n    f_name = input(\"你姓什么：\")\n    if f_name == 'q':\n        break\n    l_name = input(\"你的名字是什么：\")\n    if l_name == 'q':\n        break\n\n    full_name = get_formatted_name(f_name, l_name)\n    print(f\"你好, {full_name}\")\n\nPleasr tell me your name:\n(enter 'q' at any time to quit.)\n你姓什么：yao\n你的名字是什么：ming\n你好, Yao Ming \n\nPleasr tell me your name:\n(enter 'q' at any time to quit.)\n你姓什么：q\n~~~\n\n### 传递列表\n\n将列表传递给函数后，函数就能直接访问其内容，进行修改等等操作。\n\n~~~python\ndef greet_users(names):\n    '''向列表中的每个用户发出简单的问候'''\n    for name in names:\n        print('Hello, %s!' % name)\n\nusername = ['zqten', 'zhengjizhong', 'zhengkainan', 'zhouhuarong']\ngreet_users(username)\n\nHello, zqten!\nHello, zhengjizhong!\nHello, zhengkainan!\nHello, zhouhuarong!\n~~~\n\n**在函数中修改列表**这个程序演示了一个概念：每个函数都应只负责一项具体工作。这有助于将复杂的任务分解成一系列简单的步骤。\n\n~~~python\nunprinted_designs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncompleted_models = []\n\ndef print_models(unprinted_designs, completed_models):\n    '''\n    模拟打印每个数字，直到没有未打印的数字为止\n    打印每个数字后，都将其移到列表completed_models中\n    '''\n    while unprinted_designs:\n        current_design = unprinted_designs.pop(0)\n        print('Printing model: %s' % current_design)\n        completed_models.append(current_design)\n\ndef show_completed_models(completed_models):\n    '''显示打印好的所有数字'''\n    print('\\nThe following models have been printed:')\n    for completed_model in completed_models:\n        print(completed_model, end=' ')\n\nprint_models(unprinted_designs, completed_models)\nshow_completed_models(completed_models)\nprint(unprinted_designs)\n\nPrinting model: 1\nPrinting model: 2\nPrinting model: 3\nPrinting model: 4\nPrinting model: 5\nPrinting model: 6\nPrinting model: 7\nPrinting model: 8\nPrinting model: 9\nPrinting model: 10\n\nThe following models have been printed:\n1 2 3 4 5 6 7 8 9 10 []\n# 如果不希望传递后列表为空，可以使用副本传递参数 [:] 切片传递\nprint_models(unprinted_designs[:], completed_models)\nshow_completed_models(completed_models)\nprint(unprinted_designs)\n\nPrinting model: 1\nPrinting model: 2\nPrinting model: 3\nPrinting model: 4\nPrinting model: 5\nPrinting model: 6\nPrinting model: 7\nPrinting model: 8\nPrinting model: 9\nPrinting model: 10\n\nThe following models have been printed:\n1 2 3 4 5 6 7 8 9 10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n~~~\n\n### 传递任意数量的参数\n\n“ * ” 带形参名中的星号让Python创建一个名为形参名的元组，该元组包含函数收到的所有值。\n\n~~~python\ndef make_pizza(*toppings):\n    '''比如概述要制作的披萨'''\n    print('\\nMaking a pizza with the following toppings:')\n    for topping in toppings:\n        print(topping)\n\nmake_pizza('aaa')\nmake_pizza('mushrooms', 'extra cheese')\n\nMaking a pizza with the following toppings:\naaa\n\nMaking a pizza with the following toppings:\nmushrooms\nextra cheese\n~~~\n\n**结合使用位置实参和任意数量的实参**\n\n如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置和关键字实参，再将余下的实参都收集到最后一个形参中。\n\n~~~python\ndef make_pizza(size, *toppings):\n    '''比如概述要制作的披萨'''\n    print(f'\\nMaking a {size}-inch pizza with the following toppings:')\n    for topping in toppings:\n        print(f'- {topping}')\n\nmake_pizza(16, 'aaa')\nmake_pizza(19, 'mushrooms', 'extra cheese')\n\nMaking a 16-inch pizza with the following toppings:\n- aaa\n\nMaking a 19-inch pizza with the following toppings:\n- mushrooms\n- extra cheese\n~~~\n\n**使用任意数量的关键字实参**\n\n“ ** ” 带形参名中的两个星号让Python创建一个名为形参名的字典，该字典包含函数收到的所有的键值对。\n\n~~~python\ndef build_profile(first, last, **user_info):\n    '''创建一个字典，其中包含我们知道的有关用户的一切'''\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile(\n    'zheng', 'ji zhong', age=11, height='147cm', weight='48kg')\nprint(user_profile)\n{'age': 11, 'height': '147cm', 'weight': '48kg', 'first_name': 'zheng', 'last_name': 'ji zhong'}\n~~~\n\n### 将函数存储在模块中\n\n将函数存储在称为模块的独立文件中，再将模块导入（import）主程序。可以让代码看起来容易理解。\n\n**导入整个模块**\n\n要让函数是可导入的，得先创建模块。模块是扩展名为 .py 的文件。\n\n~~~python\nimport pizza\npizza.make_pizza(12, 'zhu rou')\npizza.make_pizza(17, 'niu rou', 'bai cai')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 17-inch pizza with the following toppings:\n- niu rou\n- bai cai\n~~~\n\n**导入特定的函数**\n\n只想导入模块中的特定函数。\n\n~~~python\nfrom pizza import make_pizza\n\nmake_pizza(12, 'zhu rou')\nmake_pizza(16,'niu rou', 'bai cai')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n~~~\n\n**使用 as 给函数指定别名**\n\n如果要导入的函数的名称太长或者可能与程序中的其他名称有冲突，可指定简短而独一无二的别名。这个方法也可以应用到给模块指定别名。\n\n~~~python\nfrom pizza import make_pizza as mp\n\nmp(12, 'zhu rou')\nmp(16, 'niu rou', 'bai cai', 'fanqie')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n- fanqie\n\n# 也可以给模块指定别名\nimport pizza as p\n\np.make_pizza(12, 'zhu rou')\np.make_pizza(16, 'niu rou', 'bai cai', 'fanqie')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n- fanqie\n\n~~~\n\n**导入模块中的所有函数**\n\n这种方法一般慎用，因为如果模块中有函数的名称与当前项目中的名称相同，可能导致意想不到的结果。**最好的做法是要么只导入需要使用的函数，要么导入整个模块并使用点号调用**。\n\n~~~python\nfrom pizza import *\n\nmake_pizza(12, 'zhu rou')\nmake_pizza(16, 'niu rou', 'bai cai', 'fanqie')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n- fanqie\n\n# 导入其他文件夹的模块\nfrom 文件夹名称 import 模块\nfrom 文件夹名称.模块 import 函数\n~~~\n\n### 函数编写指南\n\n在编写函数时需要牢记几个细节。\n\n* 应给函数指定描述性的名称，且只使用小写字母和下划线。\n* 每个函数都应包含简要阐述其功能的注释。意思就是每个函数都需要编写使用说明的注释。\n* 形参指定默认值时，等号两边不要有空格。\n* 如果程序或模块包含多个函数，可以使用两个空行将函数隔开。\n* 所有的 import 语句都应该放在文件开头。唯一的例外是，你要在文件开头编写整个程序的注释。\n* 导入自己边学的模块时，尽量把模块和程序放在一个文件夹。\n\n### 小结\n\n本章学习了如何编写函数，以及如何传递实参，让函数能够访问完成工作所需的信息。然后学习了如何使用位置实参和关键字实参，以及如何接受任意数量的实参，学习了显示输出的函数和返回值的函数，知道了如何将函数与列表、字典、if、语句和 while 循环结合起来使用，以及如何将函数存储在称为模块的独立文件中，让程序文件更简单、更易于理解。最后，了解了函数编写指南，遵循这些指南可让程序始终保持良好的结构。\n程序员的目标之一是编写简单的代码来完成任务，而函数有助于实现这样的目标。\n\n## 第八章 类\n\n面向对象编程（object-oriented-programming, OOP）是最有效的软件编写方法之一。在基于类创建对象时，每个对象都自动具备类定义的通用行为。然后，你可根据需要赋予每个对象独特的个性。根据类来创建对象称为**实例化**，这让你能够使用类的实例。\n\n面相对象变成有助于你像程序员那样看世界，并且真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维能力，让你能够通过编写程序来解决遇到的几乎任何问题。\n\n### 创建和使用类\n\n**创建Dog类**\n\n~~~python\n# 创建Dog类\nclass Dog:\n    '''模拟小狗的简单尝试'''\n\n    def __init__(self, name, age):\n        '''初始化属性name和age'''\n        self.name = name\n        self.age = age\n\n    def sit(self):\n        '''模拟小狗坐下'''\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        '''模拟小狗打滚'''\n        print(f\"{self.name} rolled over.\")\n~~~\n\n“__init__()”方法是类的初始化方法，类中的函数称为方法。这个方法的开头和结尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。\n这个方法定义成包含三个形参：self 、name、age。这个方法中self 是必不可少，而且必须位于其他形参的前面。self就是类的自身，当我们实例化这个类时，我们传递的参数会通过 self 传递给类自身。self.name = name 里面 self 前缀的变量可供类中的所有方法使用。\n\n**根据类创建实例**\n\n可以将类视为有关如何创建实例的说明。:yum:\n\n~~~python\n# 创建实例\nmy_dog = Dog('duoduo', 7)\n# my_dog.name 就是访问实例的属性\nprint(f\"My dog's name is {my_dog.name}\")\nprint(f\"My dog's age is {my_dog.age}\")\n\nMy dog's name is duoduo\nMy dog's age is 7\n# 调用方法\nmy_dog.sit()\nmy_dog.roll_over()\n\nduoduo is now sitting.\nduoduo rolled over.\n# 创建多个实例\nyour_dog = Dog('Lucy', 4)\nprint(f\"Your dog's name is {your_dog.name}\")\nprint(f\"Your dog's age is {your_dog.age}\")\nyour_dog.sit()\n\nYour dog's name is Lucy\nYour dog's age is 4\nLucy is now sitting.\n~~~\n\n### 使用类和实例\n\n**Car 类**\n\n~~~python\n# Car类\nclass Car:\n    '''模拟汽车的简单尝试'''\n\n    def __init__(self, make, model, year):\n        '''初始化描述汽车属性'''\n        self.make = make\n        self.model = model\n        self.year = year\n# 给属性默认值\n        self.odometer = 0\n        self.oli = 240\n\n    def get_descriptive_name(self):\n        '''返回格式规范的描述性信息'''\n        long_name = f\"{self.year}年 {self.make}生产{self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        '''返回汽车里程数'''\n        print(f\"这两车已经行驶了{self.odometer}公里了。\")\n        return self.odometer\n\n    def update_odometer(self, mileage):\n        '''设置汽车里程数'''\n        if mileage >= self.odometer:\n            self.odometer = mileage\n            print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        else:\n            print(\"你不能往回设置公里数\")\n\n    def increment_odometer(self, mileage):\n        '''增加汽车里程数'''\n        self.odometer += mileage\n        print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        \n    def car_oli_v(self, oli):\n        '''描述车辆油箱的容积'''\n        self.oli = oli\n        print(f'这辆车的油箱容积是{self.oli}L.')\n\nmy_new_car = Car('奥迪汽车公司', '奥迪A4', '2003')\nprint(my_new_car.get_descriptive_name())\n# 修改属性值\nmy_new_car.odometer = 1\nmy_new_car.read_odometer()\n# 通过方法修改属性值\nmy_new_car.update_odometer(34)\nmy_new_car.increment_odometer(12)\nmy_new_car.update_odometer(12)\n\n2003年奥迪汽车公司生产奥迪A4\n这两车已经行驶了1公里了。\n这两车已经行驶了34公里了。\n这辆车已经行驶了46公里了。\n你不能往回设置公里数\n~~~\n\n### 继承\n\n编写类的时候并非总是要从头开始，如果要编写的类是一个已经存在的类的特殊版本，可以使用**继承**。当一个类继承另一个类时，将自动获得后者的素有属性和方法。原有类称为**父类**，而新的类称为**子类**。子类不仅继承了父类的所有属性和方法，还可以定义自己的属性和方法。\n\n**子类初始化方法**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\n\n2024年Nissan生产Leaf\n~~~\n\n**给子类定义属性和方法**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery_size = 40\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        print(f'This car has a {self.battery_size}-KWh battery.')\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\nmy_leaf.describe_battery()\n\n2024年Nissan生产Leaf\nThis car has a 40-KWh battery.\n~~~\n\n**重写父类中的方法**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery_size = 40\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        print(f'This car has a {self.battery_size}-KWh battery.')\n\n    def car_oli_v(self):\n        '''电动汽车没有油箱'''\n        print(\"电动汽车没有油箱\")\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\nmy_leaf.describe_battery()\nmy_leaf.car_oli_v()\n\n2024年Nissan生产Leaf\nThis car has a 40-KWh battery.\n电动汽车没有油箱\n~~~\n\n**将实例用作属性**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery = Battery()\n\n    def car_oli_v(self):\n        '''电动汽车没有油箱'''\n        print(\"电动汽车没有油箱\")\n\n\nclass Battery:\n    def __init__(self, battery_size=40):\n        '''初始化电池的属性'''\n        self.battery_size = battery_size\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        print(f'This car has a {self.battery_size}-KWh battery.')\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\nmy_leaf.battery.describe_battery()\n\n2024年Nissan生产Leaf\nThis car has a 40-KWh battery.\n~~~\n\n### 导入类\n\n主要目的是让文件整洁，我们可以将类存储在模块中，然后在主程序导入所需的模块。我们需要整理一下代码，把上面我们学的三个类都复制到一个文件，命名为 car.py 。\n\n~~~python\n# Car类\nclass Car:\n    '''模拟汽车的简单尝试'''\n\n    def __init__(self, make, model, year):\n        '''初始化描述汽车属性'''\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer = 0\n\n    def get_descriptive_name(self):\n        '''返回格式规范的描述性信息'''\n        long_name = f\"{self.year}年{self.make}生产{self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        '''返回汽车里程数'''\n        print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        return self.odometer\n\n    def update_odometer(self, mileage):\n        '''设置汽车里程数'''\n        if mileage >= self.odometer:\n            self.odometer = mileage\n            print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        else:\n            print(\"你不能往回设置公里数\")\n\n    def increment_odometer(self, mileage):\n        '''增加汽车里程数'''\n        self.odometer += mileage\n        print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        \n# 电池模组\nclass Battery:\n    def __init__(self, battery_size=40, car_model_isoli=False):\n        '''初始化电池的属性'''\n        self.battery_size = battery_size\n        '''默认是电动汽车,如果是汽油车可以设置会Ture.'''\n        self.car_model_isoli = car_model_isoli\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        if self.car_model_isoli is True:\n            print('这是一辆油车，没有电池.')\n        else:\n            print(f'This car has a {self.battery_size}-KWh battery.')\n\n    def update_battery(self):\n        '''升级电池容量'''\n        if self.battery_size != 65:\n            self.battery_size = 65\n\n    def get_range(self):\n        '''打印一条消息，指出汽车的续航里程'''\n        if self.battery_size == 40:\n            range = 150\n        elif self.battery_size == 65:\n            range = 225\n        print(f'这辆车的续航里程为{range}公里.')\n\n# 电动车\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery = Battery()\n~~~\n\n**导入单个类**\n\n~~~python\nfrom car import Car\n~~~\n\n**导入多个类**\n\n~~~python\nfrom car import Car, ElectricCar\n~~~\n\n**导入整个模块**\n\n这里我把上面的代码分成了两个文件，Car类单独储存成 car.py ，电池模组和电动车储存为 electric_car.py 。\n\n~~~python\nimport car\n# 用法就是用点引用该模块的类\nmy_car = car.Car(\"柳州五菱\", \"五菱之光\", 2008)\n\n# 还有下面这种方法，但是不推荐用，因为可能会引起很多难以诊断的错误，比如出现同名的类\n# 这种方法是导入模块的所有类\nfrom car import *\n~~~\n\n**使用别名**\n\n就是给导入的模块或类更改使用名，这并不会影响该模块和类的代码。\n\n~~~python\n# 给模块使用别名\nimport electric_car as ec\n# 给类使用别名\nfrom electric_car import ElectricCar as EC\n~~~\n\n### 合适的工作流程\n\n首先尝试在一个文件中完成所有工作，确定一切都能正确运行后，在将类移到独立的模块中。\n\n这里讲一下 **VMC** 模式：\n\n- V： 就是视窗，用户界面等可视化的代码。\n- M：就是模块或类等等的代码。\n- C：就是整个程序的运行逻辑，流程控制等等的代码。\n\n这个模式可以简单的理解为建立三个文件夹，分别存放这三种类型的文件。这样可以让自己的代码更加简洁高效，别人理解也更容易。\n\n### Python标准库\n\nPython标准库是一组模块，在安装Python时已经包含在内了。我们可以使用标准可中的任何函数和类。查看Python标准库，可以在命令行输入  **help(\"modules\")** 命令。\n\n~~~python\n# 随机数模组，返回两个数之间的随机一个数。\n>>> from random import randint\n>>> randint(1,6)\n4   \n# 返回一个列表里随机一个元素\n>>> from random import choice \n>>> players = ['aaa','bbb','ccc','ddd']\n>>> choice(players)\n'ccc'\n~~~\n\n### 类的编程风格\n\n编写复杂程序时采用以下几项：\n\n- 类名：驼峰命名法。例：MyNewCar 。类名不使用下划线。\n- 模块名和实例名都采用全小写格式，并在单词之间采用下划线。\n- 每个类都要在定义后面和函数一样需要描述类功能的文档字符串。\n- 当需要导入标准库中的模块和自己编写的模块时，优先导入标准库中的模块，在导入自己编写的模块。\n\n### 小结\n\n本章我们学习了如何编写类，如何使用属性在类中存储的信息，以及如何编写方法让类具备所需的行为。然后学习了 init 初始化方法。了解了如何修改实例的属性，包括直接修改以及通过方法修改。还了解到使用继承可简化相关类的创建工作，将一个类的实例用作另一个类的属性能让类更简洁。\n明白了，通过将类存储在模块（文件）中，并在需要使用这些类的文件中导入它们，可让项目变的更简洁。开始了解python标准库，还看了一个random模块，最后学习了编写类时应遵循的Python约定。\n\n## 第九章 文件和异常\n\n处理文件，让程序能够快速地分析大量数据；错误处理，避免程序在面对意外情况时崩溃；异常是Python创建特殊对象，用于管理程序运行时出现的错误；还将学习使用 json 模块保存用户数据，以免这些数据在程序结束运行后丢失。\n\n### 读取文件\n\n读取文件对数据分析应用程序很有用。要使用文本文件中的信息，首先需要将信息读取到内存中。既可以一次性读取文件的全部内容，也可以逐行读取。\n\n**读取文件的全部内容**\n\n~~~tex\n# 这是一个txt文件\n3.1415926535\n  8979323846\n  2643383279\n~~~\n\n~~~python\n# 读取文件\nfrom pathlib import Path\n# 这里值得注意的是VScode里面用的斜杠是反的\npath = Path(\"E:/text_files/pi_digits.txt\")\ncontents = path.read_text()\n# 删除文档中的空格\n# contents = contents.strip()\nprint(contents)\n\n3.1415926535\n  8979323846\n  2643383279\n~~~\n\n**相对文件路径和绝对文件路径**\n\n**相对文件路径**让 Python 到相对于当前运行的程序所在目录的指定位置去查找。比如上面的文件可以这样读取\n\n~~~python\nfrom pathlib import Path\npath = Path(\"text_files/pi_digits.txt\")\n~~~\n\n**绝对文件路径**可以读取系统中任何地方的文件。\n\n~~~python\nfrom pathlib import Path\npath = Path(\"E:/text_files/pi_digits.txt\")\n~~~\n\n现在最简单的做法是，要么将数据文件存储在程序文件所在的目录中，要么将其存储在存续文件所在目录下的一个文件夹中。\n\n**注意**：在显示文件路径时，windows 系统使用反斜杠（ \\ ）而不是斜杠（ / ）但是你在代码中应该始终使用斜杠（ / ），即便在windows系统中也是如此。在与你或其他用户的系统交互时，pathlib 库会自动使用正确的路径表示方法。\n\n**访问文件中的各行**\n\n使用 **splitlines()** 方法可以将字符串转换为一系列行，在使用 for 循环遍历文件中的每一行，splitlines() 方法返回一个列表，其中包含文件中所有的行。可以把这个列表赋值给变量。\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"E:/text_files/pi_digits.txt\")\ncontents = path.read_text()\nlines = contents.splitlines()\n\nfor line in lines:\n    print(line)\n\n3.1415926535\n  8979323846\n  2643383279\n~~~\n\n**使用文件的内容**\n\n读取文件后才能使用这些数据。\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"E:/text_files/pi_digits.txt\")\ncontents = path.read_text()\npi_string = ''\nlines = contents.splitlines()\nfor line in lines:\n    pi_string += line\n\nprint(pi_string)\nprint(len(pi_string))\n3.1415926535  8979323846  2643383279\n36\n\n# 删除左边空格\n--snip--\nfor line in lines:\n    pi_string += line.lstrip()\n\nprint(pi_string)\nprint(len(pi_string))\n3.141592653589793238462643383279\n32\n~~~\n\n**注意**：读取文本文件时，python 将其中的所有文本都解释为字符串。如果读取的是数，并且要将其作为数字使用，就必须使用 int() 函数将其转换为整数，或者使用 float() 函数将其转为浮点数。\n\n**大型文件**可以做切片等列表的操作。\n\n~~~python\n--snip--\nfor line in lines:\n    pi_string += line.lstrip()\n\nprint(pi_string[:10])\nprint(len(pi_string))\n3.14159265\n32\n~~~\n\n**趣味小练习**\n\n~~~python\n# 圆周率中包含你的生日吗\nfrom pathlib import Path\n\npath = Path(\"pi_million_digits.txt\")\ncontents = path.read_text()\n\npi_string = ''\nlines = contents.splitlines()\nfor line in lines:\n    pi_string += line.strip()\n\nbirthday = input(\"你的生日如(20200506):\")\nif birthday in pi_string:\n    print(\"圆周率包含了你的生日\")\nelse:\n    print(\"圆周率没有你的生日哦...\")\n    \n你的生日如(20200506):20200506\n圆周率没有你的生日哦...\n~~~\n\n### 写入文件\n\n保存数据的最简单的方式之一是将其写入文件。\n\n**写入一行**\n\n**注意**：在python调用 **write_text()** 方法时，如果指定文件已存在，这个方法会将其内容**替换**为你要写入的内容。**replace()**方法可以将字符串中的特定单词替换为另一个单词。\n\n~~~python\n# 写入一行文字\nfrom pathlib import Path\npath = Path('programming.txt')\npath.write_text(\"hello world\")\n\nprogramming.txt\nhello world\n# 替换字符串 replace()\n>>> a = 'How are you?'\n>>> a.replace('you','me')\n'How are me?'\n~~~\n\n**注意**：Python 只能将字符串写入文本，如果要将数值数据存储到文本文件中，须使用 str() 函数将其转换为字符串格式。\n\n**写入多行**\n\n~~~python\nfrom pathlib import Path\npath = Path('programming.txt')\ncontents = \"nihao\"\ncontents += \"\\nwohao\"\ncontents += \"\\ndajiahao\"\npath.write_text(contents)\n\nprogramming.txt\nnihao\nwohao\ndajiahao\n~~~\n\n**趣味小练习**\n\n~~~python\n# 重复写入多个词语\nfrom pathlib import Path\npath = Path(\"guest.txt\")\nn = 0\nc = ''\nwhile n != 5:\n    b = input(\"请输入内容：\")\n    c += f\"{b}\\n\"\n    n += 1\n    path.write_text(f\"{c}\", encoding='utf-8')\n~~~\n\n### 异常\n\n异常是使用 try-except 代码块处理的。也就是说你运行一段代码，如过出错了会根据你编写的代码执行，如果没有对异常进行处理，程序出错了就会停止。**如果你运行一段代码出错，编辑器会提示你是什么错误，你可以针对这个错误给出处理方法，就像下面的 0 不能作为除数的错误是：ZeroDivisionError**\n\n~~~python\nprint(5/0)\nZeroDivisionError: division by zero\n~~~\n\n**使用 try-except 代码块**\n\n当你认为可能会发生错误的时候，可以使用这个代码块来处理可能引发的错误。\n\n~~~python\ntry:\n    print(5/0)\nexcept ZeroDivisionError:\n    print(\"0不能作为除数。\")\n    \n0不能作为除数。\n~~~\n\n**处理 FileNotFoundError 异常**\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"alice.txt\")\ntry:\n    contents = path.read_text(encoding='utf-8')\nexcept FileNotFoundError:\n    print(\"没有找到这个文件。\")\n\n没有找到这个文件。\n~~~\n\n**分析文本**\n\nsplit() 方法是把一个很长的字符串转换成很多单词的列表的一个方法。\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"alice.txt\")\ntry:\n    contents = path.read_text(encoding='utf-8')\nexcept FileNotFoundError:\n    print(\"没有找到这个文件。\")\nelse:\n    # 计算文件大概包含多少个单词\n    words = contents.split()\n    num_words = len(words)\n    print(f\"The file {path} has about {num_words} words\")\n~~~\n\n**读取多个文件**\n\n利用函数我们可以读取多个文件\n\n~~~python\nfrom pathlib import Path\n\ndef count_words(path):\n    try:\n        contents = path.read_text(encoding='utf-8')\n    except FileNotFoundError:\n        print(f\"没有找到{path}这个文件。\")\n    else:\n        # 计算文件大概包含多少个单词\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {path} has about {num_words} words\")\n\n\nfilenames = ['alice.txt', 'little_women.txt', 'moby_dick.txt', 'kkk.txt']\nfor filename in filenames:\n    path = Path(filename)\n    count_words(path)\n   \nThe file alice.txt has about 29594 words\nThe file little_women.txt has about 189142 words\nThe file moby_dick.txt has about 215864 words\n没有找到kkk.txt这个文件。\n~~~\n\n**静默失败**\n\n并非每次错误都需要告诉用户，有时候有错误什么也不做，但是就是让程序继续运行可以使用 pass 语句。\n\n~~~python\ndef count_words(path):\n    try:\n        contents = path.read_text(encoding='utf-8')\n    except FileNotFoundError:\n        pass\n    else:\n        # 计算文件大概包含多少个单词\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {path} has about {num_words} words\")\n\nfilenames = ['alice.txt', 'little_women.txt', 'moby_dick.txt', 'kkk.txt']\nfor filename in filenames:\n    path = Path(filename)\n    count_words(path)\n\nThe file alice.txt has about 29594 words\nThe file little_women.txt has about 189142 words\nThe file moby_dick.txt has about 215864 words\n~~~\n\n### 存储数据\n\njson 模块能够将简单的Python数据结构转换为JSON格式的字符串，并在程序再次运行时从文件中加载数据。\n\n**注意：**JSON格式最初是为 JavaScript 开发的，但后来成为了一种通用格式，被众多语言采用。\n\n**json.dumps() 和 json.loads()**\n\njson.dumps() 接受一个参数，即要转换为JSON格式的数据。这个函数返回一个字符串。\n\n~~~python\n# 存储数据 json.dumps()\nfrom pathlib import Path\nimport json\n\nnumber = [1, 2, 3, 5, 6, 7, 4, 8, 9]\n\npath = Path('number.json') # 文件路径，如果没有就会自动创建这个文件\ncontents = json.dumps(number) # 数据通过json.dumps()转化文JSON格式，存储在变量contents中\npath.write_text(contents) # 把contents中的数据写入number.json这个文件中\n# number.json文件内容\n[1, 2, 3, 5, 6, 7, 4, 8, 9]\n\n# 读取数据 json.loads()\nfrom pathlib import Path\nimport json\n\npath = Path('number.json') # 文件路径，如果没有就会自动创建这个文件\ncontents = path.read_text() # 把读取的数据存储在变量contents中\nnumber = json.loads(contents)# contents中的数据通过json.loads()转化文JSON格式，并存储在变量number中\nprint(number)\n[1, 2, 3, 5, 6, 7, 4, 8, 9]\n~~~\n\n**保存和读取用户生成的数据**\n\n保存数据很有必要，因为如果不以某种方式进行存储，用户的信息就会在程序停止运行时丢失。\n\n~~~python\n# 保存用户数据\nfrom pathlib import Path\nimport json\n\nusername = input(\"请输入你的名字：\")\npath = Path('username.json')\ncontents = json.dumps(username)\npath.write_text(contents, encoding='utf-8')\nprint(\"我们将储存你的名字。\")\n请输入你的名字：zqten\n我们将储存你的名字。\n# username.json文件\n\"zqten\"\n\n# 读取用户生成的数据\nfrom pathlib import Path\nimport json\npath = Path(\"username.json\")\ncontents = path.read_text()\nusername = json.loads(contents)\nprint(f\"Welcome back {username}\")\nWelcome back zqten\n~~~\n\nPath 类提供了很多有用的方法。如果指定的文件或文件夹存在，**exists()** 方法返回 True ，否则返回 False 。\n\n~~~python\nfrom pathlib import Path\nimport json\n\npath = Path('username.json')\nif path.exists():\n    contents = path.read_text()\n    username = json.loads(contents)\n    print(f\"Welcome back {username}\")\nelse:\n    username = input(\"请输入你的名字：\")\n    contents = json.dumps(username)\n    path.write_text(contents, encoding='utf-8')\n    print(f\"我们将储存你的名字。{username}\")\nWelcome back zqten\n~~~\n\n**重构**\n\n~~~python\n# 保存用户数据\nfrom pathlib import Path\nimport json\n\ndef get_stored_username(path):\n    '''如果用户存储了用户名，我们就获取他'''\n    if path.exists():\n        contents = path.read_text()\n        username = json.loads(contents)\n        return username\n    else:\n        return None\n\ndef get_new_username(path):\n    '''提示用户输入用户名'''\n    username = input(\"请输入你的名字：\")\n    contents = json.dumps(username)\n    path.write_text(contents, encoding='utf-8')\n    return username\n\ndef greet_user():\n    '''问候用户，并指出其名字'''\n    path = Path('username.json')\n    username = get_stored_username(path)\n    if username:\n        print(f\"Welcome back {username}\")\n    else:\n        username = get_new_username(path)\n        print(f\"我们将储存你的名字，{username}\")\n\ngreet_user()\n请输入你的名字：zqten\n我们将储存你的名字，zqten\n# 在运行一次\ngreet_user()\nWelcome back zqten\n~~~\n\n### 小结\n\n本章学习了如何使用文件，包括如何读取整个文件，如何读取文件中的各行，以及如何根据需要将任意数量的文本写入文件。然后学习了异常，以及如何处理程序可能引发的异常。最后学习了如何存储Python数据结构，以保存用户提供的信息，避免让用户在每次运行程序时都重新提供。\n\n## 第十章 测试代码\n\n本章使用的是pip安装的pytest库来进行测试代码。\n\n~~~python\n# 在控制台安装\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pytest\n~~~\n\n### 测试函数\n\n测试基本分为下面几种：\n\n- 单元测试，用于核实函数的某个方面没有问题。\n- 测试用例，是一组单元测试，核实函数在各种情况下的行为都符合要求。\n- 全覆盖，测试一整套单元测试，涵盖了各种可能的函数使用方式。\n\n测试函数，需要新建一个文件，导入需要测试的函数，然后定义一个测试函数（这个函数的命名规范是：必须以 test 加下划线打头）。在测试过程中，**pytest**会找出并运行所有以 test 加下划线打头的函数。运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。\n\n~~~python\n# name_function.py 文件\ndef get_formatted_name(frist, last, middle=''):\n    if middle:\n        full_name = f\"{frist} {middle} {last}\"\n    else:\n        full_name = f\"{frist} {last}\"\n    return full_name.title()\n\n# test_name_function.py 测试文件\nfrom name_function import get_formatted_name\n\ndef test_frist_last_name():\n    formatted_name = get_formatted_name('janis', 'joplin')\n    assert formatted_name == 'Janis Joplin'\n    \n# 运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。\n======================== test session starts ========================\nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 1 item\n\ntest_name_function.py .                                     [100%]\n\n======================== 1 passed in 0.01s ==========================\n\n\n# 未通过测试示例\n===================== test session starts ============================\nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 1 item\n\ntest_name_function.py F                                         [100%]\n\n====================== FAILURES ====================================== \n__________________ test_frist_last_name_______________________________ \n\n    def test_frist_last_name():\n        formatted_name = get_formatted_name('janis', 'joplin')\n>       assert formatted_name == 'Janis Joplil'\nE       AssertionError: assert 'Janis Joplin' == 'Janis Joplil'\nE         - Janis Joplil\nE         ?            ^\nE         + Janis Joplin\nE         ?            ^\n\ntest_name_function.py:6: AssertionError\n============= short test summary info =========================================== \nFAILED test_name_function.py:\n:test_frist_last_name - AssertionError: assert 'Janis Joplin' == 'Janis Joplil'\n============= 1 failed in 0.05s ================================================= \n~~~\n\n\n\n### 测试类\n\n上面是测试了函数，现在我们针对类进行测试。\n\n**各种断言：**\n\n- assert a == b\t\t\t断言两个值相等\n- assert a != b             断言两个值不等\n\n这里只列出了两个，测试能包含任意可用条件语句表示的断言，比如 not 、in等等。\n\n\n\n**要测试的类**\n\n~~~python\n# 测试类 survey.py\nclass AnonymousSurvey:\n    '''收集匿名调查问卷'''\n\n    def __init__(self, question):\n        '''存储一个问题，并为存储答案做准备'''\n        self.question = question\n        self.responses = []\n\n    def show_question(self):\n        '''显示调查问卷'''\n        print(self.question)\n\n    def store_response(self, new_response):\n        '''存储单个调查答卷'''\n        self.responses.append(new_response)\n\n    def show_results(self):\n        '''显示收集到的所有答案'''\n        print(\"所有问卷结果:\")\n        for response in self.responses:\n            print(f\"- {response}\")\n\n# 实例化 language_survey.py\n# survey类的实例\nfrom survey import AnonymousSurvey\n\n# 定义个问题，并创建一个表示调查的 AnonymousSurvey 对象\nquestion = \"你学习了几种语言？\"\nlanguage_survey = AnonymousSurvey(question)\n\n# 显示问题并存储答案\nlanguage_survey.show_question()\nprint(\"按'q'退出。\\n\")\nwhile True:\n    response = input(\"输入你学习的语言: \")\n    if response == \"q\":\n        break\n    language_survey.store_response(response)\n\n# 显示答案\nprint(\"\\n你学习的语言有\")\nlanguage_survey.show_results()\n\n你学习了几种语言？\n按'q'退出。       \n\n输入你学习的语言: 汉语\n输入你学习的语言: 英语\n输入你学习的语言: 日语\n输入你学习的语言: 德语\n输入你学习的语言: q\n\n你学习的语言有\n所有问卷结果: \n- 汉语        \n- 英语        \n- 日语        \n- 德语  \n~~~\n\n**测试AnonymousSurvey类**\n\n~~~python\n# 测试AnonymousSurvey类 test_survey.py\nfrom survey import AnonymousSurvey\n\n\ndef test_store_single_response():\n    '''测试单个答案会被妥善地存储'''\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    language_survey.store_response('English')\n    assert 'English' in language_survey.responses\n    \n==================== test session starts ============================== \nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 1 items                                                                                                                       \n\ntest_survey.py .                             \t  [100%] \n\n===================== 1 passed in 0.02s ===============================     \n\ndef test_store_three_response():\n    '''测试多个答案会被妥善地存储'''\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    responses = ['English', 'Spanish', 'Chinese']\n    for response in responses:\n        language_survey.store_response(response)\n\n    for response in responses:\n        assert response in language_survey.responses\n\n========================= test session starts ===============================\nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 2 items                                                                                                                       \n\ntest_survey.py ..                   [100%] \n\n========================= 2 passed in 0.02s =================================\n~~~\n\n\n\n**使用夹具**\n\n夹具（@pytest.fixture）可帮助我们搭建测试环境，用于测试多个项目。这个需要导入（import pytest）。夹具使用方法是放在函数定义前面的指令。要使用夹具时，可编写一个函数来生成供多个测试函数使用的资源再对这个函数应用装饰器@pytest.fixture，并让使用该资源的每个测试函数都接受一个与该函数同名的形参。\n\n~~~python\nimport pytest\nfrom survey import AnonymousSurvey\n# 测试AnonymousSurvey类\n\n\n@pytest.fixture\ndef language_survey():\n    '''一个可供所有测试函数使用的AnonymousSurvey实例'''\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    return language_survey\n\n\ndef test_store_single_response(language_survey):\n    '''测试单个答案会被妥善地存储'''\n    language_survey.store_response('English')\n    assert 'English' in language_survey.responses\n\n\ndef test_store_three_response(language_survey):\n    '''测试多个答案会被妥善地存储'''\n    responses = ['English', 'Spanish', 'Chinese']\n    for response in responses:\n        language_survey.store_response(response)\n\n    for response in responses:\n        assert response in language_survey.responses\n~~~\n\n### 小结\n\n本章学习了如何使用 pytest 模块中的工具来为函数和类编写测试。不仅学习了如何编写测试函数，以核实函数和类的行为符合预期，而且学习了如何使用夹具来高效地创建可在测试文件中的多个测试函数中使用的资源。\n\n# 第二部分 项目\n\n## 第十二章 武装飞船\n\n### 外星人入侵项目规划\n\n- 玩家控制着一艘武装飞船出现在屏幕底部中央，玩家可以使用方向键左右移动飞船，使用空格键进行射击。\n- 当游戏开始时，一个外形舰队出现在天空中，并向屏幕下方移动。\n- 玩家的任务是消灭这些外星人。\n- 玩家将万星人消灭干净后，将出现一个新的外形舰队，其移动速度更快。\n- 只要有万星人撞到玩家的飞船或到达屏幕下边缘，玩家就损失一艘飞船。玩家损失三艘飞船游戏结束。\n\n**安装Pygame**\n\n~~~python\npip install pygame\n~~~\n\n### 开始游戏项目\n\n**创建 Pygame 窗口及响应用户输入**\n\n这里有及个新方法：\n\n- pygame.display.set_mode((1200,800)) 设置显示画面的大小\n- pygame.display.set_caption(\"Alien Invasion\") 设置标题和logo\n- pygame.display.flip() 让渲染的可见\n- pygame.time.Clock() 设置游戏帧率\n\n~~~python\nimport sys\nimport pygame\n\n\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"\n        pygame.init()\n\n        self.screen = pygame.display.set_mode((1200,800))\n        pygame.display.set_caption(\"Alien Invasion\")\n\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        while True:\n            # 监听键盘和鼠标事件\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    sys.exit()\n            # 让最近绘制的屏幕可见\n            pygame.display.flip()\n\nif __name__ == '__main__':\n    # 创建游戏实例并运行游戏\n    ai = AlienInvasion()\n    ai.run_game()\n~~~\n\n**控制帧率**\n\n~~~python\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"\n        pygame.init()\n        # 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行\n        self.clock = pygame.time.Clock()\n        --snip--\n        \n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        while True:\n            --snip--\n            # 让最近绘制的屏幕可见\n            pygame.display.flip()    \n            self.clock.tick(60)\n~~~\n\n**设置背景颜色**\n\nfill() 方法是填充背景颜色，该方法只接受一个表示颜色的实参。\n\n~~~python\n\tdef __init__(self):\n    \t--snip--\n        pygame.display.set_caption(\"Alien Invasion\")\n        # 设置背景颜色\n        self.bg_color = (230,230,230)\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        --snip--\n        # 每次循环时都重绘制屏幕\n            self.screen.fill(self.bg_color)\n        # 让最近绘制的屏幕可见\n            pygame.display.flip()\n~~~\n\n**创建 Settings 类**\n\n~~~python\nclass Settings:\n    \"\"\"存储游戏《外星人入侵》中所有设置的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏的设置\"\"\"\n        # 屏幕设置\n        self.screen_width = 1200\n        self.screen_height = 800\n        self.screen_color = (230, 230, 230)\n\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"        \n        --snip--\n        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        --snip--\n            self.screen.fill(self.settings.screen_color)\n~~~\n\n### 添加飞船图像\n\n~~~python\nimport pygame\n\n\nclass Ship:\n    \"\"\"管理飞船类\"\"\"\n\n    def __init__(self, ai_game):\n        \"\"\"初始化飞船并设置其初始位置\"\"\"\n        self.screen = ai_game.screen\n        self.screen_rect = ai_game.screen.get_rect()\n\n        # 加载飞船图像并获取其外接矩形\n        self.image = pygame.image.load('images/ship.bmp')\n        self.rect = self.image.get_rect()\n\n        # 每艘新飞船都放在屏幕底部的中央\n        self.rect.midbottom = self.screen_rect.midbottom\n\n    def blitme(self):\n        \"\"\"在指定位置绘制飞船\"\"\"\n        self.screen.blit(self.image, self.rect)\n~~~\n\n**注意：**在 pygame 中，原点（0,0）位于屏幕左上角，当一个点向右下方移动时，它的坐标值将增大，在1200X800的屏幕上，原点位于左上角，右下角的坐标为（1200,800）。这些坐标对应的是游戏窗口，而不是物理屏幕。\n\n**在屏幕上绘制飞船**\n\n~~~python\nfrom ship import Ship\n\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n    def __init__(self):\n    \"\"\"初始化游戏并创建游戏资源\"\"\"\n    --snip--\n    pygame.display.set_caption(\"Alien Invasion\")\n    self.ship = Ship(self)\n    \n    def run_game(self):\n    \"\"\"开始游戏主循环\"\"\"\n    --snip--\n            self.screen.fill(self.settings.screen_color)\n            self.ship.blitme()\n~~~\n\n### 重构：_check_events() 方法和 _update_screen() 方法\n\n在Python中辅助方法的名称以单下划线打头\n\n_ _check_events() 方法和_ _update_screen()方法\n\n~~~python\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        while True:\n            # 监听键盘和鼠标事件\n            self._check_events()\n            self._update_screen()\n            # 每秒60帧\n            self.clock.tick(60)\n\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n\n    def _update_screen(self):\n        # 每次循环时都重绘制屏幕\n        self.screen.fill(self.settings.screen_color)\n        self.ship.blitme()\n        # 让最近绘制的屏幕可见\n        pygame.display.flip()\n~~~\n\n### 驾驶飞船\n\n**响应按键**\n\npygame中，事件都是通过 pygame.event.get() 方法获取的。\n\n~~~python\n--snip--\n    def _check_events(self):\n            # 监听键盘和鼠标事件\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    sys.exit()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_RIGHT:\n                        # 飞船向右移动\n                        self.ship.rect.x += 1\n~~~\n\n**持续移动**\n\npygame.KEYDOWN 和 pygame.KEYUP 两个事件是，按下键盘，和释放键盘。\n\n~~~python\n    def run_game(self):\n            \"\"\"开始游戏主循环\"\"\"\n            while True:\n                # 监听键盘和鼠标事件\n                self._check_events()\n                # 调用飞船位置更新函数\n                self.ship.update()\n                # 更新画面\n                self._update_screen()\n                # 每秒60帧\n                self.clock.tick(60)\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_RIGHT:\n                    # 飞船向右移动\n                    self.ship.moving_right = True\n            elif event.type == pygame.KEYUP:\n                if event.key == pygame.K_RIGHT:\n                    self.ship.moving_right = False\n                    \n# ship.py\nclass Ship:\n    \"\"\"管理飞船类\"\"\"\n\n    def __init__(self, ai_game):\n        \"\"\"初始化飞船并设置其初始位置\"\"\"\n        --snip--\n        # 移动标志（飞船一开始不移动）\n        self.moving_right = False\n\n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        if self.moving_right:\n            self.rect.x += 1\n        --snip--\n~~~\n\n**左右移动**\n\n~~~python\nclass Ship:\n    \"\"\"管理飞船类\"\"\"\n\t\t--snip--\n        # 移动标志（飞船一开始不移动）\n        self.moving_right = False\n        self.moving_left = False\n\n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        if self.moving_right:\n            self.rect.x += 1\n        if self.moving_left:\n            self.rect.x -= 1\n        --snip--\n        \nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n                # 飞船移动\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_RIGHT:\n                    self.ship.moving_right = True\n                if event.key == pygame.K_LEFT:\n                    self.ship.moving_left = True\n            elif event.type == pygame.KEYUP:\n                if event.key == pygame.K_RIGHT:\n                    self.ship.moving_right = False\n                if event.key == pygame.K_LEFT:\n                    self.ship.moving_left = False    \n~~~\n\n**调整飞船的速度**\n\n~~~python\nclass Settings:\n    \"\"\"存储游戏《外星人入侵》中所有设置的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏的设置\"\"\"\n        --snip--\n        # 飞船的设置\n        self.ship_speed = 1.5\nclass Ship:\n    \"\"\"管理飞船类\"\"\" \n    def __init__(self, ai_game):\n        \"\"\"初始化飞船并设置其初始位置\"\"\"    \n        --snip--\n        # 在飞创的属性X中存储一个浮点数\n        self.x = float(self.rect.x)\n        \n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        # 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值\n        if self.moving_right:\n            self.x += self.settings.ship_speed\n        if self.moving_left:\n            self.x -= self.settings.ship_speed\n\n        # 根据self.x更新self.rect.x\n        self.rect.x = self.x        \n~~~\n\n**限制飞船的活动范围**\n\n~~~python\nclass Ship:\n    \"\"\"管理飞船类\"\"\" \n        --snip--    \n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        # 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值\n        if self.moving_right and self.rect.right < self.screen_rect.right:\n            self.x += self.settings.ship_speed\n        if self.moving_left and self.rect.left > 0:\n            self.x -= self.settings.ship_speed        \n~~~\n\n**重构：_check_events() 方法**\n\n检查事件方法越来越长，我们将其部分代码放在两个方法中，一个处理键盘按下(KEYDOWN)，一个处理键盘释放(KEYUP)\n\n~~~python\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n                # 飞船移动\n            elif event.type == pygame.KEYDOWN:\n                self._check_keydown_events(event)\n            elif event.type == pygame.KEYUP:\n                self._check_keyup_events(event)\n\n    def _check_keydown_events(self, event):\n        \"\"\"响应按下键盘\"\"\"\n        if event.key == pygame.K_RIGHT:\n            self.ship.moving_right = True\n        elif event.key == pygame.K_LEFT:\n            self.ship.moving_left = True\n\n    def _check_keyup_events(self, event):\n        \"\"\"响应释放键盘\"\"\"\n        if event.key == pygame.K_RIGHT:\n            self.ship.moving_right = False\n        if event.key == pygame.K_LEFT:\n            self.ship.moving_left = False\n~~~\n\n**按 Q 退出**\n\n~~~python\n    def _check_keydown_events(self, event):\n        \"\"\"响应按下键盘\"\"\"\n        if event.key == pygame.K_RIGHT:\n            self.ship.moving_right = True\n        elif event.key == pygame.K_LEFT:\n            self.ship.moving_left = True\n        elif event.key == pygame.K_q:\n            sys.exit()\n~~~\n\n**在全屏模式下运行游戏**\n\n在创建屏幕时，传入(0, 0), pygame.FULLSCREEN ，这让pygame生成一个覆盖整个显示器的屏幕。由于无法知道屏幕的宽度和高度，所有后面接着要更新屏幕的 rect 的属性宽和高来更新对象 settings 。pygame不提供全屏模式下退出游戏的默认方式，所以运行前，确保可以使用 'q' 退出\n\n~~~python\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"\n        --snip--\n        self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\n        self.settings.screen_width = self.screen.get_rect().width\n        self.settings.screen_height = self.screen.get_rect().height        \n~~~\n\n### 简单回顾\n\n下面将添加射击功能，所以需要新增一个名为 bullet.py 的文件，并修改一些原有的文件，在添加其他功能前，先回顾一下这些文件，以便对这个项目的组织结构有清楚的认识。\n\n- alien_invasion.py\n  这个文件包含 AlienInvasion 类，这个类创建在游戏的很多地方会用到的一系列属性。\n\n  ~~~python\n  import sys\n  import pygame\n  \n  from settings import Settings\n  from ship import Ship\n  from bullet import Bullet\n  \n  \n  class AlienInvasion:\n      \"\"\"管理游戏资源和行为的类\"\"\"\n  \n      def __init__(self):\n          \"\"\"初始化游戏并创建游戏资源\"\"\"\n          pygame.init()\n          # 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行\n          self.clock = pygame.time.Clock()\n          # 设置背景颜色和窗口大小\n          self.settings = Settings()\n          # 独立窗口运行程序\n          self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))\n          # 全屏模式游戏 'q' 退出\n          # self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\n          # self.settings.screen_width = self.screen.get_rect().width\n          # self.settings.screen_height = self.screen.get_rect().height\n          pygame.display.set_caption(\"Alien Invasion\")\n          self.ship = Ship(self)\n          self.bullets = pygame.sprite.Group()\n  \n      def run_game(self):\n          \"\"\"开始游戏主循环\"\"\"\n          while True:\n              # 监听键盘和鼠标事件\n              self._check_events()\n              # 调用飞船位置更新函数\n              self.ship.update()\n              # 更新子弹的位置并删除已消失的子弹\n              self._update_bullets()\n              # 更新画面\n              self._update_screen()\n              # 每秒60帧\n              self.clock.tick(60)\n  \n      def _check_events(self):\n          # 监听键盘和鼠标事件\n          for event in pygame.event.get():\n              if event.type == pygame.QUIT:\n                  sys.exit()\n                  # 飞船移动\n              elif event.type == pygame.KEYDOWN:\n                  self._check_keydown_events(event)\n              elif event.type == pygame.KEYUP:\n                  self._check_keyup_events(event)\n  \n      def _check_keydown_events(self, event):\n          \"\"\"响应按下键盘\"\"\"\n          if event.key == pygame.K_RIGHT:\n              self.ship.moving_right = True\n          elif event.key == pygame.K_LEFT:\n              self.ship.moving_left = True\n          elif event.key == pygame.K_q:\n              sys.exit()\n          elif event.key == pygame.K_SPACE:\n              self._fire_bullet()\n  \n      def _check_keyup_events(self, event):\n          \"\"\"响应释放键盘\"\"\"\n          if event.key == pygame.K_RIGHT:\n              self.ship.moving_right = False\n          if event.key == pygame.K_LEFT:\n              self.ship.moving_left = False\n  \n      def _fire_bullet(self):\n          \"\"\"创建一颗子弹，并将其加入编著bullets \"\"\"\n          if len(self.bullets) < self.settings.bullet_allowed:\n              new_bullet = Bullet(self)\n              self.bullets.add(new_bullet)\n  \n      def _update_bullets(self):\n          \"\"\"更新子弹的位置并删除已消失的子弹\"\"\"\n          # 更新子弹位置\n          self.bullets.update()\n          # 删除已消失的子弹\n          for bullet in self.bullets.copy():\n              if bullet.rect.bottom <= 0:\n                  self.bullets.remove(bullet)\n  \n      def _update_screen(self):\n          # 每次循环时都重绘制屏幕\n          self.screen.fill(self.settings.screen_color)\n          # 子弹绘制        \n          for bullet in self.bullets.sprites():\n              bullet.draw_bullet()\n          self.ship.blitme()\n          # 让最近绘制的屏幕可见\n          pygame.display.flip()\n  \n  \n  if __name__ == '__main__':\n      # 创建游戏实例并运行游戏\n      ai = AlienInvasion()\n      ai.run_game()\n  ~~~\n  \n- settings.py\n  这个文件包含 Settings 类，这个类只有一个方法，这个文件主要用于初始化控制游戏外观和飞船速度的属性\n\n  ~~~python\n  class Settings:\n      \"\"\"存储游戏《外星人入侵》中所有设置的类\"\"\"\n  \n      def __init__(self):\n          \"\"\"初始化游戏的设置\"\"\"\n          # 屏幕设置\n          self.screen_width = 1200\n          self.screen_height = 800\n          self.screen_color = (230, 230, 230)\n  \n          # 飞船的设置\n          self.ship_speed = 1.5\n  \n          # 子弹设置\n          self.bullet_speed = 2.0\n          self.bullet_width = 3\n          self.bullet_height = 15\n          self.bullet_color = (60, 60, 60)\n          # 屏幕上最多出现的子弹数量\n          self.bullet_allowed = 5\n  ~~~\n  \n- ship.py\n  这个文件包含 Ship 类，这个类主要用于在屏幕上绘制飞船\n\n  ~~~python\n  import pygame\n  \n  \n  class Ship:\n      \"\"\"管理飞船类\"\"\"\n  \n      def __init__(self, ai_game):\n          \"\"\"初始化飞船并设置其初始位置\"\"\"\n          self.screen = ai_game.screen\n          self.settings = ai_game.settings\n          self.screen_rect = ai_game.screen.get_rect()\n  \n          # 加载飞船图像并获取其外接矩形\n          self.image = pygame.image.load('images/ship.bmp')\n          self.rect = self.image.get_rect()\n  \n          # 每艘新飞船都放在屏幕底部的中央\n          self.rect.midbottom = self.screen_rect.midbottom\n  \n          # 在飞船的属性X中存储一个浮点数\n          self.x = float(self.rect.x)\n  \n          # 移动标志（飞船一开始不移动）\n          self.moving_right = False\n          self.moving_left = False\n  \n      def update(self):\n          \"\"\"根据移动标志调整飞船的位置\"\"\"\n          # 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值\n          if self.moving_right and self.rect.right < self.screen_rect.right:\n              self.x += self.settings.ship_speed\n          if self.moving_left and self.rect.left > 0:\n              self.x -= self.settings.ship_speed\n  \n          # 根据self.x更新self.rect.x\n          self.rect.x = self.x\n  \n      def blitme(self):\n          \"\"\"在指定位置绘制飞船\"\"\"\n          self.screen.blit(self.image, self.rect)\n  ~~~\n\n### 射击\n\n- bullett.py\n  ~~~python\n  import pygame\n  from pygame.sprite import Sprite\n  \n  \n  class Bullet(Sprite):\n      \"\"\"管理飞船所发射子弹的类\"\"\"\n  \n      def __init__(self, ai_game):\n          \"\"\"在飞船的当前位置创建一个子弹对象\"\"\"\n          super().__init__()\n          self.screen = ai_game.screen\n          self.settings = ai_game.settings\n          self.color = self.settings.bullet_color\n  \n          # 在（0,0）处创建一个表示子弹的矩形，再设置正确的位置\n          self.rect = pygame.Rect(0, 0, self.settings.bullet_width, self.settings.bullet_height)\n          self.rect.midtop = ai_game.ship.rect.midtop\n  \n          # 存储用浮点数表示的子弹位置\n          self.y = float(self.rect.y)\n  \n      def update(self):\n          \"\"\"向上移动子弹\"\"\"\n          # 更新子弹的准确位置\n          self.y -= self.settings.bullet_speed\n          # 更新表示子弹的 rect 的位置\n          self.rect.y = self.y\n  \n      def draw_bullet(self):\n          \"\"\"在屏幕上绘制子弹\"\"\"\n          pygame.draw.rect(self.screen, self.color, self.rect)\n  ~~~\n\n### 小结\n\n本章学习了游戏开发计划的指定以及使用Pygame编写的游戏的基本结构。接着学习了如何设置背景色，以及如何将设置存储在独立的类中。然后学习了如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动。不仅创建了能自动移动的元素，还删除了不再需要的对象。最后学习了经常性重构是如何为项目的后续开发提供便利的。\n\n## 第十三章 外星人\n\n### 项目回顾\n\n本章将完成下列开发：\n\n- [ ] 在屏幕左上角添加一个外星人，并指定合适的边距。\n- [ ] 沿屏幕上边缘添加一行万星人，再不断地添加成行的外星人，直到填满屏幕的上半部分。\n- [ ] 让外星人向两侧和向下移动，直到外星舰队被全部击落、有外星人撞到飞船或有外星人抵达屏幕的下边缘。如果外星舰队都被击落，将再创建一个外星舰队；如果有外星人撞到飞船或抵达屏幕下边缘，就销毁飞船并再创建一个外星舰队。\n  **注意**：pygame里面的精灵碰撞和对象碰撞是两个方法\n  - pygame.sprite.groupcollide(精灵1，精灵2，1是否参与碰撞，2是否参与碰撞)。**这个是直接赋值给变量就可以了。和 input 差不多**\n  - pygame.sprite.spritecollideany(对象，精灵)。**这个是返回一个bool值**\n- [ ] 限制玩家可用的飞船数量，分配的飞船被用完后，游戏将结束。\n\n### 创建第一个外星人\n\n\n\n\n\n### 小结\n\n本章通过创建外星舰队学习了如何在游戏中添加大量相同的元素，如何使用嵌套循环来创建成行成列的整齐元素，以及如何通过调用每个元素的 ` update() `方法移动大量的元素。接着学习了如何控制对象在屏幕上的移动方向，以及如何响应特定的情形，如有外星人到达屏幕边缘。然后学习了如何检测并相应子弹和外星人的碰撞以及外星人和飞创的碰撞。最后学习了如何在游戏中跟踪统计信息，以及如何使用标志 ` game_active`来判断游戏是否结束。\n\n\n\n","source":"_posts/2024-10-25-Python入门到实践第三版学习笔记.md","raw":"---\ntitle: python入门学习笔记  \ndate: 2024-10-25\ncategories: # 文章的分类  \n\n  - 编程  \n\ntags:\n\n  - python  \n  - 编程 \n---\n\n# 第一部分 基础知识\n\n[回到主頁](https://zqten.github.io/)\n\n```cmd\n# python更新指令\npip install --upgrade python\n# pip更新指令\npython.exe -m pip install --upgrade pip\n# 国内镜像安装\npip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\npip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\npip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n# pip查看可更新包\npip list --outdated\n# 批量升级所有包,升级前先确认\npip-review --local --interactive\n# 一键升级所有包\npip-review --auto\n```\n\n前面的安装环节网络上讲得比书上的要详细多了，官方文档也讲得很清楚，所以这里就不在这里说了，有兴趣可以去访问官方网站[^😺^](https://www.python.org/)。\n\n## 第一章\t变量和简单的数据类型\n\n### 变量\n\n变量命名有一定的规则\n\n* 不能是数字开头，比如：**1_message**\n* 不能包含空格，比如：**mess age**\n* 不能是python里面的关键字，比如：print 或 def 等，python里面有很多关键字一般你打出来会高亮显示\n* 最好的变量名应该是既简短又有描述性，比如：name、student_name 等等。\n\n这里message是变量名，'Hello Python World!'是指向message变量的值。变量是可以重复赋值的，但它只会储存最后的值。\n\n```python\nmessage = 'Hello Python World!'\nprint(message)\nHello Python World!\n\nmessage = '你好!'\nprint(message)\n你好!\n```\n\n### 字符串\n\n有双引号或单引号包裹的内容就称为字符串，有些编程语言只有双引号是字符串。\n\n~~~python\n\"This is string.\"\n'This is string.'\n~~~\n\n**1.方法：title()、upper()、lower()**\n\n方法(method)是python对数据执行的操作，name后面的点(.)是让python对name变量执行 **title()** 方法指定的操作，这个方法就是把单词的手写字幕改成大写。**upper()**方法是让所有字母变成大写、**lower()**方法是让所有字母变成小写。还有一个方法修改字符串中的指定单词。**replace()**这个方法我们在后面的练习中会用到。\n\n~~~python\nname = \"zheng kai nan\"\nprint(name.title())\nZheng Kai Nan\n\nname = \"Zheng Kai Nan\"\nprint(name.upper())\nZHENG KAI NAN\nprint(name.lower())\nzheng kai nan\n\nname = \"zheng kai nan\"\nname_01 = name.replace(\"kai nan\", \"ji zhong\")\nprint(name)\nprint(name_01)\nzheng kai nan\nzheng ji zhong\n~~~\n\n**2.在字符串中插入变量**\n\n这个功能很常用，python的方式是在字符串的引号前面加一个 **f** 字母：\n\n~~~python\nfirst_name = \"zheng\"\nlast_name = \"kai nan\"\nfull_name = f\"{first_name} {last_name}\"\nprint(full_name)\nzheng kai nan\nprint(f\"Hello,{full_name.title()}!\")\nHello,Zheng Kai Nan!\n~~~\n\n**3.制表符和换行符控制字符串  \\t  \\n**\n\n在字符串中添加**\\t**、**\\n**可以缩进和换行，字符串引号前加**` r `**可以让取消里面所有转义符号：\n\n~~~python\nmessage = \"你知道这几种编程语言吗？Python Swift C++ Go Java\"\nprint(message)\n你知道这几种编程语言吗？Python Swift C++ Go Java\n\nmessage = \"\\t你知道这几种编程语言吗？Python Swift C++ Go Java\"\nprint(message)\n     你知道这几种编程语言吗？Python Swift C++ Go Java\n\nmessage = \"你知道这几种编程语言吗？\\nPython Swift C++ Go Java\"\nprint(message)\n你知道这几种编程语言吗？\nPython Swift C++ Go Java\n\n# 也可以同时使用\nmessage = \"你知道这几种编程语言吗？\\n\\tPython \\n\\tSwift \\n\\tC++ \\n\\tGo \\n\\tJava\"\nprint(message)\n你知道这几种编程语言吗？\n\tPython \n\tSwift \n\tC++ \n\tGo \n\tJava\n# 取消转义    \nprint(r\"\\nasd\") \n\\nasd\n~~~\n\n**4.删除字符串里面的空白rstrip()、lstrip()、strip()**\n\n有时候后输入字符串的时候会多输空格，在python里面多一个空格就意味着两个不同的字符串了。这里有3个方法：分别是**rstrip()、lstrip()、strip()**，*rstrip()*是删除字符串右边的空格，*lstrip()*是删除左边的空格，*strip()*是删除两边的空格。但是这种删除只是暂时的，要想永久删除就要重新赋值给变量。\n\n~~~python\nlanguage = ' python '\nprint(language.rstrip())\n' python'\nprint(language.lstrip())\n'python '\nprint(language.strip())\n'python'\n# 重新赋值给变量\nlanguage = language.strip()\nprint(language)\n'python'\n~~~\n\n**5.删除前缀和后缀 removeprefix()、removesuffix()**\n\n有些内容有统一的前缀，比如你有很多照片，前缀是某一个时间比如2023.7.25+名字或序号，你就只想要序号或名字就可以用到这个功能，还有就是URL里面的https://这个是网站前缀，就可以用*removeprefix()*括号里面填写你想删除的前缀，用引号括起来。这种方法的删除也是暂时的，要想永久删除需要重新赋值，和上面的删除空白一样。\n\n~~~python\n# 删除前缀\nTravel_photo = \"2023.7.25-镇远旅游照片\"\nprint(Travel_photo.removeprefix('2023.7.25-'))\n镇远旅游照片\nurl = \"https://www.baidu.com\"\nprint(url.removeprefix('https://'))\nwww.baidu.com\n\n#删除后缀\nfile_name = 'abc.jpg'\nprint(file_name.removesuffix('.jpg'))\nabc\n~~~\n\n### 数\n\n可以理解为数学里面的数字，用来计算或可视化数据\n\n**1.整数及其运算**\n\ninteger()或简写int()表示整数，**+、-、*、/** 这几个符号表示加减乘除，还有些复杂的后面会讲到，比如(**)两个星号代表乘方运算。\n\n~~~python\n2 + 3\n5\n3 ** 2\n9\n~~~\n\n**2.浮点数**\n\nfloat() 表示浮点数，就是带有小数点的数称为浮点数，数字同样都可以应用上面的计算符号。\n\n~~~python\n0.1 + 0.2\n0.3\n~~~\n\n**3.数字中的下划线**\n\n下划线用在数字中，并不会有其他的效果，只是方便我们更好观察。\n\n~~~python\nnumber = 1000_000_000\nprint(number)\n10000000000\n~~~\n\n**4.同时给多个变量赋值**\n\n同时给多个变量赋值，需要用逗号将变量名分开，对于要赋给变量的值也需要做同样的事情\n\n~~~python\nx,y,z = 1,2,3\nx = 1\ny = 2\nz = 3\n\n# 错误演示\nx,y,z = 1,2\nprint(x)\n发生异常: ValueError x\nnot enough values to unpack (expected 3, got 2)\n  File \"F:\\第一章变量和简单数据类型\\full_name.py\", line 7, in <module>\n    x, y, z = 1, 2\n    ^^^^^^^\nValueError: not enough values to unpack (expected 3, got 2)\n~~~\n\n**5.常量**\n\nPython里面没有常量(就是整个程序的生命周期不改变值的“变量”)，一般是用全大写字母来共同与其他程序员形成约定，遇到全大写字母的变量时，视为常量。\n\n~~~python\nNAME = \"太阳\"\n~~~\n\n**6.注释**\n\n注释的主要目的是阐述代码要做什么，以及是如何做的。\n\n~~~python\n# 打印出Hello World\nprint(\"Hello World\")\n~~~\n\n### 小结\n\n本章我们学习了如何使用变量，创建了描述性的变量名，学习了字符串是什么，以及如何使用全大写、全小写和首字母大写的方式显示字符串和制表符、换行符。还学习了如何删除字符串中多余的字符和空格，以及字符串中插入变量的方法。还学习了整数和浮点数，还有学习了写注释的目的。\n\n\n\n## 第二章\t列表简介\n\n### 列表是什么\n\n列表(list)由一系列按**特定顺序**排列的元素组成，一般给列表命名以复数形式，比如：name就用names。\n在python中列表用“[ ]”表示，每个元素用逗号隔开。列表里面有两个东西要搞清楚，一个是索引，一个是元素的值。要访问列表时使用索引和元素值都可以，列表的索引是从0开始的，所以要访问的n个元素就使用n-1的索引值。\n\n~~~python\n# 列表\nbicycles = ['trek', 'cannondale', 'redline', 'specialized']\nprint(bicycles)\n['trek', 'cannondale', 'redline', 'specialized']\n# 利用索引值访问列表元素\nprint(bicycles[0])\nprint(bicycles[3])\ntrek\nspecialized\n# 访问列表的倒数第一个元素\nprint(bicycles[-1])\nspecialized\n# 使用列表里面的元素到其他场景\nmessage = f'我喜欢{bicycles[0]}品牌的摩托车。'\nprint(message)\n我喜欢trek品牌的摩托车。\n~~~\n\n### 修改、添加和删除列表元素\n\n大多数列表将是动态的，意味着列表创建后，随着程序的运行将修改、增加、或删除其中的元素。\n这中间增加有**append()**方法在列表末尾添加元素，**insert()**在列表的指定位置插入元素。\n删除有**del 列表元素**将删除列表元素并且无法在访问这个元素了。\n**pop()**默认删除列表最后一个元素，也可以指定删除列表中的其他元素，在括号里面填上该元素的索引值就可以了。\n这里说下，pop()删除的元素可以赋值给一个变量继续使用，不像del不能在赋值和访问了。\n**remove()**方法是删除一个指定的元素值，列表有多个同样的值的话这个方法只删除第一个，要想全部删除就要使用循环。\n值得一提的是这个方法和pop()一样删除了的元素可以赋值给一个变量继续使用。\n\n~~~python\n# 修改列表元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nmotorcycles[0] = 'da yang'\nprint(motorcycles)\n['da yang', 'yamaha', 'suzuki']\n\n# 添加列表元素\n## 在列表末尾添加元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nmotorcycles.append('da yang')\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki', 'da yang']\n## 在列表的指定位置插入元素\nmotorcycles.insert(0, 'li fan')\nprint(motorcycles)\n['li fan', 'honda', 'yamaha', 'suzuki', 'da yang']\n\n# 删除列表元素\n## del方法删除\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\ndel motorcycles[0]\nprint(motorcycles)\n['yamaha', 'suzuki']\n## pop方法删除\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\npoped_motorcycles = motorcycles.pop()\nprint(motorcycles)\n['honda', 'yamaha']\nprint(poped_motorcycles)\nsuzuki\n### pop方法删除指定位置的元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nlast_motorcycles = motorcycles.pop(0)\nprint(motorcycles)\n['yamaha', 'suzuki']\nprint(last_motorcycles)\nhonda\n## remove()根据值删除元素\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n['honda', 'yamaha', 'suzuki']\nmid_motorcycles = 'yamaha'\nmotorcycles.remove(mid_motorcycles)\nprint(motorcycles)\n['honda', 'suzuki']\nprint(f'{mid_motorcycles.title()}')\nYamaha\n~~~\n\n\n\n### 列表管理\n\n**1.sort()**方法可以对列表**永久排序**，该方法是将列表按字母顺序或数字从小到大的顺序进行排序。\n\n~~~python\ncars = ['d', 'f', 'c', 'b', 'a', 'e']\nprint(cars)\n['d', 'f', 'c', 'b', 'a', 'e']\ncars.sort()\nprint(cars)\n['a', 'b', 'c', 'd', 'e', 'f']\n# 反向排序\ncars.sort(reverse=True)\nprint(cars)\n['f', 'e', 'd', 'c', 'b', 'a']\n# 反转列表,这是一种快捷方法\ncars = cars[::-1]\nprint(cars)\n['a', 'b', 'c', 'd', 'e', 'f']\n~~~\n\n\n\n**2. sorted()**方法是对列表进行**临时排序**。\n\n~~~python\n# 临时反向排序\nprint(sorted(cars, reverse=True))\n['a', 'b', 'c', 'd', 'e', 'f']\nprint(cars)\n['f', 'e', 'd', 'c', 'b', 'a']\n~~~\n\n\n\n**3.reverse()**方法是**永久反转排列**列表里面的元素。\n\n~~~python\ncars.reverse()\nprint(cars)\n['a', 'b', 'c', 'd', 'e', 'f']\n~~~\n\n\n\n**4.len()**方法可以快速获取列表长度，其显示的是列表内有多少个元素。\n\n~~~python\nprint(len(cars))\n6\n~~~\n\n**5.enumerate()** 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，**同时列出数据和数据下标**，一般用在 for 循环当中。\n\n~~~python\n>>> seq = ['one', 'two', 'three']\n>>> for i, element in enumerate(seq):\n...     print i, element\n...\n0 one\n1 two\n2 three\n~~~\n\n\n\n### 小节\n\n本章学习了什么是列表，以及如何使用列表内的元素。学习了定义列表，增删改列表内元素，以及如何对列表进行永久排序和临时排序，还学习了反转列表顺序和反向排序。\n\n\n\n## 第三章 操作列表\n\n### 遍历整个列表\n\n使用**for**循环可以很轻松的访问整个列表，以及对列表进行操作。这里值得一提的是for循环里面的变量名，在遍历列表是尽可能用列表的单数名，比如列表名为cars，那么for循环的变量尽量写成car。\n\n~~~python\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(magician)\n\nalice\ndavid\ncarolina\n# 进行其他操作\nfor magician in magicians:\n    print(f'{magician.title()},你的表演很精彩！')\n    print(f'谢谢你，{magician.title()}')\nprint('感谢你们每一个人的表演')\nAlice,你的表演很精彩！\n谢谢你，Alice\nDavid,你的表演很精彩！\n谢谢你，David\nCarolina,你的表演很精彩！\n谢谢你，Carolina\n感谢你们每一个人的表演\n~~~\n\n### 创建数值列表\n\n**range()**函数可以生成一系列数，但它实际上不会打印最后一个数，这是编程语言中常见的**差一**行为结果，要想打印最后个数需要使用**+1或者是使用比最后一个数大1的数**\n\n~~~python\nfor i in range(1, 5):\n    print(i, end=' ')\n1 2 3 4\n# 打印最后一位\nfor i in range(1, 5+1):\n    print(i, end=' ')\n1 2 3 4 5\n\n~~~\n\n**list()**函数可以将range()的结果直接转换为列表，方法是将range()作为list()的参数，同时range（）还可以指定步长。\n\n~~~python\nnumber = list(range(1, 6))\nprint(number)\n[1, 2, 3, 4, 5]\n# 从2开始到11结束，指定步长为2\neven_number = list(range(2, 11, 2))\nprint(even_number)\n[2, 4, 6, 8, 10]\n# 用for循环创建数值列表\nsquares = []\nfor value in range(1, 11):\n    square = value**2\n    squares.append(square)\nprint(squares)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n~~~\n\n\n\n使用这几个函数可以对数值列表进行统计**列表作为其参数**，min（）列表里面最小值，max（）列表里面最大值，sum（）列表所有数求和。\n\n~~~python\n# 简单统计数值列表\nvalues = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min(values))\n0\nprint(max(values))\n9\nprint(sum(values))\n45\n~~~\n\n**列表推导式**是一种简化方法，这种方法首先指定一个列表名（变量名），然后等号右边用中括号开始，括号内的排列顺序是表达式------for循环，这种方法需要经常练习。比如创建上面数值列表可以写成：\n\n~~~python\nsquares = [value**2 for value in range(1, 11)]\nprint(squares)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n# 1到50的奇数之和游戏\njishu_num = list(range(1, 50, 2))\nprint(sum(jishu_num))\n625\nprint(sum([jishu for jishu in range(1, 50, 2)]))\n625\n~~~\n\n### 使用列表的一部分\n\n**切片**，要使用列表的一部分，其实就是使用列表的索引。使用的方法是在调用列表时在列表名后面[0:1]，这代表列表的第一个和第二个值，就是在列表索引值0,1的值。这里面也要注意差一行为。在一个班级需要评出前三名或后三名或部分名单时，切片可以起到很好的作用。\n\n~~~python\n# 切片\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\n# 索引值1到3的元素因为差一行为，所以并不会打印索引值3的元素\nprint(players[1:3])\n['martina', 'michael']\n# 索引值0到3的元素\nprint(players[:3])\n['charles', 'martina', 'michael']\n# 索引值1到列表最后一个的元素\nprint(players[1:])\n['martina', 'michael', 'florence', 'eli']\n# 索引值0到列表最后一个的元素\nprint(players[:])\n['charles', 'martina', 'michael', 'florence', 'eli']\n# 索引值为列表最后3个的元素\nprint(players[-3:])\n['michael', 'florence', 'eli']\n# 遍历切片\nprint('下面是我们的前三名')\nfor player in players[:3]:\n    print(player.title())\n下面是我们的前三名\nCharles\nMartina\nMichael\n~~~\n\n**复制列表或列表切片**\n\n需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变，要复制列表时尽量使用切片复制。\n\n~~~python\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\n\nyuwen_win = players[:3]\nprint('语文前三名是：')\nprint(yuwen_win)\n语文前三名是：\n['charles', 'martina', 'michael']\n\nshuxue_win = players[-3:]\nprint('数学前三名是：')\nprint(shuxue_win)\n数学前三名是：\n['michael', 'florence', 'eli']\n\n# 需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变\nnew_players = players\nprint(new_players)\n['charles', 'martina', 'michael', 'florence', 'eli']\nplayers.append('AAABBB')\nprint(new_players)\n['charles', 'martina', 'michael', 'florence', 'eli', 'AAABBB']\n~~~\n\n### 元组\n\n不可以改变值的列表，称为元组（tuple），元组和列表很像，但是列表是用方括号，而元组是用圆括号。虽然不可以修改元组里面的值，但是可以通过重新赋值改变该变量。\n\n~~~python\ndimensions = (200, 50)\nprint(dimensions)\n(200, 50)\n# 遍历\ndimensions = (400, 50)\nfor i in dimensions:\n    print(i)\n400\n50\n~~~\n\n### 设置代码格式\n\n为什么要设置代码格式？\n\n代码被阅读的次数远大于编写的次数。在编写完以后的多次阅读中，良好的代码格式可以让阅读花的时间很短。\nPEP 8 是设置代码指南，它建议每级缩进4个空格。每个编辑器（IDE）都可以设置，通常（tab）使用是最多的。\n每行长度建议不超过79个字符，但这并不是不可逾越的红线，刚开始学的时候不必在意，不过养成这样的习惯后，会对以后和别人合作带来很多方便。\n空行建议：不同内容建议用一个空行隔开，不建议使用3、4或多个空行来区隔，主要是空行多了影响阅读。\n\n### 小结\n\n本章学习了如何高效的处理列表中的元素，如何使用for循环遍历列表，如何创建简单的数值列表以及对数值列表执行的一些操作。还学习了如何使用切片对列表进行操作和复制，最后还学习了元组，以及设置代码格式。\n\n## 第四章 if语句\n\n编程时经常需要检查一系列的条件，并根据此决定采取什么措施。if语句让你能够检查程序的当前状态，并采取相应的措施。每条if语句的核心都是一个值为True或False的表达式。相应的符号有：==、!=、<、>、<=、>=。关键字有：if、elif、else。在检查多个条件时会用到与、或、非：他们的关键词是：and（两个都为真）、or（一个为真）、not（条件为假）。\n\n**示例**\n\n~~~python\n# 示例\ncars = ['audi', 'bmw', 'subaru', 'toyota']\nfor car in cars:\n    if car == 'bmw':\n        print(car.upper())\n    else:\n        print(car.title())\nAudi\nBMW\nSubaru\nToyota\n~~~\n\n### 条件测试\n\n~~~python\n>>> car = 'bmw'\n# ==是相等运算符，目的是比较等式两边的值是否相等，相等就是True否则就是False\n>>> car == 'bmw'\nTrue\n>>> car == 'toyota'\nFalse\n# 检查是忽略大小写可以用到字符串的方法upper（）或title（）等等\n>>> car.upper() == 'BMW'\nTrue\n~~~\n\n**检查是否不等**，这里用的符号是 != 。\n\n~~~python\nrequested_topping = 'mushrooms'\nif requested_topping != 'anchovies':\n    print('Hold the anhovies!')\nHold the anhovies!\n~~~\n\n**数值比较**\n\n~~~python\n>>> age = 18\n>>> age == 19\nFalse\n>>> age == 18  \nTrue\n\nanswer = 17\nif answer != 42:\n    print('这个数值不是42，请再次更改变量值！')\n这个数值不是42，请再次更改变量值！\n~~~\n\n**检查多个条件**\n\n~~~python\n>>> age_0 = 21\n>>> age_1 = 18\n# and\n>>> age_0 >=21 and age_1 >=21\nFalse\n# or\n>>> age_0 >=21 or age_1 >=21  \nTrue\n\n~~~\n\n**检查某个特定的值是否在或不在列表中**\n\n~~~python\n>>> number = [1,2,3,4,5]\n>>> 5 in number\nTrue\n>>> 9 in number\nFalse\n\nnumber = [1, 2, 3, 4, 5]\nnumber_0 = 8\nif number_0 not in number:\n    print(f'{number_0}不在我们的数字列表里面。我们把他加进来吧！')\n8不在我们的数字列表里面。我们把他加进来吧！\n~~~\n\n\n\n### if 语句\n\n在了解了条件测试之后，就可以编写if 语句了，具体使用哪一种取决于测试的条件数量。\n\n**最简单的if 语句**\n\n~~~python\nage = 18\nif age >= 18:\n    print('你已经成年了。')\n你已经成年了。\n~~~\n\n**if-else语句**\n\n~~~Python\nage = 17\nif age >= 18:\n    print('你已经成年了。')\nelse:\n    print('你还是未成年。')\n你还是未成年。\n~~~\n\n**if-elif-else语句**\n\n~~~python\nage = 12\nif age < 4:\n    print('你可以免费观看电影。')\nelif age < 18:\n    print('你可以半价购买电影票。')\nelse:\n    print('你需要购买全票。')\n你可以半价购买电影票。\n# 有些情况下是可以省略else这个代码块的\nif age < 4:\n    print('你可以免费观看电影。')\nelif age < 18:\n    print('你可以半价购买电影票。')\nelif age >= 18:\n    print('你需要购买全票。')\n你可以半价购买电影票。\n~~~\n\n\n\n### 使用if 语句处理列表\n\n**检查列表里面是否有相应的元素**\n\n~~~python\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    if number == 3:\n        print('这个列表里3是中间数')\n    else:\n        print(f'这个列表里有{number}.')\n这个列表里有1.\n这个列表里有2.\n这个列表里3是中间数\n这个列表里有4.\n这个列表里有5.\n~~~\n\n**确定列表是不是空列表**，列表为空时都是返回False。\n\n~~~python\nnumbers = []\nif numbers:\n    for number in numbers:\n        print(f'adding {number}')\n    print('\\n所有数字添加了')\nelse:\n    print('好像这里面没有数字诶!')\n好像这里面没有数字诶!\n~~~\n\n**多个列表**\n\n~~~python\nnumbers_0 = [0, 1, 2, 3, 4, 5]\nnumbers_1 = [6, 7, 8, 9, 0]\nprint(numbers_0)\nprint(numbers_1)\nfor number in numbers_1:\n    if number in numbers_0:\n        print(f'这两个列表都有 {number}')\n    else:\n        print(f'第一个列表里面没有 {number} 这个数。')\n[0, 1, 2, 3, 4, 5]\n[6, 7, 8, 9, 0]\n第一个列表里面没有 6 这个数。\n第一个列表里面没有 7 这个数。\n第一个列表里面没有 8 这个数。\n第一个列表里面没有 9 这个数。\n这两个列表都有 0\n~~~\n\n### 小结\n\n本章学习了if语句以及相关的关键词和符号，也使用for循环遍历列表时对某些元素做特出处理。\n\n## 第五章 字典\n\n字典就是储存多个有两种相关信息的元素，比如姓名及其年龄，单词及其含义等，字典的信息量也不守限制。\n\n### 一个简单的字典\n\n~~~python\nalien = {'color': 'bule', 'points': 5}\nprint(alien['color'])\nprint(alien['points'])\nbule\n5\n~~~\n\n### 使用字典\n\n字典（dictionary）是一系列的**键值对**，每个键都对应一个值，字典用放在花括号{ }中的一系列键值对表示。\n\n**访问字典中的值**\n\n~~~python\nalien = {'color': 'bule', 'points': 5}\nprint(alien['color'])\nbule\n~~~\n\n**添加键值对**\n\n~~~python\nalien['x_position'] = 0\nalien['y_position'] = 25\nprint(alien）\n{'color': 'bule', 'points': 5, 'x_position': 0, 'y_position': 25}\n~~~\n\n**创建一个空字典**\n\n~~~python\nalien = {}\nalien['color'] = 'blue'\nalien['x_position'] = 0\nalien['y_position'] = 25\nprint(alien)\n{'color': 'blue', 'x_position': 0, 'y_position': 25}\n~~~\n\n**修改字典中的值**\n\n~~~python\nalien['x_position'] = 10\nprint(alien)\n{'color': 'blue', 'x_position': 10, 'y_position': 25}\n~~~\n\n**删除键值对**\n\n~~~python\nalien['speed'] = 'medium'\nprint(alien)\n{'color': 'blue', 'x_position': 10, 'y_position': 25, 'speed': 'medium'}\n# 删除键值对\ndel alien['speed']\nprint(alien)\n{'color': 'blue', 'x_position': 10, 'y_position': 25}\n~~~\n\n**由类似对象组成字典**\n\n~~~python\nfavonlie_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'swift',\n    'phil': 'python',\n}\nfor key, value in favonlie_languages.items():\n    print(f'{key.title()}喜欢使用{value.title()}语言编程！')\nJen喜欢使用Python语言编程！\nSarah喜欢使用C语言编程！\nEdward喜欢使用Swift语言编程！\nPhil喜欢使用Python语言编程！\n~~~\n\n**使用get()方法来访问值**\n\n如果你访问的值不存在字典里，你直接访问的话会出现错误，这时候可以使用get()方法来访问，这个方法可以让你在访问不存在的值的时候返回一个默认值。\n\n~~~python\nalien = {'color': 'bule', 'points': 5}\nprint(alien['speed'])\n\n发生异常: KeyError\n'speed'\n  File \"favonlie_languages.py\", line 2, in <module>\n    print(alien['speed'])\n          ~~~~~^^^^^^^^^\nKeyError: 'speed'\n\nprint(alien.get('speed', '不好意思，没有这个索引且没有对应的值'))\n不好意思，没有这个索引且没有对应的值\nalien['speed'] = 'medium'\nprint(alien.get('speed', '不好意思，没有这个索引且没有对应的值'))\nmedium\n~~~\n\n### 遍历字典\n\n遍历字典中的内容有3个基本的关键词，items()字典中的键和值，有这个方法需要两个临时变量用于遍历字典、keys()遍历字典中的键、values()遍历字典中的值。\n\n**遍历所有键值对**\n\n~~~python\nlike_number = {\n    'a': '8',\n    'b': '7',\n    'c': '5',\n    'd': '9',\n}\nfor key, value in like_number.items():\n    print(f'{key.title()} like number is {value}')\nA like number is 8\nB like number is 7\nC like number is 5\nD like number is 9\n~~~\n\n**遍历所有键**\n\n~~~python\nfavonlie_languages = {\n    'jen': 'python',\n    'sarah': 'c#',\n    'edward': 'swift',\n    'phil': 'python',\n}\n# 遍历所有键\nfor name in favonlie_languages.keys():\n    print(name.title())\nJen\nSarah\nEdward\nPhil\n\n# 按特定顺序遍历字典中的所有键\nfor name in sorted(favonlie_languages.keys()):\n    print(f'Thank you {name.title()},you are welcome!')\nThank you Edward,you are welcome!\nThank you Jen,you are welcome!\nThank you Phil,you are welcome!\nThank you Sarah,you are welcome!\n\n# 遍历字典中的所有值\nprint('编程语言')\nfor language in favonlie_languages.values():\n    print(language)\n编程语言\npython\nc#\nswift\npython\n~~~\n\n**set()**方法用于提取列表或集合中的不同元素，如果有相同的只会提取一个。\n\n~~~python\nprint('编程语言')\nfor language in set(favonlie_languages.values()):\n    print(language.title())\n编程语言\nswift\nc#\npython\n\n# 集合表现形式，一般用花括号，但里面是没有键值对的，里面的元素表现跟列表一样\n>>> number = {1,2,3,4,5,6,7,8,9,1,2,3}\n>>> number\n{1, 2, 3, 4, 5, 6, 7, 8, 9}\n~~~\n\n### 嵌套\n\n有些时候需要将多个字典储存在列表中或将列表作为值储存在字典中，这中行为就成为嵌套。\n\n**字典列表**就是在列表中储存字典可以应用于用户信息等。\n\n~~~python\nalien_0 = {'color': 'red', 'points': 5}\nalien_1 = {'color': 'green', 'points': 10}\nalien_2 = {'color': 'blue', 'points': 15}\naliens = [alien_0, alien_1, alien_2]\nfor alien in aliens:\n    print(alien)\n{'color': 'red', 'points': 5}\n{'color': 'green', 'points': 10}\n{'color': 'blue', 'points': 15}\n\n# 创建一个用于储存外星人的空列表\naliens = []\n# 用for循环创建30个绿色的外星人\nfor alien_number in range(30):\n    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}\n    aliens.append(new_alien)\n# 打印前5个外星人\nfor alien in aliens[:5]:\n    print(alien)\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n# 显示创建了多少个外星人\nprint(f'创建了多少个外星人:{len(aliens)}')\n创建了多少个外星人:30\n# 修改前三个\nfor alien in aliens[:3]:\n    if alien['color'] == 'green':\n        alien['color'] = 'yellow'\n        alien['points'] = 10\n        alien['speed'] = 'medium'\nfor alien in aliens[:5]:\n    print(alien)\n{'color': 'yellow', 'points': 10, 'speed': 'medium'}\n{'color': 'yellow', 'points': 10, 'speed': 'medium'}\n{'color': 'yellow', 'points': 10, 'speed': 'medium'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n~~~\n\n**在字典中储存列表**可以用于食品配方等\n\n~~~python\npizza = {\n    'crust': 'think',\n    'toppings': ['mushrooms', 'extra cheese']\n}\nprint(\n    f'You ordered a {pizza[\"crust\"]}-crust pizza '\"with the following toppings:\")\nfor topping in pizza['toppings']:\n    print(f'\\t{topping}')\nYou ordered a think-crust pizza with the following toppings:\n\tmushrooms\n\textra cheese\n~~~\n\n**在字典中储存字典**\n\n~~~python\nuser = {\n    'aeinstein': {\n        'first': 'albert',\n        'last': 'einstein',\n        'location': 'princeton',\n    },\n    'mcurie': {\n        'first': 'marie',\n        'last': 'curie',\n        'location': 'paris',\n    }\n}\nfor username, user_info in user.items():\n    print(f'\\nUsername: {username}')\n    full_name = f\"{user_info['first']} {user_info['last']}\"\n    location = user_info['location']\n\n    print(f'\\tFullname: {full_name.title()}')\n    print(f'\\tLocation: {location.title()}')\n\nUsername: aeinstein\n\tFullname: Albert Einstein\n\tLocation: Princeton\n\nUsername: mcurie\n\tFullname: Marie Curie\n\tLocation: Paris\n~~~\n\n### 小结\n\n本章我们学习了如何定义字典，以及如何使用储存在字典中的信息。然后学习了如何访问和修改字典中的元素，以及如何遍历字典中的信息。还学习了如何遍历字典中的所有键值对、所有的键和所有的值。学习了如何在列表中嵌套字典，在字典中如何嵌套列表，在字典中嵌套字典。\n\n## 第六章 用户输入和while循环\n\n### input()函数的工作原理\n\ninput()函数让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，以便使用。input()函数接受一个参数，即要向用户显示的提示(prompt)。用户输入的内容Python默认为字符串，要想用户输入其他内容需要再input()前面制定类型，比如：要想用户输入的是数值 int(input(\"How old are you\"))。\n**注意：**有些文本编辑器不能运行提示用户输入的程序，要运行他们需要从终端运行。在cmd终端里面直接运行python文件就可以了，**格式是**：路径>py 文件名和文件后缀。有些python版本需要使用：路径>python 文件名和文件后缀。\n\n~~~python\n>>> message = input(\"tell me something, and I will repeat it back to you:\")\ntell me something, and I will repeat it back to you: hello world\n>>> print(message)\n hello world\n>>>   \n~~~\n\n**使用int()来获取数值输入**\n\n~~~python\n# 控制用户输入的内容为数字\n>>> age = int(input(\"How old are you: \"))\nHow old are you: 36\n>>> age>20\nTrue\n~~~\n\n**求模运算**是个很有用的工具，它将两个数相除并返回余数。\n\n~~~python\nnumber = int(input(\"请输入一个数，我可以判断是奇数还是偶数：\"))\nif number % 2 == 0:\n    print(\"这个数是偶数！\")\nelse:\n    print(\"这个数是奇数！\")\n请输入一个数，我可以判断是奇数还是偶数：50\n这个数是偶数！\n~~~\n\n### while 循环简介\n\nfor 循环用于针对集合中的每个元素执行一个代码块，而 while 循环这不断地运行，只到指定的条件不再满足为止。\n\n~~~python\nnumber = 1\nwhile number <= 5:\n    print(number, end=\" \")\n    number += 1\n1 2 3 4 5\n~~~\n\n**让用户选择何时退出**\n\n~~~python\n# 只要用户输入的不是‘quit’和‘exit’该循环就继续运行。\nprompt = \"我们来玩个游戏，看看你知不知道怎么退出这个游戏: \"\nmessage = \"\"\nwhile message != \"quit\" or message != \"exit\":\n    # 这里添加了一个lower方法目的是让用户输入的内容都变成小写和下面的if进行判断。\n    message = input(prompt).lower()\n    if message == \"quit\" or message == \"exit\":\n        print(\"恭喜你！\")\n        break\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: 2\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: 3\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: ExiT\n恭喜你！\n\n# 使用标志让用户选择何时退出\nprompt = \"我们来玩个游戏，看看你知不知道怎么退出这个游戏: \"\nactive = True\nwhile active:\n    message = input(prompt).lower()\n    if message == \"quit\" or message == \"exit\":\n        print(\"恭喜你！\")\n        active = False\n    else:\n        print(\"再想想退出的英文是什么？\")\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: qwe\n再想想退出的英文是什么？\n我们来玩个游戏，看看你知不知道怎么退出这个游戏: QUIT\n恭喜你！\n~~~\n\n**break 退出循环**，不管条件满不满足，想立即退出 while 循环，不再运行后面的代码，可以使用 break 语句。上面的例子已经使用过一次了。我们再使用一个特别的例子。break 还可以用来退出遍历列表或字典的 for 循环。\n\n~~~python\nwhile True:\n    message = input(\"请你说说你喜欢哪个城市: \").lower()\n    if message == \"quit\" or message == \"exit\":\n        print(\"再见！\")\n        break\n    else:\n        print(f\"除了{message.title()}还有其他的城市么？\")\n请你说说你喜欢哪个城市: shang hai\n除了Shang Hai 还有其他的城市么？\n请你说说你喜欢哪个城市: QUIT\n再见！\n~~~\n\n**在循环中使用 continue** \n\n要返回循环的开头，并根据条件测试的结果决定是否继续执行循环，可以使用 continue 语句，他不像 break 那样不执行余下的代码并退出整个循环。\n\n~~~python\nnumber = 0\nwhile number < 10:\n    number += 1\n    if number % 2 == 0:\n        continue\n    print(number, end=\" \")\n1 3 5 7 9 \n~~~\n\n**避免无线循环**\n\nwhile 循环一定要设置退出条件，如果没有退出条件，while 循环就会无止境的一直执行代码。\n\n~~~python\nnumber = 0\nwhile number < 5:\n    print(number)\n~~~\n\n### 使用 while 循环处理列表和字典\n\nfor 循环是一种遍历列表的有效方式，但不应该在 for 循环中修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时修改它，可使用 while 循环。通过将 while 循环与列表和字典结合起来使用，可收集、存储并组织大量的输入，供以后查看和使用。**注意**，这里有个有意思的事情，就是列表里面是空的时候它的布尔值是 False ，列表里面有元素的时候，它的布尔值是 True 。\n\n**在列表之间移动元素**\n\n~~~python\n# 首先创建一个待验证的用户列表\n# 和一个用户储存已验证用户的空列表\nunconfirmed_users = ['admin', 'zqten', 'candace']\nconfirmed_users = []\n# 验证每个用户，直到没有未验证的用户为止\n# 将每个经过验证的用户添加到已验证用户列表中\nwhile unconfirmed_users:\n    current_user = unconfirmed_users.pop()\n    print(f'Verifying user: {current_user.title()}')\n    confirmed_users.append(current_user)\n# 显示所有的已验证的用户\nprint('\\nThe following users have been confirmed:')\nfor confirmed_user in confirmed_users:\n    print(confirmed_user.title())\n    \nVerifying user: Candace\nVerifying user: Zqten\nVerifying user: Admin\n\nThe following users have been confirmed:\nCandace\nZqten\nAdmin\n~~~\n\n**删除为特定值的所有列表元素**\n\n~~~python\n# 删除为特定值的所有列表元素\npets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\nprint(pets)\nwhile 'cat' in pets:\n    pets.remove('cat')\nprint(pets)\n['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\n['dog', 'dog', 'goldfish', 'rabbit']\n~~~\n\n**使用用户输入填充字典**\n\n可以使用 while 循环提示用户输入任意多的信息。\n\n~~~python\n# 使用用户输入填充字典\nresponses = {}\n# 设置一个标志，指出调查是否继续\npolling_active = True\nprint('这是调查每个人的爱好，请根据提示输入。')\nwhile polling_active:\n    # 提示输入被调查者的名字和回答\n    name = input(\"请输入被调查者的名字：\")\n    response = input(\"请输入被调查者的回答：\")\n    # 将输入的数据储存在字典中\n    responses[name] = response\n    # 询问用户是否继续调查\n    repeat = input(\"是否有人继续参与调查？（yes/no）\")\n    if repeat == 'no':\n        polling_active = False\n    # 下面这段代码的目的是让用户输入yes和no，输入其他的会提示错误，如果是只判断退出循环条件的话，可以省略下面。\n    elif repeat == 'yes':\n        continue\n    else:\n        while repeat != 'yes' or repeat != 'no':\n            if repeat == 'no':\n                polling_active = False\n                break\n            elif repeat == 'yes':\n                break\n            else:\n                print(\"输入错误，请重新输入\")\n                repeat = input(\"是否有人继续参与调查？（yes/no）\")\n        if repeat == 'no':\n            polling_active = False\n\n# 输出调查结果\nprint('\\n---调查结果---')\nfor name, response in responses.items():\n    print(f\"{name}的爱好是: {response}。\")\n\n这是调查每个人的爱好，请根据提示输入。\n请输入被调查者的名字：刘翔\n请输入被调查者的回答：跨栏\n是否有人继续参与调查？（yes/no）不知道\n输入错误，请重新输入\n是否有人继续参与调查？（yes/no）yes\n请输入被调查者的名字：姚明\n请输入被调查者的回答：篮球\n是否有人继续参与调查？（yes/no）不知道\n输入错误，请重新输入\n是否有人继续参与调查？（yes/no）no\n\n---调查结果---\n刘翔的爱好是: 跨栏。\n姚明的爱好是: 篮球。\n~~~\n\n### 小结\n\n本章学习了如何在程序中使用 input() 来让用户提供信息，如何处理文本和数的输入，以及如何使用 while 循环让程序按用户的要求不断地运行。然后见识了多种控制 while 循环流程的方式：设置活动标志，使用 break 语句，以及使用 continue 语句。还学习了如何使用 while 循环在列表之间移动元素，以及如何从列表中删除所有包含特定值的元素。最后，学习了如何结合使用 while 循环和字典。\n\n## 第七章 函数\n\n函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用（call）该函数。当需要再程序中多次执行同一项任务时，无须反复编写完成该任务的代码，只需要调用执行该任务的函数，让Python运行其中的代码即可。\n\n### 定义函数\n\n定义函数的关键字是 def 。后面是函数名和括号，没有参数时可以是空括号，然后和 for 、while 一样也需要冒号，表示定义完成，换行后缩进表示要执行的代码块。\n\n~~~python\ndef greet_user():\n    '''显示简单的问候语'''\n    print(\"Hello World!\")\n\ngreet_user()\nHello World!\n~~~\n\n**向函数传递信息**\n\n~~~python\ndef greet_user(uesrname):\n    '''显示简单的问候语'''\n    print(f\"Hello,{uesrname}!\")\n\n\ngreet_user('zqten')\nHello,zqten!\n~~~\n\n**实参和形参**\n\n在上面的例子中，uesrname是一个形参，即函数完成工作所需要的信息。\n而 'zqten' 则是实参，即在调用函数时传递给函数的信息。\n\n### 传递实参\n\n传递实参有两种方式，一种是按照位置顺序传递，另一种是按照关键字传递。按照关键字传递实参不用考虑顺序，但要记得关键字。\n\n~~~python\ndef describe_pet(animal_type, pet_name: str):\n    '''显示宠物信息'''\n    print(f'\\nI have a {animal_type}.')\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n    \n# 按位置顺序传递实参\ndescribe_pet('cat', 'duoduo')\nI have a cat.\nMy cat's name is Duoduo.\n\n# 按关键字传递实参\ndescribe_pet(pet_name='nai cha', animal_type='dog')\nI have a dog.\nMy dog's name is Nai Cha.\n~~~\n\n**默认值**\n\n有些时候你想改变某个参数，但有些时候你想让这个参数先有一个默认值，后面调用的时候看情况是否修改。这种情况可以为参数设置一个默认值。如果没有设置默认值，在调用的时候也没有传递参数 Python 就会报错。\n\n~~~python\ndef describe_pet(animal_type='cat', pet_name='duo duo'):\n    '''显示宠物信息'''\n    print(f'\\nI have a {animal_type}.')\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n# 有默认值的情况下，可以不用传递参数，也可以看需要传递\ndescribe_pet()\nI have a cat.\nMy cat's name is Duo Duo.\n\ndescribe_pet('dog', 'nai cha')\nI have a dog.\nMy dog's name is Nai Cha.\n~~~\n\n### 返回值\n\n函数并非总是直接显示输出，它还可以处理一些数据，并返回一个或一组值，函数返回的值称为返回值。在函数中 **return** 语句将值返回到调用函数的那行代码，返回值能让你将程序的大部分繁重工作移到函数中，从而简化程序。\n\n**返回简单的值**\n\n~~~python\ndef get_formatted_name(first_name, last_name):\n    '''返回标准格式的姓名'''\n    full_name = f'{first_name} {last_name}'\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\nJimi Hendrix \n~~~\n\n**让实参变成可选**\n\n就是先设置参数的默认值，但这个默认值是一个空值。不需要的时候就不会出现，需要的时候只需要在调用的时候传递一个参数就可以。\n\n~~~python\ndef get_formatted_name(first_name, last_name, middle_name=''):\n    '''返回标准格式的姓名'''\n    full_name = f'{first_name} {last_name} {middle_name}'\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\nJimi Hendrix \n\nmusician = get_formatted_name('jimi', 'hendrix', 'YYY')\nprint(musician)\nJimi Hendrix Yyy\n~~~\n\n**返回字典**\n\n这里有个小小的细节，就是 age=None 是一个布尔值并且是 False 。意思就是这个参数并没有值返回 False 。如果为这个参数传递了一个值，它就返回 True 。\n\n~~~python\ndef build_person(first_name, last_name, age=None):\n    '''返回一个字典，其中包含一个人的信息'''\n    person = {'first': first_name, 'last': last_name}\n    if age:\n        person['age'] = age\n    return person\n\nmusician = build_person('jimi', 'hendeix')\nprint(musician)\n{'first': 'jimi', 'last': 'hendeix'}\n\nmusician = build_person('jimi', 'hendeix', age=36)\nprint(musician)\n{'first': 'jimi', 'last': 'hendeix', 'age': 36}\n~~~\n\n**结合使用函数和 while 循环**\n\n~~~python\ndef get_formatted_name(first_name, last_name, middle_name=''):\n    '''返回标准格式的姓名'''\n    full_name = f'{first_name} {last_name} {middle_name}'\n    return full_name.title()\n\nwhile True:\n    print('\\nPleasr tell me your name:')\n    print(\"(enter 'q' at any time to quit.)\")\n\n    f_name = input(\"你姓什么：\")\n    if f_name == 'q':\n        break\n    l_name = input(\"你的名字是什么：\")\n    if l_name == 'q':\n        break\n\n    full_name = get_formatted_name(f_name, l_name)\n    print(f\"你好, {full_name}\")\n\nPleasr tell me your name:\n(enter 'q' at any time to quit.)\n你姓什么：yao\n你的名字是什么：ming\n你好, Yao Ming \n\nPleasr tell me your name:\n(enter 'q' at any time to quit.)\n你姓什么：q\n~~~\n\n### 传递列表\n\n将列表传递给函数后，函数就能直接访问其内容，进行修改等等操作。\n\n~~~python\ndef greet_users(names):\n    '''向列表中的每个用户发出简单的问候'''\n    for name in names:\n        print('Hello, %s!' % name)\n\nusername = ['zqten', 'zhengjizhong', 'zhengkainan', 'zhouhuarong']\ngreet_users(username)\n\nHello, zqten!\nHello, zhengjizhong!\nHello, zhengkainan!\nHello, zhouhuarong!\n~~~\n\n**在函数中修改列表**这个程序演示了一个概念：每个函数都应只负责一项具体工作。这有助于将复杂的任务分解成一系列简单的步骤。\n\n~~~python\nunprinted_designs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncompleted_models = []\n\ndef print_models(unprinted_designs, completed_models):\n    '''\n    模拟打印每个数字，直到没有未打印的数字为止\n    打印每个数字后，都将其移到列表completed_models中\n    '''\n    while unprinted_designs:\n        current_design = unprinted_designs.pop(0)\n        print('Printing model: %s' % current_design)\n        completed_models.append(current_design)\n\ndef show_completed_models(completed_models):\n    '''显示打印好的所有数字'''\n    print('\\nThe following models have been printed:')\n    for completed_model in completed_models:\n        print(completed_model, end=' ')\n\nprint_models(unprinted_designs, completed_models)\nshow_completed_models(completed_models)\nprint(unprinted_designs)\n\nPrinting model: 1\nPrinting model: 2\nPrinting model: 3\nPrinting model: 4\nPrinting model: 5\nPrinting model: 6\nPrinting model: 7\nPrinting model: 8\nPrinting model: 9\nPrinting model: 10\n\nThe following models have been printed:\n1 2 3 4 5 6 7 8 9 10 []\n# 如果不希望传递后列表为空，可以使用副本传递参数 [:] 切片传递\nprint_models(unprinted_designs[:], completed_models)\nshow_completed_models(completed_models)\nprint(unprinted_designs)\n\nPrinting model: 1\nPrinting model: 2\nPrinting model: 3\nPrinting model: 4\nPrinting model: 5\nPrinting model: 6\nPrinting model: 7\nPrinting model: 8\nPrinting model: 9\nPrinting model: 10\n\nThe following models have been printed:\n1 2 3 4 5 6 7 8 9 10 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n~~~\n\n### 传递任意数量的参数\n\n“ * ” 带形参名中的星号让Python创建一个名为形参名的元组，该元组包含函数收到的所有值。\n\n~~~python\ndef make_pizza(*toppings):\n    '''比如概述要制作的披萨'''\n    print('\\nMaking a pizza with the following toppings:')\n    for topping in toppings:\n        print(topping)\n\nmake_pizza('aaa')\nmake_pizza('mushrooms', 'extra cheese')\n\nMaking a pizza with the following toppings:\naaa\n\nMaking a pizza with the following toppings:\nmushrooms\nextra cheese\n~~~\n\n**结合使用位置实参和任意数量的实参**\n\n如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置和关键字实参，再将余下的实参都收集到最后一个形参中。\n\n~~~python\ndef make_pizza(size, *toppings):\n    '''比如概述要制作的披萨'''\n    print(f'\\nMaking a {size}-inch pizza with the following toppings:')\n    for topping in toppings:\n        print(f'- {topping}')\n\nmake_pizza(16, 'aaa')\nmake_pizza(19, 'mushrooms', 'extra cheese')\n\nMaking a 16-inch pizza with the following toppings:\n- aaa\n\nMaking a 19-inch pizza with the following toppings:\n- mushrooms\n- extra cheese\n~~~\n\n**使用任意数量的关键字实参**\n\n“ ** ” 带形参名中的两个星号让Python创建一个名为形参名的字典，该字典包含函数收到的所有的键值对。\n\n~~~python\ndef build_profile(first, last, **user_info):\n    '''创建一个字典，其中包含我们知道的有关用户的一切'''\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile(\n    'zheng', 'ji zhong', age=11, height='147cm', weight='48kg')\nprint(user_profile)\n{'age': 11, 'height': '147cm', 'weight': '48kg', 'first_name': 'zheng', 'last_name': 'ji zhong'}\n~~~\n\n### 将函数存储在模块中\n\n将函数存储在称为模块的独立文件中，再将模块导入（import）主程序。可以让代码看起来容易理解。\n\n**导入整个模块**\n\n要让函数是可导入的，得先创建模块。模块是扩展名为 .py 的文件。\n\n~~~python\nimport pizza\npizza.make_pizza(12, 'zhu rou')\npizza.make_pizza(17, 'niu rou', 'bai cai')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 17-inch pizza with the following toppings:\n- niu rou\n- bai cai\n~~~\n\n**导入特定的函数**\n\n只想导入模块中的特定函数。\n\n~~~python\nfrom pizza import make_pizza\n\nmake_pizza(12, 'zhu rou')\nmake_pizza(16,'niu rou', 'bai cai')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n~~~\n\n**使用 as 给函数指定别名**\n\n如果要导入的函数的名称太长或者可能与程序中的其他名称有冲突，可指定简短而独一无二的别名。这个方法也可以应用到给模块指定别名。\n\n~~~python\nfrom pizza import make_pizza as mp\n\nmp(12, 'zhu rou')\nmp(16, 'niu rou', 'bai cai', 'fanqie')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n- fanqie\n\n# 也可以给模块指定别名\nimport pizza as p\n\np.make_pizza(12, 'zhu rou')\np.make_pizza(16, 'niu rou', 'bai cai', 'fanqie')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n- fanqie\n\n~~~\n\n**导入模块中的所有函数**\n\n这种方法一般慎用，因为如果模块中有函数的名称与当前项目中的名称相同，可能导致意想不到的结果。**最好的做法是要么只导入需要使用的函数，要么导入整个模块并使用点号调用**。\n\n~~~python\nfrom pizza import *\n\nmake_pizza(12, 'zhu rou')\nmake_pizza(16, 'niu rou', 'bai cai', 'fanqie')\n\nMaking a 12-inch pizza with the following toppings:\n- zhu rou\n\nMaking a 16-inch pizza with the following toppings:\n- niu rou\n- bai cai\n- fanqie\n\n# 导入其他文件夹的模块\nfrom 文件夹名称 import 模块\nfrom 文件夹名称.模块 import 函数\n~~~\n\n### 函数编写指南\n\n在编写函数时需要牢记几个细节。\n\n* 应给函数指定描述性的名称，且只使用小写字母和下划线。\n* 每个函数都应包含简要阐述其功能的注释。意思就是每个函数都需要编写使用说明的注释。\n* 形参指定默认值时，等号两边不要有空格。\n* 如果程序或模块包含多个函数，可以使用两个空行将函数隔开。\n* 所有的 import 语句都应该放在文件开头。唯一的例外是，你要在文件开头编写整个程序的注释。\n* 导入自己边学的模块时，尽量把模块和程序放在一个文件夹。\n\n### 小结\n\n本章学习了如何编写函数，以及如何传递实参，让函数能够访问完成工作所需的信息。然后学习了如何使用位置实参和关键字实参，以及如何接受任意数量的实参，学习了显示输出的函数和返回值的函数，知道了如何将函数与列表、字典、if、语句和 while 循环结合起来使用，以及如何将函数存储在称为模块的独立文件中，让程序文件更简单、更易于理解。最后，了解了函数编写指南，遵循这些指南可让程序始终保持良好的结构。\n程序员的目标之一是编写简单的代码来完成任务，而函数有助于实现这样的目标。\n\n## 第八章 类\n\n面向对象编程（object-oriented-programming, OOP）是最有效的软件编写方法之一。在基于类创建对象时，每个对象都自动具备类定义的通用行为。然后，你可根据需要赋予每个对象独特的个性。根据类来创建对象称为**实例化**，这让你能够使用类的实例。\n\n面相对象变成有助于你像程序员那样看世界，并且真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维能力，让你能够通过编写程序来解决遇到的几乎任何问题。\n\n### 创建和使用类\n\n**创建Dog类**\n\n~~~python\n# 创建Dog类\nclass Dog:\n    '''模拟小狗的简单尝试'''\n\n    def __init__(self, name, age):\n        '''初始化属性name和age'''\n        self.name = name\n        self.age = age\n\n    def sit(self):\n        '''模拟小狗坐下'''\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        '''模拟小狗打滚'''\n        print(f\"{self.name} rolled over.\")\n~~~\n\n“__init__()”方法是类的初始化方法，类中的函数称为方法。这个方法的开头和结尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。\n这个方法定义成包含三个形参：self 、name、age。这个方法中self 是必不可少，而且必须位于其他形参的前面。self就是类的自身，当我们实例化这个类时，我们传递的参数会通过 self 传递给类自身。self.name = name 里面 self 前缀的变量可供类中的所有方法使用。\n\n**根据类创建实例**\n\n可以将类视为有关如何创建实例的说明。:yum:\n\n~~~python\n# 创建实例\nmy_dog = Dog('duoduo', 7)\n# my_dog.name 就是访问实例的属性\nprint(f\"My dog's name is {my_dog.name}\")\nprint(f\"My dog's age is {my_dog.age}\")\n\nMy dog's name is duoduo\nMy dog's age is 7\n# 调用方法\nmy_dog.sit()\nmy_dog.roll_over()\n\nduoduo is now sitting.\nduoduo rolled over.\n# 创建多个实例\nyour_dog = Dog('Lucy', 4)\nprint(f\"Your dog's name is {your_dog.name}\")\nprint(f\"Your dog's age is {your_dog.age}\")\nyour_dog.sit()\n\nYour dog's name is Lucy\nYour dog's age is 4\nLucy is now sitting.\n~~~\n\n### 使用类和实例\n\n**Car 类**\n\n~~~python\n# Car类\nclass Car:\n    '''模拟汽车的简单尝试'''\n\n    def __init__(self, make, model, year):\n        '''初始化描述汽车属性'''\n        self.make = make\n        self.model = model\n        self.year = year\n# 给属性默认值\n        self.odometer = 0\n        self.oli = 240\n\n    def get_descriptive_name(self):\n        '''返回格式规范的描述性信息'''\n        long_name = f\"{self.year}年 {self.make}生产{self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        '''返回汽车里程数'''\n        print(f\"这两车已经行驶了{self.odometer}公里了。\")\n        return self.odometer\n\n    def update_odometer(self, mileage):\n        '''设置汽车里程数'''\n        if mileage >= self.odometer:\n            self.odometer = mileage\n            print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        else:\n            print(\"你不能往回设置公里数\")\n\n    def increment_odometer(self, mileage):\n        '''增加汽车里程数'''\n        self.odometer += mileage\n        print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        \n    def car_oli_v(self, oli):\n        '''描述车辆油箱的容积'''\n        self.oli = oli\n        print(f'这辆车的油箱容积是{self.oli}L.')\n\nmy_new_car = Car('奥迪汽车公司', '奥迪A4', '2003')\nprint(my_new_car.get_descriptive_name())\n# 修改属性值\nmy_new_car.odometer = 1\nmy_new_car.read_odometer()\n# 通过方法修改属性值\nmy_new_car.update_odometer(34)\nmy_new_car.increment_odometer(12)\nmy_new_car.update_odometer(12)\n\n2003年奥迪汽车公司生产奥迪A4\n这两车已经行驶了1公里了。\n这两车已经行驶了34公里了。\n这辆车已经行驶了46公里了。\n你不能往回设置公里数\n~~~\n\n### 继承\n\n编写类的时候并非总是要从头开始，如果要编写的类是一个已经存在的类的特殊版本，可以使用**继承**。当一个类继承另一个类时，将自动获得后者的素有属性和方法。原有类称为**父类**，而新的类称为**子类**。子类不仅继承了父类的所有属性和方法，还可以定义自己的属性和方法。\n\n**子类初始化方法**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\n\n2024年Nissan生产Leaf\n~~~\n\n**给子类定义属性和方法**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery_size = 40\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        print(f'This car has a {self.battery_size}-KWh battery.')\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\nmy_leaf.describe_battery()\n\n2024年Nissan生产Leaf\nThis car has a 40-KWh battery.\n~~~\n\n**重写父类中的方法**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery_size = 40\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        print(f'This car has a {self.battery_size}-KWh battery.')\n\n    def car_oli_v(self):\n        '''电动汽车没有油箱'''\n        print(\"电动汽车没有油箱\")\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\nmy_leaf.describe_battery()\nmy_leaf.car_oli_v()\n\n2024年Nissan生产Leaf\nThis car has a 40-KWh battery.\n电动汽车没有油箱\n~~~\n\n**将实例用作属性**\n\n~~~python\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery = Battery()\n\n    def car_oli_v(self):\n        '''电动汽车没有油箱'''\n        print(\"电动汽车没有油箱\")\n\n\nclass Battery:\n    def __init__(self, battery_size=40):\n        '''初始化电池的属性'''\n        self.battery_size = battery_size\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        print(f'This car has a {self.battery_size}-KWh battery.')\n\n\nmy_leaf = ElectricCar('nissan', 'leaf', '2024')\nprint(my_leaf.get_descriptive_name())\nmy_leaf.battery.describe_battery()\n\n2024年Nissan生产Leaf\nThis car has a 40-KWh battery.\n~~~\n\n### 导入类\n\n主要目的是让文件整洁，我们可以将类存储在模块中，然后在主程序导入所需的模块。我们需要整理一下代码，把上面我们学的三个类都复制到一个文件，命名为 car.py 。\n\n~~~python\n# Car类\nclass Car:\n    '''模拟汽车的简单尝试'''\n\n    def __init__(self, make, model, year):\n        '''初始化描述汽车属性'''\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer = 0\n\n    def get_descriptive_name(self):\n        '''返回格式规范的描述性信息'''\n        long_name = f\"{self.year}年{self.make}生产{self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        '''返回汽车里程数'''\n        print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        return self.odometer\n\n    def update_odometer(self, mileage):\n        '''设置汽车里程数'''\n        if mileage >= self.odometer:\n            self.odometer = mileage\n            print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        else:\n            print(\"你不能往回设置公里数\")\n\n    def increment_odometer(self, mileage):\n        '''增加汽车里程数'''\n        self.odometer += mileage\n        print(f\"这辆车已经行驶了{self.odometer}公里了。\")\n        \n# 电池模组\nclass Battery:\n    def __init__(self, battery_size=40, car_model_isoli=False):\n        '''初始化电池的属性'''\n        self.battery_size = battery_size\n        '''默认是电动汽车,如果是汽油车可以设置会Ture.'''\n        self.car_model_isoli = car_model_isoli\n\n    def describe_battery(self):\n        '''打印一条描述电池容量的消息'''\n        if self.car_model_isoli is True:\n            print('这是一辆油车，没有电池.')\n        else:\n            print(f'This car has a {self.battery_size}-KWh battery.')\n\n    def update_battery(self):\n        '''升级电池容量'''\n        if self.battery_size != 65:\n            self.battery_size = 65\n\n    def get_range(self):\n        '''打印一条消息，指出汽车的续航里程'''\n        if self.battery_size == 40:\n            range = 150\n        elif self.battery_size == 65:\n            range = 225\n        print(f'这辆车的续航里程为{range}公里.')\n\n# 电动车\nclass ElectricCar(Car):\n    '''模拟电动汽车'''\n\n    def __init__(self, make, model, year):\n        '''初始化父类属性,在初始化电动汽车特有的属性'''\n        super().__init__(make, model, year)\n        self.battery = Battery()\n~~~\n\n**导入单个类**\n\n~~~python\nfrom car import Car\n~~~\n\n**导入多个类**\n\n~~~python\nfrom car import Car, ElectricCar\n~~~\n\n**导入整个模块**\n\n这里我把上面的代码分成了两个文件，Car类单独储存成 car.py ，电池模组和电动车储存为 electric_car.py 。\n\n~~~python\nimport car\n# 用法就是用点引用该模块的类\nmy_car = car.Car(\"柳州五菱\", \"五菱之光\", 2008)\n\n# 还有下面这种方法，但是不推荐用，因为可能会引起很多难以诊断的错误，比如出现同名的类\n# 这种方法是导入模块的所有类\nfrom car import *\n~~~\n\n**使用别名**\n\n就是给导入的模块或类更改使用名，这并不会影响该模块和类的代码。\n\n~~~python\n# 给模块使用别名\nimport electric_car as ec\n# 给类使用别名\nfrom electric_car import ElectricCar as EC\n~~~\n\n### 合适的工作流程\n\n首先尝试在一个文件中完成所有工作，确定一切都能正确运行后，在将类移到独立的模块中。\n\n这里讲一下 **VMC** 模式：\n\n- V： 就是视窗，用户界面等可视化的代码。\n- M：就是模块或类等等的代码。\n- C：就是整个程序的运行逻辑，流程控制等等的代码。\n\n这个模式可以简单的理解为建立三个文件夹，分别存放这三种类型的文件。这样可以让自己的代码更加简洁高效，别人理解也更容易。\n\n### Python标准库\n\nPython标准库是一组模块，在安装Python时已经包含在内了。我们可以使用标准可中的任何函数和类。查看Python标准库，可以在命令行输入  **help(\"modules\")** 命令。\n\n~~~python\n# 随机数模组，返回两个数之间的随机一个数。\n>>> from random import randint\n>>> randint(1,6)\n4   \n# 返回一个列表里随机一个元素\n>>> from random import choice \n>>> players = ['aaa','bbb','ccc','ddd']\n>>> choice(players)\n'ccc'\n~~~\n\n### 类的编程风格\n\n编写复杂程序时采用以下几项：\n\n- 类名：驼峰命名法。例：MyNewCar 。类名不使用下划线。\n- 模块名和实例名都采用全小写格式，并在单词之间采用下划线。\n- 每个类都要在定义后面和函数一样需要描述类功能的文档字符串。\n- 当需要导入标准库中的模块和自己编写的模块时，优先导入标准库中的模块，在导入自己编写的模块。\n\n### 小结\n\n本章我们学习了如何编写类，如何使用属性在类中存储的信息，以及如何编写方法让类具备所需的行为。然后学习了 init 初始化方法。了解了如何修改实例的属性，包括直接修改以及通过方法修改。还了解到使用继承可简化相关类的创建工作，将一个类的实例用作另一个类的属性能让类更简洁。\n明白了，通过将类存储在模块（文件）中，并在需要使用这些类的文件中导入它们，可让项目变的更简洁。开始了解python标准库，还看了一个random模块，最后学习了编写类时应遵循的Python约定。\n\n## 第九章 文件和异常\n\n处理文件，让程序能够快速地分析大量数据；错误处理，避免程序在面对意外情况时崩溃；异常是Python创建特殊对象，用于管理程序运行时出现的错误；还将学习使用 json 模块保存用户数据，以免这些数据在程序结束运行后丢失。\n\n### 读取文件\n\n读取文件对数据分析应用程序很有用。要使用文本文件中的信息，首先需要将信息读取到内存中。既可以一次性读取文件的全部内容，也可以逐行读取。\n\n**读取文件的全部内容**\n\n~~~tex\n# 这是一个txt文件\n3.1415926535\n  8979323846\n  2643383279\n~~~\n\n~~~python\n# 读取文件\nfrom pathlib import Path\n# 这里值得注意的是VScode里面用的斜杠是反的\npath = Path(\"E:/text_files/pi_digits.txt\")\ncontents = path.read_text()\n# 删除文档中的空格\n# contents = contents.strip()\nprint(contents)\n\n3.1415926535\n  8979323846\n  2643383279\n~~~\n\n**相对文件路径和绝对文件路径**\n\n**相对文件路径**让 Python 到相对于当前运行的程序所在目录的指定位置去查找。比如上面的文件可以这样读取\n\n~~~python\nfrom pathlib import Path\npath = Path(\"text_files/pi_digits.txt\")\n~~~\n\n**绝对文件路径**可以读取系统中任何地方的文件。\n\n~~~python\nfrom pathlib import Path\npath = Path(\"E:/text_files/pi_digits.txt\")\n~~~\n\n现在最简单的做法是，要么将数据文件存储在程序文件所在的目录中，要么将其存储在存续文件所在目录下的一个文件夹中。\n\n**注意**：在显示文件路径时，windows 系统使用反斜杠（ \\ ）而不是斜杠（ / ）但是你在代码中应该始终使用斜杠（ / ），即便在windows系统中也是如此。在与你或其他用户的系统交互时，pathlib 库会自动使用正确的路径表示方法。\n\n**访问文件中的各行**\n\n使用 **splitlines()** 方法可以将字符串转换为一系列行，在使用 for 循环遍历文件中的每一行，splitlines() 方法返回一个列表，其中包含文件中所有的行。可以把这个列表赋值给变量。\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"E:/text_files/pi_digits.txt\")\ncontents = path.read_text()\nlines = contents.splitlines()\n\nfor line in lines:\n    print(line)\n\n3.1415926535\n  8979323846\n  2643383279\n~~~\n\n**使用文件的内容**\n\n读取文件后才能使用这些数据。\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"E:/text_files/pi_digits.txt\")\ncontents = path.read_text()\npi_string = ''\nlines = contents.splitlines()\nfor line in lines:\n    pi_string += line\n\nprint(pi_string)\nprint(len(pi_string))\n3.1415926535  8979323846  2643383279\n36\n\n# 删除左边空格\n--snip--\nfor line in lines:\n    pi_string += line.lstrip()\n\nprint(pi_string)\nprint(len(pi_string))\n3.141592653589793238462643383279\n32\n~~~\n\n**注意**：读取文本文件时，python 将其中的所有文本都解释为字符串。如果读取的是数，并且要将其作为数字使用，就必须使用 int() 函数将其转换为整数，或者使用 float() 函数将其转为浮点数。\n\n**大型文件**可以做切片等列表的操作。\n\n~~~python\n--snip--\nfor line in lines:\n    pi_string += line.lstrip()\n\nprint(pi_string[:10])\nprint(len(pi_string))\n3.14159265\n32\n~~~\n\n**趣味小练习**\n\n~~~python\n# 圆周率中包含你的生日吗\nfrom pathlib import Path\n\npath = Path(\"pi_million_digits.txt\")\ncontents = path.read_text()\n\npi_string = ''\nlines = contents.splitlines()\nfor line in lines:\n    pi_string += line.strip()\n\nbirthday = input(\"你的生日如(20200506):\")\nif birthday in pi_string:\n    print(\"圆周率包含了你的生日\")\nelse:\n    print(\"圆周率没有你的生日哦...\")\n    \n你的生日如(20200506):20200506\n圆周率没有你的生日哦...\n~~~\n\n### 写入文件\n\n保存数据的最简单的方式之一是将其写入文件。\n\n**写入一行**\n\n**注意**：在python调用 **write_text()** 方法时，如果指定文件已存在，这个方法会将其内容**替换**为你要写入的内容。**replace()**方法可以将字符串中的特定单词替换为另一个单词。\n\n~~~python\n# 写入一行文字\nfrom pathlib import Path\npath = Path('programming.txt')\npath.write_text(\"hello world\")\n\nprogramming.txt\nhello world\n# 替换字符串 replace()\n>>> a = 'How are you?'\n>>> a.replace('you','me')\n'How are me?'\n~~~\n\n**注意**：Python 只能将字符串写入文本，如果要将数值数据存储到文本文件中，须使用 str() 函数将其转换为字符串格式。\n\n**写入多行**\n\n~~~python\nfrom pathlib import Path\npath = Path('programming.txt')\ncontents = \"nihao\"\ncontents += \"\\nwohao\"\ncontents += \"\\ndajiahao\"\npath.write_text(contents)\n\nprogramming.txt\nnihao\nwohao\ndajiahao\n~~~\n\n**趣味小练习**\n\n~~~python\n# 重复写入多个词语\nfrom pathlib import Path\npath = Path(\"guest.txt\")\nn = 0\nc = ''\nwhile n != 5:\n    b = input(\"请输入内容：\")\n    c += f\"{b}\\n\"\n    n += 1\n    path.write_text(f\"{c}\", encoding='utf-8')\n~~~\n\n### 异常\n\n异常是使用 try-except 代码块处理的。也就是说你运行一段代码，如过出错了会根据你编写的代码执行，如果没有对异常进行处理，程序出错了就会停止。**如果你运行一段代码出错，编辑器会提示你是什么错误，你可以针对这个错误给出处理方法，就像下面的 0 不能作为除数的错误是：ZeroDivisionError**\n\n~~~python\nprint(5/0)\nZeroDivisionError: division by zero\n~~~\n\n**使用 try-except 代码块**\n\n当你认为可能会发生错误的时候，可以使用这个代码块来处理可能引发的错误。\n\n~~~python\ntry:\n    print(5/0)\nexcept ZeroDivisionError:\n    print(\"0不能作为除数。\")\n    \n0不能作为除数。\n~~~\n\n**处理 FileNotFoundError 异常**\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"alice.txt\")\ntry:\n    contents = path.read_text(encoding='utf-8')\nexcept FileNotFoundError:\n    print(\"没有找到这个文件。\")\n\n没有找到这个文件。\n~~~\n\n**分析文本**\n\nsplit() 方法是把一个很长的字符串转换成很多单词的列表的一个方法。\n\n~~~python\nfrom pathlib import Path\n\npath = Path(\"alice.txt\")\ntry:\n    contents = path.read_text(encoding='utf-8')\nexcept FileNotFoundError:\n    print(\"没有找到这个文件。\")\nelse:\n    # 计算文件大概包含多少个单词\n    words = contents.split()\n    num_words = len(words)\n    print(f\"The file {path} has about {num_words} words\")\n~~~\n\n**读取多个文件**\n\n利用函数我们可以读取多个文件\n\n~~~python\nfrom pathlib import Path\n\ndef count_words(path):\n    try:\n        contents = path.read_text(encoding='utf-8')\n    except FileNotFoundError:\n        print(f\"没有找到{path}这个文件。\")\n    else:\n        # 计算文件大概包含多少个单词\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {path} has about {num_words} words\")\n\n\nfilenames = ['alice.txt', 'little_women.txt', 'moby_dick.txt', 'kkk.txt']\nfor filename in filenames:\n    path = Path(filename)\n    count_words(path)\n   \nThe file alice.txt has about 29594 words\nThe file little_women.txt has about 189142 words\nThe file moby_dick.txt has about 215864 words\n没有找到kkk.txt这个文件。\n~~~\n\n**静默失败**\n\n并非每次错误都需要告诉用户，有时候有错误什么也不做，但是就是让程序继续运行可以使用 pass 语句。\n\n~~~python\ndef count_words(path):\n    try:\n        contents = path.read_text(encoding='utf-8')\n    except FileNotFoundError:\n        pass\n    else:\n        # 计算文件大概包含多少个单词\n        words = contents.split()\n        num_words = len(words)\n        print(f\"The file {path} has about {num_words} words\")\n\nfilenames = ['alice.txt', 'little_women.txt', 'moby_dick.txt', 'kkk.txt']\nfor filename in filenames:\n    path = Path(filename)\n    count_words(path)\n\nThe file alice.txt has about 29594 words\nThe file little_women.txt has about 189142 words\nThe file moby_dick.txt has about 215864 words\n~~~\n\n### 存储数据\n\njson 模块能够将简单的Python数据结构转换为JSON格式的字符串，并在程序再次运行时从文件中加载数据。\n\n**注意：**JSON格式最初是为 JavaScript 开发的，但后来成为了一种通用格式，被众多语言采用。\n\n**json.dumps() 和 json.loads()**\n\njson.dumps() 接受一个参数，即要转换为JSON格式的数据。这个函数返回一个字符串。\n\n~~~python\n# 存储数据 json.dumps()\nfrom pathlib import Path\nimport json\n\nnumber = [1, 2, 3, 5, 6, 7, 4, 8, 9]\n\npath = Path('number.json') # 文件路径，如果没有就会自动创建这个文件\ncontents = json.dumps(number) # 数据通过json.dumps()转化文JSON格式，存储在变量contents中\npath.write_text(contents) # 把contents中的数据写入number.json这个文件中\n# number.json文件内容\n[1, 2, 3, 5, 6, 7, 4, 8, 9]\n\n# 读取数据 json.loads()\nfrom pathlib import Path\nimport json\n\npath = Path('number.json') # 文件路径，如果没有就会自动创建这个文件\ncontents = path.read_text() # 把读取的数据存储在变量contents中\nnumber = json.loads(contents)# contents中的数据通过json.loads()转化文JSON格式，并存储在变量number中\nprint(number)\n[1, 2, 3, 5, 6, 7, 4, 8, 9]\n~~~\n\n**保存和读取用户生成的数据**\n\n保存数据很有必要，因为如果不以某种方式进行存储，用户的信息就会在程序停止运行时丢失。\n\n~~~python\n# 保存用户数据\nfrom pathlib import Path\nimport json\n\nusername = input(\"请输入你的名字：\")\npath = Path('username.json')\ncontents = json.dumps(username)\npath.write_text(contents, encoding='utf-8')\nprint(\"我们将储存你的名字。\")\n请输入你的名字：zqten\n我们将储存你的名字。\n# username.json文件\n\"zqten\"\n\n# 读取用户生成的数据\nfrom pathlib import Path\nimport json\npath = Path(\"username.json\")\ncontents = path.read_text()\nusername = json.loads(contents)\nprint(f\"Welcome back {username}\")\nWelcome back zqten\n~~~\n\nPath 类提供了很多有用的方法。如果指定的文件或文件夹存在，**exists()** 方法返回 True ，否则返回 False 。\n\n~~~python\nfrom pathlib import Path\nimport json\n\npath = Path('username.json')\nif path.exists():\n    contents = path.read_text()\n    username = json.loads(contents)\n    print(f\"Welcome back {username}\")\nelse:\n    username = input(\"请输入你的名字：\")\n    contents = json.dumps(username)\n    path.write_text(contents, encoding='utf-8')\n    print(f\"我们将储存你的名字。{username}\")\nWelcome back zqten\n~~~\n\n**重构**\n\n~~~python\n# 保存用户数据\nfrom pathlib import Path\nimport json\n\ndef get_stored_username(path):\n    '''如果用户存储了用户名，我们就获取他'''\n    if path.exists():\n        contents = path.read_text()\n        username = json.loads(contents)\n        return username\n    else:\n        return None\n\ndef get_new_username(path):\n    '''提示用户输入用户名'''\n    username = input(\"请输入你的名字：\")\n    contents = json.dumps(username)\n    path.write_text(contents, encoding='utf-8')\n    return username\n\ndef greet_user():\n    '''问候用户，并指出其名字'''\n    path = Path('username.json')\n    username = get_stored_username(path)\n    if username:\n        print(f\"Welcome back {username}\")\n    else:\n        username = get_new_username(path)\n        print(f\"我们将储存你的名字，{username}\")\n\ngreet_user()\n请输入你的名字：zqten\n我们将储存你的名字，zqten\n# 在运行一次\ngreet_user()\nWelcome back zqten\n~~~\n\n### 小结\n\n本章学习了如何使用文件，包括如何读取整个文件，如何读取文件中的各行，以及如何根据需要将任意数量的文本写入文件。然后学习了异常，以及如何处理程序可能引发的异常。最后学习了如何存储Python数据结构，以保存用户提供的信息，避免让用户在每次运行程序时都重新提供。\n\n## 第十章 测试代码\n\n本章使用的是pip安装的pytest库来进行测试代码。\n\n~~~python\n# 在控制台安装\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pytest\n~~~\n\n### 测试函数\n\n测试基本分为下面几种：\n\n- 单元测试，用于核实函数的某个方面没有问题。\n- 测试用例，是一组单元测试，核实函数在各种情况下的行为都符合要求。\n- 全覆盖，测试一整套单元测试，涵盖了各种可能的函数使用方式。\n\n测试函数，需要新建一个文件，导入需要测试的函数，然后定义一个测试函数（这个函数的命名规范是：必须以 test 加下划线打头）。在测试过程中，**pytest**会找出并运行所有以 test 加下划线打头的函数。运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。\n\n~~~python\n# name_function.py 文件\ndef get_formatted_name(frist, last, middle=''):\n    if middle:\n        full_name = f\"{frist} {middle} {last}\"\n    else:\n        full_name = f\"{frist} {last}\"\n    return full_name.title()\n\n# test_name_function.py 测试文件\nfrom name_function import get_formatted_name\n\ndef test_frist_last_name():\n    formatted_name = get_formatted_name('janis', 'joplin')\n    assert formatted_name == 'Janis Joplin'\n    \n# 运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。\n======================== test session starts ========================\nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 1 item\n\ntest_name_function.py .                                     [100%]\n\n======================== 1 passed in 0.01s ==========================\n\n\n# 未通过测试示例\n===================== test session starts ============================\nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 1 item\n\ntest_name_function.py F                                         [100%]\n\n====================== FAILURES ====================================== \n__________________ test_frist_last_name_______________________________ \n\n    def test_frist_last_name():\n        formatted_name = get_formatted_name('janis', 'joplin')\n>       assert formatted_name == 'Janis Joplil'\nE       AssertionError: assert 'Janis Joplin' == 'Janis Joplil'\nE         - Janis Joplil\nE         ?            ^\nE         + Janis Joplin\nE         ?            ^\n\ntest_name_function.py:6: AssertionError\n============= short test summary info =========================================== \nFAILED test_name_function.py:\n:test_frist_last_name - AssertionError: assert 'Janis Joplin' == 'Janis Joplil'\n============= 1 failed in 0.05s ================================================= \n~~~\n\n\n\n### 测试类\n\n上面是测试了函数，现在我们针对类进行测试。\n\n**各种断言：**\n\n- assert a == b\t\t\t断言两个值相等\n- assert a != b             断言两个值不等\n\n这里只列出了两个，测试能包含任意可用条件语句表示的断言，比如 not 、in等等。\n\n\n\n**要测试的类**\n\n~~~python\n# 测试类 survey.py\nclass AnonymousSurvey:\n    '''收集匿名调查问卷'''\n\n    def __init__(self, question):\n        '''存储一个问题，并为存储答案做准备'''\n        self.question = question\n        self.responses = []\n\n    def show_question(self):\n        '''显示调查问卷'''\n        print(self.question)\n\n    def store_response(self, new_response):\n        '''存储单个调查答卷'''\n        self.responses.append(new_response)\n\n    def show_results(self):\n        '''显示收集到的所有答案'''\n        print(\"所有问卷结果:\")\n        for response in self.responses:\n            print(f\"- {response}\")\n\n# 实例化 language_survey.py\n# survey类的实例\nfrom survey import AnonymousSurvey\n\n# 定义个问题，并创建一个表示调查的 AnonymousSurvey 对象\nquestion = \"你学习了几种语言？\"\nlanguage_survey = AnonymousSurvey(question)\n\n# 显示问题并存储答案\nlanguage_survey.show_question()\nprint(\"按'q'退出。\\n\")\nwhile True:\n    response = input(\"输入你学习的语言: \")\n    if response == \"q\":\n        break\n    language_survey.store_response(response)\n\n# 显示答案\nprint(\"\\n你学习的语言有\")\nlanguage_survey.show_results()\n\n你学习了几种语言？\n按'q'退出。       \n\n输入你学习的语言: 汉语\n输入你学习的语言: 英语\n输入你学习的语言: 日语\n输入你学习的语言: 德语\n输入你学习的语言: q\n\n你学习的语言有\n所有问卷结果: \n- 汉语        \n- 英语        \n- 日语        \n- 德语  \n~~~\n\n**测试AnonymousSurvey类**\n\n~~~python\n# 测试AnonymousSurvey类 test_survey.py\nfrom survey import AnonymousSurvey\n\n\ndef test_store_single_response():\n    '''测试单个答案会被妥善地存储'''\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    language_survey.store_response('English')\n    assert 'English' in language_survey.responses\n    \n==================== test session starts ============================== \nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 1 items                                                                                                                       \n\ntest_survey.py .                             \t  [100%] \n\n===================== 1 passed in 0.02s ===============================     \n\ndef test_store_three_response():\n    '''测试多个答案会被妥善地存储'''\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    responses = ['English', 'Spanish', 'Chinese']\n    for response in responses:\n        language_survey.store_response(response)\n\n    for response in responses:\n        assert response in language_survey.responses\n\n========================= test session starts ===============================\nplatform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.3.0\nrootdir: E:Python\\第十章测试代码\ncollected 2 items                                                                                                                       \n\ntest_survey.py ..                   [100%] \n\n========================= 2 passed in 0.02s =================================\n~~~\n\n\n\n**使用夹具**\n\n夹具（@pytest.fixture）可帮助我们搭建测试环境，用于测试多个项目。这个需要导入（import pytest）。夹具使用方法是放在函数定义前面的指令。要使用夹具时，可编写一个函数来生成供多个测试函数使用的资源再对这个函数应用装饰器@pytest.fixture，并让使用该资源的每个测试函数都接受一个与该函数同名的形参。\n\n~~~python\nimport pytest\nfrom survey import AnonymousSurvey\n# 测试AnonymousSurvey类\n\n\n@pytest.fixture\ndef language_survey():\n    '''一个可供所有测试函数使用的AnonymousSurvey实例'''\n    question = \"What language did you first learn to speak?\"\n    language_survey = AnonymousSurvey(question)\n    return language_survey\n\n\ndef test_store_single_response(language_survey):\n    '''测试单个答案会被妥善地存储'''\n    language_survey.store_response('English')\n    assert 'English' in language_survey.responses\n\n\ndef test_store_three_response(language_survey):\n    '''测试多个答案会被妥善地存储'''\n    responses = ['English', 'Spanish', 'Chinese']\n    for response in responses:\n        language_survey.store_response(response)\n\n    for response in responses:\n        assert response in language_survey.responses\n~~~\n\n### 小结\n\n本章学习了如何使用 pytest 模块中的工具来为函数和类编写测试。不仅学习了如何编写测试函数，以核实函数和类的行为符合预期，而且学习了如何使用夹具来高效地创建可在测试文件中的多个测试函数中使用的资源。\n\n# 第二部分 项目\n\n## 第十二章 武装飞船\n\n### 外星人入侵项目规划\n\n- 玩家控制着一艘武装飞船出现在屏幕底部中央，玩家可以使用方向键左右移动飞船，使用空格键进行射击。\n- 当游戏开始时，一个外形舰队出现在天空中，并向屏幕下方移动。\n- 玩家的任务是消灭这些外星人。\n- 玩家将万星人消灭干净后，将出现一个新的外形舰队，其移动速度更快。\n- 只要有万星人撞到玩家的飞船或到达屏幕下边缘，玩家就损失一艘飞船。玩家损失三艘飞船游戏结束。\n\n**安装Pygame**\n\n~~~python\npip install pygame\n~~~\n\n### 开始游戏项目\n\n**创建 Pygame 窗口及响应用户输入**\n\n这里有及个新方法：\n\n- pygame.display.set_mode((1200,800)) 设置显示画面的大小\n- pygame.display.set_caption(\"Alien Invasion\") 设置标题和logo\n- pygame.display.flip() 让渲染的可见\n- pygame.time.Clock() 设置游戏帧率\n\n~~~python\nimport sys\nimport pygame\n\n\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"\n        pygame.init()\n\n        self.screen = pygame.display.set_mode((1200,800))\n        pygame.display.set_caption(\"Alien Invasion\")\n\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        while True:\n            # 监听键盘和鼠标事件\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    sys.exit()\n            # 让最近绘制的屏幕可见\n            pygame.display.flip()\n\nif __name__ == '__main__':\n    # 创建游戏实例并运行游戏\n    ai = AlienInvasion()\n    ai.run_game()\n~~~\n\n**控制帧率**\n\n~~~python\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"\n        pygame.init()\n        # 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行\n        self.clock = pygame.time.Clock()\n        --snip--\n        \n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        while True:\n            --snip--\n            # 让最近绘制的屏幕可见\n            pygame.display.flip()    \n            self.clock.tick(60)\n~~~\n\n**设置背景颜色**\n\nfill() 方法是填充背景颜色，该方法只接受一个表示颜色的实参。\n\n~~~python\n\tdef __init__(self):\n    \t--snip--\n        pygame.display.set_caption(\"Alien Invasion\")\n        # 设置背景颜色\n        self.bg_color = (230,230,230)\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        --snip--\n        # 每次循环时都重绘制屏幕\n            self.screen.fill(self.bg_color)\n        # 让最近绘制的屏幕可见\n            pygame.display.flip()\n~~~\n\n**创建 Settings 类**\n\n~~~python\nclass Settings:\n    \"\"\"存储游戏《外星人入侵》中所有设置的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏的设置\"\"\"\n        # 屏幕设置\n        self.screen_width = 1200\n        self.screen_height = 800\n        self.screen_color = (230, 230, 230)\n\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"        \n        --snip--\n        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        --snip--\n            self.screen.fill(self.settings.screen_color)\n~~~\n\n### 添加飞船图像\n\n~~~python\nimport pygame\n\n\nclass Ship:\n    \"\"\"管理飞船类\"\"\"\n\n    def __init__(self, ai_game):\n        \"\"\"初始化飞船并设置其初始位置\"\"\"\n        self.screen = ai_game.screen\n        self.screen_rect = ai_game.screen.get_rect()\n\n        # 加载飞船图像并获取其外接矩形\n        self.image = pygame.image.load('images/ship.bmp')\n        self.rect = self.image.get_rect()\n\n        # 每艘新飞船都放在屏幕底部的中央\n        self.rect.midbottom = self.screen_rect.midbottom\n\n    def blitme(self):\n        \"\"\"在指定位置绘制飞船\"\"\"\n        self.screen.blit(self.image, self.rect)\n~~~\n\n**注意：**在 pygame 中，原点（0,0）位于屏幕左上角，当一个点向右下方移动时，它的坐标值将增大，在1200X800的屏幕上，原点位于左上角，右下角的坐标为（1200,800）。这些坐标对应的是游戏窗口，而不是物理屏幕。\n\n**在屏幕上绘制飞船**\n\n~~~python\nfrom ship import Ship\n\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n    def __init__(self):\n    \"\"\"初始化游戏并创建游戏资源\"\"\"\n    --snip--\n    pygame.display.set_caption(\"Alien Invasion\")\n    self.ship = Ship(self)\n    \n    def run_game(self):\n    \"\"\"开始游戏主循环\"\"\"\n    --snip--\n            self.screen.fill(self.settings.screen_color)\n            self.ship.blitme()\n~~~\n\n### 重构：_check_events() 方法和 _update_screen() 方法\n\n在Python中辅助方法的名称以单下划线打头\n\n_ _check_events() 方法和_ _update_screen()方法\n\n~~~python\n    def run_game(self):\n        \"\"\"开始游戏主循环\"\"\"\n        while True:\n            # 监听键盘和鼠标事件\n            self._check_events()\n            self._update_screen()\n            # 每秒60帧\n            self.clock.tick(60)\n\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n\n    def _update_screen(self):\n        # 每次循环时都重绘制屏幕\n        self.screen.fill(self.settings.screen_color)\n        self.ship.blitme()\n        # 让最近绘制的屏幕可见\n        pygame.display.flip()\n~~~\n\n### 驾驶飞船\n\n**响应按键**\n\npygame中，事件都是通过 pygame.event.get() 方法获取的。\n\n~~~python\n--snip--\n    def _check_events(self):\n            # 监听键盘和鼠标事件\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    sys.exit()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_RIGHT:\n                        # 飞船向右移动\n                        self.ship.rect.x += 1\n~~~\n\n**持续移动**\n\npygame.KEYDOWN 和 pygame.KEYUP 两个事件是，按下键盘，和释放键盘。\n\n~~~python\n    def run_game(self):\n            \"\"\"开始游戏主循环\"\"\"\n            while True:\n                # 监听键盘和鼠标事件\n                self._check_events()\n                # 调用飞船位置更新函数\n                self.ship.update()\n                # 更新画面\n                self._update_screen()\n                # 每秒60帧\n                self.clock.tick(60)\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_RIGHT:\n                    # 飞船向右移动\n                    self.ship.moving_right = True\n            elif event.type == pygame.KEYUP:\n                if event.key == pygame.K_RIGHT:\n                    self.ship.moving_right = False\n                    \n# ship.py\nclass Ship:\n    \"\"\"管理飞船类\"\"\"\n\n    def __init__(self, ai_game):\n        \"\"\"初始化飞船并设置其初始位置\"\"\"\n        --snip--\n        # 移动标志（飞船一开始不移动）\n        self.moving_right = False\n\n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        if self.moving_right:\n            self.rect.x += 1\n        --snip--\n~~~\n\n**左右移动**\n\n~~~python\nclass Ship:\n    \"\"\"管理飞船类\"\"\"\n\t\t--snip--\n        # 移动标志（飞船一开始不移动）\n        self.moving_right = False\n        self.moving_left = False\n\n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        if self.moving_right:\n            self.rect.x += 1\n        if self.moving_left:\n            self.rect.x -= 1\n        --snip--\n        \nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n                # 飞船移动\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_RIGHT:\n                    self.ship.moving_right = True\n                if event.key == pygame.K_LEFT:\n                    self.ship.moving_left = True\n            elif event.type == pygame.KEYUP:\n                if event.key == pygame.K_RIGHT:\n                    self.ship.moving_right = False\n                if event.key == pygame.K_LEFT:\n                    self.ship.moving_left = False    \n~~~\n\n**调整飞船的速度**\n\n~~~python\nclass Settings:\n    \"\"\"存储游戏《外星人入侵》中所有设置的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏的设置\"\"\"\n        --snip--\n        # 飞船的设置\n        self.ship_speed = 1.5\nclass Ship:\n    \"\"\"管理飞船类\"\"\" \n    def __init__(self, ai_game):\n        \"\"\"初始化飞船并设置其初始位置\"\"\"    \n        --snip--\n        # 在飞创的属性X中存储一个浮点数\n        self.x = float(self.rect.x)\n        \n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        # 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值\n        if self.moving_right:\n            self.x += self.settings.ship_speed\n        if self.moving_left:\n            self.x -= self.settings.ship_speed\n\n        # 根据self.x更新self.rect.x\n        self.rect.x = self.x        \n~~~\n\n**限制飞船的活动范围**\n\n~~~python\nclass Ship:\n    \"\"\"管理飞船类\"\"\" \n        --snip--    \n    def update(self):\n        \"\"\"根据移动标志调整飞船的位置\"\"\"\n        # 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值\n        if self.moving_right and self.rect.right < self.screen_rect.right:\n            self.x += self.settings.ship_speed\n        if self.moving_left and self.rect.left > 0:\n            self.x -= self.settings.ship_speed        \n~~~\n\n**重构：_check_events() 方法**\n\n检查事件方法越来越长，我们将其部分代码放在两个方法中，一个处理键盘按下(KEYDOWN)，一个处理键盘释放(KEYUP)\n\n~~~python\n    def _check_events(self):\n        # 监听键盘和鼠标事件\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                sys.exit()\n                # 飞船移动\n            elif event.type == pygame.KEYDOWN:\n                self._check_keydown_events(event)\n            elif event.type == pygame.KEYUP:\n                self._check_keyup_events(event)\n\n    def _check_keydown_events(self, event):\n        \"\"\"响应按下键盘\"\"\"\n        if event.key == pygame.K_RIGHT:\n            self.ship.moving_right = True\n        elif event.key == pygame.K_LEFT:\n            self.ship.moving_left = True\n\n    def _check_keyup_events(self, event):\n        \"\"\"响应释放键盘\"\"\"\n        if event.key == pygame.K_RIGHT:\n            self.ship.moving_right = False\n        if event.key == pygame.K_LEFT:\n            self.ship.moving_left = False\n~~~\n\n**按 Q 退出**\n\n~~~python\n    def _check_keydown_events(self, event):\n        \"\"\"响应按下键盘\"\"\"\n        if event.key == pygame.K_RIGHT:\n            self.ship.moving_right = True\n        elif event.key == pygame.K_LEFT:\n            self.ship.moving_left = True\n        elif event.key == pygame.K_q:\n            sys.exit()\n~~~\n\n**在全屏模式下运行游戏**\n\n在创建屏幕时，传入(0, 0), pygame.FULLSCREEN ，这让pygame生成一个覆盖整个显示器的屏幕。由于无法知道屏幕的宽度和高度，所有后面接着要更新屏幕的 rect 的属性宽和高来更新对象 settings 。pygame不提供全屏模式下退出游戏的默认方式，所以运行前，确保可以使用 'q' 退出\n\n~~~python\nclass AlienInvasion:\n    \"\"\"管理游戏资源和行为的类\"\"\"\n\n    def __init__(self):\n        \"\"\"初始化游戏并创建游戏资源\"\"\"\n        --snip--\n        self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\n        self.settings.screen_width = self.screen.get_rect().width\n        self.settings.screen_height = self.screen.get_rect().height        \n~~~\n\n### 简单回顾\n\n下面将添加射击功能，所以需要新增一个名为 bullet.py 的文件，并修改一些原有的文件，在添加其他功能前，先回顾一下这些文件，以便对这个项目的组织结构有清楚的认识。\n\n- alien_invasion.py\n  这个文件包含 AlienInvasion 类，这个类创建在游戏的很多地方会用到的一系列属性。\n\n  ~~~python\n  import sys\n  import pygame\n  \n  from settings import Settings\n  from ship import Ship\n  from bullet import Bullet\n  \n  \n  class AlienInvasion:\n      \"\"\"管理游戏资源和行为的类\"\"\"\n  \n      def __init__(self):\n          \"\"\"初始化游戏并创建游戏资源\"\"\"\n          pygame.init()\n          # 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行\n          self.clock = pygame.time.Clock()\n          # 设置背景颜色和窗口大小\n          self.settings = Settings()\n          # 独立窗口运行程序\n          self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))\n          # 全屏模式游戏 'q' 退出\n          # self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\n          # self.settings.screen_width = self.screen.get_rect().width\n          # self.settings.screen_height = self.screen.get_rect().height\n          pygame.display.set_caption(\"Alien Invasion\")\n          self.ship = Ship(self)\n          self.bullets = pygame.sprite.Group()\n  \n      def run_game(self):\n          \"\"\"开始游戏主循环\"\"\"\n          while True:\n              # 监听键盘和鼠标事件\n              self._check_events()\n              # 调用飞船位置更新函数\n              self.ship.update()\n              # 更新子弹的位置并删除已消失的子弹\n              self._update_bullets()\n              # 更新画面\n              self._update_screen()\n              # 每秒60帧\n              self.clock.tick(60)\n  \n      def _check_events(self):\n          # 监听键盘和鼠标事件\n          for event in pygame.event.get():\n              if event.type == pygame.QUIT:\n                  sys.exit()\n                  # 飞船移动\n              elif event.type == pygame.KEYDOWN:\n                  self._check_keydown_events(event)\n              elif event.type == pygame.KEYUP:\n                  self._check_keyup_events(event)\n  \n      def _check_keydown_events(self, event):\n          \"\"\"响应按下键盘\"\"\"\n          if event.key == pygame.K_RIGHT:\n              self.ship.moving_right = True\n          elif event.key == pygame.K_LEFT:\n              self.ship.moving_left = True\n          elif event.key == pygame.K_q:\n              sys.exit()\n          elif event.key == pygame.K_SPACE:\n              self._fire_bullet()\n  \n      def _check_keyup_events(self, event):\n          \"\"\"响应释放键盘\"\"\"\n          if event.key == pygame.K_RIGHT:\n              self.ship.moving_right = False\n          if event.key == pygame.K_LEFT:\n              self.ship.moving_left = False\n  \n      def _fire_bullet(self):\n          \"\"\"创建一颗子弹，并将其加入编著bullets \"\"\"\n          if len(self.bullets) < self.settings.bullet_allowed:\n              new_bullet = Bullet(self)\n              self.bullets.add(new_bullet)\n  \n      def _update_bullets(self):\n          \"\"\"更新子弹的位置并删除已消失的子弹\"\"\"\n          # 更新子弹位置\n          self.bullets.update()\n          # 删除已消失的子弹\n          for bullet in self.bullets.copy():\n              if bullet.rect.bottom <= 0:\n                  self.bullets.remove(bullet)\n  \n      def _update_screen(self):\n          # 每次循环时都重绘制屏幕\n          self.screen.fill(self.settings.screen_color)\n          # 子弹绘制        \n          for bullet in self.bullets.sprites():\n              bullet.draw_bullet()\n          self.ship.blitme()\n          # 让最近绘制的屏幕可见\n          pygame.display.flip()\n  \n  \n  if __name__ == '__main__':\n      # 创建游戏实例并运行游戏\n      ai = AlienInvasion()\n      ai.run_game()\n  ~~~\n  \n- settings.py\n  这个文件包含 Settings 类，这个类只有一个方法，这个文件主要用于初始化控制游戏外观和飞船速度的属性\n\n  ~~~python\n  class Settings:\n      \"\"\"存储游戏《外星人入侵》中所有设置的类\"\"\"\n  \n      def __init__(self):\n          \"\"\"初始化游戏的设置\"\"\"\n          # 屏幕设置\n          self.screen_width = 1200\n          self.screen_height = 800\n          self.screen_color = (230, 230, 230)\n  \n          # 飞船的设置\n          self.ship_speed = 1.5\n  \n          # 子弹设置\n          self.bullet_speed = 2.0\n          self.bullet_width = 3\n          self.bullet_height = 15\n          self.bullet_color = (60, 60, 60)\n          # 屏幕上最多出现的子弹数量\n          self.bullet_allowed = 5\n  ~~~\n  \n- ship.py\n  这个文件包含 Ship 类，这个类主要用于在屏幕上绘制飞船\n\n  ~~~python\n  import pygame\n  \n  \n  class Ship:\n      \"\"\"管理飞船类\"\"\"\n  \n      def __init__(self, ai_game):\n          \"\"\"初始化飞船并设置其初始位置\"\"\"\n          self.screen = ai_game.screen\n          self.settings = ai_game.settings\n          self.screen_rect = ai_game.screen.get_rect()\n  \n          # 加载飞船图像并获取其外接矩形\n          self.image = pygame.image.load('images/ship.bmp')\n          self.rect = self.image.get_rect()\n  \n          # 每艘新飞船都放在屏幕底部的中央\n          self.rect.midbottom = self.screen_rect.midbottom\n  \n          # 在飞船的属性X中存储一个浮点数\n          self.x = float(self.rect.x)\n  \n          # 移动标志（飞船一开始不移动）\n          self.moving_right = False\n          self.moving_left = False\n  \n      def update(self):\n          \"\"\"根据移动标志调整飞船的位置\"\"\"\n          # 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值\n          if self.moving_right and self.rect.right < self.screen_rect.right:\n              self.x += self.settings.ship_speed\n          if self.moving_left and self.rect.left > 0:\n              self.x -= self.settings.ship_speed\n  \n          # 根据self.x更新self.rect.x\n          self.rect.x = self.x\n  \n      def blitme(self):\n          \"\"\"在指定位置绘制飞船\"\"\"\n          self.screen.blit(self.image, self.rect)\n  ~~~\n\n### 射击\n\n- bullett.py\n  ~~~python\n  import pygame\n  from pygame.sprite import Sprite\n  \n  \n  class Bullet(Sprite):\n      \"\"\"管理飞船所发射子弹的类\"\"\"\n  \n      def __init__(self, ai_game):\n          \"\"\"在飞船的当前位置创建一个子弹对象\"\"\"\n          super().__init__()\n          self.screen = ai_game.screen\n          self.settings = ai_game.settings\n          self.color = self.settings.bullet_color\n  \n          # 在（0,0）处创建一个表示子弹的矩形，再设置正确的位置\n          self.rect = pygame.Rect(0, 0, self.settings.bullet_width, self.settings.bullet_height)\n          self.rect.midtop = ai_game.ship.rect.midtop\n  \n          # 存储用浮点数表示的子弹位置\n          self.y = float(self.rect.y)\n  \n      def update(self):\n          \"\"\"向上移动子弹\"\"\"\n          # 更新子弹的准确位置\n          self.y -= self.settings.bullet_speed\n          # 更新表示子弹的 rect 的位置\n          self.rect.y = self.y\n  \n      def draw_bullet(self):\n          \"\"\"在屏幕上绘制子弹\"\"\"\n          pygame.draw.rect(self.screen, self.color, self.rect)\n  ~~~\n\n### 小结\n\n本章学习了游戏开发计划的指定以及使用Pygame编写的游戏的基本结构。接着学习了如何设置背景色，以及如何将设置存储在独立的类中。然后学习了如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动。不仅创建了能自动移动的元素，还删除了不再需要的对象。最后学习了经常性重构是如何为项目的后续开发提供便利的。\n\n## 第十三章 外星人\n\n### 项目回顾\n\n本章将完成下列开发：\n\n- [ ] 在屏幕左上角添加一个外星人，并指定合适的边距。\n- [ ] 沿屏幕上边缘添加一行万星人，再不断地添加成行的外星人，直到填满屏幕的上半部分。\n- [ ] 让外星人向两侧和向下移动，直到外星舰队被全部击落、有外星人撞到飞船或有外星人抵达屏幕的下边缘。如果外星舰队都被击落，将再创建一个外星舰队；如果有外星人撞到飞船或抵达屏幕下边缘，就销毁飞船并再创建一个外星舰队。\n  **注意**：pygame里面的精灵碰撞和对象碰撞是两个方法\n  - pygame.sprite.groupcollide(精灵1，精灵2，1是否参与碰撞，2是否参与碰撞)。**这个是直接赋值给变量就可以了。和 input 差不多**\n  - pygame.sprite.spritecollideany(对象，精灵)。**这个是返回一个bool值**\n- [ ] 限制玩家可用的飞船数量，分配的飞船被用完后，游戏将结束。\n\n### 创建第一个外星人\n\n\n\n\n\n### 小结\n\n本章通过创建外星舰队学习了如何在游戏中添加大量相同的元素，如何使用嵌套循环来创建成行成列的整齐元素，以及如何通过调用每个元素的 ` update() `方法移动大量的元素。接着学习了如何控制对象在屏幕上的移动方向，以及如何响应特定的情形，如有外星人到达屏幕边缘。然后学习了如何检测并相应子弹和外星人的碰撞以及外星人和飞创的碰撞。最后学习了如何在游戏中跟踪统计信息，以及如何使用标志 ` game_active`来判断游戏是否结束。\n\n\n\n","slug":"2024-10-25-Python入门到实践第三版学习笔记","published":1,"updated":"2024-10-25T07:32:12.608Z","_id":"cm2odwimm00011kud385l5ic3","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"第一部分-基础知识\"><a href=\"#第一部分-基础知识\" class=\"headerlink\" title=\"第一部分 基础知识\"></a>第一部分 基础知识</h1><p><a href=\"https://zqten.github.io/\">回到主頁</a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python更新指令</span><br><span class=\"line\">pip install --upgrade python</span><br><span class=\"line\"># pip更新指令</span><br><span class=\"line\">python.exe -m pip install --upgrade pip</span><br><span class=\"line\"># 国内镜像安装</span><br><span class=\"line\">pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class=\"line\">pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class=\"line\">pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class=\"line\"># pip查看可更新包</span><br><span class=\"line\">pip list --outdated</span><br><span class=\"line\"># 批量升级所有包,升级前先确认</span><br><span class=\"line\">pip-review --local --interactive</span><br><span class=\"line\"># 一键升级所有包</span><br><span class=\"line\">pip-review --auto</span><br></pre></td></tr></table></figure>\n\n<p>前面的安装环节网络上讲得比书上的要详细多了，官方文档也讲得很清楚，所以这里就不在这里说了，有兴趣可以去访问官方网站<a href=\"https://www.python.org/\">^😺^</a>。</p>\n<h2 id=\"第一章变量和简单的数据类型\"><a href=\"#第一章变量和简单的数据类型\" class=\"headerlink\" title=\"第一章\t变量和简单的数据类型\"></a>第一章\t变量和简单的数据类型</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量命名有一定的规则</p>\n<ul>\n<li>不能是数字开头，比如：<strong>1_message</strong></li>\n<li>不能包含空格，比如：<strong>mess age</strong></li>\n<li>不能是python里面的关键字，比如：print 或 def 等，python里面有很多关键字一般你打出来会高亮显示</li>\n<li>最好的变量名应该是既简短又有描述性，比如：name、student_name 等等。</li>\n</ul>\n<p>这里message是变量名，’Hello Python World!’是指向message变量的值。变量是可以重复赋值的，但它只会储存最后的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">&#x27;Hello Python World!&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">Hello Python World!</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&#x27;你好!&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你好!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>有双引号或单引号包裹的内容就称为字符串，有些编程语言只有双引号是字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;This is string.&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;This is string.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.方法：title()、upper()、lower()</strong></p>\n<p>方法(method)是python对数据执行的操作，name后面的点(.)是让python对name变量执行 <strong>title()</strong> 方法指定的操作，这个方法就是把单词的手写字幕改成大写。**upper()<strong>方法是让所有字母变成大写、</strong>lower()<strong>方法是让所有字母变成小写。还有一个方法修改字符串中的指定单词。</strong>replace()**这个方法我们在后面的练习中会用到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;zheng kai nan&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(name.title())</span><br><span class=\"line\">Zheng Kai Nan</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&quot;Zheng Kai Nan&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(name.upper())</span><br><span class=\"line\">ZHENG KAI NAN</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name.lower())</span><br><span class=\"line\">zheng kai nan</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&quot;zheng kai nan&quot;</span></span><br><span class=\"line\">name_01 = name.replace(<span class=\"string\">&quot;kai nan&quot;</span>, <span class=\"string\">&quot;ji zhong&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name_01)</span><br><span class=\"line\">zheng kai nan</span><br><span class=\"line\">zheng ji zhong</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.在字符串中插入变量</strong></p>\n<p>这个功能很常用，python的方式是在字符串的引号前面加一个 <strong>f</strong> 字母：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first_name = <span class=\"string\">&quot;zheng&quot;</span></span><br><span class=\"line\">last_name = <span class=\"string\">&quot;kai nan&quot;</span></span><br><span class=\"line\">full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(full_name)</span><br><span class=\"line\">zheng kai nan</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello,<span class=\"subst\">&#123;full_name.title()&#125;</span>!&quot;</span>)</span><br><span class=\"line\">Hello,Zheng Kai Nan!</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.制表符和换行符控制字符串  \\t  \\n</strong></p>\n<p>在字符串中添加<strong>\\t</strong>、<strong>\\n</strong>可以缩进和换行，字符串引号前加**<code>r</code>**可以让取消里面所有转义符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">&quot;你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你知道这几种编程语言吗？Python Swift C++ Go Java</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&quot;\\t你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">     你知道这几种编程语言吗？Python Swift C++ Go Java</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&quot;你知道这几种编程语言吗？\\nPython Swift C++ Go Java&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你知道这几种编程语言吗？</span><br><span class=\"line\">Python Swift C++ Go Java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以同时使用</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;你知道这几种编程语言吗？\\n\\tPython \\n\\tSwift \\n\\tC++ \\n\\tGo \\n\\tJava&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你知道这几种编程语言吗？</span><br><span class=\"line\">\tPython </span><br><span class=\"line\">\tSwift </span><br><span class=\"line\">\tC++ </span><br><span class=\"line\">\tGo </span><br><span class=\"line\">\tJava</span><br><span class=\"line\"><span class=\"comment\"># 取消转义    </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\nasd&quot;</span>) </span><br><span class=\"line\">\\nasd</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.删除字符串里面的空白rstrip()、lstrip()、strip()</strong></p>\n<p>有时候后输入字符串的时候会多输空格，在python里面多一个空格就意味着两个不同的字符串了。这里有3个方法：分别是**rstrip()、lstrip()、strip()*<em>，</em>rstrip()<em>是删除字符串右边的空格，</em>lstrip()<em>是删除左边的空格，</em>strip()*是删除两边的空格。但是这种删除只是暂时的，要想永久删除就要重新赋值给变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language = <span class=\"string\">&#x27; python &#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(language.rstrip())</span><br><span class=\"line\"><span class=\"string\">&#x27; python&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(language.lstrip())</span><br><span class=\"line\"><span class=\"string\">&#x27;python &#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(language.strip())</span><br><span class=\"line\"><span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 重新赋值给变量</span></span><br><span class=\"line\">language = language.strip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(language)</span><br><span class=\"line\"><span class=\"string\">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5.删除前缀和后缀 removeprefix()、removesuffix()</strong></p>\n<p>有些内容有统一的前缀，比如你有很多照片，前缀是某一个时间比如2023.7.25+名字或序号，你就只想要序号或名字就可以用到这个功能，还有就是URL里面的https:&#x2F;&#x2F;这个是网站前缀，就可以用*removeprefix()*括号里面填写你想删除的前缀，用引号括起来。这种方法的删除也是暂时的，要想永久删除需要重新赋值，和上面的删除空白一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除前缀</span></span><br><span class=\"line\">Travel_photo = <span class=\"string\">&quot;2023.7.25-镇远旅游照片&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Travel_photo.removeprefix(<span class=\"string\">&#x27;2023.7.25-&#x27;</span>))</span><br><span class=\"line\">镇远旅游照片</span><br><span class=\"line\">url = <span class=\"string\">&quot;https://www.baidu.com&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(url.removeprefix(<span class=\"string\">&#x27;https://&#x27;</span>))</span><br><span class=\"line\">www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除后缀</span></span><br><span class=\"line\">file_name = <span class=\"string\">&#x27;abc.jpg&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file_name.removesuffix(<span class=\"string\">&#x27;.jpg&#x27;</span>))</span><br><span class=\"line\">abc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数\"><a href=\"#数\" class=\"headerlink\" title=\"数\"></a>数</h3><p>可以理解为数学里面的数字，用来计算或可视化数据</p>\n<p><strong>1.整数及其运算</strong></p>\n<p>integer()或简写int()表示整数，**+、-、<em>、&#x2F;</em>* 这几个符号表示加减乘除，还有些复杂的后面会讲到，比如(**)两个星号代表乘方运算。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span> ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.浮点数</strong></p>\n<p>float() 表示浮点数，就是带有小数点的数称为浮点数，数字同样都可以应用上面的计算符号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"number\">0.3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.数字中的下划线</strong></p>\n<p>下划线用在数字中，并不会有其他的效果，只是方便我们更好观察。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">1000_000_000</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\"><span class=\"number\">10000000000</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4.同时给多个变量赋值</strong></p>\n<p>同时给多个变量赋值，需要用逗号将变量名分开，对于要赋给变量的值也需要做同样的事情</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x,y,z = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\">y = <span class=\"number\">2</span></span><br><span class=\"line\">z = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误演示</span></span><br><span class=\"line\">x,y,z = <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">发生异常: ValueError x</span><br><span class=\"line\"><span class=\"keyword\">not</span> enough values to unpack (expected <span class=\"number\">3</span>, got <span class=\"number\">2</span>)</span><br><span class=\"line\">  File <span class=\"string\">&quot;F:\\第一章变量和简单数据类型\\full_name.py&quot;</span>, line <span class=\"number\">7</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    x, y, z = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">    ^^^^^^^</span><br><span class=\"line\">ValueError: <span class=\"keyword\">not</span> enough values to unpack (expected <span class=\"number\">3</span>, got <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>5.常量</strong></p>\n<p>Python里面没有常量(就是整个程序的生命周期不改变值的“变量”)，一般是用全大写字母来共同与其他程序员形成约定，遇到全大写字母的变量时，视为常量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME = <span class=\"string\">&quot;太阳&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>6.注释</strong></p>\n<p>注释的主要目的是阐述代码要做什么，以及是如何做的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印出Hello World</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章我们学习了如何使用变量，创建了描述性的变量名，学习了字符串是什么，以及如何使用全大写、全小写和首字母大写的方式显示字符串和制表符、换行符。还学习了如何删除字符串中多余的字符和空格，以及字符串中插入变量的方法。还学习了整数和浮点数，还有学习了写注释的目的。</p>\n<h2 id=\"第二章列表简介\"><a href=\"#第二章列表简介\" class=\"headerlink\" title=\"第二章\t列表简介\"></a>第二章\t列表简介</h2><h3 id=\"列表是什么\"><a href=\"#列表是什么\" class=\"headerlink\" title=\"列表是什么\"></a>列表是什么</h3><p>列表(list)由一系列按<strong>特定顺序</strong>排列的元素组成，一般给列表命名以复数形式，比如：name就用names。<br>在python中列表用“[ ]”表示，每个元素用逗号隔开。列表里面有两个东西要搞清楚，一个是索引，一个是元素的值。要访问列表时使用索引和元素值都可以，列表的索引是从0开始的，所以要访问的n个元素就使用n-1的索引值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\">bicycles = [<span class=\"string\">&#x27;trek&#x27;</span>, <span class=\"string\">&#x27;cannondale&#x27;</span>, <span class=\"string\">&#x27;redline&#x27;</span>, <span class=\"string\">&#x27;specialized&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;trek&#x27;</span>, <span class=\"string\">&#x27;cannondale&#x27;</span>, <span class=\"string\">&#x27;redline&#x27;</span>, <span class=\"string\">&#x27;specialized&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 利用索引值访问列表元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles[<span class=\"number\">3</span>])</span><br><span class=\"line\">trek</span><br><span class=\"line\">specialized</span><br><span class=\"line\"><span class=\"comment\"># 访问列表的倒数第一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles[-<span class=\"number\">1</span>])</span><br><span class=\"line\">specialized</span><br><span class=\"line\"><span class=\"comment\"># 使用列表里面的元素到其他场景</span></span><br><span class=\"line\">message = <span class=\"string\">f&#x27;我喜欢<span class=\"subst\">&#123;bicycles[<span class=\"number\">0</span>]&#125;</span>品牌的摩托车。&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">我喜欢trek品牌的摩托车。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改、添加和删除列表元素\"><a href=\"#修改、添加和删除列表元素\" class=\"headerlink\" title=\"修改、添加和删除列表元素\"></a>修改、添加和删除列表元素</h3><p>大多数列表将是动态的，意味着列表创建后，随着程序的运行将修改、增加、或删除其中的元素。<br>这中间增加有<strong>append()<strong>方法在列表末尾添加元素，</strong>insert()<strong>在列表的指定位置插入元素。<br>删除有</strong>del 列表元素</strong>将删除列表元素并且无法在访问这个元素了。<br>**pop()**默认删除列表最后一个元素，也可以指定删除列表中的其他元素，在括号里面填上该元素的索引值就可以了。<br>这里说下，pop()删除的元素可以赋值给一个变量继续使用，不像del不能在赋值和访问了。<br>**remove()**方法是删除一个指定的元素值，列表有多个同样的值的话这个方法只删除第一个，要想全部删除就要使用循环。<br>值得一提的是这个方法和pop()一样删除了的元素可以赋值给一个变量继续使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改列表元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">motorcycles[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;da yang&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;da yang&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加列表元素</span></span><br><span class=\"line\"><span class=\"comment\">## 在列表末尾添加元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">motorcycles.append(<span class=\"string\">&#x27;da yang&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>, <span class=\"string\">&#x27;da yang&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">## 在列表的指定位置插入元素</span></span><br><span class=\"line\">motorcycles.insert(<span class=\"number\">0</span>, <span class=\"string\">&#x27;li fan&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;li fan&#x27;</span>, <span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>, <span class=\"string\">&#x27;da yang&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除列表元素</span></span><br><span class=\"line\"><span class=\"comment\">## del方法删除</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> motorcycles[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">## pop方法删除</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">poped_motorcycles = motorcycles.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(poped_motorcycles)</span><br><span class=\"line\">suzuki</span><br><span class=\"line\"><span class=\"comment\">### pop方法删除指定位置的元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">last_motorcycles = motorcycles.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(last_motorcycles)</span><br><span class=\"line\">honda</span><br><span class=\"line\"><span class=\"comment\">## remove()根据值删除元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">mid_motorcycles = <span class=\"string\">&#x27;yamaha&#x27;</span></span><br><span class=\"line\">motorcycles.remove(mid_motorcycles)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;mid_motorcycles.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\">Yamaha</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"列表管理\"><a href=\"#列表管理\" class=\"headerlink\" title=\"列表管理\"></a>列表管理</h3><p><strong>1.sort()<strong>方法可以对列表</strong>永久排序</strong>，该方法是将列表按字母顺序或数字从小到大的顺序进行排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars = [<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>]</span><br><span class=\"line\">cars.sort()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 反向排序</span></span><br><span class=\"line\">cars.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 反转列表,这是一种快捷方法</span></span><br><span class=\"line\">cars = cars[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2. sorted()<strong>方法是对列表进行</strong>临时排序</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时反向排序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(cars, reverse=<span class=\"literal\">True</span>))</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3.reverse()<strong>方法是</strong>永久反转排列</strong>列表里面的元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.reverse()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>**4.len()**方法可以快速获取列表长度，其显示的是列表内有多少个元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(cars))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5.enumerate()</strong> 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，<strong>同时列出数据和数据下标</strong>，一般用在 for 循环当中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seq = [<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i, element <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(seq):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span> i, element</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span> one</span><br><span class=\"line\"><span class=\"number\">1</span> two</span><br><span class=\"line\"><span class=\"number\">2</span> three</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>本章学习了什么是列表，以及如何使用列表内的元素。学习了定义列表，增删改列表内元素，以及如何对列表进行永久排序和临时排序，还学习了反转列表顺序和反向排序。</p>\n<h2 id=\"第三章-操作列表\"><a href=\"#第三章-操作列表\" class=\"headerlink\" title=\"第三章 操作列表\"></a>第三章 操作列表</h2><h3 id=\"遍历整个列表\"><a href=\"#遍历整个列表\" class=\"headerlink\" title=\"遍历整个列表\"></a>遍历整个列表</h3><p>使用<strong>for</strong>循环可以很轻松的访问整个列表，以及对列表进行操作。这里值得一提的是for循环里面的变量名，在遍历列表是尽可能用列表的单数名，比如列表名为cars，那么for循环的变量尽量写成car。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magicians = [<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;david&#x27;</span>, <span class=\"string\">&#x27;carolina&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> magician <span class=\"keyword\">in</span> magicians:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(magician)</span><br><span class=\"line\"></span><br><span class=\"line\">alice</span><br><span class=\"line\">david</span><br><span class=\"line\">carolina</span><br><span class=\"line\"><span class=\"comment\"># 进行其他操作</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> magician <span class=\"keyword\">in</span> magicians:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;magician.title()&#125;</span>,你的表演很精彩！&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;谢谢你，<span class=\"subst\">&#123;magician.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;感谢你们每一个人的表演&#x27;</span>)</span><br><span class=\"line\">Alice,你的表演很精彩！</span><br><span class=\"line\">谢谢你，Alice</span><br><span class=\"line\">David,你的表演很精彩！</span><br><span class=\"line\">谢谢你，David</span><br><span class=\"line\">Carolina,你的表演很精彩！</span><br><span class=\"line\">谢谢你，Carolina</span><br><span class=\"line\">感谢你们每一个人的表演</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建数值列表\"><a href=\"#创建数值列表\" class=\"headerlink\" title=\"创建数值列表\"></a>创建数值列表</h3><p><strong>range()<strong>函数可以生成一系列数，但它实际上不会打印最后一个数，这是编程语言中常见的</strong>差一</strong>行为结果，要想打印最后个数需要使用**+1或者是使用比最后一个数大1的数**</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 打印最后一位</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**list()**函数可以将range()的结果直接转换为列表，方法是将range()作为list()的参数，同时range（）还可以指定步长。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\"># 从2开始到11结束，指定步长为2</span></span><br><span class=\"line\">even_number = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(even_number)</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\"># 用for循环创建数值列表</span></span><br><span class=\"line\">squares = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>):</span><br><span class=\"line\">    square = value**<span class=\"number\">2</span></span><br><span class=\"line\">    squares.append(square)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(squares)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用这几个函数可以对数值列表进行统计<strong>列表作为其参数</strong>，min（）列表里面最小值，max（）列表里面最大值，sum（）列表所有数求和。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单统计数值列表</span></span><br><span class=\"line\">values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(values))</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(values))</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(values))</span><br><span class=\"line\"><span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>列表推导式</strong>是一种简化方法，这种方法首先指定一个列表名（变量名），然后等号右边用中括号开始，括号内的排列顺序是表达式——for循环，这种方法需要经常练习。比如创建上面数值列表可以写成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squares = [value**<span class=\"number\">2</span> <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(squares)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"comment\"># 1到50的奇数之和游戏</span></span><br><span class=\"line\">jishu_num = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(jishu_num))</span><br><span class=\"line\"><span class=\"number\">625</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>([jishu <span class=\"keyword\">for</span> jishu <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>)]))</span><br><span class=\"line\"><span class=\"number\">625</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用列表的一部分\"><a href=\"#使用列表的一部分\" class=\"headerlink\" title=\"使用列表的一部分\"></a>使用列表的一部分</h3><p><strong>切片</strong>，要使用列表的一部分，其实就是使用列表的索引。使用的方法是在调用列表时在列表名后面[0:1]，这代表列表的第一个和第二个值，就是在列表索引值0,1的值。这里面也要注意差一行为。在一个班级需要评出前三名或后三名或部分名单时，切片可以起到很好的作用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切片</span></span><br><span class=\"line\">players = [<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值1到3的元素因为差一行为，所以并不会打印索引值3的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值0到3的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[:<span class=\"number\">3</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值1到列表最后一个的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[<span class=\"number\">1</span>:])</span><br><span class=\"line\">[<span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值0到列表最后一个的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[:])</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值为列表最后3个的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[-<span class=\"number\">3</span>:])</span><br><span class=\"line\">[<span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 遍历切片</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;下面是我们的前三名&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> player <span class=\"keyword\">in</span> players[:<span class=\"number\">3</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(player.title())</span><br><span class=\"line\">下面是我们的前三名</span><br><span class=\"line\">Charles</span><br><span class=\"line\">Martina</span><br><span class=\"line\">Michael</span><br></pre></td></tr></table></figure>\n\n<p><strong>复制列表或列表切片</strong></p>\n<p>需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变，要复制列表时尽量使用切片复制。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">players = [<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">yuwen_win = players[:<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;语文前三名是：&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(yuwen_win)</span><br><span class=\"line\">语文前三名是：</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">shuxue_win = players[-<span class=\"number\">3</span>:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;数学前三名是：&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(shuxue_win)</span><br><span class=\"line\">数学前三名是：</span><br><span class=\"line\">[<span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变</span></span><br><span class=\"line\">new_players = players</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_players)</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\">players.append(<span class=\"string\">&#x27;AAABBB&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_players)</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>, <span class=\"string\">&#x27;AAABBB&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>不可以改变值的列表，称为元组（tuple），元组和列表很像，但是列表是用方括号，而元组是用圆括号。虽然不可以修改元组里面的值，但是可以通过重新赋值改变该变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dimensions = (<span class=\"number\">200</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dimensions)</span><br><span class=\"line\">(<span class=\"number\">200</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\">dimensions = (<span class=\"number\">400</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dimensions:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"number\">400</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置代码格式\"><a href=\"#设置代码格式\" class=\"headerlink\" title=\"设置代码格式\"></a>设置代码格式</h3><p>为什么要设置代码格式？</p>\n<p>代码被阅读的次数远大于编写的次数。在编写完以后的多次阅读中，良好的代码格式可以让阅读花的时间很短。<br>PEP 8 是设置代码指南，它建议每级缩进4个空格。每个编辑器（IDE）都可以设置，通常（tab）使用是最多的。<br>每行长度建议不超过79个字符，但这并不是不可逾越的红线，刚开始学的时候不必在意，不过养成这样的习惯后，会对以后和别人合作带来很多方便。<br>空行建议：不同内容建议用一个空行隔开，不建议使用3、4或多个空行来区隔，主要是空行多了影响阅读。</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何高效的处理列表中的元素，如何使用for循环遍历列表，如何创建简单的数值列表以及对数值列表执行的一些操作。还学习了如何使用切片对列表进行操作和复制，最后还学习了元组，以及设置代码格式。</p>\n<h2 id=\"第四章-if语句\"><a href=\"#第四章-if语句\" class=\"headerlink\" title=\"第四章 if语句\"></a>第四章 if语句</h2><p>编程时经常需要检查一系列的条件，并根据此决定采取什么措施。if语句让你能够检查程序的当前状态，并采取相应的措施。每条if语句的核心都是一个值为True或False的表达式。相应的符号有：&#x3D;&#x3D;、!&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;。关键字有：if、elif、else。在检查多个条件时会用到与、或、非：他们的关键词是：and（两个都为真）、or（一个为真）、not（条件为假）。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">cars = [<span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> car <span class=\"keyword\">in</span> cars:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> car == <span class=\"string\">&#x27;bmw&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(car.upper())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(car.title())</span><br><span class=\"line\">Audi</span><br><span class=\"line\">BMW</span><br><span class=\"line\">Subaru</span><br><span class=\"line\">Toyota</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car = <span class=\"string\">&#x27;bmw&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># ==是相等运算符，目的是比较等式两边的值是否相等，相等就是True否则就是False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car == <span class=\"string\">&#x27;bmw&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car == <span class=\"string\">&#x27;toyota&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 检查是忽略大小写可以用到字符串的方法upper（）或title（）等等</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.upper() == <span class=\"string\">&#x27;BMW&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>检查是否不等</strong>，这里用的符号是 !&#x3D; 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requested_topping = <span class=\"string\">&#x27;mushrooms&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> requested_topping != <span class=\"string\">&#x27;anchovies&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hold the anhovies!&#x27;</span>)</span><br><span class=\"line\">Hold the anhovies!</span><br></pre></td></tr></table></figure>\n\n<p><strong>数值比较</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age == <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age == <span class=\"number\">18</span>  </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">answer = <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> answer != <span class=\"number\">42</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这个数值不是42，请再次更改变量值！&#x27;</span>)</span><br><span class=\"line\">这个数值不是<span class=\"number\">42</span>，请再次更改变量值！</span><br></pre></td></tr></table></figure>\n\n<p><strong>检查多个条件</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_0 = <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_1 = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"comment\"># and</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_0 &gt;=<span class=\"number\">21</span> <span class=\"keyword\">and</span> age_1 &gt;=<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_0 &gt;=<span class=\"number\">21</span> <span class=\"keyword\">or</span> age_1 &gt;=<span class=\"number\">21</span>  </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>检查某个特定的值是否在或不在列表中</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> <span class=\"keyword\">in</span> number</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9</span> <span class=\"keyword\">in</span> number</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">number_0 = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> number_0 <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> number:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;number_0&#125;</span>不在我们的数字列表里面。我们把他加进来吧！&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">8</span>不在我们的数字列表里面。我们把他加进来吧！</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h3><p>在了解了条件测试之后，就可以编写if 语句了，具体使用哪一种取决于测试的条件数量。</p>\n<p><strong>最简单的if 语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你已经成年了。&#x27;</span>)</span><br><span class=\"line\">你已经成年了。</span><br></pre></td></tr></table></figure>\n\n<p><strong>if-else语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你已经成年了。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你还是未成年。&#x27;</span>)</span><br><span class=\"line\">你还是未成年。</span><br></pre></td></tr></table></figure>\n\n<p><strong>if-elif-else语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以免费观看电影。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以半价购买电影票。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你需要购买全票。&#x27;</span>)</span><br><span class=\"line\">你可以半价购买电影票。</span><br><span class=\"line\"><span class=\"comment\"># 有些情况下是可以省略else这个代码块的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以免费观看电影。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以半价购买电影票。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你需要购买全票。&#x27;</span>)</span><br><span class=\"line\">你可以半价购买电影票。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用if-语句处理列表\"><a href=\"#使用if-语句处理列表\" class=\"headerlink\" title=\"使用if 语句处理列表\"></a>使用if 语句处理列表</h3><p><strong>检查列表里面是否有相应的元素</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这个列表里3是中间数&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这个列表里有<span class=\"subst\">&#123;number&#125;</span>.&#x27;</span>)</span><br><span class=\"line\">这个列表里有<span class=\"number\">1.</span></span><br><span class=\"line\">这个列表里有<span class=\"number\">2.</span></span><br><span class=\"line\">这个列表里<span class=\"number\">3</span>是中间数</span><br><span class=\"line\">这个列表里有<span class=\"number\">4.</span></span><br><span class=\"line\">这个列表里有<span class=\"number\">5.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>确定列表是不是空列表</strong>，列表为空时都是返回False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = []</span><br><span class=\"line\"><span class=\"keyword\">if</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;adding <span class=\"subst\">&#123;number&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n所有数字添加了&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;好像这里面没有数字诶!&#x27;</span>)</span><br><span class=\"line\">好像这里面没有数字诶!</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers_0 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">numbers_1 = [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(numbers_0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(numbers_1)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers_1:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number <span class=\"keyword\">in</span> numbers_0:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这两个列表都有 <span class=\"subst\">&#123;number&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;第一个列表里面没有 <span class=\"subst\">&#123;number&#125;</span> 这个数。&#x27;</span>)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">6</span> 这个数。</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">7</span> 这个数。</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">8</span> 这个数。</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">9</span> 这个数。</span><br><span class=\"line\">这两个列表都有 <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了if语句以及相关的关键词和符号，也使用for循环遍历列表时对某些元素做特出处理。</p>\n<h2 id=\"第五章-字典\"><a href=\"#第五章-字典\" class=\"headerlink\" title=\"第五章 字典\"></a>第五章 字典</h2><p>字典就是储存多个有两种相关信息的元素，比如姓名及其年龄，单词及其含义等，字典的信息量也不守限制。</p>\n<h3 id=\"一个简单的字典\"><a href=\"#一个简单的字典\" class=\"headerlink\" title=\"一个简单的字典\"></a>一个简单的字典</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;color&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;points&#x27;</span>])</span><br><span class=\"line\">bule</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用字典\"><a href=\"#使用字典\" class=\"headerlink\" title=\"使用字典\"></a>使用字典</h3><p>字典（dictionary）是一系列的<strong>键值对</strong>，每个键都对应一个值，字典用放在花括号{ }中的一系列键值对表示。</p>\n<p><strong>访问字典中的值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;color&#x27;</span>])</span><br><span class=\"line\">bule</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加键值对</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien[<span class=\"string\">&#x27;x_position&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">alien[<span class=\"string\">&#x27;y_position&#x27;</span>] = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien）</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个空字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;&#125;</span><br><span class=\"line\">alien[<span class=\"string\">&#x27;color&#x27;</span>] = <span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">alien[<span class=\"string\">&#x27;x_position&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">alien[<span class=\"string\">&#x27;y_position&#x27;</span>] = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改字典中的值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien[<span class=\"string\">&#x27;x_position&#x27;</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除键值对</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien[<span class=\"string\">&#x27;speed&#x27;</span>] = <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 删除键值对</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> alien[<span class=\"string\">&#x27;speed&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>由类似对象组成字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favonlie_languages = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;jen&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sarah&#x27;</span>: <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;edward&#x27;</span>: <span class=\"string\">&#x27;swift&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;phil&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> favonlie_languages.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;key.title()&#125;</span>喜欢使用<span class=\"subst\">&#123;value.title()&#125;</span>语言编程！&#x27;</span>)</span><br><span class=\"line\">Jen喜欢使用Python语言编程！</span><br><span class=\"line\">Sarah喜欢使用C语言编程！</span><br><span class=\"line\">Edward喜欢使用Swift语言编程！</span><br><span class=\"line\">Phil喜欢使用Python语言编程！</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用get()方法来访问值</strong></p>\n<p>如果你访问的值不存在字典里，你直接访问的话会出现错误，这时候可以使用get()方法来访问，这个方法可以让你在访问不存在的值的时候返回一个默认值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;speed&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">发生异常: KeyError</span><br><span class=\"line\"><span class=\"string\">&#x27;speed&#x27;</span></span><br><span class=\"line\">  File <span class=\"string\">&quot;favonlie_languages.py&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;speed&#x27;</span>])</span><br><span class=\"line\">          ~~~~~^^^^^^^^^</span><br><span class=\"line\">KeyError: <span class=\"string\">&#x27;speed&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien.get(<span class=\"string\">&#x27;speed&#x27;</span>, <span class=\"string\">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))</span><br><span class=\"line\">不好意思，没有这个索引且没有对应的值</span><br><span class=\"line\">alien[<span class=\"string\">&#x27;speed&#x27;</span>] = <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien.get(<span class=\"string\">&#x27;speed&#x27;</span>, <span class=\"string\">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))</span><br><span class=\"line\">medium</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历字典\"><a href=\"#遍历字典\" class=\"headerlink\" title=\"遍历字典\"></a>遍历字典</h3><p>遍历字典中的内容有3个基本的关键词，items()字典中的键和值，有这个方法需要两个临时变量用于遍历字典、keys()遍历字典中的键、values()遍历字典中的值。</p>\n<p><strong>遍历所有键值对</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">like_number = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"string\">&#x27;7&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"string\">&#x27;5&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;d&#x27;</span>: <span class=\"string\">&#x27;9&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> like_number.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;key.title()&#125;</span> like number is <span class=\"subst\">&#123;value&#125;</span>&#x27;</span>)</span><br><span class=\"line\">A like number <span class=\"keyword\">is</span> <span class=\"number\">8</span></span><br><span class=\"line\">B like number <span class=\"keyword\">is</span> <span class=\"number\">7</span></span><br><span class=\"line\">C like number <span class=\"keyword\">is</span> <span class=\"number\">5</span></span><br><span class=\"line\">D like number <span class=\"keyword\">is</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历所有键</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favonlie_languages = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;jen&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sarah&#x27;</span>: <span class=\"string\">&#x27;c#&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;edward&#x27;</span>: <span class=\"string\">&#x27;swift&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;phil&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 遍历所有键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> favonlie_languages.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name.title())</span><br><span class=\"line\">Jen</span><br><span class=\"line\">Sarah</span><br><span class=\"line\">Edward</span><br><span class=\"line\">Phil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按特定顺序遍历字典中的所有键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(favonlie_languages.keys()):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Thank you <span class=\"subst\">&#123;name.title()&#125;</span>,you are welcome!&#x27;</span>)</span><br><span class=\"line\">Thank you Edward,you are welcome!</span><br><span class=\"line\">Thank you Jen,you are welcome!</span><br><span class=\"line\">Thank you Phil,you are welcome!</span><br><span class=\"line\">Thank you Sarah,you are welcome!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历字典中的所有值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;编程语言&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> language <span class=\"keyword\">in</span> favonlie_languages.values():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(language)</span><br><span class=\"line\">编程语言</span><br><span class=\"line\">python</span><br><span class=\"line\">c<span class=\"comment\">#</span></span><br><span class=\"line\">swift</span><br><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n\n<p>**set()**方法用于提取列表或集合中的不同元素，如果有相同的只会提取一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;编程语言&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> language <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>(favonlie_languages.values()):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(language.title())</span><br><span class=\"line\">编程语言</span><br><span class=\"line\">swift</span><br><span class=\"line\">c<span class=\"comment\">#</span></span><br><span class=\"line\">python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集合表现形式，一般用花括号，但里面是没有键值对的，里面的元素表现跟列表一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><p>有些时候需要将多个字典储存在列表中或将列表作为值储存在字典中，这中行为就成为嵌套。</p>\n<p><strong>字典列表</strong>就是在列表中储存字典可以应用于用户信息等。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien_0 = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">alien_1 = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">alien_2 = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">15</span>&#125;</span><br><span class=\"line\">aliens = [alien_0, alien_1, alien_2]</span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">15</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个用于储存外星人的空列表</span></span><br><span class=\"line\">aliens = []</span><br><span class=\"line\"><span class=\"comment\"># 用for循环创建30个绿色的外星人</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien_number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>):</span><br><span class=\"line\">    new_alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">    aliens.append(new_alien)</span><br><span class=\"line\"><span class=\"comment\"># 打印前5个外星人</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens[:<span class=\"number\">5</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 显示创建了多少个外星人</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;创建了多少个外星人:<span class=\"subst\">&#123;<span class=\"built_in\">len</span>(aliens)&#125;</span>&#x27;</span>)</span><br><span class=\"line\">创建了多少个外星人:<span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"comment\"># 修改前三个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens[:<span class=\"number\">3</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> alien[<span class=\"string\">&#x27;color&#x27;</span>] == <span class=\"string\">&#x27;green&#x27;</span>:</span><br><span class=\"line\">        alien[<span class=\"string\">&#x27;color&#x27;</span>] = <span class=\"string\">&#x27;yellow&#x27;</span></span><br><span class=\"line\">        alien[<span class=\"string\">&#x27;points&#x27;</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">        alien[<span class=\"string\">&#x27;speed&#x27;</span>] = <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens[:<span class=\"number\">5</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在字典中储存列表</strong>可以用于食品配方等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pizza = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;crust&#x27;</span>: <span class=\"string\">&#x27;think&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;toppings&#x27;</span>: [<span class=\"string\">&#x27;mushrooms&#x27;</span>, <span class=\"string\">&#x27;extra cheese&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(</span><br><span class=\"line\">    <span class=\"string\">f&#x27;You ordered a <span class=\"subst\">&#123;pizza[<span class=\"string\">&quot;crust&quot;</span>]&#125;</span>-crust pizza &#x27;</span><span class=\"string\">&quot;with the following toppings:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> topping <span class=\"keyword\">in</span> pizza[<span class=\"string\">&#x27;toppings&#x27;</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\t<span class=\"subst\">&#123;topping&#125;</span>&#x27;</span>)</span><br><span class=\"line\">You ordered a think-crust pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">\tmushrooms</span><br><span class=\"line\">\textra cheese</span><br></pre></td></tr></table></figure>\n\n<p><strong>在字典中储存字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;albert&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;einstein&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;location&#x27;</span>: <span class=\"string\">&#x27;princeton&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;marie&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;curie&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;location&#x27;</span>: <span class=\"string\">&#x27;paris&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> username, user_info <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nUsername: <span class=\"subst\">&#123;username&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;user_info[<span class=\"string\">&#x27;first&#x27;</span>]&#125;</span> <span class=\"subst\">&#123;user_info[<span class=\"string\">&#x27;last&#x27;</span>]&#125;</span>&quot;</span></span><br><span class=\"line\">    location = user_info[<span class=\"string\">&#x27;location&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\tFullname: <span class=\"subst\">&#123;full_name.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\tLocation: <span class=\"subst\">&#123;location.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Username: aeinstein</span><br><span class=\"line\">\tFullname: Albert Einstein</span><br><span class=\"line\">\tLocation: Princeton</span><br><span class=\"line\"></span><br><span class=\"line\">Username: mcurie</span><br><span class=\"line\">\tFullname: Marie Curie</span><br><span class=\"line\">\tLocation: Paris</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章我们学习了如何定义字典，以及如何使用储存在字典中的信息。然后学习了如何访问和修改字典中的元素，以及如何遍历字典中的信息。还学习了如何遍历字典中的所有键值对、所有的键和所有的值。学习了如何在列表中嵌套字典，在字典中如何嵌套列表，在字典中嵌套字典。</p>\n<h2 id=\"第六章-用户输入和while循环\"><a href=\"#第六章-用户输入和while循环\" class=\"headerlink\" title=\"第六章 用户输入和while循环\"></a>第六章 用户输入和while循环</h2><h3 id=\"input-函数的工作原理\"><a href=\"#input-函数的工作原理\" class=\"headerlink\" title=\"input()函数的工作原理\"></a>input()函数的工作原理</h3><p>input()函数让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，以便使用。input()函数接受一个参数，即要向用户显示的提示(prompt)。用户输入的内容Python默认为字符串，要想用户输入其他内容需要再input()前面制定类型，比如：要想用户输入的是数值 int(input(“How old are you”))。<br><strong>注意：</strong>有些文本编辑器不能运行提示用户输入的程序，要运行他们需要从终端运行。在cmd终端里面直接运行python文件就可以了，<strong>格式是</strong>：路径&gt;py 文件名和文件后缀。有些python版本需要使用：路径&gt;python 文件名和文件后缀。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;tell me something, and I will repeat it back to you:&quot;</span>)</span><br><span class=\"line\">tell me something, <span class=\"keyword\">and</span> I will repeat it back to you: hello world</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"> hello world</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>  </span><br></pre></td></tr></table></figure>\n\n<p><strong>使用int()来获取数值输入</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制用户输入的内容为数字</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;How old are you: &quot;</span>))</span><br><span class=\"line\">How old are you: <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age&gt;<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>求模运算</strong>是个很有用的工具，它将两个数相除并返回余数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个数，我可以判断是奇数还是偶数：&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> number % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这个数是偶数！&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这个数是奇数！&quot;</span>)</span><br><span class=\"line\">请输入一个数，我可以判断是奇数还是偶数：<span class=\"number\">50</span></span><br><span class=\"line\">这个数是偶数！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-循环简介\"><a href=\"#while-循环简介\" class=\"headerlink\" title=\"while 循环简介\"></a>while 循环简介</h3><p>for 循环用于针对集合中的每个元素执行一个代码块，而 while 循环这不断地运行，只到指定的条件不再满足为止。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &lt;= <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    number += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>让用户选择何时退出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只要用户输入的不是‘quit’和‘exit’该循环就继续运行。</span></span><br><span class=\"line\">prompt = <span class=\"string\">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> message != <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message != <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 这里添加了一个lower方法目的是让用户输入的内容都变成小写和下面的if进行判断。</span></span><br><span class=\"line\">    message = <span class=\"built_in\">input</span>(prompt).lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message == <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;恭喜你！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class=\"number\">2</span></span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class=\"number\">3</span></span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: ExiT</span><br><span class=\"line\">恭喜你！</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用标志让用户选择何时退出</span></span><br><span class=\"line\">prompt = <span class=\"string\">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span></span><br><span class=\"line\">active = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> active:</span><br><span class=\"line\">    message = <span class=\"built_in\">input</span>(prompt).lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message == <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;恭喜你！&quot;</span>)</span><br><span class=\"line\">        active = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;再想想退出的英文是什么？&quot;</span>)</span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: qwe</span><br><span class=\"line\">再想想退出的英文是什么？</span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: QUIT</span><br><span class=\"line\">恭喜你！</span><br></pre></td></tr></table></figure>\n\n<p><strong>break 退出循环</strong>，不管条件满不满足，想立即退出 while 循环，不再运行后面的代码，可以使用 break 语句。上面的例子已经使用过一次了。我们再使用一个特别的例子。break 还可以用来退出遍历列表或字典的 for 循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请你说说你喜欢哪个城市: &quot;</span>).lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message == <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;再见！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;除了<span class=\"subst\">&#123;message.title()&#125;</span>还有其他的城市么？&quot;</span>)</span><br><span class=\"line\">请你说说你喜欢哪个城市: shang hai</span><br><span class=\"line\">除了Shang Hai 还有其他的城市么？</span><br><span class=\"line\">请你说说你喜欢哪个城市: QUIT</span><br><span class=\"line\">再见！</span><br></pre></td></tr></table></figure>\n\n<p><strong>在循环中使用 continue</strong> </p>\n<p>要返回循环的开头，并根据条件测试的结果决定是否继续执行循环，可以使用 continue 语句，他不像 break 那样不执行余下的代码并退出整个循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    number += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>避免无线循环</strong></p>\n<p>while 循环一定要设置退出条件，如果没有退出条件，while 循环就会无止境的一直执行代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-while-循环处理列表和字典\"><a href=\"#使用-while-循环处理列表和字典\" class=\"headerlink\" title=\"使用 while 循环处理列表和字典\"></a>使用 while 循环处理列表和字典</h3><p>for 循环是一种遍历列表的有效方式，但不应该在 for 循环中修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时修改它，可使用 while 循环。通过将 while 循环与列表和字典结合起来使用，可收集、存储并组织大量的输入，供以后查看和使用。<strong>注意</strong>，这里有个有意思的事情，就是列表里面是空的时候它的布尔值是 False ，列表里面有元素的时候，它的布尔值是 True 。</p>\n<p><strong>在列表之间移动元素</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先创建一个待验证的用户列表</span></span><br><span class=\"line\"><span class=\"comment\"># 和一个用户储存已验证用户的空列表</span></span><br><span class=\"line\">unconfirmed_users = [<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;zqten&#x27;</span>, <span class=\"string\">&#x27;candace&#x27;</span>]</span><br><span class=\"line\">confirmed_users = []</span><br><span class=\"line\"><span class=\"comment\"># 验证每个用户，直到没有未验证的用户为止</span></span><br><span class=\"line\"><span class=\"comment\"># 将每个经过验证的用户添加到已验证用户列表中</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> unconfirmed_users:</span><br><span class=\"line\">    current_user = unconfirmed_users.pop()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Verifying user: <span class=\"subst\">&#123;current_user.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    confirmed_users.append(current_user)</span><br><span class=\"line\"><span class=\"comment\"># 显示所有的已验证的用户</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nThe following users have been confirmed:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> confirmed_user <span class=\"keyword\">in</span> confirmed_users:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(confirmed_user.title())</span><br><span class=\"line\">    </span><br><span class=\"line\">Verifying user: Candace</span><br><span class=\"line\">Verifying user: Zqten</span><br><span class=\"line\">Verifying user: Admin</span><br><span class=\"line\"></span><br><span class=\"line\">The following users have been confirmed:</span><br><span class=\"line\">Candace</span><br><span class=\"line\">Zqten</span><br><span class=\"line\">Admin</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除为特定值的所有列表元素</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除为特定值的所有列表元素</span></span><br><span class=\"line\">pets = [<span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;goldfish&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;rabbit&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pets)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"string\">&#x27;cat&#x27;</span> <span class=\"keyword\">in</span> pets:</span><br><span class=\"line\">    pets.remove(<span class=\"string\">&#x27;cat&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pets)</span><br><span class=\"line\">[<span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;goldfish&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;rabbit&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;goldfish&#x27;</span>, <span class=\"string\">&#x27;rabbit&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用用户输入填充字典</strong></p>\n<p>可以使用 while 循环提示用户输入任意多的信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用用户输入填充字典</span></span><br><span class=\"line\">responses = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 设置一个标志，指出调查是否继续</span></span><br><span class=\"line\">polling_active = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这是调查每个人的爱好，请根据提示输入。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> polling_active:</span><br><span class=\"line\">    <span class=\"comment\"># 提示输入被调查者的名字和回答</span></span><br><span class=\"line\">    name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入被调查者的名字：&quot;</span>)</span><br><span class=\"line\">    response = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入被调查者的回答：&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 将输入的数据储存在字典中</span></span><br><span class=\"line\">    responses[name] = response</span><br><span class=\"line\">    <span class=\"comment\"># 询问用户是否继续调查</span></span><br><span class=\"line\">    repeat = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> repeat == <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">        polling_active = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"comment\"># 下面这段代码的目的是让用户输入yes和no，输入其他的会提示错误，如果是只判断退出循环条件的话，可以省略下面。</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> repeat == <span class=\"string\">&#x27;yes&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> repeat != <span class=\"string\">&#x27;yes&#x27;</span> <span class=\"keyword\">or</span> repeat != <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> repeat == <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">                polling_active = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> repeat == <span class=\"string\">&#x27;yes&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入错误，请重新输入&quot;</span>)</span><br><span class=\"line\">                repeat = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> repeat == <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">            polling_active = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出调查结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n---调查结果---&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> name, response <span class=\"keyword\">in</span> responses.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;name&#125;</span>的爱好是: <span class=\"subst\">&#123;response&#125;</span>。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">这是调查每个人的爱好，请根据提示输入。</span><br><span class=\"line\">请输入被调查者的名字：刘翔</span><br><span class=\"line\">请输入被调查者的回答：跨栏</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）不知道</span><br><span class=\"line\">输入错误，请重新输入</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）yes</span><br><span class=\"line\">请输入被调查者的名字：姚明</span><br><span class=\"line\">请输入被调查者的回答：篮球</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）不知道</span><br><span class=\"line\">输入错误，请重新输入</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）no</span><br><span class=\"line\"></span><br><span class=\"line\">---调查结果---</span><br><span class=\"line\">刘翔的爱好是: 跨栏。</span><br><span class=\"line\">姚明的爱好是: 篮球。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何在程序中使用 input() 来让用户提供信息，如何处理文本和数的输入，以及如何使用 while 循环让程序按用户的要求不断地运行。然后见识了多种控制 while 循环流程的方式：设置活动标志，使用 break 语句，以及使用 continue 语句。还学习了如何使用 while 循环在列表之间移动元素，以及如何从列表中删除所有包含特定值的元素。最后，学习了如何结合使用 while 循环和字典。</p>\n<h2 id=\"第七章-函数\"><a href=\"#第七章-函数\" class=\"headerlink\" title=\"第七章 函数\"></a>第七章 函数</h2><p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用（call）该函数。当需要再程序中多次执行同一项任务时，无须反复编写完成该任务的代码，只需要调用执行该任务的函数，让Python运行其中的代码即可。</p>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><p>定义函数的关键字是 def 。后面是函数名和括号，没有参数时可以是空括号，然后和 for 、while 一样也需要冒号，表示定义完成，换行后缩进表示要执行的代码块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_user</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">greet_user()</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<p><strong>向函数传递信息</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_user</span>(<span class=\"params\">uesrname</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello,<span class=\"subst\">&#123;uesrname&#125;</span>!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">greet_user(<span class=\"string\">&#x27;zqten&#x27;</span>)</span><br><span class=\"line\">Hello,zqten!</span><br></pre></td></tr></table></figure>\n\n<p><strong>实参和形参</strong></p>\n<p>在上面的例子中，uesrname是一个形参，即函数完成工作所需要的信息。<br>而 ‘zqten’ 则是实参，即在调用函数时传递给函数的信息。</p>\n<h3 id=\"传递实参\"><a href=\"#传递实参\" class=\"headerlink\" title=\"传递实参\"></a>传递实参</h3><p>传递实参有两种方式，一种是按照位置顺序传递，另一种是按照关键字传递。按照关键字传递实参不用考虑顺序，但要记得关键字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">describe_pet</span>(<span class=\"params\">animal_type, pet_name: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nI have a <span class=\"subst\">&#123;animal_type&#125;</span>.&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My <span class=\"subst\">&#123;animal_type&#125;</span>&#x27;s name is <span class=\"subst\">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 按位置顺序传递实参</span></span><br><span class=\"line\">describe_pet(<span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;duoduo&#x27;</span>)</span><br><span class=\"line\">I have a cat.</span><br><span class=\"line\">My cat<span class=\"string\">&#x27;s name is Duoduo.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 按关键字传递实参</span></span><br><span class=\"line\"><span class=\"string\">describe_pet(pet_name=&#x27;</span>nai cha<span class=\"string\">&#x27;, animal_type=&#x27;</span>dog<span class=\"string\">&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">I have a dog.</span></span><br><span class=\"line\"><span class=\"string\">My dog&#x27;</span>s name <span class=\"keyword\">is</span> Nai Cha.</span><br></pre></td></tr></table></figure>\n\n<p><strong>默认值</strong></p>\n<p>有些时候你想改变某个参数，但有些时候你想让这个参数先有一个默认值，后面调用的时候看情况是否修改。这种情况可以为参数设置一个默认值。如果没有设置默认值，在调用的时候也没有传递参数 Python 就会报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">describe_pet</span>(<span class=\"params\">animal_type=<span class=\"string\">&#x27;cat&#x27;</span>, pet_name=<span class=\"string\">&#x27;duo duo&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nI have a <span class=\"subst\">&#123;animal_type&#125;</span>.&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My <span class=\"subst\">&#123;animal_type&#125;</span>&#x27;s name is <span class=\"subst\">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 有默认值的情况下，可以不用传递参数，也可以看需要传递</span></span><br><span class=\"line\">describe_pet()</span><br><span class=\"line\">I have a cat.</span><br><span class=\"line\">My cat<span class=\"string\">&#x27;s name is Duo Duo.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">describe_pet(&#x27;</span>dog<span class=\"string\">&#x27;, &#x27;</span>nai cha<span class=\"string\">&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">I have a dog.</span></span><br><span class=\"line\"><span class=\"string\">My dog&#x27;</span>s name <span class=\"keyword\">is</span> Nai Cha.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数并非总是直接显示输出，它还可以处理一些数据，并返回一个或一组值，函数返回的值称为返回值。在函数中 <strong>return</strong> 语句将值返回到调用函数的那行代码，返回值能让你将程序的大部分繁重工作移到函数中，从而简化程序。</p>\n<p><strong>返回简单的值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">first_name, last_name</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    full_name = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span>&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">musician = get_formatted_name(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendrix&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">Jimi Hendrix </span><br></pre></td></tr></table></figure>\n\n<p><strong>让实参变成可选</strong></p>\n<p>就是先设置参数的默认值，但这个默认值是一个空值。不需要的时候就不会出现，需要的时候只需要在调用的时候传递一个参数就可以。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">first_name, last_name, middle_name=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    full_name = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span> <span class=\"subst\">&#123;middle_name&#125;</span>&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">musician = get_formatted_name(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendrix&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">Jimi Hendrix </span><br><span class=\"line\"></span><br><span class=\"line\">musician = get_formatted_name(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendrix&#x27;</span>, <span class=\"string\">&#x27;YYY&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">Jimi Hendrix Yyy</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回字典</strong></p>\n<p>这里有个小小的细节，就是 age&#x3D;None 是一个布尔值并且是 False 。意思就是这个参数并没有值返回 False 。如果为这个参数传递了一个值，它就返回 True 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">build_person</span>(<span class=\"params\">first_name, last_name, age=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回一个字典，其中包含一个人的信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    person = &#123;<span class=\"string\">&#x27;first&#x27;</span>: first_name, <span class=\"string\">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> age:</span><br><span class=\"line\">        person[<span class=\"string\">&#x27;age&#x27;</span>] = age</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person</span><br><span class=\"line\"></span><br><span class=\"line\">musician = build_person(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendeix&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;hendeix&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">musician = build_person(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendeix&#x27;</span>, age=<span class=\"number\">36</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;hendeix&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">36</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结合使用函数和 while 循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">first_name, last_name, middle_name=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    full_name = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span> <span class=\"subst\">&#123;middle_name&#125;</span>&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nPleasr tell me your name:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;(enter &#x27;q&#x27; at any time to quit.)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    f_name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;你姓什么：&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f_name == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    l_name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;你的名字是什么：&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l_name == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    full_name = get_formatted_name(f_name, l_name)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;你好, <span class=\"subst\">&#123;full_name&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Pleasr tell me your name:</span><br><span class=\"line\">(enter <span class=\"string\">&#x27;q&#x27;</span> at <span class=\"built_in\">any</span> time to quit.)</span><br><span class=\"line\">你姓什么：yao</span><br><span class=\"line\">你的名字是什么：ming</span><br><span class=\"line\">你好, Yao Ming </span><br><span class=\"line\"></span><br><span class=\"line\">Pleasr tell me your name:</span><br><span class=\"line\">(enter <span class=\"string\">&#x27;q&#x27;</span> at <span class=\"built_in\">any</span> time to quit.)</span><br><span class=\"line\">你姓什么：q</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传递列表\"><a href=\"#传递列表\" class=\"headerlink\" title=\"传递列表\"></a>传递列表</h3><p>将列表传递给函数后，函数就能直接访问其内容，进行修改等等操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_users</span>(<span class=\"params\">names</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;向列表中的每个用户发出简单的问候&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello, %s!&#x27;</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\">username = [<span class=\"string\">&#x27;zqten&#x27;</span>, <span class=\"string\">&#x27;zhengjizhong&#x27;</span>, <span class=\"string\">&#x27;zhengkainan&#x27;</span>, <span class=\"string\">&#x27;zhouhuarong&#x27;</span>]</span><br><span class=\"line\">greet_users(username)</span><br><span class=\"line\"></span><br><span class=\"line\">Hello, zqten!</span><br><span class=\"line\">Hello, zhengjizhong!</span><br><span class=\"line\">Hello, zhengkainan!</span><br><span class=\"line\">Hello, zhouhuarong!</span><br></pre></td></tr></table></figure>\n\n<p><strong>在函数中修改列表</strong>这个程序演示了一个概念：每个函数都应只负责一项具体工作。这有助于将复杂的任务分解成一系列简单的步骤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unprinted_designs = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">completed_models = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_models</span>(<span class=\"params\">unprinted_designs, completed_models</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    模拟打印每个数字，直到没有未打印的数字为止</span></span><br><span class=\"line\"><span class=\"string\">    打印每个数字后，都将其移到列表completed_models中</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> unprinted_designs:</span><br><span class=\"line\">        current_design = unprinted_designs.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Printing model: %s&#x27;</span> % current_design)</span><br><span class=\"line\">        completed_models.append(current_design)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_completed_models</span>(<span class=\"params\">completed_models</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示打印好的所有数字&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nThe following models have been printed:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> completed_model <span class=\"keyword\">in</span> completed_models:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(completed_model, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print_models(unprinted_designs, completed_models)</span><br><span class=\"line\">show_completed_models(completed_models)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(unprinted_designs)</span><br><span class=\"line\"></span><br><span class=\"line\">Printing model: <span class=\"number\">1</span></span><br><span class=\"line\">Printing model: <span class=\"number\">2</span></span><br><span class=\"line\">Printing model: <span class=\"number\">3</span></span><br><span class=\"line\">Printing model: <span class=\"number\">4</span></span><br><span class=\"line\">Printing model: <span class=\"number\">5</span></span><br><span class=\"line\">Printing model: <span class=\"number\">6</span></span><br><span class=\"line\">Printing model: <span class=\"number\">7</span></span><br><span class=\"line\">Printing model: <span class=\"number\">8</span></span><br><span class=\"line\">Printing model: <span class=\"number\">9</span></span><br><span class=\"line\">Printing model: <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">The following models have been printed:</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> []</span><br><span class=\"line\"><span class=\"comment\"># 如果不希望传递后列表为空，可以使用副本传递参数 [:] 切片传递</span></span><br><span class=\"line\">print_models(unprinted_designs[:], completed_models)</span><br><span class=\"line\">show_completed_models(completed_models)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(unprinted_designs)</span><br><span class=\"line\"></span><br><span class=\"line\">Printing model: <span class=\"number\">1</span></span><br><span class=\"line\">Printing model: <span class=\"number\">2</span></span><br><span class=\"line\">Printing model: <span class=\"number\">3</span></span><br><span class=\"line\">Printing model: <span class=\"number\">4</span></span><br><span class=\"line\">Printing model: <span class=\"number\">5</span></span><br><span class=\"line\">Printing model: <span class=\"number\">6</span></span><br><span class=\"line\">Printing model: <span class=\"number\">7</span></span><br><span class=\"line\">Printing model: <span class=\"number\">8</span></span><br><span class=\"line\">Printing model: <span class=\"number\">9</span></span><br><span class=\"line\">Printing model: <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">The following models have been printed:</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传递任意数量的参数\"><a href=\"#传递任意数量的参数\" class=\"headerlink\" title=\"传递任意数量的参数\"></a>传递任意数量的参数</h3><p>“ * ” 带形参名中的星号让Python创建一个名为形参名的元组，该元组包含函数收到的所有值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_pizza</span>(<span class=\"params\">*toppings</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nMaking a pizza with the following toppings:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> topping <span class=\"keyword\">in</span> toppings:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(topping)</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"string\">&#x27;mushrooms&#x27;</span>, <span class=\"string\">&#x27;extra cheese&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">aaa</span><br><span class=\"line\"></span><br><span class=\"line\">Making a pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">mushrooms</span><br><span class=\"line\">extra cheese</span><br></pre></td></tr></table></figure>\n\n<p><strong>结合使用位置实参和任意数量的实参</strong></p>\n<p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置和关键字实参，再将余下的实参都收集到最后一个形参中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_pizza</span>(<span class=\"params\">size, *toppings</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nMaking a <span class=\"subst\">&#123;size&#125;</span>-inch pizza with the following toppings:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> topping <span class=\"keyword\">in</span> toppings:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;- <span class=\"subst\">&#123;topping&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"number\">16</span>, <span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"number\">19</span>, <span class=\"string\">&#x27;mushrooms&#x27;</span>, <span class=\"string\">&#x27;extra cheese&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- aaa</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">19</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- mushrooms</span><br><span class=\"line\">- extra cheese</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用任意数量的关键字实参</strong></p>\n<p>“ ** ” 带形参名中的两个星号让Python创建一个名为形参名的字典，该字典包含函数收到的所有的键值对。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">build_profile</span>(<span class=\"params\">first, last, **user_info</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;创建一个字典，其中包含我们知道的有关用户的一切&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    user_info[<span class=\"string\">&#x27;first_name&#x27;</span>] = first</span><br><span class=\"line\">    user_info[<span class=\"string\">&#x27;last_name&#x27;</span>] = last</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_info</span><br><span class=\"line\"></span><br><span class=\"line\">user_profile = build_profile(</span><br><span class=\"line\">    <span class=\"string\">&#x27;zheng&#x27;</span>, <span class=\"string\">&#x27;ji zhong&#x27;</span>, age=<span class=\"number\">11</span>, height=<span class=\"string\">&#x27;147cm&#x27;</span>, weight=<span class=\"string\">&#x27;48kg&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(user_profile)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">11</span>, <span class=\"string\">&#x27;height&#x27;</span>: <span class=\"string\">&#x27;147cm&#x27;</span>, <span class=\"string\">&#x27;weight&#x27;</span>: <span class=\"string\">&#x27;48kg&#x27;</span>, <span class=\"string\">&#x27;first_name&#x27;</span>: <span class=\"string\">&#x27;zheng&#x27;</span>, <span class=\"string\">&#x27;last_name&#x27;</span>: <span class=\"string\">&#x27;ji zhong&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将函数存储在模块中\"><a href=\"#将函数存储在模块中\" class=\"headerlink\" title=\"将函数存储在模块中\"></a>将函数存储在模块中</h3><p>将函数存储在称为模块的独立文件中，再将模块导入（import）主程序。可以让代码看起来容易理解。</p>\n<p><strong>导入整个模块</strong></p>\n<p>要让函数是可导入的，得先创建模块。模块是扩展名为 .py 的文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pizza</span><br><span class=\"line\">pizza.make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">pizza.make_pizza(<span class=\"number\">17</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">17</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入特定的函数</strong></p>\n<p>只想导入模块中的特定函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pizza <span class=\"keyword\">import</span> make_pizza</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"number\">16</span>,<span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 as 给函数指定别名</strong></p>\n<p>如果要导入的函数的名称太长或者可能与程序中的其他名称有冲突，可指定简短而独一无二的别名。这个方法也可以应用到给模块指定别名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pizza <span class=\"keyword\">import</span> make_pizza <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"></span><br><span class=\"line\">mp(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">mp(<span class=\"number\">16</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>, <span class=\"string\">&#x27;fanqie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br><span class=\"line\">- fanqie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以给模块指定别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pizza <span class=\"keyword\">as</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">p.make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">p.make_pizza(<span class=\"number\">16</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>, <span class=\"string\">&#x27;fanqie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br><span class=\"line\">- fanqie</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>导入模块中的所有函数</strong></p>\n<p>这种方法一般慎用，因为如果模块中有函数的名称与当前项目中的名称相同，可能导致意想不到的结果。<strong>最好的做法是要么只导入需要使用的函数，要么导入整个模块并使用点号调用</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pizza <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"number\">16</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>, <span class=\"string\">&#x27;fanqie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br><span class=\"line\">- fanqie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入其他文件夹的模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> 文件夹名称 <span class=\"keyword\">import</span> 模块</span><br><span class=\"line\"><span class=\"keyword\">from</span> 文件夹名称.模块 <span class=\"keyword\">import</span> 函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数编写指南\"><a href=\"#函数编写指南\" class=\"headerlink\" title=\"函数编写指南\"></a>函数编写指南</h3><p>在编写函数时需要牢记几个细节。</p>\n<ul>\n<li>应给函数指定描述性的名称，且只使用小写字母和下划线。</li>\n<li>每个函数都应包含简要阐述其功能的注释。意思就是每个函数都需要编写使用说明的注释。</li>\n<li>形参指定默认值时，等号两边不要有空格。</li>\n<li>如果程序或模块包含多个函数，可以使用两个空行将函数隔开。</li>\n<li>所有的 import 语句都应该放在文件开头。唯一的例外是，你要在文件开头编写整个程序的注释。</li>\n<li>导入自己边学的模块时，尽量把模块和程序放在一个文件夹。</li>\n</ul>\n<h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何编写函数，以及如何传递实参，让函数能够访问完成工作所需的信息。然后学习了如何使用位置实参和关键字实参，以及如何接受任意数量的实参，学习了显示输出的函数和返回值的函数，知道了如何将函数与列表、字典、if、语句和 while 循环结合起来使用，以及如何将函数存储在称为模块的独立文件中，让程序文件更简单、更易于理解。最后，了解了函数编写指南，遵循这些指南可让程序始终保持良好的结构。<br>程序员的目标之一是编写简单的代码来完成任务，而函数有助于实现这样的目标。</p>\n<h2 id=\"第八章-类\"><a href=\"#第八章-类\" class=\"headerlink\" title=\"第八章 类\"></a>第八章 类</h2><p>面向对象编程（object-oriented-programming, OOP）是最有效的软件编写方法之一。在基于类创建对象时，每个对象都自动具备类定义的通用行为。然后，你可根据需要赋予每个对象独特的个性。根据类来创建对象称为<strong>实例化</strong>，这让你能够使用类的实例。</p>\n<p>面相对象变成有助于你像程序员那样看世界，并且真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维能力，让你能够通过编写程序来解决遇到的几乎任何问题。</p>\n<h3 id=\"创建和使用类\"><a href=\"#创建和使用类\" class=\"headerlink\" title=\"创建和使用类\"></a>创建和使用类</h3><p><strong>创建Dog类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Dog类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟小狗的简单尝试&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化属性name和age&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.name = name</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;模拟小狗坐下&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> is now sitting.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">roll_over</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;模拟小狗打滚&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> rolled over.&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>“<strong>init</strong>()”方法是类的初始化方法，类中的函数称为方法。这个方法的开头和结尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。<br>这个方法定义成包含三个形参：self 、name、age。这个方法中self 是必不可少，而且必须位于其他形参的前面。self就是类的自身，当我们实例化这个类时，我们传递的参数会通过 self 传递给类自身。self.name &#x3D; name 里面 self 前缀的变量可供类中的所有方法使用。</p>\n<p><strong>根据类创建实例</strong></p>\n<p>可以将类视为有关如何创建实例的说明。:yum:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">my_dog = Dog(<span class=\"string\">&#x27;duoduo&#x27;</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># my_dog.name 就是访问实例的属性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My dog&#x27;s name is <span class=\"subst\">&#123;my_dog.name&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My dog&#x27;s age is <span class=\"subst\">&#123;my_dog.age&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">My dog<span class=\"string\">&#x27;s name is duoduo</span></span><br><span class=\"line\"><span class=\"string\">My dog&#x27;</span>s age <span class=\"keyword\">is</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"comment\"># 调用方法</span></span><br><span class=\"line\">my_dog.sit()</span><br><span class=\"line\">my_dog.roll_over()</span><br><span class=\"line\"></span><br><span class=\"line\">duoduo <span class=\"keyword\">is</span> now sitting.</span><br><span class=\"line\">duoduo rolled over.</span><br><span class=\"line\"><span class=\"comment\"># 创建多个实例</span></span><br><span class=\"line\">your_dog = Dog(<span class=\"string\">&#x27;Lucy&#x27;</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Your dog&#x27;s name is <span class=\"subst\">&#123;your_dog.name&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Your dog&#x27;s age is <span class=\"subst\">&#123;your_dog.age&#125;</span>&quot;</span>)</span><br><span class=\"line\">your_dog.sit()</span><br><span class=\"line\"></span><br><span class=\"line\">Your dog<span class=\"string\">&#x27;s name is Lucy</span></span><br><span class=\"line\"><span class=\"string\">Your dog&#x27;</span>s age <span class=\"keyword\">is</span> <span class=\"number\">4</span></span><br><span class=\"line\">Lucy <span class=\"keyword\">is</span> now sitting.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用类和实例\"><a href=\"#使用类和实例\" class=\"headerlink\" title=\"使用类和实例\"></a>使用类和实例</h3><p><strong>Car 类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Car类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.make = make</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.model = model</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.year = year</span><br><span class=\"line\"><span class=\"comment\"># 给属性默认值</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.oli = <span class=\"number\">240</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_descriptive_name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        long_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;self.year&#125;</span>年 <span class=\"subst\">&#123;self.make&#125;</span>生产<span class=\"subst\">&#123;self.model&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">read_odometer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这两车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.odometer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mileage &gt;= <span class=\"variable language_\">self</span>.odometer:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.odometer = mileage</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;你不能往回设置公里数&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">increment_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer += mileage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">car_oli_v</span>(<span class=\"params\">self, oli</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;描述车辆油箱的容积&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.oli = oli</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这辆车的油箱容积是<span class=\"subst\">&#123;self.oli&#125;</span>L.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">my_new_car = Car(<span class=\"string\">&#x27;奥迪汽车公司&#x27;</span>, <span class=\"string\">&#x27;奥迪A4&#x27;</span>, <span class=\"string\">&#x27;2003&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_new_car.get_descriptive_name())</span><br><span class=\"line\"><span class=\"comment\"># 修改属性值</span></span><br><span class=\"line\">my_new_car.odometer = <span class=\"number\">1</span></span><br><span class=\"line\">my_new_car.read_odometer()</span><br><span class=\"line\"><span class=\"comment\"># 通过方法修改属性值</span></span><br><span class=\"line\">my_new_car.update_odometer(<span class=\"number\">34</span>)</span><br><span class=\"line\">my_new_car.increment_odometer(<span class=\"number\">12</span>)</span><br><span class=\"line\">my_new_car.update_odometer(<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2003</span>年奥迪汽车公司生产奥迪A4</span><br><span class=\"line\">这两车已经行驶了<span class=\"number\">1</span>公里了。</span><br><span class=\"line\">这两车已经行驶了<span class=\"number\">34</span>公里了。</span><br><span class=\"line\">这辆车已经行驶了<span class=\"number\">46</span>公里了。</span><br><span class=\"line\">你不能往回设置公里数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>编写类的时候并非总是要从头开始，如果要编写的类是一个已经存在的类的特殊版本，可以使用<strong>继承</strong>。当一个类继承另一个类时，将自动获得后者的素有属性和方法。原有类称为<strong>父类</strong>，而新的类称为<strong>子类</strong>。子类不仅继承了父类的所有属性和方法，还可以定义自己的属性和方法。</p>\n<p><strong>子类初始化方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br></pre></td></tr></table></figure>\n\n<p><strong>给子类定义属性和方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\">my_leaf.describe_battery()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br><span class=\"line\">This car has a <span class=\"number\">40</span>-KWh battery.</span><br></pre></td></tr></table></figure>\n\n<p><strong>重写父类中的方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">car_oli_v</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;电动汽车没有油箱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\">my_leaf.describe_battery()</span><br><span class=\"line\">my_leaf.car_oli_v()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br><span class=\"line\">This car has a <span class=\"number\">40</span>-KWh battery.</span><br><span class=\"line\">电动汽车没有油箱</span><br></pre></td></tr></table></figure>\n\n<p><strong>将实例用作属性</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery = Battery()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">car_oli_v</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;电动汽车没有油箱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Battery</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, battery_size=<span class=\"number\">40</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = battery_size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\">my_leaf.battery.describe_battery()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br><span class=\"line\">This car has a <span class=\"number\">40</span>-KWh battery.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入类\"><a href=\"#导入类\" class=\"headerlink\" title=\"导入类\"></a>导入类</h3><p>主要目的是让文件整洁，我们可以将类存储在模块中，然后在主程序导入所需的模块。我们需要整理一下代码，把上面我们学的三个类都复制到一个文件，命名为 car.py 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Car类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.make = make</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.model = model</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.year = year</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_descriptive_name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        long_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;self.year&#125;</span>年<span class=\"subst\">&#123;self.make&#125;</span>生产<span class=\"subst\">&#123;self.model&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">read_odometer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.odometer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mileage &gt;= <span class=\"variable language_\">self</span>.odometer:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.odometer = mileage</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;你不能往回设置公里数&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">increment_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer += mileage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 电池模组</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Battery</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, battery_size=<span class=\"number\">40</span>, car_model_isoli=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = battery_size</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;默认是电动汽车,如果是汽油车可以设置会Ture.&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.car_model_isoli = car_model_isoli</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.car_model_isoli <span class=\"keyword\">is</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这是一辆油车，没有电池.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;升级电池容量&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.battery_size != <span class=\"number\">65</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.battery_size = <span class=\"number\">65</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_range</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条消息，指出汽车的续航里程&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.battery_size == <span class=\"number\">40</span>:</span><br><span class=\"line\">            <span class=\"built_in\">range</span> = <span class=\"number\">150</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"variable language_\">self</span>.battery_size == <span class=\"number\">65</span>:</span><br><span class=\"line\">            <span class=\"built_in\">range</span> = <span class=\"number\">225</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这辆车的续航里程为<span class=\"subst\">&#123;<span class=\"built_in\">range</span>&#125;</span>公里.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 电动车</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery = Battery()</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入单个类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> Car</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入多个类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> Car, ElectricCar</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入整个模块</strong></p>\n<p>这里我把上面的代码分成了两个文件，Car类单独储存成 car.py ，电池模组和电动车储存为 electric_car.py 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> car</span><br><span class=\"line\"><span class=\"comment\"># 用法就是用点引用该模块的类</span></span><br><span class=\"line\">my_car = car.Car(<span class=\"string\">&quot;柳州五菱&quot;</span>, <span class=\"string\">&quot;五菱之光&quot;</span>, <span class=\"number\">2008</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还有下面这种方法，但是不推荐用，因为可能会引起很多难以诊断的错误，比如出现同名的类</span></span><br><span class=\"line\"><span class=\"comment\"># 这种方法是导入模块的所有类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用别名</strong></p>\n<p>就是给导入的模块或类更改使用名，这并不会影响该模块和类的代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给模块使用别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> electric_car <span class=\"keyword\">as</span> ec</span><br><span class=\"line\"><span class=\"comment\"># 给类使用别名</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> electric_car <span class=\"keyword\">import</span> ElectricCar <span class=\"keyword\">as</span> EC</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合适的工作流程\"><a href=\"#合适的工作流程\" class=\"headerlink\" title=\"合适的工作流程\"></a>合适的工作流程</h3><p>首先尝试在一个文件中完成所有工作，确定一切都能正确运行后，在将类移到独立的模块中。</p>\n<p>这里讲一下 <strong>VMC</strong> 模式：</p>\n<ul>\n<li>V： 就是视窗，用户界面等可视化的代码。</li>\n<li>M：就是模块或类等等的代码。</li>\n<li>C：就是整个程序的运行逻辑，流程控制等等的代码。</li>\n</ul>\n<p>这个模式可以简单的理解为建立三个文件夹，分别存放这三种类型的文件。这样可以让自己的代码更加简洁高效，别人理解也更容易。</p>\n<h3 id=\"Python标准库\"><a href=\"#Python标准库\" class=\"headerlink\" title=\"Python标准库\"></a>Python标准库</h3><p>Python标准库是一组模块，在安装Python时已经包含在内了。我们可以使用标准可中的任何函数和类。查看Python标准库，可以在命令行输入  <strong>help(“modules”)</strong> 命令。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机数模组，返回两个数之间的随机一个数。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>randint(<span class=\"number\">1</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"number\">4</span>   </span><br><span class=\"line\"><span class=\"comment\"># 返回一个列表里随机一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> choice </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>players = [<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"string\">&#x27;bbb&#x27;</span>,<span class=\"string\">&#x27;ccc&#x27;</span>,<span class=\"string\">&#x27;ddd&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>choice(players)</span><br><span class=\"line\"><span class=\"string\">&#x27;ccc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类的编程风格\"><a href=\"#类的编程风格\" class=\"headerlink\" title=\"类的编程风格\"></a>类的编程风格</h3><p>编写复杂程序时采用以下几项：</p>\n<ul>\n<li>类名：驼峰命名法。例：MyNewCar 。类名不使用下划线。</li>\n<li>模块名和实例名都采用全小写格式，并在单词之间采用下划线。</li>\n<li>每个类都要在定义后面和函数一样需要描述类功能的文档字符串。</li>\n<li>当需要导入标准库中的模块和自己编写的模块时，优先导入标准库中的模块，在导入自己编写的模块。</li>\n</ul>\n<h3 id=\"小结-6\"><a href=\"#小结-6\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章我们学习了如何编写类，如何使用属性在类中存储的信息，以及如何编写方法让类具备所需的行为。然后学习了 init 初始化方法。了解了如何修改实例的属性，包括直接修改以及通过方法修改。还了解到使用继承可简化相关类的创建工作，将一个类的实例用作另一个类的属性能让类更简洁。<br>明白了，通过将类存储在模块（文件）中，并在需要使用这些类的文件中导入它们，可让项目变的更简洁。开始了解python标准库，还看了一个random模块，最后学习了编写类时应遵循的Python约定。</p>\n<h2 id=\"第九章-文件和异常\"><a href=\"#第九章-文件和异常\" class=\"headerlink\" title=\"第九章 文件和异常\"></a>第九章 文件和异常</h2><p>处理文件，让程序能够快速地分析大量数据；错误处理，避免程序在面对意外情况时崩溃；异常是Python创建特殊对象，用于管理程序运行时出现的错误；还将学习使用 json 模块保存用户数据，以免这些数据在程序结束运行后丢失。</p>\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p>读取文件对数据分析应用程序很有用。要使用文本文件中的信息，首先需要将信息读取到内存中。既可以一次性读取文件的全部内容，也可以逐行读取。</p>\n<p><strong>读取文件的全部内容</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> 这是一个txt文件</span><br><span class=\"line\">3.1415926535</span><br><span class=\"line\">  8979323846</span><br><span class=\"line\">  2643383279</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"comment\"># 这里值得注意的是VScode里面用的斜杠是反的</span></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\"><span class=\"comment\"># 删除文档中的空格</span></span><br><span class=\"line\"><span class=\"comment\"># contents = contents.strip()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(contents)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.1415926535</span></span><br><span class=\"line\">  <span class=\"number\">8979323846</span></span><br><span class=\"line\">  <span class=\"number\">2643383279</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>相对文件路径和绝对文件路径</strong></p>\n<p><strong>相对文件路径</strong>让 Python 到相对于当前运行的程序所在目录的指定位置去查找。比如上面的文件可以这样读取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;text_files/pi_digits.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>绝对文件路径</strong>可以读取系统中任何地方的文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>现在最简单的做法是，要么将数据文件存储在程序文件所在的目录中，要么将其存储在存续文件所在目录下的一个文件夹中。</p>\n<p><strong>注意</strong>：在显示文件路径时，windows 系统使用反斜杠（ \\ ）而不是斜杠（ &#x2F; ）但是你在代码中应该始终使用斜杠（ &#x2F; ），即便在windows系统中也是如此。在与你或其他用户的系统交互时，pathlib 库会自动使用正确的路径表示方法。</p>\n<p><strong>访问文件中的各行</strong></p>\n<p>使用 <strong>splitlines()</strong> 方法可以将字符串转换为一系列行，在使用 for 循环遍历文件中的每一行，splitlines() 方法返回一个列表，其中包含文件中所有的行。可以把这个列表赋值给变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\">lines = contents.splitlines()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.1415926535</span></span><br><span class=\"line\">  <span class=\"number\">8979323846</span></span><br><span class=\"line\">  <span class=\"number\">2643383279</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用文件的内容</strong></p>\n<p>读取文件后才能使用这些数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\">pi_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">lines = contents.splitlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(pi_string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(pi_string))</span><br><span class=\"line\"><span class=\"number\">3.1415926535</span>  <span class=\"number\">8979323846</span>  <span class=\"number\">2643383279</span></span><br><span class=\"line\"><span class=\"number\">36</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除左边空格</span></span><br><span class=\"line\">--snip--</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line.lstrip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(pi_string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(pi_string))</span><br><span class=\"line\"><span class=\"number\">3.141592653589793238462643383279</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：读取文本文件时，python 将其中的所有文本都解释为字符串。如果读取的是数，并且要将其作为数字使用，就必须使用 int() 函数将其转换为整数，或者使用 float() 函数将其转为浮点数。</p>\n<p><strong>大型文件</strong>可以做切片等列表的操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--snip--</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line.lstrip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(pi_string[:<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(pi_string))</span><br><span class=\"line\"><span class=\"number\">3.14159265</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>趣味小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 圆周率中包含你的生日吗</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;pi_million_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\"></span><br><span class=\"line\">pi_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">lines = contents.splitlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line.strip()</span><br><span class=\"line\"></span><br><span class=\"line\">birthday = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;你的生日如(20200506):&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birthday <span class=\"keyword\">in</span> pi_string:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;圆周率包含了你的生日&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;圆周率没有你的生日哦...&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">你的生日如(<span class=\"number\">20200506</span>):<span class=\"number\">20200506</span></span><br><span class=\"line\">圆周率没有你的生日哦...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>保存数据的最简单的方式之一是将其写入文件。</p>\n<p><strong>写入一行</strong></p>\n<p><strong>注意</strong>：在python调用 <strong>write_text()</strong> 方法时，如果指定文件已存在，这个方法会将其内容<strong>替换</strong>为你要写入的内容。**replace()**方法可以将字符串中的特定单词替换为另一个单词。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 写入一行文字</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;programming.txt&#x27;</span>)</span><br><span class=\"line\">path.write_text(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">programming.txt</span><br><span class=\"line\">hello world</span><br><span class=\"line\"><span class=\"comment\"># 替换字符串 replace()</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;How are you?&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.replace(<span class=\"string\">&#x27;you&#x27;</span>,<span class=\"string\">&#x27;me&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;How are me?&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Python 只能将字符串写入文本，如果要将数值数据存储到文本文件中，须使用 str() 函数将其转换为字符串格式。</p>\n<p><strong>写入多行</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;programming.txt&#x27;</span>)</span><br><span class=\"line\">contents = <span class=\"string\">&quot;nihao&quot;</span></span><br><span class=\"line\">contents += <span class=\"string\">&quot;\\nwohao&quot;</span></span><br><span class=\"line\">contents += <span class=\"string\">&quot;\\ndajiahao&quot;</span></span><br><span class=\"line\">path.write_text(contents)</span><br><span class=\"line\"></span><br><span class=\"line\">programming.txt</span><br><span class=\"line\">nihao</span><br><span class=\"line\">wohao</span><br><span class=\"line\">dajiahao</span><br></pre></td></tr></table></figure>\n\n<p><strong>趣味小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重复写入多个词语</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;guest.txt&quot;</span>)</span><br><span class=\"line\">n = <span class=\"number\">0</span></span><br><span class=\"line\">c = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n != <span class=\"number\">5</span>:</span><br><span class=\"line\">    b = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入内容：&quot;</span>)</span><br><span class=\"line\">    c += <span class=\"string\">f&quot;<span class=\"subst\">&#123;b&#125;</span>\\n&quot;</span></span><br><span class=\"line\">    n += <span class=\"number\">1</span></span><br><span class=\"line\">    path.write_text(<span class=\"string\">f&quot;<span class=\"subst\">&#123;c&#125;</span>&quot;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>异常是使用 try-except 代码块处理的。也就是说你运行一段代码，如过出错了会根据你编写的代码执行，如果没有对异常进行处理，程序出错了就会停止。<strong>如果你运行一段代码出错，编辑器会提示你是什么错误，你可以针对这个错误给出处理方法，就像下面的 0 不能作为除数的错误是：ZeroDivisionError</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span>/<span class=\"number\">0</span>)</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 try-except 代码块</strong></p>\n<p>当你认为可能会发生错误的时候，可以使用这个代码块来处理可能引发的错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">5</span>/<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;0不能作为除数。&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">0</span>不能作为除数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>处理 FileNotFoundError 异常</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;alice.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有找到这个文件。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">没有找到这个文件。</span><br></pre></td></tr></table></figure>\n\n<p><strong>分析文本</strong></p>\n<p>split() 方法是把一个很长的字符串转换成很多单词的列表的一个方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;alice.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有找到这个文件。&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 计算文件大概包含多少个单词</span></span><br><span class=\"line\">    words = contents.split()</span><br><span class=\"line\">    num_words = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The file <span class=\"subst\">&#123;path&#125;</span> has about <span class=\"subst\">&#123;num_words&#125;</span> words&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>读取多个文件</strong></p>\n<p>利用函数我们可以读取多个文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_words</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;没有找到<span class=\"subst\">&#123;path&#125;</span>这个文件。&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 计算文件大概包含多少个单词</span></span><br><span class=\"line\">        words = contents.split()</span><br><span class=\"line\">        num_words = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The file <span class=\"subst\">&#123;path&#125;</span> has about <span class=\"subst\">&#123;num_words&#125;</span> words&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filenames = [<span class=\"string\">&#x27;alice.txt&#x27;</span>, <span class=\"string\">&#x27;little_women.txt&#x27;</span>, <span class=\"string\">&#x27;moby_dick.txt&#x27;</span>, <span class=\"string\">&#x27;kkk.txt&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">    path = Path(filename)</span><br><span class=\"line\">    count_words(path)</span><br><span class=\"line\">   </span><br><span class=\"line\">The file alice.txt has about <span class=\"number\">29594</span> words</span><br><span class=\"line\">The file little_women.txt has about <span class=\"number\">189142</span> words</span><br><span class=\"line\">The file moby_dick.txt has about <span class=\"number\">215864</span> words</span><br><span class=\"line\">没有找到kkk.txt这个文件。</span><br></pre></td></tr></table></figure>\n\n<p><strong>静默失败</strong></p>\n<p>并非每次错误都需要告诉用户，有时候有错误什么也不做，但是就是让程序继续运行可以使用 pass 语句。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_words</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 计算文件大概包含多少个单词</span></span><br><span class=\"line\">        words = contents.split()</span><br><span class=\"line\">        num_words = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The file <span class=\"subst\">&#123;path&#125;</span> has about <span class=\"subst\">&#123;num_words&#125;</span> words&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">filenames = [<span class=\"string\">&#x27;alice.txt&#x27;</span>, <span class=\"string\">&#x27;little_women.txt&#x27;</span>, <span class=\"string\">&#x27;moby_dick.txt&#x27;</span>, <span class=\"string\">&#x27;kkk.txt&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">    path = Path(filename)</span><br><span class=\"line\">    count_words(path)</span><br><span class=\"line\"></span><br><span class=\"line\">The file alice.txt has about <span class=\"number\">29594</span> words</span><br><span class=\"line\">The file little_women.txt has about <span class=\"number\">189142</span> words</span><br><span class=\"line\">The file moby_dick.txt has about <span class=\"number\">215864</span> words</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储数据\"><a href=\"#存储数据\" class=\"headerlink\" title=\"存储数据\"></a>存储数据</h3><p>json 模块能够将简单的Python数据结构转换为JSON格式的字符串，并在程序再次运行时从文件中加载数据。</p>\n<p><strong>注意：</strong>JSON格式最初是为 JavaScript 开发的，但后来成为了一种通用格式，被众多语言采用。</p>\n<p><strong>json.dumps() 和 json.loads()</strong></p>\n<p>json.dumps() 接受一个参数，即要转换为JSON格式的数据。这个函数返回一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 存储数据 json.dumps()</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;number.json&#x27;</span>) <span class=\"comment\"># 文件路径，如果没有就会自动创建这个文件</span></span><br><span class=\"line\">contents = json.dumps(number) <span class=\"comment\"># 数据通过json.dumps()转化文JSON格式，存储在变量contents中</span></span><br><span class=\"line\">path.write_text(contents) <span class=\"comment\"># 把contents中的数据写入number.json这个文件中</span></span><br><span class=\"line\"><span class=\"comment\"># number.json文件内容</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取数据 json.loads()</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;number.json&#x27;</span>) <span class=\"comment\"># 文件路径，如果没有就会自动创建这个文件</span></span><br><span class=\"line\">contents = path.read_text() <span class=\"comment\"># 把读取的数据存储在变量contents中</span></span><br><span class=\"line\">number = json.loads(contents)<span class=\"comment\"># contents中的数据通过json.loads()转化文JSON格式，并存储在变量number中</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存和读取用户生成的数据</strong></p>\n<p>保存数据很有必要，因为如果不以某种方式进行存储，用户的信息就会在程序停止运行时丢失。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保存用户数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">username = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的名字：&quot;</span>)</span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;username.json&#x27;</span>)</span><br><span class=\"line\">contents = json.dumps(username)</span><br><span class=\"line\">path.write_text(contents, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我们将储存你的名字。&quot;</span>)</span><br><span class=\"line\">请输入你的名字：zqten</span><br><span class=\"line\">我们将储存你的名字。</span><br><span class=\"line\"><span class=\"comment\"># username.json文件</span></span><br><span class=\"line\"><span class=\"string\">&quot;zqten&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取用户生成的数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;username.json&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\">username = json.loads(contents)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Welcome back <span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\">Welcome back zqten</span><br></pre></td></tr></table></figure>\n\n<p>Path 类提供了很多有用的方法。如果指定的文件或文件夹存在，<strong>exists()</strong> 方法返回 True ，否则返回 False 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;username.json&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> path.exists():</span><br><span class=\"line\">    contents = path.read_text()</span><br><span class=\"line\">    username = json.loads(contents)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Welcome back <span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    username = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的名字：&quot;</span>)</span><br><span class=\"line\">    contents = json.dumps(username)</span><br><span class=\"line\">    path.write_text(contents, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;我们将储存你的名字。<span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\">Welcome back zqten</span><br></pre></td></tr></table></figure>\n\n<p><strong>重构</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保存用户数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_stored_username</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;如果用户存储了用户名，我们就获取他&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> path.exists():</span><br><span class=\"line\">        contents = path.read_text()</span><br><span class=\"line\">        username = json.loads(contents)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_new_username</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;提示用户输入用户名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    username = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的名字：&quot;</span>)</span><br><span class=\"line\">    contents = json.dumps(username)</span><br><span class=\"line\">    path.write_text(contents, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_user</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;问候用户，并指出其名字&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    path = Path(<span class=\"string\">&#x27;username.json&#x27;</span>)</span><br><span class=\"line\">    username = get_stored_username(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Welcome back <span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        username = get_new_username(path)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;我们将储存你的名字，<span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">greet_user()</span><br><span class=\"line\">请输入你的名字：zqten</span><br><span class=\"line\">我们将储存你的名字，zqten</span><br><span class=\"line\"><span class=\"comment\"># 在运行一次</span></span><br><span class=\"line\">greet_user()</span><br><span class=\"line\">Welcome back zqten</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-7\"><a href=\"#小结-7\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何使用文件，包括如何读取整个文件，如何读取文件中的各行，以及如何根据需要将任意数量的文本写入文件。然后学习了异常，以及如何处理程序可能引发的异常。最后学习了如何存储Python数据结构，以保存用户提供的信息，避免让用户在每次运行程序时都重新提供。</p>\n<h2 id=\"第十章-测试代码\"><a href=\"#第十章-测试代码\" class=\"headerlink\" title=\"第十章 测试代码\"></a>第十章 测试代码</h2><p>本章使用的是pip安装的pytest库来进行测试代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在控制台安装</span></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pytest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试函数\"><a href=\"#测试函数\" class=\"headerlink\" title=\"测试函数\"></a>测试函数</h3><p>测试基本分为下面几种：</p>\n<ul>\n<li>单元测试，用于核实函数的某个方面没有问题。</li>\n<li>测试用例，是一组单元测试，核实函数在各种情况下的行为都符合要求。</li>\n<li>全覆盖，测试一整套单元测试，涵盖了各种可能的函数使用方式。</li>\n</ul>\n<p>测试函数，需要新建一个文件，导入需要测试的函数，然后定义一个测试函数（这个函数的命名规范是：必须以 test 加下划线打头）。在测试过程中，<strong>pytest</strong>会找出并运行所有以 test 加下划线打头的函数。运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># name_function.py 文件</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">frist, last, middle=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> middle:</span><br><span class=\"line\">        full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;frist&#125;</span> <span class=\"subst\">&#123;middle&#125;</span> <span class=\"subst\">&#123;last&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;frist&#125;</span> <span class=\"subst\">&#123;last&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test_name_function.py 测试文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> name_function <span class=\"keyword\">import</span> get_formatted_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_frist_last_name</span>():</span><br><span class=\"line\">    formatted_name = get_formatted_name(<span class=\"string\">&#x27;janis&#x27;</span>, <span class=\"string\">&#x27;joplin&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> formatted_name == <span class=\"string\">&#x27;Janis Joplin&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</span></span><br><span class=\"line\">======================== test session starts ========================</span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">1</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">test_name_function.py .                                     [<span class=\"number\">100</span>%]</span><br><span class=\"line\"></span><br><span class=\"line\">======================== <span class=\"number\">1</span> passed <span class=\"keyword\">in</span> <span class=\"number\">0.01</span>s ==========================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未通过测试示例</span></span><br><span class=\"line\">===================== test session starts ============================</span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">1</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">test_name_function.py F                                         [<span class=\"number\">100</span>%]</span><br><span class=\"line\"></span><br><span class=\"line\">====================== FAILURES ====================================== </span><br><span class=\"line\">__________________ test_frist_last_name_______________________________ </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_frist_last_name</span>():</span><br><span class=\"line\">        formatted_name = get_formatted_name(<span class=\"string\">&#x27;janis&#x27;</span>, <span class=\"string\">&#x27;joplin&#x27;</span>)</span><br><span class=\"line\">&gt;       <span class=\"keyword\">assert</span> formatted_name == <span class=\"string\">&#x27;Janis Joplil&#x27;</span></span><br><span class=\"line\">E       AssertionError: <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;Janis Joplin&#x27;</span> == <span class=\"string\">&#x27;Janis Joplil&#x27;</span></span><br><span class=\"line\">E         - Janis Joplil</span><br><span class=\"line\">E         ?            ^</span><br><span class=\"line\">E         + Janis Joplin</span><br><span class=\"line\">E         ?            ^</span><br><span class=\"line\"></span><br><span class=\"line\">test_name_function.py:<span class=\"number\">6</span>: AssertionError</span><br><span class=\"line\">============= short test summary info =========================================== </span><br><span class=\"line\">FAILED test_name_function.py:</span><br><span class=\"line\">:test_frist_last_name - AssertionError: <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;Janis Joplin&#x27;</span> == <span class=\"string\">&#x27;Janis Joplil&#x27;</span></span><br><span class=\"line\">============= <span class=\"number\">1</span> failed <span class=\"keyword\">in</span> <span class=\"number\">0.05</span>s ================================================= </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><p>上面是测试了函数，现在我们针对类进行测试。</p>\n<p><strong>各种断言：</strong></p>\n<ul>\n<li>assert a &#x3D;&#x3D; b\t\t\t断言两个值相等</li>\n<li>assert a !&#x3D; b             断言两个值不等</li>\n</ul>\n<p>这里只列出了两个，测试能包含任意可用条件语句表示的断言，比如 not 、in等等。</p>\n<p><strong>要测试的类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试类 survey.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnonymousSurvey</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;收集匿名调查问卷&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, question</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;存储一个问题，并为存储答案做准备&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.question = question</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.responses = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show_question</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;显示调查问卷&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable language_\">self</span>.question)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">store_response</span>(<span class=\"params\">self, new_response</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;存储单个调查答卷&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.responses.append(new_response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show_results</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;显示收集到的所有答案&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;所有问卷结果:&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.responses:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;- <span class=\"subst\">&#123;response&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化 language_survey.py</span></span><br><span class=\"line\"><span class=\"comment\"># survey类的实例</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> survey <span class=\"keyword\">import</span> AnonymousSurvey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义个问题，并创建一个表示调查的 AnonymousSurvey 对象</span></span><br><span class=\"line\">question = <span class=\"string\">&quot;你学习了几种语言？&quot;</span></span><br><span class=\"line\">language_survey = AnonymousSurvey(question)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示问题并存储答案</span></span><br><span class=\"line\">language_survey.show_question()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按&#x27;q&#x27;退出。\\n&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    response = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你学习的语言: &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> response == <span class=\"string\">&quot;q&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    language_survey.store_response(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示答案</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n你学习的语言有&quot;</span>)</span><br><span class=\"line\">language_survey.show_results()</span><br><span class=\"line\"></span><br><span class=\"line\">你学习了几种语言？</span><br><span class=\"line\">按<span class=\"string\">&#x27;q&#x27;</span>退出。       </span><br><span class=\"line\"></span><br><span class=\"line\">输入你学习的语言: 汉语</span><br><span class=\"line\">输入你学习的语言: 英语</span><br><span class=\"line\">输入你学习的语言: 日语</span><br><span class=\"line\">输入你学习的语言: 德语</span><br><span class=\"line\">输入你学习的语言: q</span><br><span class=\"line\"></span><br><span class=\"line\">你学习的语言有</span><br><span class=\"line\">所有问卷结果: </span><br><span class=\"line\">- 汉语        </span><br><span class=\"line\">- 英语        </span><br><span class=\"line\">- 日语        </span><br><span class=\"line\">- 德语  </span><br></pre></td></tr></table></figure>\n\n<p><strong>测试AnonymousSurvey类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试AnonymousSurvey类 test_survey.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> survey <span class=\"keyword\">import</span> AnonymousSurvey</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_single_response</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    question = <span class=\"string\">&quot;What language did you first learn to speak?&quot;</span></span><br><span class=\"line\">    language_survey = AnonymousSurvey(question)</span><br><span class=\"line\">    language_survey.store_response(<span class=\"string\">&#x27;English&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;English&#x27;</span> <span class=\"keyword\">in</span> language_survey.responses</span><br><span class=\"line\">    </span><br><span class=\"line\">==================== test session starts ============================== </span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">1</span> items                                                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\">test_survey.py .                             \t  [<span class=\"number\">100</span>%] </span><br><span class=\"line\"></span><br><span class=\"line\">===================== <span class=\"number\">1</span> passed <span class=\"keyword\">in</span> <span class=\"number\">0.02</span>s ===============================     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_three_response</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    question = <span class=\"string\">&quot;What language did you first learn to speak?&quot;</span></span><br><span class=\"line\">    language_survey = AnonymousSurvey(question)</span><br><span class=\"line\">    responses = [<span class=\"string\">&#x27;English&#x27;</span>, <span class=\"string\">&#x27;Spanish&#x27;</span>, <span class=\"string\">&#x27;Chinese&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        language_survey.store_response(response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response <span class=\"keyword\">in</span> language_survey.responses</span><br><span class=\"line\"></span><br><span class=\"line\">========================= test session starts ===============================</span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">2</span> items                                                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\">test_survey.py ..                   [<span class=\"number\">100</span>%] </span><br><span class=\"line\"></span><br><span class=\"line\">========================= <span class=\"number\">2</span> passed <span class=\"keyword\">in</span> <span class=\"number\">0.02</span>s =================================</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>使用夹具</strong></p>\n<p>夹具（@pytest.fixture）可帮助我们搭建测试环境，用于测试多个项目。这个需要导入（import pytest）。夹具使用方法是放在函数定义前面的指令。要使用夹具时，可编写一个函数来生成供多个测试函数使用的资源再对这个函数应用装饰器@pytest.fixture，并让使用该资源的每个测试函数都接受一个与该函数同名的形参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> survey <span class=\"keyword\">import</span> AnonymousSurvey</span><br><span class=\"line\"><span class=\"comment\"># 测试AnonymousSurvey类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.fixture</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">language_survey</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;一个可供所有测试函数使用的AnonymousSurvey实例&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    question = <span class=\"string\">&quot;What language did you first learn to speak?&quot;</span></span><br><span class=\"line\">    language_survey = AnonymousSurvey(question)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> language_survey</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_single_response</span>(<span class=\"params\">language_survey</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    language_survey.store_response(<span class=\"string\">&#x27;English&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;English&#x27;</span> <span class=\"keyword\">in</span> language_survey.responses</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_three_response</span>(<span class=\"params\">language_survey</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    responses = [<span class=\"string\">&#x27;English&#x27;</span>, <span class=\"string\">&#x27;Spanish&#x27;</span>, <span class=\"string\">&#x27;Chinese&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        language_survey.store_response(response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response <span class=\"keyword\">in</span> language_survey.responses</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-8\"><a href=\"#小结-8\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何使用 pytest 模块中的工具来为函数和类编写测试。不仅学习了如何编写测试函数，以核实函数和类的行为符合预期，而且学习了如何使用夹具来高效地创建可在测试文件中的多个测试函数中使用的资源。</p>\n<h1 id=\"第二部分-项目\"><a href=\"#第二部分-项目\" class=\"headerlink\" title=\"第二部分 项目\"></a>第二部分 项目</h1><h2 id=\"第十二章-武装飞船\"><a href=\"#第十二章-武装飞船\" class=\"headerlink\" title=\"第十二章 武装飞船\"></a>第十二章 武装飞船</h2><h3 id=\"外星人入侵项目规划\"><a href=\"#外星人入侵项目规划\" class=\"headerlink\" title=\"外星人入侵项目规划\"></a>外星人入侵项目规划</h3><ul>\n<li>玩家控制着一艘武装飞船出现在屏幕底部中央，玩家可以使用方向键左右移动飞船，使用空格键进行射击。</li>\n<li>当游戏开始时，一个外形舰队出现在天空中，并向屏幕下方移动。</li>\n<li>玩家的任务是消灭这些外星人。</li>\n<li>玩家将万星人消灭干净后，将出现一个新的外形舰队，其移动速度更快。</li>\n<li>只要有万星人撞到玩家的飞船或到达屏幕下边缘，玩家就损失一艘飞船。玩家损失三艘飞船游戏结束。</li>\n</ul>\n<p><strong>安装Pygame</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pygame</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始游戏项目\"><a href=\"#开始游戏项目\" class=\"headerlink\" title=\"开始游戏项目\"></a>开始游戏项目</h3><p><strong>创建 Pygame 窗口及响应用户输入</strong></p>\n<p>这里有及个新方法：</p>\n<ul>\n<li>pygame.display.set_mode((1200,800)) 设置显示画面的大小</li>\n<li>pygame.display.set_caption(“Alien Invasion”) 设置标题和logo</li>\n<li>pygame.display.flip() 让渲染的可见</li>\n<li>pygame.time.Clock() 设置游戏帧率</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.init()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"number\">1200</span>,<span class=\"number\">800</span>))</span><br><span class=\"line\">        pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                    sys.exit()</span><br><span class=\"line\">            <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">            pygame.display.flip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建游戏实例并运行游戏</span></span><br><span class=\"line\">    ai = AlienInvasion()</span><br><span class=\"line\">    ai.run_game()</span><br></pre></td></tr></table></figure>\n\n<p><strong>控制帧率</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.init()</span><br><span class=\"line\">        <span class=\"comment\"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clock = pygame.time.Clock()</span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            --snip--</span><br><span class=\"line\">            <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">            pygame.display.flip()    </span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>设置背景颜色</strong></p>\n<p>fill() 方法是填充背景颜色，该方法只接受一个表示颜色的实参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">   \t--snip--</span><br><span class=\"line\">       pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\">       <span class=\"comment\"># 设置背景颜色</span></span><br><span class=\"line\">       <span class=\"variable language_\">self</span>.bg_color = (<span class=\"number\">230</span>,<span class=\"number\">230</span>,<span class=\"number\">230</span>)</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">       <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">       --snip--</span><br><span class=\"line\">       <span class=\"comment\"># 每次循环时都重绘制屏幕</span></span><br><span class=\"line\">           <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.bg_color)</span><br><span class=\"line\">       <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">           pygame.display.flip()</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建 Settings 类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 屏幕设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_width = <span class=\"number\">1200</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_height = <span class=\"number\">800</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_color = (<span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span>        </span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"variable language_\">self</span>.settings.screen_width, <span class=\"variable language_\">self</span>.settings.screen_height))</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加飞船图像\"><a href=\"#添加飞船图像\" class=\"headerlink\" title=\"添加飞船图像\"></a>添加飞船图像</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = ai_game.screen</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_rect = ai_game.screen.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 加载飞船图像并获取其外接矩形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.image = pygame.image.load(<span class=\"string\">&#x27;images/ship.bmp&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect = <span class=\"variable language_\">self</span>.image.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 每艘新飞船都放在屏幕底部的中央</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.midbottom = <span class=\"variable language_\">self</span>.screen_rect.midbottom</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">blitme</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen.blit(<span class=\"variable language_\">self</span>.image, <span class=\"variable language_\">self</span>.rect)</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>在 pygame 中，原点（0,0）位于屏幕左上角，当一个点向右下方移动时，它的坐标值将增大，在1200X800的屏幕上，原点位于左上角，右下角的坐标为（1200,800）。这些坐标对应的是游戏窗口，而不是物理屏幕。</p>\n<p><strong>在屏幕上绘制飞船</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ship <span class=\"keyword\">import</span> Ship</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">    --snip--</span><br><span class=\"line\">    pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.ship = Ship(<span class=\"variable language_\">self</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">    --snip--</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.blitme()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重构：-check-events-方法和-update-screen-方法\"><a href=\"#重构：-check-events-方法和-update-screen-方法\" class=\"headerlink\" title=\"重构：_check_events() 方法和 _update_screen() 方法\"></a>重构：_check_events() 方法和 _update_screen() 方法</h3><p>在Python中辅助方法的名称以单下划线打头</p>\n<p>_ <em>check_events() 方法和</em> _update_screen()方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_events()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update_screen()</span><br><span class=\"line\">        <span class=\"comment\"># 每秒60帧</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">            sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_update_screen</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 每次循环时都重绘制屏幕</span></span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.ship.blitme()</span><br><span class=\"line\">    <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">    pygame.display.flip()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"驾驶飞船\"><a href=\"#驾驶飞船\" class=\"headerlink\" title=\"驾驶飞船\"></a>驾驶飞船</h3><p><strong>响应按键</strong></p>\n<p>pygame中，事件都是通过 pygame.event.get() 方法获取的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--snip--</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                    sys.exit()</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                        <span class=\"comment\"># 飞船向右移动</span></span><br><span class=\"line\">                        <span class=\"variable language_\">self</span>.ship.rect.x += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>持续移动</strong></p>\n<p>pygame.KEYDOWN 和 pygame.KEYUP 两个事件是，按下键盘，和释放键盘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._check_events()</span><br><span class=\"line\">                <span class=\"comment\"># 调用飞船位置更新函数</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.ship.update()</span><br><span class=\"line\">                <span class=\"comment\"># 更新画面</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._update_screen()</span><br><span class=\"line\">                <span class=\"comment\"># 每秒60帧</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                sys.exit()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"comment\"># 飞船向右移动</span></span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">                    </span><br><span class=\"line\"><span class=\"comment\"># ship.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"comment\"># 移动标志（飞船一开始不移动）</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rect.x += <span class=\"number\">1</span></span><br><span class=\"line\">        --snip--</span><br></pre></td></tr></table></figure>\n\n<p><strong>左右移动</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\">\t\t--snip--</span><br><span class=\"line\">        <span class=\"comment\"># 移动标志（飞船一开始不移动）</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_left = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rect.x += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rect.x -= <span class=\"number\">1</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                sys.exit()</span><br><span class=\"line\">                <span class=\"comment\"># 飞船移动</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">False</span>    </span><br></pre></td></tr></table></figure>\n\n<p><strong>调整飞船的速度</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"comment\"># 飞船的设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship_speed = <span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span>    </span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"comment\"># 在飞创的属性X中存储一个浮点数</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.x = <span class=\"built_in\">float</span>(<span class=\"variable language_\">self</span>.rect.x)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x += <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x -= <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 根据self.x更新self.rect.x</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.x = <span class=\"variable language_\">self</span>.x        </span><br></pre></td></tr></table></figure>\n\n<p><strong>限制飞船的活动范围</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> </span><br><span class=\"line\">        --snip--    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.right &lt; <span class=\"variable language_\">self</span>.screen_rect.right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x += <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.left &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x -= <span class=\"variable language_\">self</span>.settings.ship_speed        </span><br></pre></td></tr></table></figure>\n\n<p><strong>重构：_check_events() 方法</strong></p>\n<p>检查事件方法越来越长，我们将其部分代码放在两个方法中，一个处理键盘按下(KEYDOWN)，一个处理键盘释放(KEYUP)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">            sys.exit()</span><br><span class=\"line\">            <span class=\"comment\"># 飞船移动</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._check_keydown_events(event)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._check_keyup_events(event)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_keydown_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_keyup_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>按 Q 退出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_keydown_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> event.key == pygame.K_q:</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n\n<p><strong>在全屏模式下运行游戏</strong></p>\n<p>在创建屏幕时，传入(0, 0), pygame.FULLSCREEN ，这让pygame生成一个覆盖整个显示器的屏幕。由于无法知道屏幕的宽度和高度，所有后面接着要更新屏幕的 rect 的属性宽和高来更新对象 settings 。pygame不提供全屏模式下退出游戏的默认方式，所以运行前，确保可以使用 ‘q’ 退出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"number\">0</span>, <span class=\"number\">0</span>), pygame.FULLSCREEN)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings.screen_width = <span class=\"variable language_\">self</span>.screen.get_rect().width</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings.screen_height = <span class=\"variable language_\">self</span>.screen.get_rect().height        </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单回顾\"><a href=\"#简单回顾\" class=\"headerlink\" title=\"简单回顾\"></a>简单回顾</h3><p>下面将添加射击功能，所以需要新增一个名为 bullet.py 的文件，并修改一些原有的文件，在添加其他功能前，先回顾一下这些文件，以便对这个项目的组织结构有清楚的认识。</p>\n<ul>\n<li><p>alien_invasion.py<br>这个文件包含 AlienInvasion 类，这个类创建在游戏的很多地方会用到的一系列属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> Settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> ship <span class=\"keyword\">import</span> Ship</span><br><span class=\"line\"><span class=\"keyword\">from</span> bullet <span class=\"keyword\">import</span> Bullet</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.init()</span><br><span class=\"line\">        <span class=\"comment\"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clock = pygame.time.Clock()</span><br><span class=\"line\">        <span class=\"comment\"># 设置背景颜色和窗口大小</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings = Settings()</span><br><span class=\"line\">        <span class=\"comment\"># 独立窗口运行程序</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"variable language_\">self</span>.settings.screen_width, <span class=\"variable language_\">self</span>.settings.screen_height))</span><br><span class=\"line\">        <span class=\"comment\"># 全屏模式游戏 &#x27;q&#x27; 退出</span></span><br><span class=\"line\">        <span class=\"comment\"># self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.settings.screen_width = self.screen.get_rect().width</span></span><br><span class=\"line\">        <span class=\"comment\"># self.settings.screen_height = self.screen.get_rect().height</span></span><br><span class=\"line\">        pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship = Ship(<span class=\"variable language_\">self</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullets = pygame.sprite.Group()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._check_events()</span><br><span class=\"line\">            <span class=\"comment\"># 调用飞船位置更新函数</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.update()</span><br><span class=\"line\">            <span class=\"comment\"># 更新子弹的位置并删除已消失的子弹</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._update_bullets()</span><br><span class=\"line\">            <span class=\"comment\"># 更新画面</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._update_screen()</span><br><span class=\"line\">            <span class=\"comment\"># 每秒60帧</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                sys.exit()</span><br><span class=\"line\">                <span class=\"comment\"># 飞船移动</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._check_keydown_events(event)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._check_keyup_events(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_keydown_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.key == pygame.K_q:</span><br><span class=\"line\">            sys.exit()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.key == pygame.K_SPACE:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._fire_bullet()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_keyup_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_fire_bullet</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;创建一颗子弹，并将其加入编著bullets &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.bullets) &lt; <span class=\"variable language_\">self</span>.settings.bullet_allowed:</span><br><span class=\"line\">            new_bullet = Bullet(<span class=\"variable language_\">self</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.bullets.add(new_bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_update_bullets</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;更新子弹的位置并删除已消失的子弹&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新子弹位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullets.update()</span><br><span class=\"line\">        <span class=\"comment\"># 删除已消失的子弹</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> bullet <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.bullets.copy():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> bullet.rect.bottom &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.bullets.remove(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_update_screen</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 每次循环时都重绘制屏幕</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br><span class=\"line\">        <span class=\"comment\"># 子弹绘制        </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> bullet <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.bullets.sprites():</span><br><span class=\"line\">            bullet.draw_bullet()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.blitme()</span><br><span class=\"line\">        <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">        pygame.display.flip()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建游戏实例并运行游戏</span></span><br><span class=\"line\">    ai = AlienInvasion()</span><br><span class=\"line\">    ai.run_game()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>settings.py<br>这个文件包含 Settings 类，这个类只有一个方法，这个文件主要用于初始化控制游戏外观和飞船速度的属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 屏幕设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_width = <span class=\"number\">1200</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_height = <span class=\"number\">800</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_color = (<span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 飞船的设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship_speed = <span class=\"number\">1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 子弹设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_speed = <span class=\"number\">2.0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_width = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_height = <span class=\"number\">15</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_color = (<span class=\"number\">60</span>, <span class=\"number\">60</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 屏幕上最多出现的子弹数量</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_allowed = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ship.py<br>这个文件包含 Ship 类，这个类主要用于在屏幕上绘制飞船</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = ai_game.screen</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings = ai_game.settings</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_rect = ai_game.screen.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 加载飞船图像并获取其外接矩形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.image = pygame.image.load(<span class=\"string\">&#x27;images/ship.bmp&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect = <span class=\"variable language_\">self</span>.image.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 每艘新飞船都放在屏幕底部的中央</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.midbottom = <span class=\"variable language_\">self</span>.screen_rect.midbottom</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 在飞船的属性X中存储一个浮点数</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.x = <span class=\"built_in\">float</span>(<span class=\"variable language_\">self</span>.rect.x)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 移动标志（飞船一开始不移动）</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_left = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.right &lt; <span class=\"variable language_\">self</span>.screen_rect.right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x += <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.left &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x -= <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 根据self.x更新self.rect.x</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.x = <span class=\"variable language_\">self</span>.x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">blitme</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen.blit(<span class=\"variable language_\">self</span>.image, <span class=\"variable language_\">self</span>.rect)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"射击\"><a href=\"#射击\" class=\"headerlink\" title=\"射击\"></a>射击</h3><ul>\n<li>bullett.py<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"><span class=\"keyword\">from</span> pygame.sprite <span class=\"keyword\">import</span> Sprite</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bullet</span>(<span class=\"title class_ inherited__\">Sprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船所发射子弹的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在飞船的当前位置创建一个子弹对象&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = ai_game.screen</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings = ai_game.settings</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.color = <span class=\"variable language_\">self</span>.settings.bullet_color</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 在（0,0）处创建一个表示子弹的矩形，再设置正确的位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect = pygame.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"variable language_\">self</span>.settings.bullet_width, <span class=\"variable language_\">self</span>.settings.bullet_height)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.midtop = ai_game.ship.rect.midtop</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 存储用浮点数表示的子弹位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.y = <span class=\"built_in\">float</span>(<span class=\"variable language_\">self</span>.rect.y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新子弹的准确位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.y -= <span class=\"variable language_\">self</span>.settings.bullet_speed</span><br><span class=\"line\">        <span class=\"comment\"># 更新表示子弹的 rect 的位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.y = <span class=\"variable language_\">self</span>.y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">draw_bullet</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.draw.rect(<span class=\"variable language_\">self</span>.screen, <span class=\"variable language_\">self</span>.color, <span class=\"variable language_\">self</span>.rect)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"小结-9\"><a href=\"#小结-9\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了游戏开发计划的指定以及使用Pygame编写的游戏的基本结构。接着学习了如何设置背景色，以及如何将设置存储在独立的类中。然后学习了如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动。不仅创建了能自动移动的元素，还删除了不再需要的对象。最后学习了经常性重构是如何为项目的后续开发提供便利的。</p>\n<h2 id=\"第十三章-外星人\"><a href=\"#第十三章-外星人\" class=\"headerlink\" title=\"第十三章 外星人\"></a>第十三章 外星人</h2><h3 id=\"项目回顾\"><a href=\"#项目回顾\" class=\"headerlink\" title=\"项目回顾\"></a>项目回顾</h3><p>本章将完成下列开发：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 在屏幕左上角添加一个外星人，并指定合适的边距。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 沿屏幕上边缘添加一行万星人，再不断地添加成行的外星人，直到填满屏幕的上半部分。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 让外星人向两侧和向下移动，直到外星舰队被全部击落、有外星人撞到飞船或有外星人抵达屏幕的下边缘。如果外星舰队都被击落，将再创建一个外星舰队；如果有外星人撞到飞船或抵达屏幕下边缘，就销毁飞船并再创建一个外星舰队。<br><strong>注意</strong>：pygame里面的精灵碰撞和对象碰撞是两个方法<ul>\n<li>pygame.sprite.groupcollide(精灵1，精灵2，1是否参与碰撞，2是否参与碰撞)。<strong>这个是直接赋值给变量就可以了。和 input 差不多</strong></li>\n<li>pygame.sprite.spritecollideany(对象，精灵)。<strong>这个是返回一个bool值</strong></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 限制玩家可用的飞船数量，分配的飞船被用完后，游戏将结束。</li>\n</ul>\n<h3 id=\"创建第一个外星人\"><a href=\"#创建第一个外星人\" class=\"headerlink\" title=\"创建第一个外星人\"></a>创建第一个外星人</h3><h3 id=\"小结-10\"><a href=\"#小结-10\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章通过创建外星舰队学习了如何在游戏中添加大量相同的元素，如何使用嵌套循环来创建成行成列的整齐元素，以及如何通过调用每个元素的 <code>update()</code>方法移动大量的元素。接着学习了如何控制对象在屏幕上的移动方向，以及如何响应特定的情形，如有外星人到达屏幕边缘。然后学习了如何检测并相应子弹和外星人的碰撞以及外星人和飞创的碰撞。最后学习了如何在游戏中跟踪统计信息，以及如何使用标志 <code> game_active</code>来判断游戏是否结束。</p>\n","excerpt":"","more":"<h1 id=\"第一部分-基础知识\"><a href=\"#第一部分-基础知识\" class=\"headerlink\" title=\"第一部分 基础知识\"></a>第一部分 基础知识</h1><p><a href=\"https://zqten.github.io/\">回到主頁</a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python更新指令</span><br><span class=\"line\">pip install --upgrade python</span><br><span class=\"line\"># pip更新指令</span><br><span class=\"line\">python.exe -m pip install --upgrade pip</span><br><span class=\"line\"># 国内镜像安装</span><br><span class=\"line\">pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class=\"line\">pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class=\"line\">pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br><span class=\"line\"># pip查看可更新包</span><br><span class=\"line\">pip list --outdated</span><br><span class=\"line\"># 批量升级所有包,升级前先确认</span><br><span class=\"line\">pip-review --local --interactive</span><br><span class=\"line\"># 一键升级所有包</span><br><span class=\"line\">pip-review --auto</span><br></pre></td></tr></table></figure>\n\n<p>前面的安装环节网络上讲得比书上的要详细多了，官方文档也讲得很清楚，所以这里就不在这里说了，有兴趣可以去访问官方网站<a href=\"https://www.python.org/\">^😺^</a>。</p>\n<h2 id=\"第一章变量和简单的数据类型\"><a href=\"#第一章变量和简单的数据类型\" class=\"headerlink\" title=\"第一章\t变量和简单的数据类型\"></a>第一章\t变量和简单的数据类型</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量命名有一定的规则</p>\n<ul>\n<li>不能是数字开头，比如：<strong>1_message</strong></li>\n<li>不能包含空格，比如：<strong>mess age</strong></li>\n<li>不能是python里面的关键字，比如：print 或 def 等，python里面有很多关键字一般你打出来会高亮显示</li>\n<li>最好的变量名应该是既简短又有描述性，比如：name、student_name 等等。</li>\n</ul>\n<p>这里message是变量名，’Hello Python World!’是指向message变量的值。变量是可以重复赋值的，但它只会储存最后的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">&#x27;Hello Python World!&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">Hello Python World!</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&#x27;你好!&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你好!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>有双引号或单引号包裹的内容就称为字符串，有些编程语言只有双引号是字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;This is string.&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;This is string.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1.方法：title()、upper()、lower()</strong></p>\n<p>方法(method)是python对数据执行的操作，name后面的点(.)是让python对name变量执行 <strong>title()</strong> 方法指定的操作，这个方法就是把单词的手写字幕改成大写。**upper()<strong>方法是让所有字母变成大写、</strong>lower()<strong>方法是让所有字母变成小写。还有一个方法修改字符串中的指定单词。</strong>replace()**这个方法我们在后面的练习中会用到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;zheng kai nan&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(name.title())</span><br><span class=\"line\">Zheng Kai Nan</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&quot;Zheng Kai Nan&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(name.upper())</span><br><span class=\"line\">ZHENG KAI NAN</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name.lower())</span><br><span class=\"line\">zheng kai nan</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&quot;zheng kai nan&quot;</span></span><br><span class=\"line\">name_01 = name.replace(<span class=\"string\">&quot;kai nan&quot;</span>, <span class=\"string\">&quot;ji zhong&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name_01)</span><br><span class=\"line\">zheng kai nan</span><br><span class=\"line\">zheng ji zhong</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.在字符串中插入变量</strong></p>\n<p>这个功能很常用，python的方式是在字符串的引号前面加一个 <strong>f</strong> 字母：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first_name = <span class=\"string\">&quot;zheng&quot;</span></span><br><span class=\"line\">last_name = <span class=\"string\">&quot;kai nan&quot;</span></span><br><span class=\"line\">full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(full_name)</span><br><span class=\"line\">zheng kai nan</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello,<span class=\"subst\">&#123;full_name.title()&#125;</span>!&quot;</span>)</span><br><span class=\"line\">Hello,Zheng Kai Nan!</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.制表符和换行符控制字符串  \\t  \\n</strong></p>\n<p>在字符串中添加<strong>\\t</strong>、<strong>\\n</strong>可以缩进和换行，字符串引号前加**<code>r</code>**可以让取消里面所有转义符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">&quot;你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你知道这几种编程语言吗？Python Swift C++ Go Java</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&quot;\\t你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">     你知道这几种编程语言吗？Python Swift C++ Go Java</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&quot;你知道这几种编程语言吗？\\nPython Swift C++ Go Java&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你知道这几种编程语言吗？</span><br><span class=\"line\">Python Swift C++ Go Java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以同时使用</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;你知道这几种编程语言吗？\\n\\tPython \\n\\tSwift \\n\\tC++ \\n\\tGo \\n\\tJava&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">你知道这几种编程语言吗？</span><br><span class=\"line\">\tPython </span><br><span class=\"line\">\tSwift </span><br><span class=\"line\">\tC++ </span><br><span class=\"line\">\tGo </span><br><span class=\"line\">\tJava</span><br><span class=\"line\"><span class=\"comment\"># 取消转义    </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\nasd&quot;</span>) </span><br><span class=\"line\">\\nasd</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.删除字符串里面的空白rstrip()、lstrip()、strip()</strong></p>\n<p>有时候后输入字符串的时候会多输空格，在python里面多一个空格就意味着两个不同的字符串了。这里有3个方法：分别是**rstrip()、lstrip()、strip()*<em>，</em>rstrip()<em>是删除字符串右边的空格，</em>lstrip()<em>是删除左边的空格，</em>strip()*是删除两边的空格。但是这种删除只是暂时的，要想永久删除就要重新赋值给变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language = <span class=\"string\">&#x27; python &#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(language.rstrip())</span><br><span class=\"line\"><span class=\"string\">&#x27; python&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(language.lstrip())</span><br><span class=\"line\"><span class=\"string\">&#x27;python &#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(language.strip())</span><br><span class=\"line\"><span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 重新赋值给变量</span></span><br><span class=\"line\">language = language.strip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(language)</span><br><span class=\"line\"><span class=\"string\">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5.删除前缀和后缀 removeprefix()、removesuffix()</strong></p>\n<p>有些内容有统一的前缀，比如你有很多照片，前缀是某一个时间比如2023.7.25+名字或序号，你就只想要序号或名字就可以用到这个功能，还有就是URL里面的https:&#x2F;&#x2F;这个是网站前缀，就可以用*removeprefix()*括号里面填写你想删除的前缀，用引号括起来。这种方法的删除也是暂时的，要想永久删除需要重新赋值，和上面的删除空白一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除前缀</span></span><br><span class=\"line\">Travel_photo = <span class=\"string\">&quot;2023.7.25-镇远旅游照片&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(Travel_photo.removeprefix(<span class=\"string\">&#x27;2023.7.25-&#x27;</span>))</span><br><span class=\"line\">镇远旅游照片</span><br><span class=\"line\">url = <span class=\"string\">&quot;https://www.baidu.com&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(url.removeprefix(<span class=\"string\">&#x27;https://&#x27;</span>))</span><br><span class=\"line\">www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除后缀</span></span><br><span class=\"line\">file_name = <span class=\"string\">&#x27;abc.jpg&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file_name.removesuffix(<span class=\"string\">&#x27;.jpg&#x27;</span>))</span><br><span class=\"line\">abc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数\"><a href=\"#数\" class=\"headerlink\" title=\"数\"></a>数</h3><p>可以理解为数学里面的数字，用来计算或可视化数据</p>\n<p><strong>1.整数及其运算</strong></p>\n<p>integer()或简写int()表示整数，**+、-、<em>、&#x2F;</em>* 这几个符号表示加减乘除，还有些复杂的后面会讲到，比如(**)两个星号代表乘方运算。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span> ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.浮点数</strong></p>\n<p>float() 表示浮点数，就是带有小数点的数称为浮点数，数字同样都可以应用上面的计算符号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"number\">0.3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.数字中的下划线</strong></p>\n<p>下划线用在数字中，并不会有其他的效果，只是方便我们更好观察。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">1000_000_000</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\"><span class=\"number\">10000000000</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4.同时给多个变量赋值</strong></p>\n<p>同时给多个变量赋值，需要用逗号将变量名分开，对于要赋给变量的值也需要做同样的事情</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x,y,z = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\">y = <span class=\"number\">2</span></span><br><span class=\"line\">z = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误演示</span></span><br><span class=\"line\">x,y,z = <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">发生异常: ValueError x</span><br><span class=\"line\"><span class=\"keyword\">not</span> enough values to unpack (expected <span class=\"number\">3</span>, got <span class=\"number\">2</span>)</span><br><span class=\"line\">  File <span class=\"string\">&quot;F:\\第一章变量和简单数据类型\\full_name.py&quot;</span>, line <span class=\"number\">7</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    x, y, z = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">    ^^^^^^^</span><br><span class=\"line\">ValueError: <span class=\"keyword\">not</span> enough values to unpack (expected <span class=\"number\">3</span>, got <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>5.常量</strong></p>\n<p>Python里面没有常量(就是整个程序的生命周期不改变值的“变量”)，一般是用全大写字母来共同与其他程序员形成约定，遇到全大写字母的变量时，视为常量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME = <span class=\"string\">&quot;太阳&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>6.注释</strong></p>\n<p>注释的主要目的是阐述代码要做什么，以及是如何做的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印出Hello World</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章我们学习了如何使用变量，创建了描述性的变量名，学习了字符串是什么，以及如何使用全大写、全小写和首字母大写的方式显示字符串和制表符、换行符。还学习了如何删除字符串中多余的字符和空格，以及字符串中插入变量的方法。还学习了整数和浮点数，还有学习了写注释的目的。</p>\n<h2 id=\"第二章列表简介\"><a href=\"#第二章列表简介\" class=\"headerlink\" title=\"第二章\t列表简介\"></a>第二章\t列表简介</h2><h3 id=\"列表是什么\"><a href=\"#列表是什么\" class=\"headerlink\" title=\"列表是什么\"></a>列表是什么</h3><p>列表(list)由一系列按<strong>特定顺序</strong>排列的元素组成，一般给列表命名以复数形式，比如：name就用names。<br>在python中列表用“[ ]”表示，每个元素用逗号隔开。列表里面有两个东西要搞清楚，一个是索引，一个是元素的值。要访问列表时使用索引和元素值都可以，列表的索引是从0开始的，所以要访问的n个元素就使用n-1的索引值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表</span></span><br><span class=\"line\">bicycles = [<span class=\"string\">&#x27;trek&#x27;</span>, <span class=\"string\">&#x27;cannondale&#x27;</span>, <span class=\"string\">&#x27;redline&#x27;</span>, <span class=\"string\">&#x27;specialized&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;trek&#x27;</span>, <span class=\"string\">&#x27;cannondale&#x27;</span>, <span class=\"string\">&#x27;redline&#x27;</span>, <span class=\"string\">&#x27;specialized&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 利用索引值访问列表元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles[<span class=\"number\">3</span>])</span><br><span class=\"line\">trek</span><br><span class=\"line\">specialized</span><br><span class=\"line\"><span class=\"comment\"># 访问列表的倒数第一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(bicycles[-<span class=\"number\">1</span>])</span><br><span class=\"line\">specialized</span><br><span class=\"line\"><span class=\"comment\"># 使用列表里面的元素到其他场景</span></span><br><span class=\"line\">message = <span class=\"string\">f&#x27;我喜欢<span class=\"subst\">&#123;bicycles[<span class=\"number\">0</span>]&#125;</span>品牌的摩托车。&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">我喜欢trek品牌的摩托车。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改、添加和删除列表元素\"><a href=\"#修改、添加和删除列表元素\" class=\"headerlink\" title=\"修改、添加和删除列表元素\"></a>修改、添加和删除列表元素</h3><p>大多数列表将是动态的，意味着列表创建后，随着程序的运行将修改、增加、或删除其中的元素。<br>这中间增加有<strong>append()<strong>方法在列表末尾添加元素，</strong>insert()<strong>在列表的指定位置插入元素。<br>删除有</strong>del 列表元素</strong>将删除列表元素并且无法在访问这个元素了。<br>**pop()**默认删除列表最后一个元素，也可以指定删除列表中的其他元素，在括号里面填上该元素的索引值就可以了。<br>这里说下，pop()删除的元素可以赋值给一个变量继续使用，不像del不能在赋值和访问了。<br>**remove()**方法是删除一个指定的元素值，列表有多个同样的值的话这个方法只删除第一个，要想全部删除就要使用循环。<br>值得一提的是这个方法和pop()一样删除了的元素可以赋值给一个变量继续使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改列表元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">motorcycles[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;da yang&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;da yang&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加列表元素</span></span><br><span class=\"line\"><span class=\"comment\">## 在列表末尾添加元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">motorcycles.append(<span class=\"string\">&#x27;da yang&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>, <span class=\"string\">&#x27;da yang&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">## 在列表的指定位置插入元素</span></span><br><span class=\"line\">motorcycles.insert(<span class=\"number\">0</span>, <span class=\"string\">&#x27;li fan&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;li fan&#x27;</span>, <span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>, <span class=\"string\">&#x27;da yang&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除列表元素</span></span><br><span class=\"line\"><span class=\"comment\">## del方法删除</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> motorcycles[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">## pop方法删除</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">poped_motorcycles = motorcycles.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(poped_motorcycles)</span><br><span class=\"line\">suzuki</span><br><span class=\"line\"><span class=\"comment\">### pop方法删除指定位置的元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">last_motorcycles = motorcycles.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(last_motorcycles)</span><br><span class=\"line\">honda</span><br><span class=\"line\"><span class=\"comment\">## remove()根据值删除元素</span></span><br><span class=\"line\">motorcycles = [<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;yamaha&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\">mid_motorcycles = <span class=\"string\">&#x27;yamaha&#x27;</span></span><br><span class=\"line\">motorcycles.remove(mid_motorcycles)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(motorcycles)</span><br><span class=\"line\">[<span class=\"string\">&#x27;honda&#x27;</span>, <span class=\"string\">&#x27;suzuki&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;mid_motorcycles.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\">Yamaha</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"列表管理\"><a href=\"#列表管理\" class=\"headerlink\" title=\"列表管理\"></a>列表管理</h3><p><strong>1.sort()<strong>方法可以对列表</strong>永久排序</strong>，该方法是将列表按字母顺序或数字从小到大的顺序进行排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars = [<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>]</span><br><span class=\"line\">cars.sort()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 反向排序</span></span><br><span class=\"line\">cars.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 反转列表,这是一种快捷方法</span></span><br><span class=\"line\">cars = cars[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2. sorted()<strong>方法是对列表进行</strong>临时排序</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时反向排序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(cars, reverse=<span class=\"literal\">True</span>))</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3.reverse()<strong>方法是</strong>永久反转排列</strong>列表里面的元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.reverse()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>**4.len()**方法可以快速获取列表长度，其显示的是列表内有多少个元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(cars))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5.enumerate()</strong> 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，<strong>同时列出数据和数据下标</strong>，一般用在 for 循环当中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seq = [<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i, element <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(seq):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span> i, element</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span> one</span><br><span class=\"line\"><span class=\"number\">1</span> two</span><br><span class=\"line\"><span class=\"number\">2</span> three</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>本章学习了什么是列表，以及如何使用列表内的元素。学习了定义列表，增删改列表内元素，以及如何对列表进行永久排序和临时排序，还学习了反转列表顺序和反向排序。</p>\n<h2 id=\"第三章-操作列表\"><a href=\"#第三章-操作列表\" class=\"headerlink\" title=\"第三章 操作列表\"></a>第三章 操作列表</h2><h3 id=\"遍历整个列表\"><a href=\"#遍历整个列表\" class=\"headerlink\" title=\"遍历整个列表\"></a>遍历整个列表</h3><p>使用<strong>for</strong>循环可以很轻松的访问整个列表，以及对列表进行操作。这里值得一提的是for循环里面的变量名，在遍历列表是尽可能用列表的单数名，比如列表名为cars，那么for循环的变量尽量写成car。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magicians = [<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;david&#x27;</span>, <span class=\"string\">&#x27;carolina&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> magician <span class=\"keyword\">in</span> magicians:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(magician)</span><br><span class=\"line\"></span><br><span class=\"line\">alice</span><br><span class=\"line\">david</span><br><span class=\"line\">carolina</span><br><span class=\"line\"><span class=\"comment\"># 进行其他操作</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> magician <span class=\"keyword\">in</span> magicians:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;magician.title()&#125;</span>,你的表演很精彩！&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;谢谢你，<span class=\"subst\">&#123;magician.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;感谢你们每一个人的表演&#x27;</span>)</span><br><span class=\"line\">Alice,你的表演很精彩！</span><br><span class=\"line\">谢谢你，Alice</span><br><span class=\"line\">David,你的表演很精彩！</span><br><span class=\"line\">谢谢你，David</span><br><span class=\"line\">Carolina,你的表演很精彩！</span><br><span class=\"line\">谢谢你，Carolina</span><br><span class=\"line\">感谢你们每一个人的表演</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建数值列表\"><a href=\"#创建数值列表\" class=\"headerlink\" title=\"创建数值列表\"></a>创建数值列表</h3><p><strong>range()<strong>函数可以生成一系列数，但它实际上不会打印最后一个数，这是编程语言中常见的</strong>差一</strong>行为结果，要想打印最后个数需要使用**+1或者是使用比最后一个数大1的数**</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 打印最后一位</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**list()**函数可以将range()的结果直接转换为列表，方法是将range()作为list()的参数，同时range（）还可以指定步长。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\"># 从2开始到11结束，指定步长为2</span></span><br><span class=\"line\">even_number = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(even_number)</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\"># 用for循环创建数值列表</span></span><br><span class=\"line\">squares = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>):</span><br><span class=\"line\">    square = value**<span class=\"number\">2</span></span><br><span class=\"line\">    squares.append(square)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(squares)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用这几个函数可以对数值列表进行统计<strong>列表作为其参数</strong>，min（）列表里面最小值，max（）列表里面最大值，sum（）列表所有数求和。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单统计数值列表</span></span><br><span class=\"line\">values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(values))</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(values))</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(values))</span><br><span class=\"line\"><span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>列表推导式</strong>是一种简化方法，这种方法首先指定一个列表名（变量名），然后等号右边用中括号开始，括号内的排列顺序是表达式——for循环，这种方法需要经常练习。比如创建上面数值列表可以写成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squares = [value**<span class=\"number\">2</span> <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(squares)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"comment\"># 1到50的奇数之和游戏</span></span><br><span class=\"line\">jishu_num = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(jishu_num))</span><br><span class=\"line\"><span class=\"number\">625</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>([jishu <span class=\"keyword\">for</span> jishu <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>, <span class=\"number\">2</span>)]))</span><br><span class=\"line\"><span class=\"number\">625</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用列表的一部分\"><a href=\"#使用列表的一部分\" class=\"headerlink\" title=\"使用列表的一部分\"></a>使用列表的一部分</h3><p><strong>切片</strong>，要使用列表的一部分，其实就是使用列表的索引。使用的方法是在调用列表时在列表名后面[0:1]，这代表列表的第一个和第二个值，就是在列表索引值0,1的值。这里面也要注意差一行为。在一个班级需要评出前三名或后三名或部分名单时，切片可以起到很好的作用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切片</span></span><br><span class=\"line\">players = [<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值1到3的元素因为差一行为，所以并不会打印索引值3的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值0到3的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[:<span class=\"number\">3</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值1到列表最后一个的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[<span class=\"number\">1</span>:])</span><br><span class=\"line\">[<span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值0到列表最后一个的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[:])</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 索引值为列表最后3个的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(players[-<span class=\"number\">3</span>:])</span><br><span class=\"line\">[<span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 遍历切片</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;下面是我们的前三名&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> player <span class=\"keyword\">in</span> players[:<span class=\"number\">3</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(player.title())</span><br><span class=\"line\">下面是我们的前三名</span><br><span class=\"line\">Charles</span><br><span class=\"line\">Martina</span><br><span class=\"line\">Michael</span><br></pre></td></tr></table></figure>\n\n<p><strong>复制列表或列表切片</strong></p>\n<p>需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变，要复制列表时尽量使用切片复制。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">players = [<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">yuwen_win = players[:<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;语文前三名是：&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(yuwen_win)</span><br><span class=\"line\">语文前三名是：</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">shuxue_win = players[-<span class=\"number\">3</span>:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;数学前三名是：&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(shuxue_win)</span><br><span class=\"line\">数学前三名是：</span><br><span class=\"line\">[<span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变</span></span><br><span class=\"line\">new_players = players</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_players)</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>]</span><br><span class=\"line\">players.append(<span class=\"string\">&#x27;AAABBB&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_players)</span><br><span class=\"line\">[<span class=\"string\">&#x27;charles&#x27;</span>, <span class=\"string\">&#x27;martina&#x27;</span>, <span class=\"string\">&#x27;michael&#x27;</span>, <span class=\"string\">&#x27;florence&#x27;</span>, <span class=\"string\">&#x27;eli&#x27;</span>, <span class=\"string\">&#x27;AAABBB&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>不可以改变值的列表，称为元组（tuple），元组和列表很像，但是列表是用方括号，而元组是用圆括号。虽然不可以修改元组里面的值，但是可以通过重新赋值改变该变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dimensions = (<span class=\"number\">200</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dimensions)</span><br><span class=\"line\">(<span class=\"number\">200</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\">dimensions = (<span class=\"number\">400</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dimensions:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"><span class=\"number\">400</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置代码格式\"><a href=\"#设置代码格式\" class=\"headerlink\" title=\"设置代码格式\"></a>设置代码格式</h3><p>为什么要设置代码格式？</p>\n<p>代码被阅读的次数远大于编写的次数。在编写完以后的多次阅读中，良好的代码格式可以让阅读花的时间很短。<br>PEP 8 是设置代码指南，它建议每级缩进4个空格。每个编辑器（IDE）都可以设置，通常（tab）使用是最多的。<br>每行长度建议不超过79个字符，但这并不是不可逾越的红线，刚开始学的时候不必在意，不过养成这样的习惯后，会对以后和别人合作带来很多方便。<br>空行建议：不同内容建议用一个空行隔开，不建议使用3、4或多个空行来区隔，主要是空行多了影响阅读。</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何高效的处理列表中的元素，如何使用for循环遍历列表，如何创建简单的数值列表以及对数值列表执行的一些操作。还学习了如何使用切片对列表进行操作和复制，最后还学习了元组，以及设置代码格式。</p>\n<h2 id=\"第四章-if语句\"><a href=\"#第四章-if语句\" class=\"headerlink\" title=\"第四章 if语句\"></a>第四章 if语句</h2><p>编程时经常需要检查一系列的条件，并根据此决定采取什么措施。if语句让你能够检查程序的当前状态，并采取相应的措施。每条if语句的核心都是一个值为True或False的表达式。相应的符号有：&#x3D;&#x3D;、!&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;。关键字有：if、elif、else。在检查多个条件时会用到与、或、非：他们的关键词是：and（两个都为真）、or（一个为真）、not（条件为假）。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">cars = [<span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> car <span class=\"keyword\">in</span> cars:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> car == <span class=\"string\">&#x27;bmw&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(car.upper())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(car.title())</span><br><span class=\"line\">Audi</span><br><span class=\"line\">BMW</span><br><span class=\"line\">Subaru</span><br><span class=\"line\">Toyota</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car = <span class=\"string\">&#x27;bmw&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># ==是相等运算符，目的是比较等式两边的值是否相等，相等就是True否则就是False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car == <span class=\"string\">&#x27;bmw&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car == <span class=\"string\">&#x27;toyota&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 检查是忽略大小写可以用到字符串的方法upper（）或title（）等等</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.upper() == <span class=\"string\">&#x27;BMW&#x27;</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>检查是否不等</strong>，这里用的符号是 !&#x3D; 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requested_topping = <span class=\"string\">&#x27;mushrooms&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> requested_topping != <span class=\"string\">&#x27;anchovies&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hold the anhovies!&#x27;</span>)</span><br><span class=\"line\">Hold the anhovies!</span><br></pre></td></tr></table></figure>\n\n<p><strong>数值比较</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age == <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age == <span class=\"number\">18</span>  </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">answer = <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> answer != <span class=\"number\">42</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这个数值不是42，请再次更改变量值！&#x27;</span>)</span><br><span class=\"line\">这个数值不是<span class=\"number\">42</span>，请再次更改变量值！</span><br></pre></td></tr></table></figure>\n\n<p><strong>检查多个条件</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_0 = <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_1 = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"comment\"># and</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_0 &gt;=<span class=\"number\">21</span> <span class=\"keyword\">and</span> age_1 &gt;=<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age_0 &gt;=<span class=\"number\">21</span> <span class=\"keyword\">or</span> age_1 &gt;=<span class=\"number\">21</span>  </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>检查某个特定的值是否在或不在列表中</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> <span class=\"keyword\">in</span> number</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9</span> <span class=\"keyword\">in</span> number</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">number_0 = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> number_0 <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> number:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;number_0&#125;</span>不在我们的数字列表里面。我们把他加进来吧！&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">8</span>不在我们的数字列表里面。我们把他加进来吧！</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h3><p>在了解了条件测试之后，就可以编写if 语句了，具体使用哪一种取决于测试的条件数量。</p>\n<p><strong>最简单的if 语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你已经成年了。&#x27;</span>)</span><br><span class=\"line\">你已经成年了。</span><br></pre></td></tr></table></figure>\n\n<p><strong>if-else语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你已经成年了。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你还是未成年。&#x27;</span>)</span><br><span class=\"line\">你还是未成年。</span><br></pre></td></tr></table></figure>\n\n<p><strong>if-elif-else语句</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以免费观看电影。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以半价购买电影票。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你需要购买全票。&#x27;</span>)</span><br><span class=\"line\">你可以半价购买电影票。</span><br><span class=\"line\"><span class=\"comment\"># 有些情况下是可以省略else这个代码块的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以免费观看电影。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你可以半价购买电影票。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;你需要购买全票。&#x27;</span>)</span><br><span class=\"line\">你可以半价购买电影票。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用if-语句处理列表\"><a href=\"#使用if-语句处理列表\" class=\"headerlink\" title=\"使用if 语句处理列表\"></a>使用if 语句处理列表</h3><p><strong>检查列表里面是否有相应的元素</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这个列表里3是中间数&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这个列表里有<span class=\"subst\">&#123;number&#125;</span>.&#x27;</span>)</span><br><span class=\"line\">这个列表里有<span class=\"number\">1.</span></span><br><span class=\"line\">这个列表里有<span class=\"number\">2.</span></span><br><span class=\"line\">这个列表里<span class=\"number\">3</span>是中间数</span><br><span class=\"line\">这个列表里有<span class=\"number\">4.</span></span><br><span class=\"line\">这个列表里有<span class=\"number\">5.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>确定列表是不是空列表</strong>，列表为空时都是返回False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = []</span><br><span class=\"line\"><span class=\"keyword\">if</span> numbers:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;adding <span class=\"subst\">&#123;number&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n所有数字添加了&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;好像这里面没有数字诶!&#x27;</span>)</span><br><span class=\"line\">好像这里面没有数字诶!</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers_0 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">numbers_1 = [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(numbers_0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(numbers_1)</span><br><span class=\"line\"><span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers_1:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number <span class=\"keyword\">in</span> numbers_0:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这两个列表都有 <span class=\"subst\">&#123;number&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;第一个列表里面没有 <span class=\"subst\">&#123;number&#125;</span> 这个数。&#x27;</span>)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">6</span> 这个数。</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">7</span> 这个数。</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">8</span> 这个数。</span><br><span class=\"line\">第一个列表里面没有 <span class=\"number\">9</span> 这个数。</span><br><span class=\"line\">这两个列表都有 <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了if语句以及相关的关键词和符号，也使用for循环遍历列表时对某些元素做特出处理。</p>\n<h2 id=\"第五章-字典\"><a href=\"#第五章-字典\" class=\"headerlink\" title=\"第五章 字典\"></a>第五章 字典</h2><p>字典就是储存多个有两种相关信息的元素，比如姓名及其年龄，单词及其含义等，字典的信息量也不守限制。</p>\n<h3 id=\"一个简单的字典\"><a href=\"#一个简单的字典\" class=\"headerlink\" title=\"一个简单的字典\"></a>一个简单的字典</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;color&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;points&#x27;</span>])</span><br><span class=\"line\">bule</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用字典\"><a href=\"#使用字典\" class=\"headerlink\" title=\"使用字典\"></a>使用字典</h3><p>字典（dictionary）是一系列的<strong>键值对</strong>，每个键都对应一个值，字典用放在花括号{ }中的一系列键值对表示。</p>\n<p><strong>访问字典中的值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;color&#x27;</span>])</span><br><span class=\"line\">bule</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加键值对</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien[<span class=\"string\">&#x27;x_position&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">alien[<span class=\"string\">&#x27;y_position&#x27;</span>] = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien）</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个空字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;&#125;</span><br><span class=\"line\">alien[<span class=\"string\">&#x27;color&#x27;</span>] = <span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">alien[<span class=\"string\">&#x27;x_position&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">alien[<span class=\"string\">&#x27;y_position&#x27;</span>] = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改字典中的值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien[<span class=\"string\">&#x27;x_position&#x27;</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除键值对</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien[<span class=\"string\">&#x27;speed&#x27;</span>] = <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 删除键值对</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> alien[<span class=\"string\">&#x27;speed&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;x_position&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;y_position&#x27;</span>: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>由类似对象组成字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favonlie_languages = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;jen&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sarah&#x27;</span>: <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;edward&#x27;</span>: <span class=\"string\">&#x27;swift&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;phil&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> favonlie_languages.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;key.title()&#125;</span>喜欢使用<span class=\"subst\">&#123;value.title()&#125;</span>语言编程！&#x27;</span>)</span><br><span class=\"line\">Jen喜欢使用Python语言编程！</span><br><span class=\"line\">Sarah喜欢使用C语言编程！</span><br><span class=\"line\">Edward喜欢使用Swift语言编程！</span><br><span class=\"line\">Phil喜欢使用Python语言编程！</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用get()方法来访问值</strong></p>\n<p>如果你访问的值不存在字典里，你直接访问的话会出现错误，这时候可以使用get()方法来访问，这个方法可以让你在访问不存在的值的时候返回一个默认值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;bule&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;speed&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">发生异常: KeyError</span><br><span class=\"line\"><span class=\"string\">&#x27;speed&#x27;</span></span><br><span class=\"line\">  File <span class=\"string\">&quot;favonlie_languages.py&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien[<span class=\"string\">&#x27;speed&#x27;</span>])</span><br><span class=\"line\">          ~~~~~^^^^^^^^^</span><br><span class=\"line\">KeyError: <span class=\"string\">&#x27;speed&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien.get(<span class=\"string\">&#x27;speed&#x27;</span>, <span class=\"string\">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))</span><br><span class=\"line\">不好意思，没有这个索引且没有对应的值</span><br><span class=\"line\">alien[<span class=\"string\">&#x27;speed&#x27;</span>] = <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(alien.get(<span class=\"string\">&#x27;speed&#x27;</span>, <span class=\"string\">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))</span><br><span class=\"line\">medium</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历字典\"><a href=\"#遍历字典\" class=\"headerlink\" title=\"遍历字典\"></a>遍历字典</h3><p>遍历字典中的内容有3个基本的关键词，items()字典中的键和值，有这个方法需要两个临时变量用于遍历字典、keys()遍历字典中的键、values()遍历字典中的值。</p>\n<p><strong>遍历所有键值对</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">like_number = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"string\">&#x27;7&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"string\">&#x27;5&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;d&#x27;</span>: <span class=\"string\">&#x27;9&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> like_number.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;key.title()&#125;</span> like number is <span class=\"subst\">&#123;value&#125;</span>&#x27;</span>)</span><br><span class=\"line\">A like number <span class=\"keyword\">is</span> <span class=\"number\">8</span></span><br><span class=\"line\">B like number <span class=\"keyword\">is</span> <span class=\"number\">7</span></span><br><span class=\"line\">C like number <span class=\"keyword\">is</span> <span class=\"number\">5</span></span><br><span class=\"line\">D like number <span class=\"keyword\">is</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历所有键</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favonlie_languages = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;jen&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sarah&#x27;</span>: <span class=\"string\">&#x27;c#&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;edward&#x27;</span>: <span class=\"string\">&#x27;swift&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;phil&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 遍历所有键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> favonlie_languages.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name.title())</span><br><span class=\"line\">Jen</span><br><span class=\"line\">Sarah</span><br><span class=\"line\">Edward</span><br><span class=\"line\">Phil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按特定顺序遍历字典中的所有键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(favonlie_languages.keys()):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Thank you <span class=\"subst\">&#123;name.title()&#125;</span>,you are welcome!&#x27;</span>)</span><br><span class=\"line\">Thank you Edward,you are welcome!</span><br><span class=\"line\">Thank you Jen,you are welcome!</span><br><span class=\"line\">Thank you Phil,you are welcome!</span><br><span class=\"line\">Thank you Sarah,you are welcome!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历字典中的所有值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;编程语言&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> language <span class=\"keyword\">in</span> favonlie_languages.values():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(language)</span><br><span class=\"line\">编程语言</span><br><span class=\"line\">python</span><br><span class=\"line\">c<span class=\"comment\">#</span></span><br><span class=\"line\">swift</span><br><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n\n<p>**set()**方法用于提取列表或集合中的不同元素，如果有相同的只会提取一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;编程语言&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> language <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>(favonlie_languages.values()):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(language.title())</span><br><span class=\"line\">编程语言</span><br><span class=\"line\">swift</span><br><span class=\"line\">c<span class=\"comment\">#</span></span><br><span class=\"line\">python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集合表现形式，一般用花括号，但里面是没有键值对的，里面的元素表现跟列表一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><p>有些时候需要将多个字典储存在列表中或将列表作为值储存在字典中，这中行为就成为嵌套。</p>\n<p><strong>字典列表</strong>就是在列表中储存字典可以应用于用户信息等。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alien_0 = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">alien_1 = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">alien_2 = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">15</span>&#125;</span><br><span class=\"line\">aliens = [alien_0, alien_1, alien_2]</span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">15</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个用于储存外星人的空列表</span></span><br><span class=\"line\">aliens = []</span><br><span class=\"line\"><span class=\"comment\"># 用for循环创建30个绿色的外星人</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien_number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>):</span><br><span class=\"line\">    new_alien = &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">    aliens.append(new_alien)</span><br><span class=\"line\"><span class=\"comment\"># 打印前5个外星人</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens[:<span class=\"number\">5</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 显示创建了多少个外星人</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;创建了多少个外星人:<span class=\"subst\">&#123;<span class=\"built_in\">len</span>(aliens)&#125;</span>&#x27;</span>)</span><br><span class=\"line\">创建了多少个外星人:<span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"comment\"># 修改前三个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens[:<span class=\"number\">3</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> alien[<span class=\"string\">&#x27;color&#x27;</span>] == <span class=\"string\">&#x27;green&#x27;</span>:</span><br><span class=\"line\">        alien[<span class=\"string\">&#x27;color&#x27;</span>] = <span class=\"string\">&#x27;yellow&#x27;</span></span><br><span class=\"line\">        alien[<span class=\"string\">&#x27;points&#x27;</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">        alien[<span class=\"string\">&#x27;speed&#x27;</span>] = <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> alien <span class=\"keyword\">in</span> aliens[:<span class=\"number\">5</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(alien)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;medium&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;points&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;speed&#x27;</span>: <span class=\"string\">&#x27;slow&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在字典中储存列表</strong>可以用于食品配方等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pizza = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;crust&#x27;</span>: <span class=\"string\">&#x27;think&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;toppings&#x27;</span>: [<span class=\"string\">&#x27;mushrooms&#x27;</span>, <span class=\"string\">&#x27;extra cheese&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(</span><br><span class=\"line\">    <span class=\"string\">f&#x27;You ordered a <span class=\"subst\">&#123;pizza[<span class=\"string\">&quot;crust&quot;</span>]&#125;</span>-crust pizza &#x27;</span><span class=\"string\">&quot;with the following toppings:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> topping <span class=\"keyword\">in</span> pizza[<span class=\"string\">&#x27;toppings&#x27;</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\t<span class=\"subst\">&#123;topping&#125;</span>&#x27;</span>)</span><br><span class=\"line\">You ordered a think-crust pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">\tmushrooms</span><br><span class=\"line\">\textra cheese</span><br></pre></td></tr></table></figure>\n\n<p><strong>在字典中储存字典</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;albert&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;einstein&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;location&#x27;</span>: <span class=\"string\">&#x27;princeton&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;marie&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;curie&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;location&#x27;</span>: <span class=\"string\">&#x27;paris&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> username, user_info <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nUsername: <span class=\"subst\">&#123;username&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;user_info[<span class=\"string\">&#x27;first&#x27;</span>]&#125;</span> <span class=\"subst\">&#123;user_info[<span class=\"string\">&#x27;last&#x27;</span>]&#125;</span>&quot;</span></span><br><span class=\"line\">    location = user_info[<span class=\"string\">&#x27;location&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\tFullname: <span class=\"subst\">&#123;full_name.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\tLocation: <span class=\"subst\">&#123;location.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Username: aeinstein</span><br><span class=\"line\">\tFullname: Albert Einstein</span><br><span class=\"line\">\tLocation: Princeton</span><br><span class=\"line\"></span><br><span class=\"line\">Username: mcurie</span><br><span class=\"line\">\tFullname: Marie Curie</span><br><span class=\"line\">\tLocation: Paris</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章我们学习了如何定义字典，以及如何使用储存在字典中的信息。然后学习了如何访问和修改字典中的元素，以及如何遍历字典中的信息。还学习了如何遍历字典中的所有键值对、所有的键和所有的值。学习了如何在列表中嵌套字典，在字典中如何嵌套列表，在字典中嵌套字典。</p>\n<h2 id=\"第六章-用户输入和while循环\"><a href=\"#第六章-用户输入和while循环\" class=\"headerlink\" title=\"第六章 用户输入和while循环\"></a>第六章 用户输入和while循环</h2><h3 id=\"input-函数的工作原理\"><a href=\"#input-函数的工作原理\" class=\"headerlink\" title=\"input()函数的工作原理\"></a>input()函数的工作原理</h3><p>input()函数让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，以便使用。input()函数接受一个参数，即要向用户显示的提示(prompt)。用户输入的内容Python默认为字符串，要想用户输入其他内容需要再input()前面制定类型，比如：要想用户输入的是数值 int(input(“How old are you”))。<br><strong>注意：</strong>有些文本编辑器不能运行提示用户输入的程序，要运行他们需要从终端运行。在cmd终端里面直接运行python文件就可以了，<strong>格式是</strong>：路径&gt;py 文件名和文件后缀。有些python版本需要使用：路径&gt;python 文件名和文件后缀。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;tell me something, and I will repeat it back to you:&quot;</span>)</span><br><span class=\"line\">tell me something, <span class=\"keyword\">and</span> I will repeat it back to you: hello world</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\"> hello world</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>  </span><br></pre></td></tr></table></figure>\n\n<p><strong>使用int()来获取数值输入</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制用户输入的内容为数字</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;How old are you: &quot;</span>))</span><br><span class=\"line\">How old are you: <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age&gt;<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>求模运算</strong>是个很有用的工具，它将两个数相除并返回余数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个数，我可以判断是奇数还是偶数：&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> number % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这个数是偶数！&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这个数是奇数！&quot;</span>)</span><br><span class=\"line\">请输入一个数，我可以判断是奇数还是偶数：<span class=\"number\">50</span></span><br><span class=\"line\">这个数是偶数！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-循环简介\"><a href=\"#while-循环简介\" class=\"headerlink\" title=\"while 循环简介\"></a>while 循环简介</h3><p>for 循环用于针对集合中的每个元素执行一个代码块，而 while 循环这不断地运行，只到指定的条件不再满足为止。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &lt;= <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    number += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>让用户选择何时退出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只要用户输入的不是‘quit’和‘exit’该循环就继续运行。</span></span><br><span class=\"line\">prompt = <span class=\"string\">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span></span><br><span class=\"line\">message = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> message != <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message != <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 这里添加了一个lower方法目的是让用户输入的内容都变成小写和下面的if进行判断。</span></span><br><span class=\"line\">    message = <span class=\"built_in\">input</span>(prompt).lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message == <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;恭喜你！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class=\"number\">2</span></span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class=\"number\">3</span></span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: ExiT</span><br><span class=\"line\">恭喜你！</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用标志让用户选择何时退出</span></span><br><span class=\"line\">prompt = <span class=\"string\">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span></span><br><span class=\"line\">active = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> active:</span><br><span class=\"line\">    message = <span class=\"built_in\">input</span>(prompt).lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message == <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;恭喜你！&quot;</span>)</span><br><span class=\"line\">        active = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;再想想退出的英文是什么？&quot;</span>)</span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: qwe</span><br><span class=\"line\">再想想退出的英文是什么？</span><br><span class=\"line\">我们来玩个游戏，看看你知不知道怎么退出这个游戏: QUIT</span><br><span class=\"line\">恭喜你！</span><br></pre></td></tr></table></figure>\n\n<p><strong>break 退出循环</strong>，不管条件满不满足，想立即退出 while 循环，不再运行后面的代码，可以使用 break 语句。上面的例子已经使用过一次了。我们再使用一个特别的例子。break 还可以用来退出遍历列表或字典的 for 循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请你说说你喜欢哪个城市: &quot;</span>).lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">&quot;quit&quot;</span> <span class=\"keyword\">or</span> message == <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;再见！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;除了<span class=\"subst\">&#123;message.title()&#125;</span>还有其他的城市么？&quot;</span>)</span><br><span class=\"line\">请你说说你喜欢哪个城市: shang hai</span><br><span class=\"line\">除了Shang Hai 还有其他的城市么？</span><br><span class=\"line\">请你说说你喜欢哪个城市: QUIT</span><br><span class=\"line\">再见！</span><br></pre></td></tr></table></figure>\n\n<p><strong>在循环中使用 continue</strong> </p>\n<p>要返回循环的开头，并根据条件测试的结果决定是否继续执行循环，可以使用 continue 语句，他不像 break 那样不执行余下的代码并退出整个循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    number += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">7</span> <span class=\"number\">9</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>避免无线循环</strong></p>\n<p>while 循环一定要设置退出条件，如果没有退出条件，while 循环就会无止境的一直执行代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> number &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(number)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-while-循环处理列表和字典\"><a href=\"#使用-while-循环处理列表和字典\" class=\"headerlink\" title=\"使用 while 循环处理列表和字典\"></a>使用 while 循环处理列表和字典</h3><p>for 循环是一种遍历列表的有效方式，但不应该在 for 循环中修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时修改它，可使用 while 循环。通过将 while 循环与列表和字典结合起来使用，可收集、存储并组织大量的输入，供以后查看和使用。<strong>注意</strong>，这里有个有意思的事情，就是列表里面是空的时候它的布尔值是 False ，列表里面有元素的时候，它的布尔值是 True 。</p>\n<p><strong>在列表之间移动元素</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先创建一个待验证的用户列表</span></span><br><span class=\"line\"><span class=\"comment\"># 和一个用户储存已验证用户的空列表</span></span><br><span class=\"line\">unconfirmed_users = [<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;zqten&#x27;</span>, <span class=\"string\">&#x27;candace&#x27;</span>]</span><br><span class=\"line\">confirmed_users = []</span><br><span class=\"line\"><span class=\"comment\"># 验证每个用户，直到没有未验证的用户为止</span></span><br><span class=\"line\"><span class=\"comment\"># 将每个经过验证的用户添加到已验证用户列表中</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> unconfirmed_users:</span><br><span class=\"line\">    current_user = unconfirmed_users.pop()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Verifying user: <span class=\"subst\">&#123;current_user.title()&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    confirmed_users.append(current_user)</span><br><span class=\"line\"><span class=\"comment\"># 显示所有的已验证的用户</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nThe following users have been confirmed:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> confirmed_user <span class=\"keyword\">in</span> confirmed_users:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(confirmed_user.title())</span><br><span class=\"line\">    </span><br><span class=\"line\">Verifying user: Candace</span><br><span class=\"line\">Verifying user: Zqten</span><br><span class=\"line\">Verifying user: Admin</span><br><span class=\"line\"></span><br><span class=\"line\">The following users have been confirmed:</span><br><span class=\"line\">Candace</span><br><span class=\"line\">Zqten</span><br><span class=\"line\">Admin</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除为特定值的所有列表元素</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除为特定值的所有列表元素</span></span><br><span class=\"line\">pets = [<span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;goldfish&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;rabbit&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pets)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"string\">&#x27;cat&#x27;</span> <span class=\"keyword\">in</span> pets:</span><br><span class=\"line\">    pets.remove(<span class=\"string\">&#x27;cat&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pets)</span><br><span class=\"line\">[<span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;goldfish&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;rabbit&#x27;</span>, <span class=\"string\">&#x27;cat&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;dog&#x27;</span>, <span class=\"string\">&#x27;goldfish&#x27;</span>, <span class=\"string\">&#x27;rabbit&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用用户输入填充字典</strong></p>\n<p>可以使用 while 循环提示用户输入任意多的信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用用户输入填充字典</span></span><br><span class=\"line\">responses = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 设置一个标志，指出调查是否继续</span></span><br><span class=\"line\">polling_active = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这是调查每个人的爱好，请根据提示输入。&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> polling_active:</span><br><span class=\"line\">    <span class=\"comment\"># 提示输入被调查者的名字和回答</span></span><br><span class=\"line\">    name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入被调查者的名字：&quot;</span>)</span><br><span class=\"line\">    response = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入被调查者的回答：&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 将输入的数据储存在字典中</span></span><br><span class=\"line\">    responses[name] = response</span><br><span class=\"line\">    <span class=\"comment\"># 询问用户是否继续调查</span></span><br><span class=\"line\">    repeat = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> repeat == <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">        polling_active = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"comment\"># 下面这段代码的目的是让用户输入yes和no，输入其他的会提示错误，如果是只判断退出循环条件的话，可以省略下面。</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> repeat == <span class=\"string\">&#x27;yes&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> repeat != <span class=\"string\">&#x27;yes&#x27;</span> <span class=\"keyword\">or</span> repeat != <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> repeat == <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">                polling_active = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> repeat == <span class=\"string\">&#x27;yes&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入错误，请重新输入&quot;</span>)</span><br><span class=\"line\">                repeat = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> repeat == <span class=\"string\">&#x27;no&#x27;</span>:</span><br><span class=\"line\">            polling_active = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出调查结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n---调查结果---&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> name, response <span class=\"keyword\">in</span> responses.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;name&#125;</span>的爱好是: <span class=\"subst\">&#123;response&#125;</span>。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">这是调查每个人的爱好，请根据提示输入。</span><br><span class=\"line\">请输入被调查者的名字：刘翔</span><br><span class=\"line\">请输入被调查者的回答：跨栏</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）不知道</span><br><span class=\"line\">输入错误，请重新输入</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）yes</span><br><span class=\"line\">请输入被调查者的名字：姚明</span><br><span class=\"line\">请输入被调查者的回答：篮球</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）不知道</span><br><span class=\"line\">输入错误，请重新输入</span><br><span class=\"line\">是否有人继续参与调查？（yes/no）no</span><br><span class=\"line\"></span><br><span class=\"line\">---调查结果---</span><br><span class=\"line\">刘翔的爱好是: 跨栏。</span><br><span class=\"line\">姚明的爱好是: 篮球。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何在程序中使用 input() 来让用户提供信息，如何处理文本和数的输入，以及如何使用 while 循环让程序按用户的要求不断地运行。然后见识了多种控制 while 循环流程的方式：设置活动标志，使用 break 语句，以及使用 continue 语句。还学习了如何使用 while 循环在列表之间移动元素，以及如何从列表中删除所有包含特定值的元素。最后，学习了如何结合使用 while 循环和字典。</p>\n<h2 id=\"第七章-函数\"><a href=\"#第七章-函数\" class=\"headerlink\" title=\"第七章 函数\"></a>第七章 函数</h2><p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用（call）该函数。当需要再程序中多次执行同一项任务时，无须反复编写完成该任务的代码，只需要调用执行该任务的函数，让Python运行其中的代码即可。</p>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><p>定义函数的关键字是 def 。后面是函数名和括号，没有参数时可以是空括号，然后和 for 、while 一样也需要冒号，表示定义完成，换行后缩进表示要执行的代码块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_user</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">greet_user()</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<p><strong>向函数传递信息</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_user</span>(<span class=\"params\">uesrname</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello,<span class=\"subst\">&#123;uesrname&#125;</span>!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">greet_user(<span class=\"string\">&#x27;zqten&#x27;</span>)</span><br><span class=\"line\">Hello,zqten!</span><br></pre></td></tr></table></figure>\n\n<p><strong>实参和形参</strong></p>\n<p>在上面的例子中，uesrname是一个形参，即函数完成工作所需要的信息。<br>而 ‘zqten’ 则是实参，即在调用函数时传递给函数的信息。</p>\n<h3 id=\"传递实参\"><a href=\"#传递实参\" class=\"headerlink\" title=\"传递实参\"></a>传递实参</h3><p>传递实参有两种方式，一种是按照位置顺序传递，另一种是按照关键字传递。按照关键字传递实参不用考虑顺序，但要记得关键字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">describe_pet</span>(<span class=\"params\">animal_type, pet_name: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nI have a <span class=\"subst\">&#123;animal_type&#125;</span>.&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My <span class=\"subst\">&#123;animal_type&#125;</span>&#x27;s name is <span class=\"subst\">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 按位置顺序传递实参</span></span><br><span class=\"line\">describe_pet(<span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;duoduo&#x27;</span>)</span><br><span class=\"line\">I have a cat.</span><br><span class=\"line\">My cat<span class=\"string\">&#x27;s name is Duoduo.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 按关键字传递实参</span></span><br><span class=\"line\"><span class=\"string\">describe_pet(pet_name=&#x27;</span>nai cha<span class=\"string\">&#x27;, animal_type=&#x27;</span>dog<span class=\"string\">&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">I have a dog.</span></span><br><span class=\"line\"><span class=\"string\">My dog&#x27;</span>s name <span class=\"keyword\">is</span> Nai Cha.</span><br></pre></td></tr></table></figure>\n\n<p><strong>默认值</strong></p>\n<p>有些时候你想改变某个参数，但有些时候你想让这个参数先有一个默认值，后面调用的时候看情况是否修改。这种情况可以为参数设置一个默认值。如果没有设置默认值，在调用的时候也没有传递参数 Python 就会报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">describe_pet</span>(<span class=\"params\">animal_type=<span class=\"string\">&#x27;cat&#x27;</span>, pet_name=<span class=\"string\">&#x27;duo duo&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nI have a <span class=\"subst\">&#123;animal_type&#125;</span>.&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My <span class=\"subst\">&#123;animal_type&#125;</span>&#x27;s name is <span class=\"subst\">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 有默认值的情况下，可以不用传递参数，也可以看需要传递</span></span><br><span class=\"line\">describe_pet()</span><br><span class=\"line\">I have a cat.</span><br><span class=\"line\">My cat<span class=\"string\">&#x27;s name is Duo Duo.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">describe_pet(&#x27;</span>dog<span class=\"string\">&#x27;, &#x27;</span>nai cha<span class=\"string\">&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">I have a dog.</span></span><br><span class=\"line\"><span class=\"string\">My dog&#x27;</span>s name <span class=\"keyword\">is</span> Nai Cha.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数并非总是直接显示输出，它还可以处理一些数据，并返回一个或一组值，函数返回的值称为返回值。在函数中 <strong>return</strong> 语句将值返回到调用函数的那行代码，返回值能让你将程序的大部分繁重工作移到函数中，从而简化程序。</p>\n<p><strong>返回简单的值</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">first_name, last_name</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    full_name = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span>&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">musician = get_formatted_name(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendrix&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">Jimi Hendrix </span><br></pre></td></tr></table></figure>\n\n<p><strong>让实参变成可选</strong></p>\n<p>就是先设置参数的默认值，但这个默认值是一个空值。不需要的时候就不会出现，需要的时候只需要在调用的时候传递一个参数就可以。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">first_name, last_name, middle_name=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    full_name = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span> <span class=\"subst\">&#123;middle_name&#125;</span>&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">musician = get_formatted_name(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendrix&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">Jimi Hendrix </span><br><span class=\"line\"></span><br><span class=\"line\">musician = get_formatted_name(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendrix&#x27;</span>, <span class=\"string\">&#x27;YYY&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">Jimi Hendrix Yyy</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回字典</strong></p>\n<p>这里有个小小的细节，就是 age&#x3D;None 是一个布尔值并且是 False 。意思就是这个参数并没有值返回 False 。如果为这个参数传递了一个值，它就返回 True 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">build_person</span>(<span class=\"params\">first_name, last_name, age=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回一个字典，其中包含一个人的信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    person = &#123;<span class=\"string\">&#x27;first&#x27;</span>: first_name, <span class=\"string\">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> age:</span><br><span class=\"line\">        person[<span class=\"string\">&#x27;age&#x27;</span>] = age</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person</span><br><span class=\"line\"></span><br><span class=\"line\">musician = build_person(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendeix&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;hendeix&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">musician = build_person(<span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;hendeix&#x27;</span>, age=<span class=\"number\">36</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(musician)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;jimi&#x27;</span>, <span class=\"string\">&#x27;last&#x27;</span>: <span class=\"string\">&#x27;hendeix&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">36</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结合使用函数和 while 循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">first_name, last_name, middle_name=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    full_name = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;first_name&#125;</span> <span class=\"subst\">&#123;last_name&#125;</span> <span class=\"subst\">&#123;middle_name&#125;</span>&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nPleasr tell me your name:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;(enter &#x27;q&#x27; at any time to quit.)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    f_name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;你姓什么：&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f_name == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    l_name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;你的名字是什么：&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l_name == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    full_name = get_formatted_name(f_name, l_name)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;你好, <span class=\"subst\">&#123;full_name&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Pleasr tell me your name:</span><br><span class=\"line\">(enter <span class=\"string\">&#x27;q&#x27;</span> at <span class=\"built_in\">any</span> time to quit.)</span><br><span class=\"line\">你姓什么：yao</span><br><span class=\"line\">你的名字是什么：ming</span><br><span class=\"line\">你好, Yao Ming </span><br><span class=\"line\"></span><br><span class=\"line\">Pleasr tell me your name:</span><br><span class=\"line\">(enter <span class=\"string\">&#x27;q&#x27;</span> at <span class=\"built_in\">any</span> time to quit.)</span><br><span class=\"line\">你姓什么：q</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传递列表\"><a href=\"#传递列表\" class=\"headerlink\" title=\"传递列表\"></a>传递列表</h3><p>将列表传递给函数后，函数就能直接访问其内容，进行修改等等操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_users</span>(<span class=\"params\">names</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;向列表中的每个用户发出简单的问候&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Hello, %s!&#x27;</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\">username = [<span class=\"string\">&#x27;zqten&#x27;</span>, <span class=\"string\">&#x27;zhengjizhong&#x27;</span>, <span class=\"string\">&#x27;zhengkainan&#x27;</span>, <span class=\"string\">&#x27;zhouhuarong&#x27;</span>]</span><br><span class=\"line\">greet_users(username)</span><br><span class=\"line\"></span><br><span class=\"line\">Hello, zqten!</span><br><span class=\"line\">Hello, zhengjizhong!</span><br><span class=\"line\">Hello, zhengkainan!</span><br><span class=\"line\">Hello, zhouhuarong!</span><br></pre></td></tr></table></figure>\n\n<p><strong>在函数中修改列表</strong>这个程序演示了一个概念：每个函数都应只负责一项具体工作。这有助于将复杂的任务分解成一系列简单的步骤。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unprinted_designs = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">completed_models = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_models</span>(<span class=\"params\">unprinted_designs, completed_models</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    模拟打印每个数字，直到没有未打印的数字为止</span></span><br><span class=\"line\"><span class=\"string\">    打印每个数字后，都将其移到列表completed_models中</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> unprinted_designs:</span><br><span class=\"line\">        current_design = unprinted_designs.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Printing model: %s&#x27;</span> % current_design)</span><br><span class=\"line\">        completed_models.append(current_design)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_completed_models</span>(<span class=\"params\">completed_models</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;显示打印好的所有数字&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nThe following models have been printed:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> completed_model <span class=\"keyword\">in</span> completed_models:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(completed_model, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print_models(unprinted_designs, completed_models)</span><br><span class=\"line\">show_completed_models(completed_models)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(unprinted_designs)</span><br><span class=\"line\"></span><br><span class=\"line\">Printing model: <span class=\"number\">1</span></span><br><span class=\"line\">Printing model: <span class=\"number\">2</span></span><br><span class=\"line\">Printing model: <span class=\"number\">3</span></span><br><span class=\"line\">Printing model: <span class=\"number\">4</span></span><br><span class=\"line\">Printing model: <span class=\"number\">5</span></span><br><span class=\"line\">Printing model: <span class=\"number\">6</span></span><br><span class=\"line\">Printing model: <span class=\"number\">7</span></span><br><span class=\"line\">Printing model: <span class=\"number\">8</span></span><br><span class=\"line\">Printing model: <span class=\"number\">9</span></span><br><span class=\"line\">Printing model: <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">The following models have been printed:</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> []</span><br><span class=\"line\"><span class=\"comment\"># 如果不希望传递后列表为空，可以使用副本传递参数 [:] 切片传递</span></span><br><span class=\"line\">print_models(unprinted_designs[:], completed_models)</span><br><span class=\"line\">show_completed_models(completed_models)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(unprinted_designs)</span><br><span class=\"line\"></span><br><span class=\"line\">Printing model: <span class=\"number\">1</span></span><br><span class=\"line\">Printing model: <span class=\"number\">2</span></span><br><span class=\"line\">Printing model: <span class=\"number\">3</span></span><br><span class=\"line\">Printing model: <span class=\"number\">4</span></span><br><span class=\"line\">Printing model: <span class=\"number\">5</span></span><br><span class=\"line\">Printing model: <span class=\"number\">6</span></span><br><span class=\"line\">Printing model: <span class=\"number\">7</span></span><br><span class=\"line\">Printing model: <span class=\"number\">8</span></span><br><span class=\"line\">Printing model: <span class=\"number\">9</span></span><br><span class=\"line\">Printing model: <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">The following models have been printed:</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传递任意数量的参数\"><a href=\"#传递任意数量的参数\" class=\"headerlink\" title=\"传递任意数量的参数\"></a>传递任意数量的参数</h3><p>“ * ” 带形参名中的星号让Python创建一个名为形参名的元组，该元组包含函数收到的所有值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_pizza</span>(<span class=\"params\">*toppings</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\nMaking a pizza with the following toppings:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> topping <span class=\"keyword\">in</span> toppings:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(topping)</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"string\">&#x27;mushrooms&#x27;</span>, <span class=\"string\">&#x27;extra cheese&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">aaa</span><br><span class=\"line\"></span><br><span class=\"line\">Making a pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">mushrooms</span><br><span class=\"line\">extra cheese</span><br></pre></td></tr></table></figure>\n\n<p><strong>结合使用位置实参和任意数量的实参</strong></p>\n<p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置和关键字实参，再将余下的实参都收集到最后一个形参中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">make_pizza</span>(<span class=\"params\">size, *toppings</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nMaking a <span class=\"subst\">&#123;size&#125;</span>-inch pizza with the following toppings:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> topping <span class=\"keyword\">in</span> toppings:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;- <span class=\"subst\">&#123;topping&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"number\">16</span>, <span class=\"string\">&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"number\">19</span>, <span class=\"string\">&#x27;mushrooms&#x27;</span>, <span class=\"string\">&#x27;extra cheese&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- aaa</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">19</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- mushrooms</span><br><span class=\"line\">- extra cheese</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用任意数量的关键字实参</strong></p>\n<p>“ ** ” 带形参名中的两个星号让Python创建一个名为形参名的字典，该字典包含函数收到的所有的键值对。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">build_profile</span>(<span class=\"params\">first, last, **user_info</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;创建一个字典，其中包含我们知道的有关用户的一切&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    user_info[<span class=\"string\">&#x27;first_name&#x27;</span>] = first</span><br><span class=\"line\">    user_info[<span class=\"string\">&#x27;last_name&#x27;</span>] = last</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_info</span><br><span class=\"line\"></span><br><span class=\"line\">user_profile = build_profile(</span><br><span class=\"line\">    <span class=\"string\">&#x27;zheng&#x27;</span>, <span class=\"string\">&#x27;ji zhong&#x27;</span>, age=<span class=\"number\">11</span>, height=<span class=\"string\">&#x27;147cm&#x27;</span>, weight=<span class=\"string\">&#x27;48kg&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(user_profile)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">11</span>, <span class=\"string\">&#x27;height&#x27;</span>: <span class=\"string\">&#x27;147cm&#x27;</span>, <span class=\"string\">&#x27;weight&#x27;</span>: <span class=\"string\">&#x27;48kg&#x27;</span>, <span class=\"string\">&#x27;first_name&#x27;</span>: <span class=\"string\">&#x27;zheng&#x27;</span>, <span class=\"string\">&#x27;last_name&#x27;</span>: <span class=\"string\">&#x27;ji zhong&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将函数存储在模块中\"><a href=\"#将函数存储在模块中\" class=\"headerlink\" title=\"将函数存储在模块中\"></a>将函数存储在模块中</h3><p>将函数存储在称为模块的独立文件中，再将模块导入（import）主程序。可以让代码看起来容易理解。</p>\n<p><strong>导入整个模块</strong></p>\n<p>要让函数是可导入的，得先创建模块。模块是扩展名为 .py 的文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pizza</span><br><span class=\"line\">pizza.make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">pizza.make_pizza(<span class=\"number\">17</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">17</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入特定的函数</strong></p>\n<p>只想导入模块中的特定函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pizza <span class=\"keyword\">import</span> make_pizza</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"number\">16</span>,<span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 as 给函数指定别名</strong></p>\n<p>如果要导入的函数的名称太长或者可能与程序中的其他名称有冲突，可指定简短而独一无二的别名。这个方法也可以应用到给模块指定别名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pizza <span class=\"keyword\">import</span> make_pizza <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"></span><br><span class=\"line\">mp(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">mp(<span class=\"number\">16</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>, <span class=\"string\">&#x27;fanqie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br><span class=\"line\">- fanqie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以给模块指定别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pizza <span class=\"keyword\">as</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">p.make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">p.make_pizza(<span class=\"number\">16</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>, <span class=\"string\">&#x27;fanqie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br><span class=\"line\">- fanqie</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>导入模块中的所有函数</strong></p>\n<p>这种方法一般慎用，因为如果模块中有函数的名称与当前项目中的名称相同，可能导致意想不到的结果。<strong>最好的做法是要么只导入需要使用的函数，要么导入整个模块并使用点号调用</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pizza <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">make_pizza(<span class=\"number\">12</span>, <span class=\"string\">&#x27;zhu rou&#x27;</span>)</span><br><span class=\"line\">make_pizza(<span class=\"number\">16</span>, <span class=\"string\">&#x27;niu rou&#x27;</span>, <span class=\"string\">&#x27;bai cai&#x27;</span>, <span class=\"string\">&#x27;fanqie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">12</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- zhu rou</span><br><span class=\"line\"></span><br><span class=\"line\">Making a <span class=\"number\">16</span>-inch pizza <span class=\"keyword\">with</span> the following toppings:</span><br><span class=\"line\">- niu rou</span><br><span class=\"line\">- bai cai</span><br><span class=\"line\">- fanqie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入其他文件夹的模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> 文件夹名称 <span class=\"keyword\">import</span> 模块</span><br><span class=\"line\"><span class=\"keyword\">from</span> 文件夹名称.模块 <span class=\"keyword\">import</span> 函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数编写指南\"><a href=\"#函数编写指南\" class=\"headerlink\" title=\"函数编写指南\"></a>函数编写指南</h3><p>在编写函数时需要牢记几个细节。</p>\n<ul>\n<li>应给函数指定描述性的名称，且只使用小写字母和下划线。</li>\n<li>每个函数都应包含简要阐述其功能的注释。意思就是每个函数都需要编写使用说明的注释。</li>\n<li>形参指定默认值时，等号两边不要有空格。</li>\n<li>如果程序或模块包含多个函数，可以使用两个空行将函数隔开。</li>\n<li>所有的 import 语句都应该放在文件开头。唯一的例外是，你要在文件开头编写整个程序的注释。</li>\n<li>导入自己边学的模块时，尽量把模块和程序放在一个文件夹。</li>\n</ul>\n<h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何编写函数，以及如何传递实参，让函数能够访问完成工作所需的信息。然后学习了如何使用位置实参和关键字实参，以及如何接受任意数量的实参，学习了显示输出的函数和返回值的函数，知道了如何将函数与列表、字典、if、语句和 while 循环结合起来使用，以及如何将函数存储在称为模块的独立文件中，让程序文件更简单、更易于理解。最后，了解了函数编写指南，遵循这些指南可让程序始终保持良好的结构。<br>程序员的目标之一是编写简单的代码来完成任务，而函数有助于实现这样的目标。</p>\n<h2 id=\"第八章-类\"><a href=\"#第八章-类\" class=\"headerlink\" title=\"第八章 类\"></a>第八章 类</h2><p>面向对象编程（object-oriented-programming, OOP）是最有效的软件编写方法之一。在基于类创建对象时，每个对象都自动具备类定义的通用行为。然后，你可根据需要赋予每个对象独特的个性。根据类来创建对象称为<strong>实例化</strong>，这让你能够使用类的实例。</p>\n<p>面相对象变成有助于你像程序员那样看世界，并且真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维能力，让你能够通过编写程序来解决遇到的几乎任何问题。</p>\n<h3 id=\"创建和使用类\"><a href=\"#创建和使用类\" class=\"headerlink\" title=\"创建和使用类\"></a>创建和使用类</h3><p><strong>创建Dog类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Dog类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟小狗的简单尝试&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化属性name和age&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.name = name</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;模拟小狗坐下&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> is now sitting.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">roll_over</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;模拟小狗打滚&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span> rolled over.&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>“<strong>init</strong>()”方法是类的初始化方法，类中的函数称为方法。这个方法的开头和结尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。<br>这个方法定义成包含三个形参：self 、name、age。这个方法中self 是必不可少，而且必须位于其他形参的前面。self就是类的自身，当我们实例化这个类时，我们传递的参数会通过 self 传递给类自身。self.name &#x3D; name 里面 self 前缀的变量可供类中的所有方法使用。</p>\n<p><strong>根据类创建实例</strong></p>\n<p>可以将类视为有关如何创建实例的说明。:yum:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">my_dog = Dog(<span class=\"string\">&#x27;duoduo&#x27;</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># my_dog.name 就是访问实例的属性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My dog&#x27;s name is <span class=\"subst\">&#123;my_dog.name&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;My dog&#x27;s age is <span class=\"subst\">&#123;my_dog.age&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">My dog<span class=\"string\">&#x27;s name is duoduo</span></span><br><span class=\"line\"><span class=\"string\">My dog&#x27;</span>s age <span class=\"keyword\">is</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"comment\"># 调用方法</span></span><br><span class=\"line\">my_dog.sit()</span><br><span class=\"line\">my_dog.roll_over()</span><br><span class=\"line\"></span><br><span class=\"line\">duoduo <span class=\"keyword\">is</span> now sitting.</span><br><span class=\"line\">duoduo rolled over.</span><br><span class=\"line\"><span class=\"comment\"># 创建多个实例</span></span><br><span class=\"line\">your_dog = Dog(<span class=\"string\">&#x27;Lucy&#x27;</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Your dog&#x27;s name is <span class=\"subst\">&#123;your_dog.name&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Your dog&#x27;s age is <span class=\"subst\">&#123;your_dog.age&#125;</span>&quot;</span>)</span><br><span class=\"line\">your_dog.sit()</span><br><span class=\"line\"></span><br><span class=\"line\">Your dog<span class=\"string\">&#x27;s name is Lucy</span></span><br><span class=\"line\"><span class=\"string\">Your dog&#x27;</span>s age <span class=\"keyword\">is</span> <span class=\"number\">4</span></span><br><span class=\"line\">Lucy <span class=\"keyword\">is</span> now sitting.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用类和实例\"><a href=\"#使用类和实例\" class=\"headerlink\" title=\"使用类和实例\"></a>使用类和实例</h3><p><strong>Car 类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Car类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.make = make</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.model = model</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.year = year</span><br><span class=\"line\"><span class=\"comment\"># 给属性默认值</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.oli = <span class=\"number\">240</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_descriptive_name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        long_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;self.year&#125;</span>年 <span class=\"subst\">&#123;self.make&#125;</span>生产<span class=\"subst\">&#123;self.model&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">read_odometer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这两车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.odometer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mileage &gt;= <span class=\"variable language_\">self</span>.odometer:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.odometer = mileage</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;你不能往回设置公里数&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">increment_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer += mileage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">car_oli_v</span>(<span class=\"params\">self, oli</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;描述车辆油箱的容积&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.oli = oli</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这辆车的油箱容积是<span class=\"subst\">&#123;self.oli&#125;</span>L.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">my_new_car = Car(<span class=\"string\">&#x27;奥迪汽车公司&#x27;</span>, <span class=\"string\">&#x27;奥迪A4&#x27;</span>, <span class=\"string\">&#x27;2003&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_new_car.get_descriptive_name())</span><br><span class=\"line\"><span class=\"comment\"># 修改属性值</span></span><br><span class=\"line\">my_new_car.odometer = <span class=\"number\">1</span></span><br><span class=\"line\">my_new_car.read_odometer()</span><br><span class=\"line\"><span class=\"comment\"># 通过方法修改属性值</span></span><br><span class=\"line\">my_new_car.update_odometer(<span class=\"number\">34</span>)</span><br><span class=\"line\">my_new_car.increment_odometer(<span class=\"number\">12</span>)</span><br><span class=\"line\">my_new_car.update_odometer(<span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2003</span>年奥迪汽车公司生产奥迪A4</span><br><span class=\"line\">这两车已经行驶了<span class=\"number\">1</span>公里了。</span><br><span class=\"line\">这两车已经行驶了<span class=\"number\">34</span>公里了。</span><br><span class=\"line\">这辆车已经行驶了<span class=\"number\">46</span>公里了。</span><br><span class=\"line\">你不能往回设置公里数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>编写类的时候并非总是要从头开始，如果要编写的类是一个已经存在的类的特殊版本，可以使用<strong>继承</strong>。当一个类继承另一个类时，将自动获得后者的素有属性和方法。原有类称为<strong>父类</strong>，而新的类称为<strong>子类</strong>。子类不仅继承了父类的所有属性和方法，还可以定义自己的属性和方法。</p>\n<p><strong>子类初始化方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br></pre></td></tr></table></figure>\n\n<p><strong>给子类定义属性和方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\">my_leaf.describe_battery()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br><span class=\"line\">This car has a <span class=\"number\">40</span>-KWh battery.</span><br></pre></td></tr></table></figure>\n\n<p><strong>重写父类中的方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">car_oli_v</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;电动汽车没有油箱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\">my_leaf.describe_battery()</span><br><span class=\"line\">my_leaf.car_oli_v()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br><span class=\"line\">This car has a <span class=\"number\">40</span>-KWh battery.</span><br><span class=\"line\">电动汽车没有油箱</span><br></pre></td></tr></table></figure>\n\n<p><strong>将实例用作属性</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery = Battery()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">car_oli_v</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;电动汽车没有油箱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Battery</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, battery_size=<span class=\"number\">40</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = battery_size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_leaf = ElectricCar(<span class=\"string\">&#x27;nissan&#x27;</span>, <span class=\"string\">&#x27;leaf&#x27;</span>, <span class=\"string\">&#x27;2024&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_leaf.get_descriptive_name())</span><br><span class=\"line\">my_leaf.battery.describe_battery()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2024</span>年Nissan生产Leaf</span><br><span class=\"line\">This car has a <span class=\"number\">40</span>-KWh battery.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入类\"><a href=\"#导入类\" class=\"headerlink\" title=\"导入类\"></a>导入类</h3><p>主要目的是让文件整洁，我们可以将类存储在模块中，然后在主程序导入所需的模块。我们需要整理一下代码，把上面我们学的三个类都复制到一个文件，命名为 car.py 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Car类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.make = make</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.model = model</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.year = year</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_descriptive_name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        long_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;self.year&#125;</span>年<span class=\"subst\">&#123;self.make&#125;</span>生产<span class=\"subst\">&#123;self.model&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">read_odometer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.odometer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mileage &gt;= <span class=\"variable language_\">self</span>.odometer:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.odometer = mileage</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;你不能往回设置公里数&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">increment_odometer</span>(<span class=\"params\">self, mileage</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.odometer += mileage</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;这辆车已经行驶了<span class=\"subst\">&#123;self.odometer&#125;</span>公里了。&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 电池模组</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Battery</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, battery_size=<span class=\"number\">40</span>, car_model_isoli=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery_size = battery_size</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;默认是电动汽车,如果是汽油车可以设置会Ture.&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.car_model_isoli = car_model_isoli</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">describe_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.car_model_isoli <span class=\"keyword\">is</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;这是一辆油车，没有电池.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;This car has a <span class=\"subst\">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_battery</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;升级电池容量&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.battery_size != <span class=\"number\">65</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.battery_size = <span class=\"number\">65</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_range</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;打印一条消息，指出汽车的续航里程&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.battery_size == <span class=\"number\">40</span>:</span><br><span class=\"line\">            <span class=\"built_in\">range</span> = <span class=\"number\">150</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"variable language_\">self</span>.battery_size == <span class=\"number\">65</span>:</span><br><span class=\"line\">            <span class=\"built_in\">range</span> = <span class=\"number\">225</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;这辆车的续航里程为<span class=\"subst\">&#123;<span class=\"built_in\">range</span>&#125;</span>公里.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 电动车</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ElectricCar</span>(<span class=\"title class_ inherited__\">Car</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, make, model, year</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(make, model, year)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.battery = Battery()</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入单个类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> Car</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入多个类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> Car, ElectricCar</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入整个模块</strong></p>\n<p>这里我把上面的代码分成了两个文件，Car类单独储存成 car.py ，电池模组和电动车储存为 electric_car.py 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> car</span><br><span class=\"line\"><span class=\"comment\"># 用法就是用点引用该模块的类</span></span><br><span class=\"line\">my_car = car.Car(<span class=\"string\">&quot;柳州五菱&quot;</span>, <span class=\"string\">&quot;五菱之光&quot;</span>, <span class=\"number\">2008</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还有下面这种方法，但是不推荐用，因为可能会引起很多难以诊断的错误，比如出现同名的类</span></span><br><span class=\"line\"><span class=\"comment\"># 这种方法是导入模块的所有类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> car <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用别名</strong></p>\n<p>就是给导入的模块或类更改使用名，这并不会影响该模块和类的代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给模块使用别名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> electric_car <span class=\"keyword\">as</span> ec</span><br><span class=\"line\"><span class=\"comment\"># 给类使用别名</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> electric_car <span class=\"keyword\">import</span> ElectricCar <span class=\"keyword\">as</span> EC</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合适的工作流程\"><a href=\"#合适的工作流程\" class=\"headerlink\" title=\"合适的工作流程\"></a>合适的工作流程</h3><p>首先尝试在一个文件中完成所有工作，确定一切都能正确运行后，在将类移到独立的模块中。</p>\n<p>这里讲一下 <strong>VMC</strong> 模式：</p>\n<ul>\n<li>V： 就是视窗，用户界面等可视化的代码。</li>\n<li>M：就是模块或类等等的代码。</li>\n<li>C：就是整个程序的运行逻辑，流程控制等等的代码。</li>\n</ul>\n<p>这个模式可以简单的理解为建立三个文件夹，分别存放这三种类型的文件。这样可以让自己的代码更加简洁高效，别人理解也更容易。</p>\n<h3 id=\"Python标准库\"><a href=\"#Python标准库\" class=\"headerlink\" title=\"Python标准库\"></a>Python标准库</h3><p>Python标准库是一组模块，在安装Python时已经包含在内了。我们可以使用标准可中的任何函数和类。查看Python标准库，可以在命令行输入  <strong>help(“modules”)</strong> 命令。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机数模组，返回两个数之间的随机一个数。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>randint(<span class=\"number\">1</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"number\">4</span>   </span><br><span class=\"line\"><span class=\"comment\"># 返回一个列表里随机一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> choice </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>players = [<span class=\"string\">&#x27;aaa&#x27;</span>,<span class=\"string\">&#x27;bbb&#x27;</span>,<span class=\"string\">&#x27;ccc&#x27;</span>,<span class=\"string\">&#x27;ddd&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>choice(players)</span><br><span class=\"line\"><span class=\"string\">&#x27;ccc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类的编程风格\"><a href=\"#类的编程风格\" class=\"headerlink\" title=\"类的编程风格\"></a>类的编程风格</h3><p>编写复杂程序时采用以下几项：</p>\n<ul>\n<li>类名：驼峰命名法。例：MyNewCar 。类名不使用下划线。</li>\n<li>模块名和实例名都采用全小写格式，并在单词之间采用下划线。</li>\n<li>每个类都要在定义后面和函数一样需要描述类功能的文档字符串。</li>\n<li>当需要导入标准库中的模块和自己编写的模块时，优先导入标准库中的模块，在导入自己编写的模块。</li>\n</ul>\n<h3 id=\"小结-6\"><a href=\"#小结-6\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章我们学习了如何编写类，如何使用属性在类中存储的信息，以及如何编写方法让类具备所需的行为。然后学习了 init 初始化方法。了解了如何修改实例的属性，包括直接修改以及通过方法修改。还了解到使用继承可简化相关类的创建工作，将一个类的实例用作另一个类的属性能让类更简洁。<br>明白了，通过将类存储在模块（文件）中，并在需要使用这些类的文件中导入它们，可让项目变的更简洁。开始了解python标准库，还看了一个random模块，最后学习了编写类时应遵循的Python约定。</p>\n<h2 id=\"第九章-文件和异常\"><a href=\"#第九章-文件和异常\" class=\"headerlink\" title=\"第九章 文件和异常\"></a>第九章 文件和异常</h2><p>处理文件，让程序能够快速地分析大量数据；错误处理，避免程序在面对意外情况时崩溃；异常是Python创建特殊对象，用于管理程序运行时出现的错误；还将学习使用 json 模块保存用户数据，以免这些数据在程序结束运行后丢失。</p>\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p>读取文件对数据分析应用程序很有用。要使用文本文件中的信息，首先需要将信息读取到内存中。既可以一次性读取文件的全部内容，也可以逐行读取。</p>\n<p><strong>读取文件的全部内容</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> 这是一个txt文件</span><br><span class=\"line\">3.1415926535</span><br><span class=\"line\">  8979323846</span><br><span class=\"line\">  2643383279</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"comment\"># 这里值得注意的是VScode里面用的斜杠是反的</span></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\"><span class=\"comment\"># 删除文档中的空格</span></span><br><span class=\"line\"><span class=\"comment\"># contents = contents.strip()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(contents)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.1415926535</span></span><br><span class=\"line\">  <span class=\"number\">8979323846</span></span><br><span class=\"line\">  <span class=\"number\">2643383279</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>相对文件路径和绝对文件路径</strong></p>\n<p><strong>相对文件路径</strong>让 Python 到相对于当前运行的程序所在目录的指定位置去查找。比如上面的文件可以这样读取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;text_files/pi_digits.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>绝对文件路径</strong>可以读取系统中任何地方的文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>现在最简单的做法是，要么将数据文件存储在程序文件所在的目录中，要么将其存储在存续文件所在目录下的一个文件夹中。</p>\n<p><strong>注意</strong>：在显示文件路径时，windows 系统使用反斜杠（ \\ ）而不是斜杠（ &#x2F; ）但是你在代码中应该始终使用斜杠（ &#x2F; ），即便在windows系统中也是如此。在与你或其他用户的系统交互时，pathlib 库会自动使用正确的路径表示方法。</p>\n<p><strong>访问文件中的各行</strong></p>\n<p>使用 <strong>splitlines()</strong> 方法可以将字符串转换为一系列行，在使用 for 循环遍历文件中的每一行，splitlines() 方法返回一个列表，其中包含文件中所有的行。可以把这个列表赋值给变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\">lines = contents.splitlines()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.1415926535</span></span><br><span class=\"line\">  <span class=\"number\">8979323846</span></span><br><span class=\"line\">  <span class=\"number\">2643383279</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用文件的内容</strong></p>\n<p>读取文件后才能使用这些数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;E:/text_files/pi_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\">pi_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">lines = contents.splitlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(pi_string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(pi_string))</span><br><span class=\"line\"><span class=\"number\">3.1415926535</span>  <span class=\"number\">8979323846</span>  <span class=\"number\">2643383279</span></span><br><span class=\"line\"><span class=\"number\">36</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除左边空格</span></span><br><span class=\"line\">--snip--</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line.lstrip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(pi_string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(pi_string))</span><br><span class=\"line\"><span class=\"number\">3.141592653589793238462643383279</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：读取文本文件时，python 将其中的所有文本都解释为字符串。如果读取的是数，并且要将其作为数字使用，就必须使用 int() 函数将其转换为整数，或者使用 float() 函数将其转为浮点数。</p>\n<p><strong>大型文件</strong>可以做切片等列表的操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--snip--</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line.lstrip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(pi_string[:<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(pi_string))</span><br><span class=\"line\"><span class=\"number\">3.14159265</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>趣味小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 圆周率中包含你的生日吗</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;pi_million_digits.txt&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\"></span><br><span class=\"line\">pi_string = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">lines = contents.splitlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    pi_string += line.strip()</span><br><span class=\"line\"></span><br><span class=\"line\">birthday = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;你的生日如(20200506):&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birthday <span class=\"keyword\">in</span> pi_string:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;圆周率包含了你的生日&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;圆周率没有你的生日哦...&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">你的生日如(<span class=\"number\">20200506</span>):<span class=\"number\">20200506</span></span><br><span class=\"line\">圆周率没有你的生日哦...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>保存数据的最简单的方式之一是将其写入文件。</p>\n<p><strong>写入一行</strong></p>\n<p><strong>注意</strong>：在python调用 <strong>write_text()</strong> 方法时，如果指定文件已存在，这个方法会将其内容<strong>替换</strong>为你要写入的内容。**replace()**方法可以将字符串中的特定单词替换为另一个单词。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 写入一行文字</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;programming.txt&#x27;</span>)</span><br><span class=\"line\">path.write_text(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">programming.txt</span><br><span class=\"line\">hello world</span><br><span class=\"line\"><span class=\"comment\"># 替换字符串 replace()</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;How are you?&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.replace(<span class=\"string\">&#x27;you&#x27;</span>,<span class=\"string\">&#x27;me&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;How are me?&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Python 只能将字符串写入文本，如果要将数值数据存储到文本文件中，须使用 str() 函数将其转换为字符串格式。</p>\n<p><strong>写入多行</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;programming.txt&#x27;</span>)</span><br><span class=\"line\">contents = <span class=\"string\">&quot;nihao&quot;</span></span><br><span class=\"line\">contents += <span class=\"string\">&quot;\\nwohao&quot;</span></span><br><span class=\"line\">contents += <span class=\"string\">&quot;\\ndajiahao&quot;</span></span><br><span class=\"line\">path.write_text(contents)</span><br><span class=\"line\"></span><br><span class=\"line\">programming.txt</span><br><span class=\"line\">nihao</span><br><span class=\"line\">wohao</span><br><span class=\"line\">dajiahao</span><br></pre></td></tr></table></figure>\n\n<p><strong>趣味小练习</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重复写入多个词语</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;guest.txt&quot;</span>)</span><br><span class=\"line\">n = <span class=\"number\">0</span></span><br><span class=\"line\">c = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n != <span class=\"number\">5</span>:</span><br><span class=\"line\">    b = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入内容：&quot;</span>)</span><br><span class=\"line\">    c += <span class=\"string\">f&quot;<span class=\"subst\">&#123;b&#125;</span>\\n&quot;</span></span><br><span class=\"line\">    n += <span class=\"number\">1</span></span><br><span class=\"line\">    path.write_text(<span class=\"string\">f&quot;<span class=\"subst\">&#123;c&#125;</span>&quot;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>异常是使用 try-except 代码块处理的。也就是说你运行一段代码，如过出错了会根据你编写的代码执行，如果没有对异常进行处理，程序出错了就会停止。<strong>如果你运行一段代码出错，编辑器会提示你是什么错误，你可以针对这个错误给出处理方法，就像下面的 0 不能作为除数的错误是：ZeroDivisionError</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span>/<span class=\"number\">0</span>)</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 try-except 代码块</strong></p>\n<p>当你认为可能会发生错误的时候，可以使用这个代码块来处理可能引发的错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">5</span>/<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;0不能作为除数。&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">0</span>不能作为除数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>处理 FileNotFoundError 异常</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;alice.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有找到这个文件。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">没有找到这个文件。</span><br></pre></td></tr></table></figure>\n\n<p><strong>分析文本</strong></p>\n<p>split() 方法是把一个很长的字符串转换成很多单词的列表的一个方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;alice.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有找到这个文件。&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 计算文件大概包含多少个单词</span></span><br><span class=\"line\">    words = contents.split()</span><br><span class=\"line\">    num_words = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The file <span class=\"subst\">&#123;path&#125;</span> has about <span class=\"subst\">&#123;num_words&#125;</span> words&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>读取多个文件</strong></p>\n<p>利用函数我们可以读取多个文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_words</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;没有找到<span class=\"subst\">&#123;path&#125;</span>这个文件。&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 计算文件大概包含多少个单词</span></span><br><span class=\"line\">        words = contents.split()</span><br><span class=\"line\">        num_words = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The file <span class=\"subst\">&#123;path&#125;</span> has about <span class=\"subst\">&#123;num_words&#125;</span> words&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filenames = [<span class=\"string\">&#x27;alice.txt&#x27;</span>, <span class=\"string\">&#x27;little_women.txt&#x27;</span>, <span class=\"string\">&#x27;moby_dick.txt&#x27;</span>, <span class=\"string\">&#x27;kkk.txt&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">    path = Path(filename)</span><br><span class=\"line\">    count_words(path)</span><br><span class=\"line\">   </span><br><span class=\"line\">The file alice.txt has about <span class=\"number\">29594</span> words</span><br><span class=\"line\">The file little_women.txt has about <span class=\"number\">189142</span> words</span><br><span class=\"line\">The file moby_dick.txt has about <span class=\"number\">215864</span> words</span><br><span class=\"line\">没有找到kkk.txt这个文件。</span><br></pre></td></tr></table></figure>\n\n<p><strong>静默失败</strong></p>\n<p>并非每次错误都需要告诉用户，有时候有错误什么也不做，但是就是让程序继续运行可以使用 pass 语句。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_words</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        contents = path.read_text(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 计算文件大概包含多少个单词</span></span><br><span class=\"line\">        words = contents.split()</span><br><span class=\"line\">        num_words = <span class=\"built_in\">len</span>(words)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The file <span class=\"subst\">&#123;path&#125;</span> has about <span class=\"subst\">&#123;num_words&#125;</span> words&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">filenames = [<span class=\"string\">&#x27;alice.txt&#x27;</span>, <span class=\"string\">&#x27;little_women.txt&#x27;</span>, <span class=\"string\">&#x27;moby_dick.txt&#x27;</span>, <span class=\"string\">&#x27;kkk.txt&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">    path = Path(filename)</span><br><span class=\"line\">    count_words(path)</span><br><span class=\"line\"></span><br><span class=\"line\">The file alice.txt has about <span class=\"number\">29594</span> words</span><br><span class=\"line\">The file little_women.txt has about <span class=\"number\">189142</span> words</span><br><span class=\"line\">The file moby_dick.txt has about <span class=\"number\">215864</span> words</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储数据\"><a href=\"#存储数据\" class=\"headerlink\" title=\"存储数据\"></a>存储数据</h3><p>json 模块能够将简单的Python数据结构转换为JSON格式的字符串，并在程序再次运行时从文件中加载数据。</p>\n<p><strong>注意：</strong>JSON格式最初是为 JavaScript 开发的，但后来成为了一种通用格式，被众多语言采用。</p>\n<p><strong>json.dumps() 和 json.loads()</strong></p>\n<p>json.dumps() 接受一个参数，即要转换为JSON格式的数据。这个函数返回一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 存储数据 json.dumps()</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;number.json&#x27;</span>) <span class=\"comment\"># 文件路径，如果没有就会自动创建这个文件</span></span><br><span class=\"line\">contents = json.dumps(number) <span class=\"comment\"># 数据通过json.dumps()转化文JSON格式，存储在变量contents中</span></span><br><span class=\"line\">path.write_text(contents) <span class=\"comment\"># 把contents中的数据写入number.json这个文件中</span></span><br><span class=\"line\"><span class=\"comment\"># number.json文件内容</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取数据 json.loads()</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;number.json&#x27;</span>) <span class=\"comment\"># 文件路径，如果没有就会自动创建这个文件</span></span><br><span class=\"line\">contents = path.read_text() <span class=\"comment\"># 把读取的数据存储在变量contents中</span></span><br><span class=\"line\">number = json.loads(contents)<span class=\"comment\"># contents中的数据通过json.loads()转化文JSON格式，并存储在变量number中</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(number)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存和读取用户生成的数据</strong></p>\n<p>保存数据很有必要，因为如果不以某种方式进行存储，用户的信息就会在程序停止运行时丢失。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保存用户数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">username = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的名字：&quot;</span>)</span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;username.json&#x27;</span>)</span><br><span class=\"line\">contents = json.dumps(username)</span><br><span class=\"line\">path.write_text(contents, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我们将储存你的名字。&quot;</span>)</span><br><span class=\"line\">请输入你的名字：zqten</span><br><span class=\"line\">我们将储存你的名字。</span><br><span class=\"line\"><span class=\"comment\"># username.json文件</span></span><br><span class=\"line\"><span class=\"string\">&quot;zqten&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取用户生成的数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">path = Path(<span class=\"string\">&quot;username.json&quot;</span>)</span><br><span class=\"line\">contents = path.read_text()</span><br><span class=\"line\">username = json.loads(contents)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Welcome back <span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\">Welcome back zqten</span><br></pre></td></tr></table></figure>\n\n<p>Path 类提供了很多有用的方法。如果指定的文件或文件夹存在，<strong>exists()</strong> 方法返回 True ，否则返回 False 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">path = Path(<span class=\"string\">&#x27;username.json&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> path.exists():</span><br><span class=\"line\">    contents = path.read_text()</span><br><span class=\"line\">    username = json.loads(contents)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Welcome back <span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    username = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的名字：&quot;</span>)</span><br><span class=\"line\">    contents = json.dumps(username)</span><br><span class=\"line\">    path.write_text(contents, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;我们将储存你的名字。<span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\">Welcome back zqten</span><br></pre></td></tr></table></figure>\n\n<p><strong>重构</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保存用户数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_stored_username</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;如果用户存储了用户名，我们就获取他&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> path.exists():</span><br><span class=\"line\">        contents = path.read_text()</span><br><span class=\"line\">        username = json.loads(contents)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_new_username</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;提示用户输入用户名&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    username = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入你的名字：&quot;</span>)</span><br><span class=\"line\">    contents = json.dumps(username)</span><br><span class=\"line\">    path.write_text(contents, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> username</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet_user</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;问候用户，并指出其名字&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    path = Path(<span class=\"string\">&#x27;username.json&#x27;</span>)</span><br><span class=\"line\">    username = get_stored_username(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Welcome back <span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        username = get_new_username(path)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;我们将储存你的名字，<span class=\"subst\">&#123;username&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">greet_user()</span><br><span class=\"line\">请输入你的名字：zqten</span><br><span class=\"line\">我们将储存你的名字，zqten</span><br><span class=\"line\"><span class=\"comment\"># 在运行一次</span></span><br><span class=\"line\">greet_user()</span><br><span class=\"line\">Welcome back zqten</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-7\"><a href=\"#小结-7\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何使用文件，包括如何读取整个文件，如何读取文件中的各行，以及如何根据需要将任意数量的文本写入文件。然后学习了异常，以及如何处理程序可能引发的异常。最后学习了如何存储Python数据结构，以保存用户提供的信息，避免让用户在每次运行程序时都重新提供。</p>\n<h2 id=\"第十章-测试代码\"><a href=\"#第十章-测试代码\" class=\"headerlink\" title=\"第十章 测试代码\"></a>第十章 测试代码</h2><p>本章使用的是pip安装的pytest库来进行测试代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在控制台安装</span></span><br><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pytest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试函数\"><a href=\"#测试函数\" class=\"headerlink\" title=\"测试函数\"></a>测试函数</h3><p>测试基本分为下面几种：</p>\n<ul>\n<li>单元测试，用于核实函数的某个方面没有问题。</li>\n<li>测试用例，是一组单元测试，核实函数在各种情况下的行为都符合要求。</li>\n<li>全覆盖，测试一整套单元测试，涵盖了各种可能的函数使用方式。</li>\n</ul>\n<p>测试函数，需要新建一个文件，导入需要测试的函数，然后定义一个测试函数（这个函数的命名规范是：必须以 test 加下划线打头）。在测试过程中，<strong>pytest</strong>会找出并运行所有以 test 加下划线打头的函数。运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># name_function.py 文件</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_formatted_name</span>(<span class=\"params\">frist, last, middle=<span class=\"string\">&#x27;&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> middle:</span><br><span class=\"line\">        full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;frist&#125;</span> <span class=\"subst\">&#123;middle&#125;</span> <span class=\"subst\">&#123;last&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        full_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;frist&#125;</span> <span class=\"subst\">&#123;last&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> full_name.title()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test_name_function.py 测试文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> name_function <span class=\"keyword\">import</span> get_formatted_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_frist_last_name</span>():</span><br><span class=\"line\">    formatted_name = get_formatted_name(<span class=\"string\">&#x27;janis&#x27;</span>, <span class=\"string\">&#x27;joplin&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> formatted_name == <span class=\"string\">&#x27;Janis Joplin&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</span></span><br><span class=\"line\">======================== test session starts ========================</span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">1</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">test_name_function.py .                                     [<span class=\"number\">100</span>%]</span><br><span class=\"line\"></span><br><span class=\"line\">======================== <span class=\"number\">1</span> passed <span class=\"keyword\">in</span> <span class=\"number\">0.01</span>s ==========================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未通过测试示例</span></span><br><span class=\"line\">===================== test session starts ============================</span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">1</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">test_name_function.py F                                         [<span class=\"number\">100</span>%]</span><br><span class=\"line\"></span><br><span class=\"line\">====================== FAILURES ====================================== </span><br><span class=\"line\">__________________ test_frist_last_name_______________________________ </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_frist_last_name</span>():</span><br><span class=\"line\">        formatted_name = get_formatted_name(<span class=\"string\">&#x27;janis&#x27;</span>, <span class=\"string\">&#x27;joplin&#x27;</span>)</span><br><span class=\"line\">&gt;       <span class=\"keyword\">assert</span> formatted_name == <span class=\"string\">&#x27;Janis Joplil&#x27;</span></span><br><span class=\"line\">E       AssertionError: <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;Janis Joplin&#x27;</span> == <span class=\"string\">&#x27;Janis Joplil&#x27;</span></span><br><span class=\"line\">E         - Janis Joplil</span><br><span class=\"line\">E         ?            ^</span><br><span class=\"line\">E         + Janis Joplin</span><br><span class=\"line\">E         ?            ^</span><br><span class=\"line\"></span><br><span class=\"line\">test_name_function.py:<span class=\"number\">6</span>: AssertionError</span><br><span class=\"line\">============= short test summary info =========================================== </span><br><span class=\"line\">FAILED test_name_function.py:</span><br><span class=\"line\">:test_frist_last_name - AssertionError: <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;Janis Joplin&#x27;</span> == <span class=\"string\">&#x27;Janis Joplil&#x27;</span></span><br><span class=\"line\">============= <span class=\"number\">1</span> failed <span class=\"keyword\">in</span> <span class=\"number\">0.05</span>s ================================================= </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><p>上面是测试了函数，现在我们针对类进行测试。</p>\n<p><strong>各种断言：</strong></p>\n<ul>\n<li>assert a &#x3D;&#x3D; b\t\t\t断言两个值相等</li>\n<li>assert a !&#x3D; b             断言两个值不等</li>\n</ul>\n<p>这里只列出了两个，测试能包含任意可用条件语句表示的断言，比如 not 、in等等。</p>\n<p><strong>要测试的类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试类 survey.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnonymousSurvey</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;收集匿名调查问卷&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, question</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;存储一个问题，并为存储答案做准备&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.question = question</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.responses = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show_question</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;显示调查问卷&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable language_\">self</span>.question)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">store_response</span>(<span class=\"params\">self, new_response</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;存储单个调查答卷&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.responses.append(new_response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show_results</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;显示收集到的所有答案&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;所有问卷结果:&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.responses:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;- <span class=\"subst\">&#123;response&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化 language_survey.py</span></span><br><span class=\"line\"><span class=\"comment\"># survey类的实例</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> survey <span class=\"keyword\">import</span> AnonymousSurvey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义个问题，并创建一个表示调查的 AnonymousSurvey 对象</span></span><br><span class=\"line\">question = <span class=\"string\">&quot;你学习了几种语言？&quot;</span></span><br><span class=\"line\">language_survey = AnonymousSurvey(question)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示问题并存储答案</span></span><br><span class=\"line\">language_survey.show_question()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;按&#x27;q&#x27;退出。\\n&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    response = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入你学习的语言: &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> response == <span class=\"string\">&quot;q&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    language_survey.store_response(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示答案</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n你学习的语言有&quot;</span>)</span><br><span class=\"line\">language_survey.show_results()</span><br><span class=\"line\"></span><br><span class=\"line\">你学习了几种语言？</span><br><span class=\"line\">按<span class=\"string\">&#x27;q&#x27;</span>退出。       </span><br><span class=\"line\"></span><br><span class=\"line\">输入你学习的语言: 汉语</span><br><span class=\"line\">输入你学习的语言: 英语</span><br><span class=\"line\">输入你学习的语言: 日语</span><br><span class=\"line\">输入你学习的语言: 德语</span><br><span class=\"line\">输入你学习的语言: q</span><br><span class=\"line\"></span><br><span class=\"line\">你学习的语言有</span><br><span class=\"line\">所有问卷结果: </span><br><span class=\"line\">- 汉语        </span><br><span class=\"line\">- 英语        </span><br><span class=\"line\">- 日语        </span><br><span class=\"line\">- 德语  </span><br></pre></td></tr></table></figure>\n\n<p><strong>测试AnonymousSurvey类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试AnonymousSurvey类 test_survey.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> survey <span class=\"keyword\">import</span> AnonymousSurvey</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_single_response</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    question = <span class=\"string\">&quot;What language did you first learn to speak?&quot;</span></span><br><span class=\"line\">    language_survey = AnonymousSurvey(question)</span><br><span class=\"line\">    language_survey.store_response(<span class=\"string\">&#x27;English&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;English&#x27;</span> <span class=\"keyword\">in</span> language_survey.responses</span><br><span class=\"line\">    </span><br><span class=\"line\">==================== test session starts ============================== </span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">1</span> items                                                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\">test_survey.py .                             \t  [<span class=\"number\">100</span>%] </span><br><span class=\"line\"></span><br><span class=\"line\">===================== <span class=\"number\">1</span> passed <span class=\"keyword\">in</span> <span class=\"number\">0.02</span>s ===============================     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_three_response</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    question = <span class=\"string\">&quot;What language did you first learn to speak?&quot;</span></span><br><span class=\"line\">    language_survey = AnonymousSurvey(question)</span><br><span class=\"line\">    responses = [<span class=\"string\">&#x27;English&#x27;</span>, <span class=\"string\">&#x27;Spanish&#x27;</span>, <span class=\"string\">&#x27;Chinese&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        language_survey.store_response(response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response <span class=\"keyword\">in</span> language_survey.responses</span><br><span class=\"line\"></span><br><span class=\"line\">========================= test session starts ===============================</span><br><span class=\"line\">platform win32 -- Python <span class=\"number\">3.11</span><span class=\"number\">.3</span>, pytest-<span class=\"number\">7.4</span><span class=\"number\">.0</span>, pluggy-<span class=\"number\">1.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">rootdir: E:Python\\第十章测试代码</span><br><span class=\"line\">collected <span class=\"number\">2</span> items                                                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\">test_survey.py ..                   [<span class=\"number\">100</span>%] </span><br><span class=\"line\"></span><br><span class=\"line\">========================= <span class=\"number\">2</span> passed <span class=\"keyword\">in</span> <span class=\"number\">0.02</span>s =================================</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>使用夹具</strong></p>\n<p>夹具（@pytest.fixture）可帮助我们搭建测试环境，用于测试多个项目。这个需要导入（import pytest）。夹具使用方法是放在函数定义前面的指令。要使用夹具时，可编写一个函数来生成供多个测试函数使用的资源再对这个函数应用装饰器@pytest.fixture，并让使用该资源的每个测试函数都接受一个与该函数同名的形参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> survey <span class=\"keyword\">import</span> AnonymousSurvey</span><br><span class=\"line\"><span class=\"comment\"># 测试AnonymousSurvey类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.fixture</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">language_survey</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;一个可供所有测试函数使用的AnonymousSurvey实例&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    question = <span class=\"string\">&quot;What language did you first learn to speak?&quot;</span></span><br><span class=\"line\">    language_survey = AnonymousSurvey(question)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> language_survey</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_single_response</span>(<span class=\"params\">language_survey</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    language_survey.store_response(<span class=\"string\">&#x27;English&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"string\">&#x27;English&#x27;</span> <span class=\"keyword\">in</span> language_survey.responses</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_store_three_response</span>(<span class=\"params\">language_survey</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    responses = [<span class=\"string\">&#x27;English&#x27;</span>, <span class=\"string\">&#x27;Spanish&#x27;</span>, <span class=\"string\">&#x27;Chinese&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        language_survey.store_response(response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> response <span class=\"keyword\">in</span> responses:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response <span class=\"keyword\">in</span> language_survey.responses</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-8\"><a href=\"#小结-8\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了如何使用 pytest 模块中的工具来为函数和类编写测试。不仅学习了如何编写测试函数，以核实函数和类的行为符合预期，而且学习了如何使用夹具来高效地创建可在测试文件中的多个测试函数中使用的资源。</p>\n<h1 id=\"第二部分-项目\"><a href=\"#第二部分-项目\" class=\"headerlink\" title=\"第二部分 项目\"></a>第二部分 项目</h1><h2 id=\"第十二章-武装飞船\"><a href=\"#第十二章-武装飞船\" class=\"headerlink\" title=\"第十二章 武装飞船\"></a>第十二章 武装飞船</h2><h3 id=\"外星人入侵项目规划\"><a href=\"#外星人入侵项目规划\" class=\"headerlink\" title=\"外星人入侵项目规划\"></a>外星人入侵项目规划</h3><ul>\n<li>玩家控制着一艘武装飞船出现在屏幕底部中央，玩家可以使用方向键左右移动飞船，使用空格键进行射击。</li>\n<li>当游戏开始时，一个外形舰队出现在天空中，并向屏幕下方移动。</li>\n<li>玩家的任务是消灭这些外星人。</li>\n<li>玩家将万星人消灭干净后，将出现一个新的外形舰队，其移动速度更快。</li>\n<li>只要有万星人撞到玩家的飞船或到达屏幕下边缘，玩家就损失一艘飞船。玩家损失三艘飞船游戏结束。</li>\n</ul>\n<p><strong>安装Pygame</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pygame</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始游戏项目\"><a href=\"#开始游戏项目\" class=\"headerlink\" title=\"开始游戏项目\"></a>开始游戏项目</h3><p><strong>创建 Pygame 窗口及响应用户输入</strong></p>\n<p>这里有及个新方法：</p>\n<ul>\n<li>pygame.display.set_mode((1200,800)) 设置显示画面的大小</li>\n<li>pygame.display.set_caption(“Alien Invasion”) 设置标题和logo</li>\n<li>pygame.display.flip() 让渲染的可见</li>\n<li>pygame.time.Clock() 设置游戏帧率</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.init()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"number\">1200</span>,<span class=\"number\">800</span>))</span><br><span class=\"line\">        pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                    sys.exit()</span><br><span class=\"line\">            <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">            pygame.display.flip()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建游戏实例并运行游戏</span></span><br><span class=\"line\">    ai = AlienInvasion()</span><br><span class=\"line\">    ai.run_game()</span><br></pre></td></tr></table></figure>\n\n<p><strong>控制帧率</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.init()</span><br><span class=\"line\">        <span class=\"comment\"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clock = pygame.time.Clock()</span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            --snip--</span><br><span class=\"line\">            <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">            pygame.display.flip()    </span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>设置背景颜色</strong></p>\n<p>fill() 方法是填充背景颜色，该方法只接受一个表示颜色的实参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">   \t--snip--</span><br><span class=\"line\">       pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\">       <span class=\"comment\"># 设置背景颜色</span></span><br><span class=\"line\">       <span class=\"variable language_\">self</span>.bg_color = (<span class=\"number\">230</span>,<span class=\"number\">230</span>,<span class=\"number\">230</span>)</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">       <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">       --snip--</span><br><span class=\"line\">       <span class=\"comment\"># 每次循环时都重绘制屏幕</span></span><br><span class=\"line\">           <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.bg_color)</span><br><span class=\"line\">       <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">           pygame.display.flip()</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建 Settings 类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 屏幕设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_width = <span class=\"number\">1200</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_height = <span class=\"number\">800</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_color = (<span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span>        </span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"variable language_\">self</span>.settings.screen_width, <span class=\"variable language_\">self</span>.settings.screen_height))</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加飞船图像\"><a href=\"#添加飞船图像\" class=\"headerlink\" title=\"添加飞船图像\"></a>添加飞船图像</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = ai_game.screen</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_rect = ai_game.screen.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 加载飞船图像并获取其外接矩形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.image = pygame.image.load(<span class=\"string\">&#x27;images/ship.bmp&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect = <span class=\"variable language_\">self</span>.image.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 每艘新飞船都放在屏幕底部的中央</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.midbottom = <span class=\"variable language_\">self</span>.screen_rect.midbottom</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">blitme</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen.blit(<span class=\"variable language_\">self</span>.image, <span class=\"variable language_\">self</span>.rect)</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>在 pygame 中，原点（0,0）位于屏幕左上角，当一个点向右下方移动时，它的坐标值将增大，在1200X800的屏幕上，原点位于左上角，右下角的坐标为（1200,800）。这些坐标对应的是游戏窗口，而不是物理屏幕。</p>\n<p><strong>在屏幕上绘制飞船</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ship <span class=\"keyword\">import</span> Ship</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">    --snip--</span><br><span class=\"line\">    pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.ship = Ship(<span class=\"variable language_\">self</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">    --snip--</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.blitme()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重构：-check-events-方法和-update-screen-方法\"><a href=\"#重构：-check-events-方法和-update-screen-方法\" class=\"headerlink\" title=\"重构：_check_events() 方法和 _update_screen() 方法\"></a>重构：_check_events() 方法和 _update_screen() 方法</h3><p>在Python中辅助方法的名称以单下划线打头</p>\n<p>_ <em>check_events() 方法和</em> _update_screen()方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._check_events()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update_screen()</span><br><span class=\"line\">        <span class=\"comment\"># 每秒60帧</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">            sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_update_screen</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 每次循环时都重绘制屏幕</span></span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.ship.blitme()</span><br><span class=\"line\">    <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">    pygame.display.flip()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"驾驶飞船\"><a href=\"#驾驶飞船\" class=\"headerlink\" title=\"驾驶飞船\"></a>驾驶飞船</h3><p><strong>响应按键</strong></p>\n<p>pygame中，事件都是通过 pygame.event.get() 方法获取的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--snip--</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                    sys.exit()</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                        <span class=\"comment\"># 飞船向右移动</span></span><br><span class=\"line\">                        <span class=\"variable language_\">self</span>.ship.rect.x += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>持续移动</strong></p>\n<p>pygame.KEYDOWN 和 pygame.KEYUP 两个事件是，按下键盘，和释放键盘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._check_events()</span><br><span class=\"line\">                <span class=\"comment\"># 调用飞船位置更新函数</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.ship.update()</span><br><span class=\"line\">                <span class=\"comment\"># 更新画面</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._update_screen()</span><br><span class=\"line\">                <span class=\"comment\"># 每秒60帧</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                sys.exit()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"comment\"># 飞船向右移动</span></span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">                    </span><br><span class=\"line\"><span class=\"comment\"># ship.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"comment\"># 移动标志（飞船一开始不移动）</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rect.x += <span class=\"number\">1</span></span><br><span class=\"line\">        --snip--</span><br></pre></td></tr></table></figure>\n\n<p><strong>左右移动</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\">\t\t--snip--</span><br><span class=\"line\">        <span class=\"comment\"># 移动标志（飞船一开始不移动）</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_left = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rect.x += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rect.x -= <span class=\"number\">1</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                sys.exit()</span><br><span class=\"line\">                <span class=\"comment\"># 飞船移动</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">False</span>    </span><br></pre></td></tr></table></figure>\n\n<p><strong>调整飞船的速度</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"comment\"># 飞船的设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship_speed = <span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span>    </span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"comment\"># 在飞创的属性X中存储一个浮点数</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.x = <span class=\"built_in\">float</span>(<span class=\"variable language_\">self</span>.rect.x)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x += <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x -= <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 根据self.x更新self.rect.x</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.x = <span class=\"variable language_\">self</span>.x        </span><br></pre></td></tr></table></figure>\n\n<p><strong>限制飞船的活动范围</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> </span><br><span class=\"line\">        --snip--    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.right &lt; <span class=\"variable language_\">self</span>.screen_rect.right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x += <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.left &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x -= <span class=\"variable language_\">self</span>.settings.ship_speed        </span><br></pre></td></tr></table></figure>\n\n<p><strong>重构：_check_events() 方法</strong></p>\n<p>检查事件方法越来越长，我们将其部分代码放在两个方法中，一个处理键盘按下(KEYDOWN)，一个处理键盘释放(KEYUP)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">            sys.exit()</span><br><span class=\"line\">            <span class=\"comment\"># 飞船移动</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._check_keydown_events(event)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._check_keyup_events(event)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_keydown_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_keyup_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>按 Q 退出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_check_keydown_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> event.key == pygame.K_q:</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n\n<p><strong>在全屏模式下运行游戏</strong></p>\n<p>在创建屏幕时，传入(0, 0), pygame.FULLSCREEN ，这让pygame生成一个覆盖整个显示器的屏幕。由于无法知道屏幕的宽度和高度，所有后面接着要更新屏幕的 rect 的属性宽和高来更新对象 settings 。pygame不提供全屏模式下退出游戏的默认方式，所以运行前，确保可以使用 ‘q’ 退出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        --snip--</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"number\">0</span>, <span class=\"number\">0</span>), pygame.FULLSCREEN)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings.screen_width = <span class=\"variable language_\">self</span>.screen.get_rect().width</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings.screen_height = <span class=\"variable language_\">self</span>.screen.get_rect().height        </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单回顾\"><a href=\"#简单回顾\" class=\"headerlink\" title=\"简单回顾\"></a>简单回顾</h3><p>下面将添加射击功能，所以需要新增一个名为 bullet.py 的文件，并修改一些原有的文件，在添加其他功能前，先回顾一下这些文件，以便对这个项目的组织结构有清楚的认识。</p>\n<ul>\n<li><p>alien_invasion.py<br>这个文件包含 AlienInvasion 类，这个类创建在游戏的很多地方会用到的一系列属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> Settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> ship <span class=\"keyword\">import</span> Ship</span><br><span class=\"line\"><span class=\"keyword\">from</span> bullet <span class=\"keyword\">import</span> Bullet</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlienInvasion</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.init()</span><br><span class=\"line\">        <span class=\"comment\"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clock = pygame.time.Clock()</span><br><span class=\"line\">        <span class=\"comment\"># 设置背景颜色和窗口大小</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings = Settings()</span><br><span class=\"line\">        <span class=\"comment\"># 独立窗口运行程序</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = pygame.display.set_mode((<span class=\"variable language_\">self</span>.settings.screen_width, <span class=\"variable language_\">self</span>.settings.screen_height))</span><br><span class=\"line\">        <span class=\"comment\"># 全屏模式游戏 &#x27;q&#x27; 退出</span></span><br><span class=\"line\">        <span class=\"comment\"># self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.settings.screen_width = self.screen.get_rect().width</span></span><br><span class=\"line\">        <span class=\"comment\"># self.settings.screen_height = self.screen.get_rect().height</span></span><br><span class=\"line\">        pygame.display.set_caption(<span class=\"string\">&quot;Alien Invasion&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship = Ship(<span class=\"variable language_\">self</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullets = pygame.sprite.Group()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._check_events()</span><br><span class=\"line\">            <span class=\"comment\"># 调用飞船位置更新函数</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.update()</span><br><span class=\"line\">            <span class=\"comment\"># 更新子弹的位置并删除已消失的子弹</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._update_bullets()</span><br><span class=\"line\">            <span class=\"comment\"># 更新画面</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._update_screen()</span><br><span class=\"line\">            <span class=\"comment\"># 每秒60帧</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.clock.tick(<span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_events</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 监听键盘和鼠标事件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                sys.exit()</span><br><span class=\"line\">                <span class=\"comment\"># 飞船移动</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYDOWN:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._check_keydown_events(event)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == pygame.KEYUP:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>._check_keyup_events(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_keydown_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.key == pygame.K_q:</span><br><span class=\"line\">            sys.exit()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> event.key == pygame.K_SPACE:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._fire_bullet()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_check_keyup_events</span>(<span class=\"params\">self, event</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.key == pygame.K_RIGHT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> event.key == pygame.K_LEFT:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.ship.moving_left = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_fire_bullet</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;创建一颗子弹，并将其加入编著bullets &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.bullets) &lt; <span class=\"variable language_\">self</span>.settings.bullet_allowed:</span><br><span class=\"line\">            new_bullet = Bullet(<span class=\"variable language_\">self</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.bullets.add(new_bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_update_bullets</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;更新子弹的位置并删除已消失的子弹&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新子弹位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullets.update()</span><br><span class=\"line\">        <span class=\"comment\"># 删除已消失的子弹</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> bullet <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.bullets.copy():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> bullet.rect.bottom &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.bullets.remove(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_update_screen</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 每次循环时都重绘制屏幕</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen.fill(<span class=\"variable language_\">self</span>.settings.screen_color)</span><br><span class=\"line\">        <span class=\"comment\"># 子弹绘制        </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> bullet <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.bullets.sprites():</span><br><span class=\"line\">            bullet.draw_bullet()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship.blitme()</span><br><span class=\"line\">        <span class=\"comment\"># 让最近绘制的屏幕可见</span></span><br><span class=\"line\">        pygame.display.flip()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建游戏实例并运行游戏</span></span><br><span class=\"line\">    ai = AlienInvasion()</span><br><span class=\"line\">    ai.run_game()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>settings.py<br>这个文件包含 Settings 类，这个类只有一个方法，这个文件主要用于初始化控制游戏外观和飞船速度的属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Settings</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 屏幕设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_width = <span class=\"number\">1200</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_height = <span class=\"number\">800</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_color = (<span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 飞船的设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.ship_speed = <span class=\"number\">1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 子弹设置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_speed = <span class=\"number\">2.0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_width = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_height = <span class=\"number\">15</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_color = (<span class=\"number\">60</span>, <span class=\"number\">60</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 屏幕上最多出现的子弹数量</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.bullet_allowed = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ship.py<br>这个文件包含 Ship 类，这个类主要用于在屏幕上绘制飞船</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ship</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = ai_game.screen</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings = ai_game.settings</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen_rect = ai_game.screen.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 加载飞船图像并获取其外接矩形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.image = pygame.image.load(<span class=\"string\">&#x27;images/ship.bmp&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect = <span class=\"variable language_\">self</span>.image.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 每艘新飞船都放在屏幕底部的中央</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.midbottom = <span class=\"variable language_\">self</span>.screen_rect.midbottom</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 在飞船的属性X中存储一个浮点数</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.x = <span class=\"built_in\">float</span>(<span class=\"variable language_\">self</span>.rect.x)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 移动标志（飞船一开始不移动）</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_right = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.moving_left = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_right <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.right &lt; <span class=\"variable language_\">self</span>.screen_rect.right:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x += <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.moving_left <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rect.left &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.x -= <span class=\"variable language_\">self</span>.settings.ship_speed</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 根据self.x更新self.rect.x</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.x = <span class=\"variable language_\">self</span>.x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">blitme</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen.blit(<span class=\"variable language_\">self</span>.image, <span class=\"variable language_\">self</span>.rect)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"射击\"><a href=\"#射击\" class=\"headerlink\" title=\"射击\"></a>射击</h3><ul>\n<li>bullett.py<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"><span class=\"keyword\">from</span> pygame.sprite <span class=\"keyword\">import</span> Sprite</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bullet</span>(<span class=\"title class_ inherited__\">Sprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;管理飞船所发射子弹的类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, ai_game</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在飞船的当前位置创建一个子弹对象&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.screen = ai_game.screen</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.settings = ai_game.settings</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.color = <span class=\"variable language_\">self</span>.settings.bullet_color</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 在（0,0）处创建一个表示子弹的矩形，再设置正确的位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect = pygame.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"variable language_\">self</span>.settings.bullet_width, <span class=\"variable language_\">self</span>.settings.bullet_height)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.midtop = ai_game.ship.rect.midtop</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 存储用浮点数表示的子弹位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.y = <span class=\"built_in\">float</span>(<span class=\"variable language_\">self</span>.rect.y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新子弹的准确位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.y -= <span class=\"variable language_\">self</span>.settings.bullet_speed</span><br><span class=\"line\">        <span class=\"comment\"># 更新表示子弹的 rect 的位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rect.y = <span class=\"variable language_\">self</span>.y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">draw_bullet</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span></span><br><span class=\"line\">        pygame.draw.rect(<span class=\"variable language_\">self</span>.screen, <span class=\"variable language_\">self</span>.color, <span class=\"variable language_\">self</span>.rect)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"小结-9\"><a href=\"#小结-9\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章学习了游戏开发计划的指定以及使用Pygame编写的游戏的基本结构。接着学习了如何设置背景色，以及如何将设置存储在独立的类中。然后学习了如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动。不仅创建了能自动移动的元素，还删除了不再需要的对象。最后学习了经常性重构是如何为项目的后续开发提供便利的。</p>\n<h2 id=\"第十三章-外星人\"><a href=\"#第十三章-外星人\" class=\"headerlink\" title=\"第十三章 外星人\"></a>第十三章 外星人</h2><h3 id=\"项目回顾\"><a href=\"#项目回顾\" class=\"headerlink\" title=\"项目回顾\"></a>项目回顾</h3><p>本章将完成下列开发：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 在屏幕左上角添加一个外星人，并指定合适的边距。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 沿屏幕上边缘添加一行万星人，再不断地添加成行的外星人，直到填满屏幕的上半部分。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 让外星人向两侧和向下移动，直到外星舰队被全部击落、有外星人撞到飞船或有外星人抵达屏幕的下边缘。如果外星舰队都被击落，将再创建一个外星舰队；如果有外星人撞到飞船或抵达屏幕下边缘，就销毁飞船并再创建一个外星舰队。<br><strong>注意</strong>：pygame里面的精灵碰撞和对象碰撞是两个方法<ul>\n<li>pygame.sprite.groupcollide(精灵1，精灵2，1是否参与碰撞，2是否参与碰撞)。<strong>这个是直接赋值给变量就可以了。和 input 差不多</strong></li>\n<li>pygame.sprite.spritecollideany(对象，精灵)。<strong>这个是返回一个bool值</strong></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 限制玩家可用的飞船数量，分配的飞船被用完后，游戏将结束。</li>\n</ul>\n<h3 id=\"创建第一个外星人\"><a href=\"#创建第一个外星人\" class=\"headerlink\" title=\"创建第一个外星人\"></a>创建第一个外星人</h3><h3 id=\"小结-10\"><a href=\"#小结-10\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章通过创建外星舰队学习了如何在游戏中添加大量相同的元素，如何使用嵌套循环来创建成行成列的整齐元素，以及如何通过调用每个元素的 <code>update()</code>方法移动大量的元素。接着学习了如何控制对象在屏幕上的移动方向，以及如何响应特定的情形，如有外星人到达屏幕边缘。然后学习了如何检测并相应子弹和外星人的碰撞以及外星人和飞创的碰撞。最后学习了如何在游戏中跟踪统计信息，以及如何使用标志 <code> game_active</code>来判断游戏是否结束。</p>\n"},{"title":"聪明的投资者——投资指南","date":"2024-10-24T16:00:00.000Z","_content":"\n防御型投资者和进攻型投资者之间的主要区别在于：\n\n- 防御型投资者要限制自己向大的和领先的公司投资\n- 进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票\n\n评估普通股的规则：\n\n- 评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定\n\n- 收益能力一般代表对未来7年平均收益的预测\n\n- 上面的预测起点就是过去7到10年的真实情况\n\n- 把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动\n\n- 倍数应该反应未来收益更长期的变化\n\n  > 倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，**最大的倍数应该是20，最小的倍数应该是8**\n\n- 如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25\n\n- 如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%\n\n\n\n","source":"_posts/2024-10-25-聪明的投资者笔记.md","raw":"---\ntitle: 聪明的投资者——投资指南  \ndate: 2024-10-25\ncategories: # 文章的分类  \n\n  - 投资  \n\ntags:\n\n  - 投资 \n---\n\n防御型投资者和进攻型投资者之间的主要区别在于：\n\n- 防御型投资者要限制自己向大的和领先的公司投资\n- 进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票\n\n评估普通股的规则：\n\n- 评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定\n\n- 收益能力一般代表对未来7年平均收益的预测\n\n- 上面的预测起点就是过去7到10年的真实情况\n\n- 把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动\n\n- 倍数应该反应未来收益更长期的变化\n\n  > 倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，**最大的倍数应该是20，最小的倍数应该是8**\n\n- 如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25\n\n- 如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%\n\n\n\n","slug":"2024-10-25-聪明的投资者笔记","published":1,"updated":"2024-10-25T07:34:51.700Z","_id":"cm2oeyaba001f1kud4g55ciq2","comments":1,"layout":"post","photos":[],"content":"<p>防御型投资者和进攻型投资者之间的主要区别在于：</p>\n<ul>\n<li>防御型投资者要限制自己向大的和领先的公司投资</li>\n<li>进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票</li>\n</ul>\n<p>评估普通股的规则：</p>\n<ul>\n<li><p>评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定</p>\n</li>\n<li><p>收益能力一般代表对未来7年平均收益的预测</p>\n</li>\n<li><p>上面的预测起点就是过去7到10年的真实情况</p>\n</li>\n<li><p>把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动</p>\n</li>\n<li><p>倍数应该反应未来收益更长期的变化</p>\n<blockquote>\n<p>倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，<strong>最大的倍数应该是20，最小的倍数应该是8</strong></p>\n</blockquote>\n</li>\n<li><p>如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25</p>\n</li>\n<li><p>如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>防御型投资者和进攻型投资者之间的主要区别在于：</p>\n<ul>\n<li>防御型投资者要限制自己向大的和领先的公司投资</li>\n<li>进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票</li>\n</ul>\n<p>评估普通股的规则：</p>\n<ul>\n<li><p>评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定</p>\n</li>\n<li><p>收益能力一般代表对未来7年平均收益的预测</p>\n</li>\n<li><p>上面的预测起点就是过去7到10年的真实情况</p>\n</li>\n<li><p>把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动</p>\n</li>\n<li><p>倍数应该反应未来收益更长期的变化</p>\n<blockquote>\n<p>倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，<strong>最大的倍数应该是20，最小的倍数应该是8</strong></p>\n</blockquote>\n</li>\n<li><p>如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25</p>\n</li>\n<li><p>如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%</p>\n</li>\n</ul>\n"},{"title":"Hexo制作博客教程","date":"2024-10-24T16:00:00.000Z","_content":"\n建立一个基于GitHub的个人博客网站是一个既实用又能提升技术能力的好项目。以下是一个详细的步骤清单，帮助你从零开始搭建个人博客：\n\n## 第一步\t注册\n\n### 1. **注册和设置GitHub账户**\n- **注册GitHub**：如果你还没有GitHub账户，需要先注册一个。\n- **设置个人信息**：完善你的个人资料，包括头像、简介等，这将展示在你的博客页面上。\n\n### 2. **选择博客框架/工具**\n- **静态网站生成器**：如Jekyll（Ruby）、Hugo（Go）、Hexo（Node.js）等，它们可以从Markdown文件生成静态HTML页面。\n- **主题选择**：选择一个你喜欢的主题，很多框架都有现成的主题库可以选择，也可以自定义。\n\n### 3. **安装和配置博客框架**\n- **安装必要的软件**：根据你选择的框架，安装相应的软件（如Ruby、Node.js等）。\n- **初始化博客**：按照框架的官方文档，通过命令行工具初始化一个新的博客项目。\n- **配置_config.yml**（以Jekyll为例）：修改配置文件，设置博客的基本信息，如标题、作者、社交链接等。\n\n### 4. **创建和编辑内容**\n- **Markdown文件**：使用Markdown编写你的文章，存放在指定的文件夹中（通常是`_posts`）。\n- **添加页面**：根据需要添加其他页面，如关于我、作品集等，也是使用Markdown编写。\n\n### 5. **本地预览**\n- **运行博客**：在本地运行博客，预览效果。大多数框架都提供了命令行工具来启动一个本地服务器。\n- **调试和修改**：根据预览效果，调整文章内容和样式。\n\n### 6. **部署到GitHub Pages**\n- **创建仓库**：在GitHub上创建一个新的仓库，命名为`username.github.io`（`username`是你的GitHub用户名），这是GitHub Pages的默认域名。\n- **推送代码**：将你的博客代码推送到这个仓库。\n- **启用GitHub Pages**：在仓库的设置中，找到“Pages”部分，选择“main”或“gh-pages”分支（取决于你的配置），然后保存设置。\n- **自定义域名**（可选）：如果你想使用自己的域名，可以在Pages设置中添加CNAME记录，并在域名提供商处配置A记录指向GitHub Pages的IP地址。\n\n### 7. **优化和维护**\n- **SEO优化**：添加meta标签，使用SEO友好的URL结构，确保内容易于被搜索引擎索引。\n- **更新内容**：定期发布新文章，保持博客活跃。\n- **备份**：定期备份你的博客代码和文章，以防万一。\n- **安全性**：注意GitHub仓库的安全设置，避免敏感信息泄露。\n\n### 8. **推广和互动**\n- **社交媒体**：通过社交媒体分享你的文章，增加曝光度。\n- **读者互动**：添加评论系统（如Disqus、Utterances），鼓励读者留言反馈。\n- **加入社区**：参与技术社区，与其他博主交流，互相学习。\n\n完成以上步骤后，你就拥有了一个基于GitHub的个人博客网站。记得持续学习和探索，不断优化你的博客，让它成为你展示才华和分享知识的平台。\n\n没问题，即使你对编程不太熟悉，我们仍然可以一步一步地搭建你的个人博客。既然你已经完成了GitHub账户的注册和设置，接下来我们将选择并配置一个适合初学者的博客框架。\n\n\n\n## 第二步：选择博客框架/工具\n\n对于初学者来说，我推荐使用**Hexo**或**Hugo**这样的静态网站生成器，因为它们相对简单且易于上手，尤其是Hexo，它使用Markdown编写内容，非常适合不熟悉编程的人。\n\n#### 选择Hexo的原因：\n\n- **Markdown支持**：你可以使用Markdown语法来编写文章，这是一种轻量级标记语言，易于学习和使用。\n- **主题丰富**：Hexo有大量的第三方主题可供选择，你可以很容易地找到一个你喜欢的样式。\n- **插件支持**：Hexo有丰富的插件生态系统，可以扩展博客的功能，比如添加评论系统、SEO优化等。\n- **部署简单**：Hexo可以轻松地将你的博客部署到GitHub Pages上。\n\n#### 安装Hexo\n\n1. **安装Node.js和npm**：\n   - 首先，你需要安装Node.js，这是Hexo运行的基础。你可以从Node.js的官方网站（https://nodejs.org/）下载并安装适合你操作系统的版本。\n   - 安装Node.js时，npm（Node Package Manager）会一并安装。\n\n2. **全局安装Hexo**：\n   - 打开你的命令行工具（在Windows上是CMD或PowerShell，在macOS或Linux上是Terminal）。\n   - 输入以下命令来全局安装Hexo：\n     ```bash\n     npm install -g hexo-cli\n     ```\n   - 这将安装Hexo的命令行工具，允许你通过命令行来创建和管理Hexo博客。\n\n3. **初始化Hexo博客**：\n   - 选择一个你想要存放博客代码的文件夹，并导航到该文件夹。\n   - 输入以下命令来初始化一个新的Hexo博客：\n     ```bash\n     hexo init myblog\n     ```\n   - 这将创建一个名为`myblog`的新文件夹，里面包含了Hexo博客的基本结构和默认主题。\n   - 进入`myblog`文件夹：\n     ```bash\n     cd myblog\n     ```\n\n4. **安装依赖**：\n   - 在`myblog`文件夹内，运行以下命令来安装博客所需的依赖项：\n     ```bash\n     npm install\n     ```\n\n5. **启动本地服务器**：\n   - 输入以下命令来启动Hexo的本地服务器，并预览你的博客：\n     ```bash\n     hexo server\n     ```\n   - 默认情况下，服务器会在`http://localhost:4000`上运行。你可以在浏览器中打开这个地址来查看你的博客。\n\n6. **创建和编辑文章**：\n   - 在`myblog/source/_posts`文件夹中，你可以创建新的Markdown文件来编写文章。\n   - Hexo会自动将这些Markdown文件转换为HTML页面，并在你启动本地服务器时显示。\n\n7. **生成静态文件**：\n   - 当你准备好将博客部署到GitHub Pages时，你可以使用以下命令来生成静态HTML文件：\n     ```bash\n     hexo generate\n     ```\n   - 这将在`myblog/public`文件夹中生成静态文件。\n\n8. **部署到GitHub Pages**（我们将在后续步骤中详细讨论）。\n\n现在你已经成功安装了Hexo，并创建了一个基本的博客。\n\n\n\n## 第三步：创建和编辑内容\n\n#### 1. **了解Hexo的文件结构**\n\n在你之前初始化的Hexo博客文件夹（比如`myblog`）中，有几个重要的文件夹和文件：\n\n- `source/`：存放你的原始内容，包括Markdown文章、图片等。\n- `source/_posts/`：存放你的文章，每个文章都是一个`.md`文件。\n- `themes/`：存放你选择的Hexo主题。\n- `_config.yml`：Hexo博客的全局配置文件。\n\n#### 2. **编写新文章**\n\n1. **创建Markdown文件**：\n   - 进入`source/_posts/`文件夹。\n   - 创建一个新的Markdown文件，文件名通常遵循`YYYY-MM-DD-title.md`的格式，其中`YYYY`是年份，`MM`是月份，`DD`是日期，`title`是你的文章标题（用英文短横线`-`分隔单词）。\n\n2. **编写文章头部信息**（Front-matter）：\n   - 在Markdown文件的顶部，添加如下信息（用三个短横线`---`包围）：\n     ```yaml\n     title: 你的文章标题\n     date: YYYY-MM-DD HH:MM:SS # 发布日期和时间\n     categories: # 文章的分类\n       - 分类1\n       - 分类2\n     tags: # 文章的标签\n       - 标签1\n       - 标签2\n     ---\n     ```\n   - 替换`你的文章标题`、`YYYY-MM-DD HH:MM:SS`、`分类1`、`分类2`、`标签1`和`标签2`为实际的内容。\n\n3. **编写文章内容**：\n   - 在Front-matter之后，你可以开始编写你的文章内容了。使用Markdown语法来格式化文本，比如标题、段落、列表、图片、链接等。\n\n4. **保存文件**：\n   - 完成文章编写后，保存Markdown文件。\n\n#### 3. **预览文章**\n\n- 回到你的命令行工具，确保Hexo的本地服务器还在运行（如果关闭了，重新运行`hexo server`）。\n- 在浏览器中打开`http://localhost:4000`，你应该能看到你的新文章已经出现在博客上了。\n\n#### 4. **编辑现有文章**\n\n- 如果需要编辑现有的文章，只需在`source/_posts/`文件夹中找到对应的Markdown文件，进行修改，然后保存。\n- Hexo会自动检测文件的更改，并刷新本地服务器上的预览。\n\n#### 5. **添加其他页面**\n\n- 除了文章之外，你还可以添加其他页面，比如关于我、作品集等。\n- 创建一个新的Markdown文件，放在`source/`文件夹中（而不是`_posts/`），然后按照文章的方式编写头部信息和内容。\n- 在Hexo的主题配置文件中，你可能需要添加一些路由规则来确保这些页面能够正确显示。\n\n现在你已经知道如何创建和编辑Hexo博客的内容了。\n\n\n\n## 第四步：本地预览和调试\n\n#### 1. **启动Hexo本地服务器**\n\n确保你的Hexo博客项目文件夹（比如`myblog`）是打开的，然后在命令行工具中导航到该文件夹。运行以下命令来启动Hexo的本地服务器：\n\n```bash\nhexo server\n```\n\n或者，如果你安装了`hexo-cli`并且想要从任何位置启动服务器，你可以使用全局命令（但需要先导航到博客项目文件夹的父目录，然后使用相对路径或绝对路径指定博客文件夹）：\n\n```bash\nhexo server -d myblog\n```\n\n其中`myblog`是你的博客项目文件夹的名称。\n\n#### 2. **在浏览器中预览**\n\n默认情况下，Hexo的本地服务器会在`http://localhost:4000`上运行。打开你的网页浏览器，输入这个地址，你应该能看到你的博客的本地预览。\n\n#### 3. **浏览和导航**\n\n- 点击博客上的链接，确保导航正常。\n- 检查文章的布局和样式，确保它们符合你的期望。\n- 如果你的博客有侧边栏、页脚等组件，也请确保它们显示正确。\n\n#### 4. **调试和修改**\n\n- 如果发现任何问题（比如布局错乱、链接失效等），回到你的Markdown文件或主题配置文件中进行修改。\n- 修改后，保存文件，然后刷新浏览器页面，查看更改是否生效。\n- 重复这个过程，直到你对博客的预览满意为止。\n\n#### 5. **使用Hexo的内置命令**\n\n- 在调试过程中，你可能会频繁地生成静态文件和重启服务器。Hexo提供了一些方便的命令来简化这些操作：\n  - `hexo clean`：删除生成的静态文件（在`public`文件夹中）。\n  - `hexo generate`（或简写为`hexo g`）：生成静态文件。\n  - `hexo server`（或简写为`hexo s`）：启动本地服务器。\n  - 你可以组合这些命令来简化工作流程，比如`hexo clean && hexo g && hexo s`。\n\n#### 6. **检查响应式设计**\n\n- 如果你的博客主题支持响应式设计（即在不同设备上都能良好显示），请在不同的屏幕尺寸和浏览器上测试你的博客。\n- 确保在移动设备上也能方便地浏览和导航。\n\n现在你已经知道如何在本地预览和调试你的Hexo博客了。\n\n\n\n## 第五步：自定义博客主题和设置\n\n#### 1. **选择并安装主题**\n\nHexo拥有丰富的第三方主题，你可以根据自己的喜好选择一个。以下是如何安装一个主题的步骤：\n\n1. **浏览Hexo主题**：\n   - 你可以访问Hexo的官方文档或GitHub上的Hexo主题仓库来浏览可用的主题。\n   - 选择一个你感兴趣的主题，并查看其文档以了解如何安装和配置。\n\n2. **下载或克隆主题**：\n   - 根据主题的文档，你可能需要下载主题的ZIP文件，或者通过Git克隆主题的仓库到你的本地计算机。\n\n3. **将主题放入Hexo项目**：\n   - 将下载或克隆的主题文件夹放入你的Hexo项目中的`themes/`文件夹内。\n\n4. **更新配置文件**：\n   - 打开你的Hexo项目中的`_config.yml`文件。\n   - 找到`theme`字段，并将其值设置为你刚刚安装的主题的文件夹名。\n\n例如，如果你安装了一个名为`landscape`的主题，你的`_config.yml`文件中的`theme`字段应该像这样：\n\n```yaml\ntheme: landscape\n```\n\n5. **生成和预览**：\n   - 运行`hexo generate`（或简写为`hexo g`）来生成静态文件。\n   - 运行`hexo server`（或简写为`hexo s`）来启动本地服务器并预览你的博客。\n\n#### 2. **自定义主题设置**\n\n大多数Hexo主题都允许你通过修改主题的配置文件来自定义博客的外观和行为。以下是如何自定义主题设置的步骤：\n\n1. **找到主题配置文件**：\n   - 在你安装的主题文件夹内，通常会有一个名为`_config.yml`的文件（有时可能是其他名称，比如`config.yml`，具体取决于主题）。\n\n2. **编辑主题配置文件**：\n   - 使用文本编辑器打开主题配置文件。\n   - 根据文件中的注释和说明，修改你感兴趣的设置。\n\n例如，你可能想要修改以下设置：\n\n- 网站标题和副标题\n- 菜单项和导航栏\n- 侧边栏和小工具\n- 文章布局和样式\n- 社交媒体链接和分享按钮\n\n3. **生成和预览更改**：\n   - 每次修改主题配置文件后，都需要运行`hexo generate`来生成静态文件。\n   - 然后运行`hexo server`来预览更改。\n\n4. **高级自定义**：\n   - 如果你想要进行更高级的自定义（比如修改CSS样式或JavaScript脚本），你可能需要编辑主题文件夹中的其他文件。\n   - 在进行这些更改时，请务必备份原始文件，以便在需要时恢复。\n\n#### 3. **测试和调试**\n\n- 在进行自定义时，不断测试你的博客以确保所有功能都按预期工作。\n- 检查不同设备和浏览器上的显示效果。\n- 如果遇到问题，请查阅主题的文档或寻求社区的帮助。\n\n现在你已经知道如何自定义Hexo博客的主题和设置了。\n\n\n\n## 第六步：将博客部署到GitHub Pages\n\n#### 1. **创建GitHub仓库**\n\n1. **登录GitHub**：\n   - 使用你的GitHub账户登录到GitHub网站。\n\n2. **创建新仓库**：\n   - 点击右上角的加号（+）图标，然后选择“New repository”（新建仓库）。\n   - 为你的仓库命名，通常使用`username.github.io`的格式，其中`username`是你的GitHub用户名。这样命名的仓库会自动启用GitHub Pages。\n   - 设置仓库为“Public”（公开），因为GitHub Pages不支持私有仓库。\n   - 初始化仓库时可以选择添加一个README文件，但这对于Hexo部署不是必需的。\n   - 点击“Create repository”（创建仓库）按钮。\n\n#### 2. **配置Hexo以部署到GitHub Pages**\n\n1. **安装`hexo-deployer-git`插件**：\n   - 在你的Hexo项目文件夹中，运行以下命令来安装`hexo-deployer-git`插件，这个插件允许你将Hexo生成的静态文件部署到Git仓库中。\n     ```bash\n     npm install hexo-deployer-git --save-dev\n     ```\n\n2. **配置部署设置**：\n   - 打开你的Hexo项目中的`_config.yml`文件。\n   - 在文件底部添加以下部署（deploy）配置：\n     ```yaml\n     deploy:\n       type: git\n       repo: <your-repository-url> # 替换为你的GitHub仓库的HTTPS URL\n       branch: main # 或者你希望部署到的分支名，通常是main或gh-pages\n       message: \"Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\" # 提交时的消息模板\n     ```\n   - 将`<your-repository-url>`替换为你的GitHub仓库的完整HTTPS URL，例如`https://github.com/username/username.github.io.git`。\n\n#### 3. **生成静态文件并部署**\n\n1. **生成静态文件**：\n   - 在你的Hexo项目文件夹中，运行以下命令来生成静态文件。\n     ```bash\n     hexo generate\n     ```\n   - 或者使用简写命令：\n     ```bash\n     hexo g\n     ```\n\n2. **部署到GitHub Pages**：\n   - 运行以下命令来将生成的静态文件部署到你的GitHub仓库中。\n     ```bash\n     hexo deploy\n     ```\n   - 首次部署时，你可能需要输入你的GitHub用户名和密码（或者使用GitHub提供的个人访问令牌）。\n\n3. **验证部署**：\n   - 打开你的浏览器，输入你的GitHub Pages网址（通常是`https://username.github.io`，其中`username`是你的GitHub用户名）。\n   - 你应该能看到你的Hexo博客已经成功部署到GitHub Pages上了。\n\n#### 4. **更新博客**\n\n- 每次你更新博客内容时，只需重复生成静态文件和部署的步骤。\n- 你可以将这两个步骤合并为一个命令，通过添加`--deploy`选项到`hexo generate`命令中来实现：\n  ```bash\n  hexo g --deploy\n  ```\n  - 或者使用简写命令：\n    ```bash\n    hexo gd\n    ```\n\n现在你已经知道如何将Hexo博客部署到GitHub Pages上了。\n\n\n\n## 第七步：维护和更新你的博客\n\n#### 1. **定期更新内容**\n\n- **撰写新文章**：使用Markdown编写新的博客文章，并保存在Hexo项目的`source/_posts/`目录下。\n- **发布文章**：每次撰写完新文章后，运行`hexo generate`（或`hexo g`）生成静态文件，然后运行`hexo deploy`将更新推送到GitHub Pages。你也可以使用`hexo g --deploy`（或`hexo gd`）一次性完成这两个步骤。\n- **管理旧文章**：定期回顾和更新你的旧文章，确保它们的信息是最新的，并且没有过时或错误的链接。\n\n#### 2. **监控和分析**\n\n- **使用Google Analytics（谷歌分析）**：在Google Analytics中注册一个账户，并将提供的跟踪代码添加到你的Hexo博客的HTML模板中，以便监控博客的流量和访问者行为。\n- **检查错误和性能**：定期检查你的博客是否有任何错误（如404页面、断开的链接等），并使用工具（如Google PageSpeed Insights）来优化博客的性能。\n\n#### 3. **备份和恢复**\n\n- **定期备份**：定期将你的Hexo项目文件夹和GitHub仓库的内容备份到安全的位置，以防数据丢失。\n- **恢复数据**：如果出现问题，你可以使用备份的数据来恢复你的博客。\n\n#### 4. **保持主题和插件更新**\n\n- **更新Hexo**：定期检查Hexo的更新，并运行`npm update -g hexo`来更新到最新版本。\n- **更新主题和插件**：同样地，定期检查你使用的主题和插件是否有更新，并按照它们的文档进行更新。\n\n#### 5. **安全性**\n\n- **保护你的GitHub账户**：确保你的GitHub账户使用了强密码，并启用了双重身份验证。\n- **避免敏感信息**：不要在博客中发布任何敏感信息，如密码、密钥或私人电子邮件地址。\n\n#### 6. **与读者互动**\n\n- **添加评论系统**：考虑在你的博客中添加一个评论系统，如Disqus或Gitalk，以便与读者互动。\n- **回复评论和问题**：定期查看并回复读者的评论和问题，以建立和维护与读者的关系。\n\n#### 7. **优化SEO**\n\n- **使用关键词**：在撰写文章时，使用相关的关键词，并在标题、元描述和正文中适当地放置它们。\n- **创建内部链接**：在你的文章之间创建内部链接，以便读者可以轻松地找到相关的内容。\n- **优化图片**：为图片添加描述性的文件名和alt属性，并使用适当的压缩来优化它们的加载速度。\n\n现在你已经知道如何维护和更新你的Hexo博客了。\n\n\n\n## 安装Gitalk\n\n1. **注册Gitalk**\n\n   * 访问[Gitalk官网](https://gitalk.github.io/)，点击“开始使用”按钮，跳转到Github页面。\n   * 在Github页面，点击“使用说明”中的“Click here to register”进行注册。\n   * 填写相关信息，包括应用名称（Application name）、主页地址（Homepage URL，一般填写域名地址或名称.github.io）、项目描述（Application description，非必需）和认证回调地址（Authorization callback URL，一般填写域名地址或名称.github.io）。\n   * 完成注册后，可以修改并更新信息，包括上传新头像和设置背景色。\n\n2. **创建Github Application**\n\n   * 登录Github，点击右上角头像，依次进入“Settings”->“Developer settings”->“OAuth Apps”->“New OAuth App”进行基本配置。\n   * 填写应用名称、主页URL、回调URL等信息，并生成Client ID和Client Secret。\n\n3. **配置Hexo博客**\n\n   * 进入Hexo博客的主题配置文件（_config.yml），添加Gitalk配置。\n   * 配置项包括：\n\t * `enable`: 是否启用Gitalk，设置为true。\n\t * `github_id`: Github仓库所有者。\n\t * `repo`: 存储评论的仓库名称。\n\t * `client_id`: Github Application的Client ID。\n\t * `client_secret`: Github Application的Client Secret。\n\t * `admin_user`: Github仓库所有者和协作者，只有他们可以初始化Github issues。\n\t * `distraction_free_mode`: 是否启用无干扰模式，类似于Facebook。\n\t * `language`: 语言设置，如中文设置为zh-CN。\n\n### 二、使用Gitalk\n\n1. **在Hexo主题中添加Gitalk容器**\n\n   * 进入主题目录的`layout`->`_partial`->`post`目录。\n   * 在当前目录下新建一个`gitalk.ejs`文件，并写入以下代码：\n\n```html\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk@latest/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk@latest/dist/gitalk.min.js\"></script>\n<script src=\"https://priesttomb.github.io/js/md5.min.js\"></script>\n<script type=\"text/javascript\">\nnew Gitalk({\n  clientID: '你的Client ID',\n  clientSecret: '你的Client Secret',\n  repo: '你的仓库名称',\n  owner: '你的Github用户名',\n  admin: ['你的Github用户名'],\n  id: md5(location.pathname), // 使用md5确保唯一性和长度限制\n  distractionFreeMode: true\n}).render('gitalk-container')\n</script>\n```\n\n   * 注意替换代码中的`clientID`、`clientSecret`、`repo`、`owner`和`admin`为实际值。\n\n2. **在文章模板中添加Gitalk容器引用**\n\n   * 进入主题目录的`layout`->`_partial`目录，找到`article.ejs`文件。\n   * 在`article.ejs`文件的最后面加入以下代码：\n\n```html\n<% if(theme.gitalk.enable){ %>\n  <div id=\"gitalk-container\"></div>\n  <%- include post/gitalk.ejs %>\n<% } %>\n```\n\n3. **生成并部署Hexo博客**\n\n   * 在Hexo博客的根目录下，运行`hexo generate`（或`hexo g`）生成静态文件。\n   * 运行`hexo deploy`将更新推送到Github Pages。\n\n4. **初始化评论**\n\n   * 访问你的Hexo博客文章页面，登录Github后尝试发表评论。\n   * 评论将作为issues存储在指定的Github仓库中，并可以在仓库的issues页面进行管理。\n\n通过以上步骤，你就可以在Hexo博客中成功安装和使用Gitalk评论系统了。记得定期检查和更新你的Gitalk配置和Github仓库，以确保评论系统的正常运行。\n\n\n\n","source":"_posts/2024-10-25-Hexo建立博客教程.md","raw":"---\ntitle: Hexo制作博客教程  \ndate: 2024-10-25\ncategories: # 文章的分类  \n\n  - 编程  \n\ntags:\n\n  - 教程 \n---\n\n建立一个基于GitHub的个人博客网站是一个既实用又能提升技术能力的好项目。以下是一个详细的步骤清单，帮助你从零开始搭建个人博客：\n\n## 第一步\t注册\n\n### 1. **注册和设置GitHub账户**\n- **注册GitHub**：如果你还没有GitHub账户，需要先注册一个。\n- **设置个人信息**：完善你的个人资料，包括头像、简介等，这将展示在你的博客页面上。\n\n### 2. **选择博客框架/工具**\n- **静态网站生成器**：如Jekyll（Ruby）、Hugo（Go）、Hexo（Node.js）等，它们可以从Markdown文件生成静态HTML页面。\n- **主题选择**：选择一个你喜欢的主题，很多框架都有现成的主题库可以选择，也可以自定义。\n\n### 3. **安装和配置博客框架**\n- **安装必要的软件**：根据你选择的框架，安装相应的软件（如Ruby、Node.js等）。\n- **初始化博客**：按照框架的官方文档，通过命令行工具初始化一个新的博客项目。\n- **配置_config.yml**（以Jekyll为例）：修改配置文件，设置博客的基本信息，如标题、作者、社交链接等。\n\n### 4. **创建和编辑内容**\n- **Markdown文件**：使用Markdown编写你的文章，存放在指定的文件夹中（通常是`_posts`）。\n- **添加页面**：根据需要添加其他页面，如关于我、作品集等，也是使用Markdown编写。\n\n### 5. **本地预览**\n- **运行博客**：在本地运行博客，预览效果。大多数框架都提供了命令行工具来启动一个本地服务器。\n- **调试和修改**：根据预览效果，调整文章内容和样式。\n\n### 6. **部署到GitHub Pages**\n- **创建仓库**：在GitHub上创建一个新的仓库，命名为`username.github.io`（`username`是你的GitHub用户名），这是GitHub Pages的默认域名。\n- **推送代码**：将你的博客代码推送到这个仓库。\n- **启用GitHub Pages**：在仓库的设置中，找到“Pages”部分，选择“main”或“gh-pages”分支（取决于你的配置），然后保存设置。\n- **自定义域名**（可选）：如果你想使用自己的域名，可以在Pages设置中添加CNAME记录，并在域名提供商处配置A记录指向GitHub Pages的IP地址。\n\n### 7. **优化和维护**\n- **SEO优化**：添加meta标签，使用SEO友好的URL结构，确保内容易于被搜索引擎索引。\n- **更新内容**：定期发布新文章，保持博客活跃。\n- **备份**：定期备份你的博客代码和文章，以防万一。\n- **安全性**：注意GitHub仓库的安全设置，避免敏感信息泄露。\n\n### 8. **推广和互动**\n- **社交媒体**：通过社交媒体分享你的文章，增加曝光度。\n- **读者互动**：添加评论系统（如Disqus、Utterances），鼓励读者留言反馈。\n- **加入社区**：参与技术社区，与其他博主交流，互相学习。\n\n完成以上步骤后，你就拥有了一个基于GitHub的个人博客网站。记得持续学习和探索，不断优化你的博客，让它成为你展示才华和分享知识的平台。\n\n没问题，即使你对编程不太熟悉，我们仍然可以一步一步地搭建你的个人博客。既然你已经完成了GitHub账户的注册和设置，接下来我们将选择并配置一个适合初学者的博客框架。\n\n\n\n## 第二步：选择博客框架/工具\n\n对于初学者来说，我推荐使用**Hexo**或**Hugo**这样的静态网站生成器，因为它们相对简单且易于上手，尤其是Hexo，它使用Markdown编写内容，非常适合不熟悉编程的人。\n\n#### 选择Hexo的原因：\n\n- **Markdown支持**：你可以使用Markdown语法来编写文章，这是一种轻量级标记语言，易于学习和使用。\n- **主题丰富**：Hexo有大量的第三方主题可供选择，你可以很容易地找到一个你喜欢的样式。\n- **插件支持**：Hexo有丰富的插件生态系统，可以扩展博客的功能，比如添加评论系统、SEO优化等。\n- **部署简单**：Hexo可以轻松地将你的博客部署到GitHub Pages上。\n\n#### 安装Hexo\n\n1. **安装Node.js和npm**：\n   - 首先，你需要安装Node.js，这是Hexo运行的基础。你可以从Node.js的官方网站（https://nodejs.org/）下载并安装适合你操作系统的版本。\n   - 安装Node.js时，npm（Node Package Manager）会一并安装。\n\n2. **全局安装Hexo**：\n   - 打开你的命令行工具（在Windows上是CMD或PowerShell，在macOS或Linux上是Terminal）。\n   - 输入以下命令来全局安装Hexo：\n     ```bash\n     npm install -g hexo-cli\n     ```\n   - 这将安装Hexo的命令行工具，允许你通过命令行来创建和管理Hexo博客。\n\n3. **初始化Hexo博客**：\n   - 选择一个你想要存放博客代码的文件夹，并导航到该文件夹。\n   - 输入以下命令来初始化一个新的Hexo博客：\n     ```bash\n     hexo init myblog\n     ```\n   - 这将创建一个名为`myblog`的新文件夹，里面包含了Hexo博客的基本结构和默认主题。\n   - 进入`myblog`文件夹：\n     ```bash\n     cd myblog\n     ```\n\n4. **安装依赖**：\n   - 在`myblog`文件夹内，运行以下命令来安装博客所需的依赖项：\n     ```bash\n     npm install\n     ```\n\n5. **启动本地服务器**：\n   - 输入以下命令来启动Hexo的本地服务器，并预览你的博客：\n     ```bash\n     hexo server\n     ```\n   - 默认情况下，服务器会在`http://localhost:4000`上运行。你可以在浏览器中打开这个地址来查看你的博客。\n\n6. **创建和编辑文章**：\n   - 在`myblog/source/_posts`文件夹中，你可以创建新的Markdown文件来编写文章。\n   - Hexo会自动将这些Markdown文件转换为HTML页面，并在你启动本地服务器时显示。\n\n7. **生成静态文件**：\n   - 当你准备好将博客部署到GitHub Pages时，你可以使用以下命令来生成静态HTML文件：\n     ```bash\n     hexo generate\n     ```\n   - 这将在`myblog/public`文件夹中生成静态文件。\n\n8. **部署到GitHub Pages**（我们将在后续步骤中详细讨论）。\n\n现在你已经成功安装了Hexo，并创建了一个基本的博客。\n\n\n\n## 第三步：创建和编辑内容\n\n#### 1. **了解Hexo的文件结构**\n\n在你之前初始化的Hexo博客文件夹（比如`myblog`）中，有几个重要的文件夹和文件：\n\n- `source/`：存放你的原始内容，包括Markdown文章、图片等。\n- `source/_posts/`：存放你的文章，每个文章都是一个`.md`文件。\n- `themes/`：存放你选择的Hexo主题。\n- `_config.yml`：Hexo博客的全局配置文件。\n\n#### 2. **编写新文章**\n\n1. **创建Markdown文件**：\n   - 进入`source/_posts/`文件夹。\n   - 创建一个新的Markdown文件，文件名通常遵循`YYYY-MM-DD-title.md`的格式，其中`YYYY`是年份，`MM`是月份，`DD`是日期，`title`是你的文章标题（用英文短横线`-`分隔单词）。\n\n2. **编写文章头部信息**（Front-matter）：\n   - 在Markdown文件的顶部，添加如下信息（用三个短横线`---`包围）：\n     ```yaml\n     title: 你的文章标题\n     date: YYYY-MM-DD HH:MM:SS # 发布日期和时间\n     categories: # 文章的分类\n       - 分类1\n       - 分类2\n     tags: # 文章的标签\n       - 标签1\n       - 标签2\n     ---\n     ```\n   - 替换`你的文章标题`、`YYYY-MM-DD HH:MM:SS`、`分类1`、`分类2`、`标签1`和`标签2`为实际的内容。\n\n3. **编写文章内容**：\n   - 在Front-matter之后，你可以开始编写你的文章内容了。使用Markdown语法来格式化文本，比如标题、段落、列表、图片、链接等。\n\n4. **保存文件**：\n   - 完成文章编写后，保存Markdown文件。\n\n#### 3. **预览文章**\n\n- 回到你的命令行工具，确保Hexo的本地服务器还在运行（如果关闭了，重新运行`hexo server`）。\n- 在浏览器中打开`http://localhost:4000`，你应该能看到你的新文章已经出现在博客上了。\n\n#### 4. **编辑现有文章**\n\n- 如果需要编辑现有的文章，只需在`source/_posts/`文件夹中找到对应的Markdown文件，进行修改，然后保存。\n- Hexo会自动检测文件的更改，并刷新本地服务器上的预览。\n\n#### 5. **添加其他页面**\n\n- 除了文章之外，你还可以添加其他页面，比如关于我、作品集等。\n- 创建一个新的Markdown文件，放在`source/`文件夹中（而不是`_posts/`），然后按照文章的方式编写头部信息和内容。\n- 在Hexo的主题配置文件中，你可能需要添加一些路由规则来确保这些页面能够正确显示。\n\n现在你已经知道如何创建和编辑Hexo博客的内容了。\n\n\n\n## 第四步：本地预览和调试\n\n#### 1. **启动Hexo本地服务器**\n\n确保你的Hexo博客项目文件夹（比如`myblog`）是打开的，然后在命令行工具中导航到该文件夹。运行以下命令来启动Hexo的本地服务器：\n\n```bash\nhexo server\n```\n\n或者，如果你安装了`hexo-cli`并且想要从任何位置启动服务器，你可以使用全局命令（但需要先导航到博客项目文件夹的父目录，然后使用相对路径或绝对路径指定博客文件夹）：\n\n```bash\nhexo server -d myblog\n```\n\n其中`myblog`是你的博客项目文件夹的名称。\n\n#### 2. **在浏览器中预览**\n\n默认情况下，Hexo的本地服务器会在`http://localhost:4000`上运行。打开你的网页浏览器，输入这个地址，你应该能看到你的博客的本地预览。\n\n#### 3. **浏览和导航**\n\n- 点击博客上的链接，确保导航正常。\n- 检查文章的布局和样式，确保它们符合你的期望。\n- 如果你的博客有侧边栏、页脚等组件，也请确保它们显示正确。\n\n#### 4. **调试和修改**\n\n- 如果发现任何问题（比如布局错乱、链接失效等），回到你的Markdown文件或主题配置文件中进行修改。\n- 修改后，保存文件，然后刷新浏览器页面，查看更改是否生效。\n- 重复这个过程，直到你对博客的预览满意为止。\n\n#### 5. **使用Hexo的内置命令**\n\n- 在调试过程中，你可能会频繁地生成静态文件和重启服务器。Hexo提供了一些方便的命令来简化这些操作：\n  - `hexo clean`：删除生成的静态文件（在`public`文件夹中）。\n  - `hexo generate`（或简写为`hexo g`）：生成静态文件。\n  - `hexo server`（或简写为`hexo s`）：启动本地服务器。\n  - 你可以组合这些命令来简化工作流程，比如`hexo clean && hexo g && hexo s`。\n\n#### 6. **检查响应式设计**\n\n- 如果你的博客主题支持响应式设计（即在不同设备上都能良好显示），请在不同的屏幕尺寸和浏览器上测试你的博客。\n- 确保在移动设备上也能方便地浏览和导航。\n\n现在你已经知道如何在本地预览和调试你的Hexo博客了。\n\n\n\n## 第五步：自定义博客主题和设置\n\n#### 1. **选择并安装主题**\n\nHexo拥有丰富的第三方主题，你可以根据自己的喜好选择一个。以下是如何安装一个主题的步骤：\n\n1. **浏览Hexo主题**：\n   - 你可以访问Hexo的官方文档或GitHub上的Hexo主题仓库来浏览可用的主题。\n   - 选择一个你感兴趣的主题，并查看其文档以了解如何安装和配置。\n\n2. **下载或克隆主题**：\n   - 根据主题的文档，你可能需要下载主题的ZIP文件，或者通过Git克隆主题的仓库到你的本地计算机。\n\n3. **将主题放入Hexo项目**：\n   - 将下载或克隆的主题文件夹放入你的Hexo项目中的`themes/`文件夹内。\n\n4. **更新配置文件**：\n   - 打开你的Hexo项目中的`_config.yml`文件。\n   - 找到`theme`字段，并将其值设置为你刚刚安装的主题的文件夹名。\n\n例如，如果你安装了一个名为`landscape`的主题，你的`_config.yml`文件中的`theme`字段应该像这样：\n\n```yaml\ntheme: landscape\n```\n\n5. **生成和预览**：\n   - 运行`hexo generate`（或简写为`hexo g`）来生成静态文件。\n   - 运行`hexo server`（或简写为`hexo s`）来启动本地服务器并预览你的博客。\n\n#### 2. **自定义主题设置**\n\n大多数Hexo主题都允许你通过修改主题的配置文件来自定义博客的外观和行为。以下是如何自定义主题设置的步骤：\n\n1. **找到主题配置文件**：\n   - 在你安装的主题文件夹内，通常会有一个名为`_config.yml`的文件（有时可能是其他名称，比如`config.yml`，具体取决于主题）。\n\n2. **编辑主题配置文件**：\n   - 使用文本编辑器打开主题配置文件。\n   - 根据文件中的注释和说明，修改你感兴趣的设置。\n\n例如，你可能想要修改以下设置：\n\n- 网站标题和副标题\n- 菜单项和导航栏\n- 侧边栏和小工具\n- 文章布局和样式\n- 社交媒体链接和分享按钮\n\n3. **生成和预览更改**：\n   - 每次修改主题配置文件后，都需要运行`hexo generate`来生成静态文件。\n   - 然后运行`hexo server`来预览更改。\n\n4. **高级自定义**：\n   - 如果你想要进行更高级的自定义（比如修改CSS样式或JavaScript脚本），你可能需要编辑主题文件夹中的其他文件。\n   - 在进行这些更改时，请务必备份原始文件，以便在需要时恢复。\n\n#### 3. **测试和调试**\n\n- 在进行自定义时，不断测试你的博客以确保所有功能都按预期工作。\n- 检查不同设备和浏览器上的显示效果。\n- 如果遇到问题，请查阅主题的文档或寻求社区的帮助。\n\n现在你已经知道如何自定义Hexo博客的主题和设置了。\n\n\n\n## 第六步：将博客部署到GitHub Pages\n\n#### 1. **创建GitHub仓库**\n\n1. **登录GitHub**：\n   - 使用你的GitHub账户登录到GitHub网站。\n\n2. **创建新仓库**：\n   - 点击右上角的加号（+）图标，然后选择“New repository”（新建仓库）。\n   - 为你的仓库命名，通常使用`username.github.io`的格式，其中`username`是你的GitHub用户名。这样命名的仓库会自动启用GitHub Pages。\n   - 设置仓库为“Public”（公开），因为GitHub Pages不支持私有仓库。\n   - 初始化仓库时可以选择添加一个README文件，但这对于Hexo部署不是必需的。\n   - 点击“Create repository”（创建仓库）按钮。\n\n#### 2. **配置Hexo以部署到GitHub Pages**\n\n1. **安装`hexo-deployer-git`插件**：\n   - 在你的Hexo项目文件夹中，运行以下命令来安装`hexo-deployer-git`插件，这个插件允许你将Hexo生成的静态文件部署到Git仓库中。\n     ```bash\n     npm install hexo-deployer-git --save-dev\n     ```\n\n2. **配置部署设置**：\n   - 打开你的Hexo项目中的`_config.yml`文件。\n   - 在文件底部添加以下部署（deploy）配置：\n     ```yaml\n     deploy:\n       type: git\n       repo: <your-repository-url> # 替换为你的GitHub仓库的HTTPS URL\n       branch: main # 或者你希望部署到的分支名，通常是main或gh-pages\n       message: \"Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\" # 提交时的消息模板\n     ```\n   - 将`<your-repository-url>`替换为你的GitHub仓库的完整HTTPS URL，例如`https://github.com/username/username.github.io.git`。\n\n#### 3. **生成静态文件并部署**\n\n1. **生成静态文件**：\n   - 在你的Hexo项目文件夹中，运行以下命令来生成静态文件。\n     ```bash\n     hexo generate\n     ```\n   - 或者使用简写命令：\n     ```bash\n     hexo g\n     ```\n\n2. **部署到GitHub Pages**：\n   - 运行以下命令来将生成的静态文件部署到你的GitHub仓库中。\n     ```bash\n     hexo deploy\n     ```\n   - 首次部署时，你可能需要输入你的GitHub用户名和密码（或者使用GitHub提供的个人访问令牌）。\n\n3. **验证部署**：\n   - 打开你的浏览器，输入你的GitHub Pages网址（通常是`https://username.github.io`，其中`username`是你的GitHub用户名）。\n   - 你应该能看到你的Hexo博客已经成功部署到GitHub Pages上了。\n\n#### 4. **更新博客**\n\n- 每次你更新博客内容时，只需重复生成静态文件和部署的步骤。\n- 你可以将这两个步骤合并为一个命令，通过添加`--deploy`选项到`hexo generate`命令中来实现：\n  ```bash\n  hexo g --deploy\n  ```\n  - 或者使用简写命令：\n    ```bash\n    hexo gd\n    ```\n\n现在你已经知道如何将Hexo博客部署到GitHub Pages上了。\n\n\n\n## 第七步：维护和更新你的博客\n\n#### 1. **定期更新内容**\n\n- **撰写新文章**：使用Markdown编写新的博客文章，并保存在Hexo项目的`source/_posts/`目录下。\n- **发布文章**：每次撰写完新文章后，运行`hexo generate`（或`hexo g`）生成静态文件，然后运行`hexo deploy`将更新推送到GitHub Pages。你也可以使用`hexo g --deploy`（或`hexo gd`）一次性完成这两个步骤。\n- **管理旧文章**：定期回顾和更新你的旧文章，确保它们的信息是最新的，并且没有过时或错误的链接。\n\n#### 2. **监控和分析**\n\n- **使用Google Analytics（谷歌分析）**：在Google Analytics中注册一个账户，并将提供的跟踪代码添加到你的Hexo博客的HTML模板中，以便监控博客的流量和访问者行为。\n- **检查错误和性能**：定期检查你的博客是否有任何错误（如404页面、断开的链接等），并使用工具（如Google PageSpeed Insights）来优化博客的性能。\n\n#### 3. **备份和恢复**\n\n- **定期备份**：定期将你的Hexo项目文件夹和GitHub仓库的内容备份到安全的位置，以防数据丢失。\n- **恢复数据**：如果出现问题，你可以使用备份的数据来恢复你的博客。\n\n#### 4. **保持主题和插件更新**\n\n- **更新Hexo**：定期检查Hexo的更新，并运行`npm update -g hexo`来更新到最新版本。\n- **更新主题和插件**：同样地，定期检查你使用的主题和插件是否有更新，并按照它们的文档进行更新。\n\n#### 5. **安全性**\n\n- **保护你的GitHub账户**：确保你的GitHub账户使用了强密码，并启用了双重身份验证。\n- **避免敏感信息**：不要在博客中发布任何敏感信息，如密码、密钥或私人电子邮件地址。\n\n#### 6. **与读者互动**\n\n- **添加评论系统**：考虑在你的博客中添加一个评论系统，如Disqus或Gitalk，以便与读者互动。\n- **回复评论和问题**：定期查看并回复读者的评论和问题，以建立和维护与读者的关系。\n\n#### 7. **优化SEO**\n\n- **使用关键词**：在撰写文章时，使用相关的关键词，并在标题、元描述和正文中适当地放置它们。\n- **创建内部链接**：在你的文章之间创建内部链接，以便读者可以轻松地找到相关的内容。\n- **优化图片**：为图片添加描述性的文件名和alt属性，并使用适当的压缩来优化它们的加载速度。\n\n现在你已经知道如何维护和更新你的Hexo博客了。\n\n\n\n## 安装Gitalk\n\n1. **注册Gitalk**\n\n   * 访问[Gitalk官网](https://gitalk.github.io/)，点击“开始使用”按钮，跳转到Github页面。\n   * 在Github页面，点击“使用说明”中的“Click here to register”进行注册。\n   * 填写相关信息，包括应用名称（Application name）、主页地址（Homepage URL，一般填写域名地址或名称.github.io）、项目描述（Application description，非必需）和认证回调地址（Authorization callback URL，一般填写域名地址或名称.github.io）。\n   * 完成注册后，可以修改并更新信息，包括上传新头像和设置背景色。\n\n2. **创建Github Application**\n\n   * 登录Github，点击右上角头像，依次进入“Settings”->“Developer settings”->“OAuth Apps”->“New OAuth App”进行基本配置。\n   * 填写应用名称、主页URL、回调URL等信息，并生成Client ID和Client Secret。\n\n3. **配置Hexo博客**\n\n   * 进入Hexo博客的主题配置文件（_config.yml），添加Gitalk配置。\n   * 配置项包括：\n\t * `enable`: 是否启用Gitalk，设置为true。\n\t * `github_id`: Github仓库所有者。\n\t * `repo`: 存储评论的仓库名称。\n\t * `client_id`: Github Application的Client ID。\n\t * `client_secret`: Github Application的Client Secret。\n\t * `admin_user`: Github仓库所有者和协作者，只有他们可以初始化Github issues。\n\t * `distraction_free_mode`: 是否启用无干扰模式，类似于Facebook。\n\t * `language`: 语言设置，如中文设置为zh-CN。\n\n### 二、使用Gitalk\n\n1. **在Hexo主题中添加Gitalk容器**\n\n   * 进入主题目录的`layout`->`_partial`->`post`目录。\n   * 在当前目录下新建一个`gitalk.ejs`文件，并写入以下代码：\n\n```html\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk@latest/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk@latest/dist/gitalk.min.js\"></script>\n<script src=\"https://priesttomb.github.io/js/md5.min.js\"></script>\n<script type=\"text/javascript\">\nnew Gitalk({\n  clientID: '你的Client ID',\n  clientSecret: '你的Client Secret',\n  repo: '你的仓库名称',\n  owner: '你的Github用户名',\n  admin: ['你的Github用户名'],\n  id: md5(location.pathname), // 使用md5确保唯一性和长度限制\n  distractionFreeMode: true\n}).render('gitalk-container')\n</script>\n```\n\n   * 注意替换代码中的`clientID`、`clientSecret`、`repo`、`owner`和`admin`为实际值。\n\n2. **在文章模板中添加Gitalk容器引用**\n\n   * 进入主题目录的`layout`->`_partial`目录，找到`article.ejs`文件。\n   * 在`article.ejs`文件的最后面加入以下代码：\n\n```html\n<% if(theme.gitalk.enable){ %>\n  <div id=\"gitalk-container\"></div>\n  <%- include post/gitalk.ejs %>\n<% } %>\n```\n\n3. **生成并部署Hexo博客**\n\n   * 在Hexo博客的根目录下，运行`hexo generate`（或`hexo g`）生成静态文件。\n   * 运行`hexo deploy`将更新推送到Github Pages。\n\n4. **初始化评论**\n\n   * 访问你的Hexo博客文章页面，登录Github后尝试发表评论。\n   * 评论将作为issues存储在指定的Github仓库中，并可以在仓库的issues页面进行管理。\n\n通过以上步骤，你就可以在Hexo博客中成功安装和使用Gitalk评论系统了。记得定期检查和更新你的Gitalk配置和Github仓库，以确保评论系统的正常运行。\n\n\n\n","slug":"2024-10-25-Hexo建立博客教程","published":1,"updated":"2024-10-25T08:53:42.122Z","comments":1,"layout":"post","photos":[],"_id":"cm2ohxaha0000z8ud2xrhgwrp","content":"<p>建立一个基于GitHub的个人博客网站是一个既实用又能提升技术能力的好项目。以下是一个详细的步骤清单，帮助你从零开始搭建个人博客：</p>\n<h2 id=\"第一步注册\"><a href=\"#第一步注册\" class=\"headerlink\" title=\"第一步\t注册\"></a>第一步\t注册</h2><h3 id=\"1-注册和设置GitHub账户\"><a href=\"#1-注册和设置GitHub账户\" class=\"headerlink\" title=\"1. 注册和设置GitHub账户\"></a>1. <strong>注册和设置GitHub账户</strong></h3><ul>\n<li><strong>注册GitHub</strong>：如果你还没有GitHub账户，需要先注册一个。</li>\n<li><strong>设置个人信息</strong>：完善你的个人资料，包括头像、简介等，这将展示在你的博客页面上。</li>\n</ul>\n<h3 id=\"2-选择博客框架-工具\"><a href=\"#2-选择博客框架-工具\" class=\"headerlink\" title=\"2. 选择博客框架&#x2F;工具\"></a>2. <strong>选择博客框架&#x2F;工具</strong></h3><ul>\n<li><strong>静态网站生成器</strong>：如Jekyll（Ruby）、Hugo（Go）、Hexo（Node.js）等，它们可以从Markdown文件生成静态HTML页面。</li>\n<li><strong>主题选择</strong>：选择一个你喜欢的主题，很多框架都有现成的主题库可以选择，也可以自定义。</li>\n</ul>\n<h3 id=\"3-安装和配置博客框架\"><a href=\"#3-安装和配置博客框架\" class=\"headerlink\" title=\"3. 安装和配置博客框架\"></a>3. <strong>安装和配置博客框架</strong></h3><ul>\n<li><strong>安装必要的软件</strong>：根据你选择的框架，安装相应的软件（如Ruby、Node.js等）。</li>\n<li><strong>初始化博客</strong>：按照框架的官方文档，通过命令行工具初始化一个新的博客项目。</li>\n<li><strong>配置_config.yml</strong>（以Jekyll为例）：修改配置文件，设置博客的基本信息，如标题、作者、社交链接等。</li>\n</ul>\n<h3 id=\"4-创建和编辑内容\"><a href=\"#4-创建和编辑内容\" class=\"headerlink\" title=\"4. 创建和编辑内容\"></a>4. <strong>创建和编辑内容</strong></h3><ul>\n<li><strong>Markdown文件</strong>：使用Markdown编写你的文章，存放在指定的文件夹中（通常是<code>_posts</code>）。</li>\n<li><strong>添加页面</strong>：根据需要添加其他页面，如关于我、作品集等，也是使用Markdown编写。</li>\n</ul>\n<h3 id=\"5-本地预览\"><a href=\"#5-本地预览\" class=\"headerlink\" title=\"5. 本地预览\"></a>5. <strong>本地预览</strong></h3><ul>\n<li><strong>运行博客</strong>：在本地运行博客，预览效果。大多数框架都提供了命令行工具来启动一个本地服务器。</li>\n<li><strong>调试和修改</strong>：根据预览效果，调整文章内容和样式。</li>\n</ul>\n<h3 id=\"6-部署到GitHub-Pages\"><a href=\"#6-部署到GitHub-Pages\" class=\"headerlink\" title=\"6. 部署到GitHub Pages\"></a>6. <strong>部署到GitHub Pages</strong></h3><ul>\n<li><strong>创建仓库</strong>：在GitHub上创建一个新的仓库，命名为<code>username.github.io</code>（<code>username</code>是你的GitHub用户名），这是GitHub Pages的默认域名。</li>\n<li><strong>推送代码</strong>：将你的博客代码推送到这个仓库。</li>\n<li><strong>启用GitHub Pages</strong>：在仓库的设置中，找到“Pages”部分，选择“main”或“gh-pages”分支（取决于你的配置），然后保存设置。</li>\n<li><strong>自定义域名</strong>（可选）：如果你想使用自己的域名，可以在Pages设置中添加CNAME记录，并在域名提供商处配置A记录指向GitHub Pages的IP地址。</li>\n</ul>\n<h3 id=\"7-优化和维护\"><a href=\"#7-优化和维护\" class=\"headerlink\" title=\"7. 优化和维护\"></a>7. <strong>优化和维护</strong></h3><ul>\n<li><strong>SEO优化</strong>：添加meta标签，使用SEO友好的URL结构，确保内容易于被搜索引擎索引。</li>\n<li><strong>更新内容</strong>：定期发布新文章，保持博客活跃。</li>\n<li><strong>备份</strong>：定期备份你的博客代码和文章，以防万一。</li>\n<li><strong>安全性</strong>：注意GitHub仓库的安全设置，避免敏感信息泄露。</li>\n</ul>\n<h3 id=\"8-推广和互动\"><a href=\"#8-推广和互动\" class=\"headerlink\" title=\"8. 推广和互动\"></a>8. <strong>推广和互动</strong></h3><ul>\n<li><strong>社交媒体</strong>：通过社交媒体分享你的文章，增加曝光度。</li>\n<li><strong>读者互动</strong>：添加评论系统（如Disqus、Utterances），鼓励读者留言反馈。</li>\n<li><strong>加入社区</strong>：参与技术社区，与其他博主交流，互相学习。</li>\n</ul>\n<p>完成以上步骤后，你就拥有了一个基于GitHub的个人博客网站。记得持续学习和探索，不断优化你的博客，让它成为你展示才华和分享知识的平台。</p>\n<p>没问题，即使你对编程不太熟悉，我们仍然可以一步一步地搭建你的个人博客。既然你已经完成了GitHub账户的注册和设置，接下来我们将选择并配置一个适合初学者的博客框架。</p>\n<h2 id=\"第二步：选择博客框架-工具\"><a href=\"#第二步：选择博客框架-工具\" class=\"headerlink\" title=\"第二步：选择博客框架&#x2F;工具\"></a>第二步：选择博客框架&#x2F;工具</h2><p>对于初学者来说，我推荐使用<strong>Hexo</strong>或<strong>Hugo</strong>这样的静态网站生成器，因为它们相对简单且易于上手，尤其是Hexo，它使用Markdown编写内容，非常适合不熟悉编程的人。</p>\n<h4 id=\"选择Hexo的原因：\"><a href=\"#选择Hexo的原因：\" class=\"headerlink\" title=\"选择Hexo的原因：\"></a>选择Hexo的原因：</h4><ul>\n<li><strong>Markdown支持</strong>：你可以使用Markdown语法来编写文章，这是一种轻量级标记语言，易于学习和使用。</li>\n<li><strong>主题丰富</strong>：Hexo有大量的第三方主题可供选择，你可以很容易地找到一个你喜欢的样式。</li>\n<li><strong>插件支持</strong>：Hexo有丰富的插件生态系统，可以扩展博客的功能，比如添加评论系统、SEO优化等。</li>\n<li><strong>部署简单</strong>：Hexo可以轻松地将你的博客部署到GitHub Pages上。</li>\n</ul>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><ol>\n<li><p><strong>安装Node.js和npm</strong>：</p>\n<ul>\n<li>首先，你需要安装Node.js，这是Hexo运行的基础。你可以从Node.js的官方网站（<a href=\"https://nodejs.org/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%E9%80%82%E5%90%88%E4%BD%A0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82\">https://nodejs.org/）下载并安装适合你操作系统的版本。</a></li>\n<li>安装Node.js时，npm（Node Package Manager）会一并安装。</li>\n</ul>\n</li>\n<li><p><strong>全局安装Hexo</strong>：</p>\n<ul>\n<li>打开你的命令行工具（在Windows上是CMD或PowerShell，在macOS或Linux上是Terminal）。</li>\n<li>输入以下命令来全局安装Hexo：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n<li>这将安装Hexo的命令行工具，允许你通过命令行来创建和管理Hexo博客。</li>\n</ul>\n</li>\n<li><p><strong>初始化Hexo博客</strong>：</p>\n<ul>\n<li>选择一个你想要存放博客代码的文件夹，并导航到该文件夹。</li>\n<li>输入以下命令来初始化一个新的Hexo博客：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure></li>\n<li>这将创建一个名为<code>myblog</code>的新文件夹，里面包含了Hexo博客的基本结构和默认主题。</li>\n<li>进入<code>myblog</code>文件夹：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> myblog</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>安装依赖</strong>：</p>\n<ul>\n<li>在<code>myblog</code>文件夹内，运行以下命令来安装博客所需的依赖项：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>启动本地服务器</strong>：</p>\n<ul>\n<li>输入以下命令来启动Hexo的本地服务器，并预览你的博客：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li>默认情况下，服务器会在<code>http://localhost:4000</code>上运行。你可以在浏览器中打开这个地址来查看你的博客。</li>\n</ul>\n</li>\n<li><p><strong>创建和编辑文章</strong>：</p>\n<ul>\n<li>在<code>myblog/source/_posts</code>文件夹中，你可以创建新的Markdown文件来编写文章。</li>\n<li>Hexo会自动将这些Markdown文件转换为HTML页面，并在你启动本地服务器时显示。</li>\n</ul>\n</li>\n<li><p><strong>生成静态文件</strong>：</p>\n<ul>\n<li>当你准备好将博客部署到GitHub Pages时，你可以使用以下命令来生成静态HTML文件：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></li>\n<li>这将在<code>myblog/public</code>文件夹中生成静态文件。</li>\n</ul>\n</li>\n<li><p><strong>部署到GitHub Pages</strong>（我们将在后续步骤中详细讨论）。</p>\n</li>\n</ol>\n<p>现在你已经成功安装了Hexo，并创建了一个基本的博客。</p>\n<h2 id=\"第三步：创建和编辑内容\"><a href=\"#第三步：创建和编辑内容\" class=\"headerlink\" title=\"第三步：创建和编辑内容\"></a>第三步：创建和编辑内容</h2><h4 id=\"1-了解Hexo的文件结构\"><a href=\"#1-了解Hexo的文件结构\" class=\"headerlink\" title=\"1. 了解Hexo的文件结构\"></a>1. <strong>了解Hexo的文件结构</strong></h4><p>在你之前初始化的Hexo博客文件夹（比如<code>myblog</code>）中，有几个重要的文件夹和文件：</p>\n<ul>\n<li><code>source/</code>：存放你的原始内容，包括Markdown文章、图片等。</li>\n<li><code>source/_posts/</code>：存放你的文章，每个文章都是一个<code>.md</code>文件。</li>\n<li><code>themes/</code>：存放你选择的Hexo主题。</li>\n<li><code>_config.yml</code>：Hexo博客的全局配置文件。</li>\n</ul>\n<h4 id=\"2-编写新文章\"><a href=\"#2-编写新文章\" class=\"headerlink\" title=\"2. 编写新文章\"></a>2. <strong>编写新文章</strong></h4><ol>\n<li><p><strong>创建Markdown文件</strong>：</p>\n<ul>\n<li>进入<code>source/_posts/</code>文件夹。</li>\n<li>创建一个新的Markdown文件，文件名通常遵循<code>YYYY-MM-DD-title.md</code>的格式，其中<code>YYYY</code>是年份，<code>MM</code>是月份，<code>DD</code>是日期，<code>title</code>是你的文章标题（用英文短横线<code>-</code>分隔单词）。</li>\n</ul>\n</li>\n<li><p><strong>编写文章头部信息</strong>（Front-matter）：</p>\n<ul>\n<li>在Markdown文件的顶部，添加如下信息（用三个短横线<code>---</code>包围）：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">你的文章标题</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"string\">YYYY-MM-DD</span> <span class=\"string\">HH:MM:SS</span> <span class=\"comment\"># 发布日期和时间</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"comment\"># 文章的分类</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">分类1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">分类2</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"comment\"># 文章的标签</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">标签1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">标签2</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure></li>\n<li>替换<code>你的文章标题</code>、<code>YYYY-MM-DD HH:MM:SS</code>、<code>分类1</code>、<code>分类2</code>、<code>标签1</code>和<code>标签2</code>为实际的内容。</li>\n</ul>\n</li>\n<li><p><strong>编写文章内容</strong>：</p>\n<ul>\n<li>在Front-matter之后，你可以开始编写你的文章内容了。使用Markdown语法来格式化文本，比如标题、段落、列表、图片、链接等。</li>\n</ul>\n</li>\n<li><p><strong>保存文件</strong>：</p>\n<ul>\n<li>完成文章编写后，保存Markdown文件。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-预览文章\"><a href=\"#3-预览文章\" class=\"headerlink\" title=\"3. 预览文章\"></a>3. <strong>预览文章</strong></h4><ul>\n<li>回到你的命令行工具，确保Hexo的本地服务器还在运行（如果关闭了，重新运行<code>hexo server</code>）。</li>\n<li>在浏览器中打开<code>http://localhost:4000</code>，你应该能看到你的新文章已经出现在博客上了。</li>\n</ul>\n<h4 id=\"4-编辑现有文章\"><a href=\"#4-编辑现有文章\" class=\"headerlink\" title=\"4. 编辑现有文章\"></a>4. <strong>编辑现有文章</strong></h4><ul>\n<li>如果需要编辑现有的文章，只需在<code>source/_posts/</code>文件夹中找到对应的Markdown文件，进行修改，然后保存。</li>\n<li>Hexo会自动检测文件的更改，并刷新本地服务器上的预览。</li>\n</ul>\n<h4 id=\"5-添加其他页面\"><a href=\"#5-添加其他页面\" class=\"headerlink\" title=\"5. 添加其他页面\"></a>5. <strong>添加其他页面</strong></h4><ul>\n<li>除了文章之外，你还可以添加其他页面，比如关于我、作品集等。</li>\n<li>创建一个新的Markdown文件，放在<code>source/</code>文件夹中（而不是<code>_posts/</code>），然后按照文章的方式编写头部信息和内容。</li>\n<li>在Hexo的主题配置文件中，你可能需要添加一些路由规则来确保这些页面能够正确显示。</li>\n</ul>\n<p>现在你已经知道如何创建和编辑Hexo博客的内容了。</p>\n<h2 id=\"第四步：本地预览和调试\"><a href=\"#第四步：本地预览和调试\" class=\"headerlink\" title=\"第四步：本地预览和调试\"></a>第四步：本地预览和调试</h2><h4 id=\"1-启动Hexo本地服务器\"><a href=\"#1-启动Hexo本地服务器\" class=\"headerlink\" title=\"1. 启动Hexo本地服务器\"></a>1. <strong>启动Hexo本地服务器</strong></h4><p>确保你的Hexo博客项目文件夹（比如<code>myblog</code>）是打开的，然后在命令行工具中导航到该文件夹。运行以下命令来启动Hexo的本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>或者，如果你安装了<code>hexo-cli</code>并且想要从任何位置启动服务器，你可以使用全局命令（但需要先导航到博客项目文件夹的父目录，然后使用相对路径或绝对路径指定博客文件夹）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server -d myblog</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>myblog</code>是你的博客项目文件夹的名称。</p>\n<h4 id=\"2-在浏览器中预览\"><a href=\"#2-在浏览器中预览\" class=\"headerlink\" title=\"2. 在浏览器中预览\"></a>2. <strong>在浏览器中预览</strong></h4><p>默认情况下，Hexo的本地服务器会在<code>http://localhost:4000</code>上运行。打开你的网页浏览器，输入这个地址，你应该能看到你的博客的本地预览。</p>\n<h4 id=\"3-浏览和导航\"><a href=\"#3-浏览和导航\" class=\"headerlink\" title=\"3. 浏览和导航\"></a>3. <strong>浏览和导航</strong></h4><ul>\n<li>点击博客上的链接，确保导航正常。</li>\n<li>检查文章的布局和样式，确保它们符合你的期望。</li>\n<li>如果你的博客有侧边栏、页脚等组件，也请确保它们显示正确。</li>\n</ul>\n<h4 id=\"4-调试和修改\"><a href=\"#4-调试和修改\" class=\"headerlink\" title=\"4. 调试和修改\"></a>4. <strong>调试和修改</strong></h4><ul>\n<li>如果发现任何问题（比如布局错乱、链接失效等），回到你的Markdown文件或主题配置文件中进行修改。</li>\n<li>修改后，保存文件，然后刷新浏览器页面，查看更改是否生效。</li>\n<li>重复这个过程，直到你对博客的预览满意为止。</li>\n</ul>\n<h4 id=\"5-使用Hexo的内置命令\"><a href=\"#5-使用Hexo的内置命令\" class=\"headerlink\" title=\"5. 使用Hexo的内置命令\"></a>5. <strong>使用Hexo的内置命令</strong></h4><ul>\n<li>在调试过程中，你可能会频繁地生成静态文件和重启服务器。Hexo提供了一些方便的命令来简化这些操作：<ul>\n<li><code>hexo clean</code>：删除生成的静态文件（在<code>public</code>文件夹中）。</li>\n<li><code>hexo generate</code>（或简写为<code>hexo g</code>）：生成静态文件。</li>\n<li><code>hexo server</code>（或简写为<code>hexo s</code>）：启动本地服务器。</li>\n<li>你可以组合这些命令来简化工作流程，比如<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-检查响应式设计\"><a href=\"#6-检查响应式设计\" class=\"headerlink\" title=\"6. 检查响应式设计\"></a>6. <strong>检查响应式设计</strong></h4><ul>\n<li>如果你的博客主题支持响应式设计（即在不同设备上都能良好显示），请在不同的屏幕尺寸和浏览器上测试你的博客。</li>\n<li>确保在移动设备上也能方便地浏览和导航。</li>\n</ul>\n<p>现在你已经知道如何在本地预览和调试你的Hexo博客了。</p>\n<h2 id=\"第五步：自定义博客主题和设置\"><a href=\"#第五步：自定义博客主题和设置\" class=\"headerlink\" title=\"第五步：自定义博客主题和设置\"></a>第五步：自定义博客主题和设置</h2><h4 id=\"1-选择并安装主题\"><a href=\"#1-选择并安装主题\" class=\"headerlink\" title=\"1. 选择并安装主题\"></a>1. <strong>选择并安装主题</strong></h4><p>Hexo拥有丰富的第三方主题，你可以根据自己的喜好选择一个。以下是如何安装一个主题的步骤：</p>\n<ol>\n<li><p><strong>浏览Hexo主题</strong>：</p>\n<ul>\n<li>你可以访问Hexo的官方文档或GitHub上的Hexo主题仓库来浏览可用的主题。</li>\n<li>选择一个你感兴趣的主题，并查看其文档以了解如何安装和配置。</li>\n</ul>\n</li>\n<li><p><strong>下载或克隆主题</strong>：</p>\n<ul>\n<li>根据主题的文档，你可能需要下载主题的ZIP文件，或者通过Git克隆主题的仓库到你的本地计算机。</li>\n</ul>\n</li>\n<li><p><strong>将主题放入Hexo项目</strong>：</p>\n<ul>\n<li>将下载或克隆的主题文件夹放入你的Hexo项目中的<code>themes/</code>文件夹内。</li>\n</ul>\n</li>\n<li><p><strong>更新配置文件</strong>：</p>\n<ul>\n<li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li>\n<li>找到<code>theme</code>字段，并将其值设置为你刚刚安装的主题的文件夹名。</li>\n</ul>\n</li>\n</ol>\n<p>例如，如果你安装了一个名为<code>landscape</code>的主题，你的<code>_config.yml</code>文件中的<code>theme</code>字段应该像这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">landscape</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>生成和预览</strong>：<ul>\n<li>运行<code>hexo generate</code>（或简写为<code>hexo g</code>）来生成静态文件。</li>\n<li>运行<code>hexo server</code>（或简写为<code>hexo s</code>）来启动本地服务器并预览你的博客。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-自定义主题设置\"><a href=\"#2-自定义主题设置\" class=\"headerlink\" title=\"2. 自定义主题设置\"></a>2. <strong>自定义主题设置</strong></h4><p>大多数Hexo主题都允许你通过修改主题的配置文件来自定义博客的外观和行为。以下是如何自定义主题设置的步骤：</p>\n<ol>\n<li><p><strong>找到主题配置文件</strong>：</p>\n<ul>\n<li>在你安装的主题文件夹内，通常会有一个名为<code>_config.yml</code>的文件（有时可能是其他名称，比如<code>config.yml</code>，具体取决于主题）。</li>\n</ul>\n</li>\n<li><p><strong>编辑主题配置文件</strong>：</p>\n<ul>\n<li>使用文本编辑器打开主题配置文件。</li>\n<li>根据文件中的注释和说明，修改你感兴趣的设置。</li>\n</ul>\n</li>\n</ol>\n<p>例如，你可能想要修改以下设置：</p>\n<ul>\n<li>网站标题和副标题</li>\n<li>菜单项和导航栏</li>\n<li>侧边栏和小工具</li>\n<li>文章布局和样式</li>\n<li>社交媒体链接和分享按钮</li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>生成和预览更改</strong>：</p>\n<ul>\n<li>每次修改主题配置文件后，都需要运行<code>hexo generate</code>来生成静态文件。</li>\n<li>然后运行<code>hexo server</code>来预览更改。</li>\n</ul>\n</li>\n<li><p><strong>高级自定义</strong>：</p>\n<ul>\n<li>如果你想要进行更高级的自定义（比如修改CSS样式或JavaScript脚本），你可能需要编辑主题文件夹中的其他文件。</li>\n<li>在进行这些更改时，请务必备份原始文件，以便在需要时恢复。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-测试和调试\"><a href=\"#3-测试和调试\" class=\"headerlink\" title=\"3. 测试和调试\"></a>3. <strong>测试和调试</strong></h4><ul>\n<li>在进行自定义时，不断测试你的博客以确保所有功能都按预期工作。</li>\n<li>检查不同设备和浏览器上的显示效果。</li>\n<li>如果遇到问题，请查阅主题的文档或寻求社区的帮助。</li>\n</ul>\n<p>现在你已经知道如何自定义Hexo博客的主题和设置了。</p>\n<h2 id=\"第六步：将博客部署到GitHub-Pages\"><a href=\"#第六步：将博客部署到GitHub-Pages\" class=\"headerlink\" title=\"第六步：将博客部署到GitHub Pages\"></a>第六步：将博客部署到GitHub Pages</h2><h4 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1. 创建GitHub仓库\"></a>1. <strong>创建GitHub仓库</strong></h4><ol>\n<li><p><strong>登录GitHub</strong>：</p>\n<ul>\n<li>使用你的GitHub账户登录到GitHub网站。</li>\n</ul>\n</li>\n<li><p><strong>创建新仓库</strong>：</p>\n<ul>\n<li>点击右上角的加号（+）图标，然后选择“New repository”（新建仓库）。</li>\n<li>为你的仓库命名，通常使用<code>username.github.io</code>的格式，其中<code>username</code>是你的GitHub用户名。这样命名的仓库会自动启用GitHub Pages。</li>\n<li>设置仓库为“Public”（公开），因为GitHub Pages不支持私有仓库。</li>\n<li>初始化仓库时可以选择添加一个README文件，但这对于Hexo部署不是必需的。</li>\n<li>点击“Create repository”（创建仓库）按钮。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-配置Hexo以部署到GitHub-Pages\"><a href=\"#2-配置Hexo以部署到GitHub-Pages\" class=\"headerlink\" title=\"2. 配置Hexo以部署到GitHub Pages\"></a>2. <strong>配置Hexo以部署到GitHub Pages</strong></h4><ol>\n<li><p><strong>安装<code>hexo-deployer-git</code>插件</strong>：</p>\n<ul>\n<li>在你的Hexo项目文件夹中，运行以下命令来安装<code>hexo-deployer-git</code>插件，这个插件允许你将Hexo生成的静态文件部署到Git仓库中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save-dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>配置部署设置</strong>：</p>\n<ul>\n<li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li>\n<li>在文件底部添加以下部署（deploy）配置：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&lt;your-repository-url&gt;</span> <span class=\"comment\"># 替换为你的GitHub仓库的HTTPS URL</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span> <span class=\"comment\"># 或者你希望部署到的分支名，通常是main或gh-pages</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">&quot;Site updated: <span class=\"template-variable\">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span> <span class=\"comment\"># 提交时的消息模板</span></span><br></pre></td></tr></table></figure></li>\n<li>将<code>&lt;your-repository-url&gt;</code>替换为你的GitHub仓库的完整HTTPS URL，例如<code>https://github.com/username/username.github.io.git</code>。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-生成静态文件并部署\"><a href=\"#3-生成静态文件并部署\" class=\"headerlink\" title=\"3. 生成静态文件并部署\"></a>3. <strong>生成静态文件并部署</strong></h4><ol>\n<li><p><strong>生成静态文件</strong>：</p>\n<ul>\n<li>在你的Hexo项目文件夹中，运行以下命令来生成静态文件。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></li>\n<li>或者使用简写命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>部署到GitHub Pages</strong>：</p>\n<ul>\n<li>运行以下命令来将生成的静态文件部署到你的GitHub仓库中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></li>\n<li>首次部署时，你可能需要输入你的GitHub用户名和密码（或者使用GitHub提供的个人访问令牌）。</li>\n</ul>\n</li>\n<li><p><strong>验证部署</strong>：</p>\n<ul>\n<li>打开你的浏览器，输入你的GitHub Pages网址（通常是<code>https://username.github.io</code>，其中<code>username</code>是你的GitHub用户名）。</li>\n<li>你应该能看到你的Hexo博客已经成功部署到GitHub Pages上了。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4-更新博客\"><a href=\"#4-更新博客\" class=\"headerlink\" title=\"4. 更新博客\"></a>4. <strong>更新博客</strong></h4><ul>\n<li>每次你更新博客内容时，只需重复生成静态文件和部署的步骤。</li>\n<li>你可以将这两个步骤合并为一个命令，通过添加<code>--deploy</code>选项到<code>hexo generate</code>命令中来实现：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g --deploy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者使用简写命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo gd</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>现在你已经知道如何将Hexo博客部署到GitHub Pages上了。</p>\n<h2 id=\"第七步：维护和更新你的博客\"><a href=\"#第七步：维护和更新你的博客\" class=\"headerlink\" title=\"第七步：维护和更新你的博客\"></a>第七步：维护和更新你的博客</h2><h4 id=\"1-定期更新内容\"><a href=\"#1-定期更新内容\" class=\"headerlink\" title=\"1. 定期更新内容\"></a>1. <strong>定期更新内容</strong></h4><ul>\n<li><strong>撰写新文章</strong>：使用Markdown编写新的博客文章，并保存在Hexo项目的<code>source/_posts/</code>目录下。</li>\n<li><strong>发布文章</strong>：每次撰写完新文章后，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件，然后运行<code>hexo deploy</code>将更新推送到GitHub Pages。你也可以使用<code>hexo g --deploy</code>（或<code>hexo gd</code>）一次性完成这两个步骤。</li>\n<li><strong>管理旧文章</strong>：定期回顾和更新你的旧文章，确保它们的信息是最新的，并且没有过时或错误的链接。</li>\n</ul>\n<h4 id=\"2-监控和分析\"><a href=\"#2-监控和分析\" class=\"headerlink\" title=\"2. 监控和分析\"></a>2. <strong>监控和分析</strong></h4><ul>\n<li><strong>使用Google Analytics（谷歌分析）</strong>：在Google Analytics中注册一个账户，并将提供的跟踪代码添加到你的Hexo博客的HTML模板中，以便监控博客的流量和访问者行为。</li>\n<li><strong>检查错误和性能</strong>：定期检查你的博客是否有任何错误（如404页面、断开的链接等），并使用工具（如Google PageSpeed Insights）来优化博客的性能。</li>\n</ul>\n<h4 id=\"3-备份和恢复\"><a href=\"#3-备份和恢复\" class=\"headerlink\" title=\"3. 备份和恢复\"></a>3. <strong>备份和恢复</strong></h4><ul>\n<li><strong>定期备份</strong>：定期将你的Hexo项目文件夹和GitHub仓库的内容备份到安全的位置，以防数据丢失。</li>\n<li><strong>恢复数据</strong>：如果出现问题，你可以使用备份的数据来恢复你的博客。</li>\n</ul>\n<h4 id=\"4-保持主题和插件更新\"><a href=\"#4-保持主题和插件更新\" class=\"headerlink\" title=\"4. 保持主题和插件更新\"></a>4. <strong>保持主题和插件更新</strong></h4><ul>\n<li><strong>更新Hexo</strong>：定期检查Hexo的更新，并运行<code>npm update -g hexo</code>来更新到最新版本。</li>\n<li><strong>更新主题和插件</strong>：同样地，定期检查你使用的主题和插件是否有更新，并按照它们的文档进行更新。</li>\n</ul>\n<h4 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. <strong>安全性</strong></h4><ul>\n<li><strong>保护你的GitHub账户</strong>：确保你的GitHub账户使用了强密码，并启用了双重身份验证。</li>\n<li><strong>避免敏感信息</strong>：不要在博客中发布任何敏感信息，如密码、密钥或私人电子邮件地址。</li>\n</ul>\n<h4 id=\"6-与读者互动\"><a href=\"#6-与读者互动\" class=\"headerlink\" title=\"6. 与读者互动\"></a>6. <strong>与读者互动</strong></h4><ul>\n<li><strong>添加评论系统</strong>：考虑在你的博客中添加一个评论系统，如Disqus或Gitalk，以便与读者互动。</li>\n<li><strong>回复评论和问题</strong>：定期查看并回复读者的评论和问题，以建立和维护与读者的关系。</li>\n</ul>\n<h4 id=\"7-优化SEO\"><a href=\"#7-优化SEO\" class=\"headerlink\" title=\"7. 优化SEO\"></a>7. <strong>优化SEO</strong></h4><ul>\n<li><strong>使用关键词</strong>：在撰写文章时，使用相关的关键词，并在标题、元描述和正文中适当地放置它们。</li>\n<li><strong>创建内部链接</strong>：在你的文章之间创建内部链接，以便读者可以轻松地找到相关的内容。</li>\n<li><strong>优化图片</strong>：为图片添加描述性的文件名和alt属性，并使用适当的压缩来优化它们的加载速度。</li>\n</ul>\n<p>现在你已经知道如何维护和更新你的Hexo博客了。</p>\n<h2 id=\"安装Gitalk\"><a href=\"#安装Gitalk\" class=\"headerlink\" title=\"安装Gitalk\"></a>安装Gitalk</h2><ol>\n<li><p><strong>注册Gitalk</strong></p>\n<ul>\n<li>访问<a href=\"https://gitalk.github.io/\">Gitalk官网</a>，点击“开始使用”按钮，跳转到Github页面。</li>\n<li>在Github页面，点击“使用说明”中的“Click here to register”进行注册。</li>\n<li>填写相关信息，包括应用名称（Application name）、主页地址（Homepage URL，一般填写域名地址或名称.github.io）、项目描述（Application description，非必需）和认证回调地址（Authorization callback URL，一般填写域名地址或名称.github.io）。</li>\n<li>完成注册后，可以修改并更新信息，包括上传新头像和设置背景色。</li>\n</ul>\n</li>\n<li><p><strong>创建Github Application</strong></p>\n<ul>\n<li>登录Github，点击右上角头像，依次进入“Settings”-&gt;“Developer settings”-&gt;“OAuth Apps”-&gt;“New OAuth App”进行基本配置。</li>\n<li>填写应用名称、主页URL、回调URL等信息，并生成Client ID和Client Secret。</li>\n</ul>\n</li>\n<li><p><strong>配置Hexo博客</strong></p>\n<ul>\n<li>进入Hexo博客的主题配置文件（_config.yml），添加Gitalk配置。</li>\n<li>配置项包括：<ul>\n<li><code>enable</code>: 是否启用Gitalk，设置为true。</li>\n<li><code>github_id</code>: Github仓库所有者。</li>\n<li><code>repo</code>: 存储评论的仓库名称。</li>\n<li><code>client_id</code>: Github Application的Client ID。</li>\n<li><code>client_secret</code>: Github Application的Client Secret。</li>\n<li><code>admin_user</code>: Github仓库所有者和协作者，只有他们可以初始化Github issues。</li>\n<li><code>distraction_free_mode</code>: 是否启用无干扰模式，类似于Facebook。</li>\n<li><code>language</code>: 语言设置，如中文设置为zh-CN。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、使用Gitalk\"><a href=\"#二、使用Gitalk\" class=\"headerlink\" title=\"二、使用Gitalk\"></a>二、使用Gitalk</h3><ol>\n<li><p><strong>在Hexo主题中添加Gitalk容器</strong></p>\n<ul>\n<li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>-&gt;<code>post</code>目录。</li>\n<li>在当前目录下新建一个<code>gitalk.ejs</code>文件，并写入以下代码：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">new</span> <span class=\"title class_\">Gitalk</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">clientID</span>: <span class=\"string\">&#x27;你的Client ID&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;你的Client Secret&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;你的仓库名称&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;你的Github用户名&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">admin</span>: [<span class=\"string\">&#x27;你的Github用户名&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">id</span>: <span class=\"title function_\">md5</span>(location.<span class=\"property\">pathname</span>), <span class=\"comment\">// 使用md5确保唯一性和长度限制</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">distractionFreeMode</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;).<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;gitalk-container&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意替换代码中的<code>clientID</code>、<code>clientSecret</code>、<code>repo</code>、<code>owner</code>和<code>admin</code>为实际值。</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>在文章模板中添加Gitalk容器引用</strong></p>\n<ul>\n<li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>目录，找到<code>article.ejs</code>文件。</li>\n<li>在<code>article.ejs</code>文件的最后面加入以下代码：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gitalk-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  &lt;%- include post/gitalk.ejs %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p><strong>生成并部署Hexo博客</strong></p>\n<ul>\n<li>在Hexo博客的根目录下，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件。</li>\n<li>运行<code>hexo deploy</code>将更新推送到Github Pages。</li>\n</ul>\n</li>\n<li><p><strong>初始化评论</strong></p>\n<ul>\n<li>访问你的Hexo博客文章页面，登录Github后尝试发表评论。</li>\n<li>评论将作为issues存储在指定的Github仓库中，并可以在仓库的issues页面进行管理。</li>\n</ul>\n</li>\n</ol>\n<p>通过以上步骤，你就可以在Hexo博客中成功安装和使用Gitalk评论系统了。记得定期检查和更新你的Gitalk配置和Github仓库，以确保评论系统的正常运行。</p>\n","excerpt":"","more":"<p>建立一个基于GitHub的个人博客网站是一个既实用又能提升技术能力的好项目。以下是一个详细的步骤清单，帮助你从零开始搭建个人博客：</p>\n<h2 id=\"第一步注册\"><a href=\"#第一步注册\" class=\"headerlink\" title=\"第一步\t注册\"></a>第一步\t注册</h2><h3 id=\"1-注册和设置GitHub账户\"><a href=\"#1-注册和设置GitHub账户\" class=\"headerlink\" title=\"1. 注册和设置GitHub账户\"></a>1. <strong>注册和设置GitHub账户</strong></h3><ul>\n<li><strong>注册GitHub</strong>：如果你还没有GitHub账户，需要先注册一个。</li>\n<li><strong>设置个人信息</strong>：完善你的个人资料，包括头像、简介等，这将展示在你的博客页面上。</li>\n</ul>\n<h3 id=\"2-选择博客框架-工具\"><a href=\"#2-选择博客框架-工具\" class=\"headerlink\" title=\"2. 选择博客框架&#x2F;工具\"></a>2. <strong>选择博客框架&#x2F;工具</strong></h3><ul>\n<li><strong>静态网站生成器</strong>：如Jekyll（Ruby）、Hugo（Go）、Hexo（Node.js）等，它们可以从Markdown文件生成静态HTML页面。</li>\n<li><strong>主题选择</strong>：选择一个你喜欢的主题，很多框架都有现成的主题库可以选择，也可以自定义。</li>\n</ul>\n<h3 id=\"3-安装和配置博客框架\"><a href=\"#3-安装和配置博客框架\" class=\"headerlink\" title=\"3. 安装和配置博客框架\"></a>3. <strong>安装和配置博客框架</strong></h3><ul>\n<li><strong>安装必要的软件</strong>：根据你选择的框架，安装相应的软件（如Ruby、Node.js等）。</li>\n<li><strong>初始化博客</strong>：按照框架的官方文档，通过命令行工具初始化一个新的博客项目。</li>\n<li><strong>配置_config.yml</strong>（以Jekyll为例）：修改配置文件，设置博客的基本信息，如标题、作者、社交链接等。</li>\n</ul>\n<h3 id=\"4-创建和编辑内容\"><a href=\"#4-创建和编辑内容\" class=\"headerlink\" title=\"4. 创建和编辑内容\"></a>4. <strong>创建和编辑内容</strong></h3><ul>\n<li><strong>Markdown文件</strong>：使用Markdown编写你的文章，存放在指定的文件夹中（通常是<code>_posts</code>）。</li>\n<li><strong>添加页面</strong>：根据需要添加其他页面，如关于我、作品集等，也是使用Markdown编写。</li>\n</ul>\n<h3 id=\"5-本地预览\"><a href=\"#5-本地预览\" class=\"headerlink\" title=\"5. 本地预览\"></a>5. <strong>本地预览</strong></h3><ul>\n<li><strong>运行博客</strong>：在本地运行博客，预览效果。大多数框架都提供了命令行工具来启动一个本地服务器。</li>\n<li><strong>调试和修改</strong>：根据预览效果，调整文章内容和样式。</li>\n</ul>\n<h3 id=\"6-部署到GitHub-Pages\"><a href=\"#6-部署到GitHub-Pages\" class=\"headerlink\" title=\"6. 部署到GitHub Pages\"></a>6. <strong>部署到GitHub Pages</strong></h3><ul>\n<li><strong>创建仓库</strong>：在GitHub上创建一个新的仓库，命名为<code>username.github.io</code>（<code>username</code>是你的GitHub用户名），这是GitHub Pages的默认域名。</li>\n<li><strong>推送代码</strong>：将你的博客代码推送到这个仓库。</li>\n<li><strong>启用GitHub Pages</strong>：在仓库的设置中，找到“Pages”部分，选择“main”或“gh-pages”分支（取决于你的配置），然后保存设置。</li>\n<li><strong>自定义域名</strong>（可选）：如果你想使用自己的域名，可以在Pages设置中添加CNAME记录，并在域名提供商处配置A记录指向GitHub Pages的IP地址。</li>\n</ul>\n<h3 id=\"7-优化和维护\"><a href=\"#7-优化和维护\" class=\"headerlink\" title=\"7. 优化和维护\"></a>7. <strong>优化和维护</strong></h3><ul>\n<li><strong>SEO优化</strong>：添加meta标签，使用SEO友好的URL结构，确保内容易于被搜索引擎索引。</li>\n<li><strong>更新内容</strong>：定期发布新文章，保持博客活跃。</li>\n<li><strong>备份</strong>：定期备份你的博客代码和文章，以防万一。</li>\n<li><strong>安全性</strong>：注意GitHub仓库的安全设置，避免敏感信息泄露。</li>\n</ul>\n<h3 id=\"8-推广和互动\"><a href=\"#8-推广和互动\" class=\"headerlink\" title=\"8. 推广和互动\"></a>8. <strong>推广和互动</strong></h3><ul>\n<li><strong>社交媒体</strong>：通过社交媒体分享你的文章，增加曝光度。</li>\n<li><strong>读者互动</strong>：添加评论系统（如Disqus、Utterances），鼓励读者留言反馈。</li>\n<li><strong>加入社区</strong>：参与技术社区，与其他博主交流，互相学习。</li>\n</ul>\n<p>完成以上步骤后，你就拥有了一个基于GitHub的个人博客网站。记得持续学习和探索，不断优化你的博客，让它成为你展示才华和分享知识的平台。</p>\n<p>没问题，即使你对编程不太熟悉，我们仍然可以一步一步地搭建你的个人博客。既然你已经完成了GitHub账户的注册和设置，接下来我们将选择并配置一个适合初学者的博客框架。</p>\n<h2 id=\"第二步：选择博客框架-工具\"><a href=\"#第二步：选择博客框架-工具\" class=\"headerlink\" title=\"第二步：选择博客框架&#x2F;工具\"></a>第二步：选择博客框架&#x2F;工具</h2><p>对于初学者来说，我推荐使用<strong>Hexo</strong>或<strong>Hugo</strong>这样的静态网站生成器，因为它们相对简单且易于上手，尤其是Hexo，它使用Markdown编写内容，非常适合不熟悉编程的人。</p>\n<h4 id=\"选择Hexo的原因：\"><a href=\"#选择Hexo的原因：\" class=\"headerlink\" title=\"选择Hexo的原因：\"></a>选择Hexo的原因：</h4><ul>\n<li><strong>Markdown支持</strong>：你可以使用Markdown语法来编写文章，这是一种轻量级标记语言，易于学习和使用。</li>\n<li><strong>主题丰富</strong>：Hexo有大量的第三方主题可供选择，你可以很容易地找到一个你喜欢的样式。</li>\n<li><strong>插件支持</strong>：Hexo有丰富的插件生态系统，可以扩展博客的功能，比如添加评论系统、SEO优化等。</li>\n<li><strong>部署简单</strong>：Hexo可以轻松地将你的博客部署到GitHub Pages上。</li>\n</ul>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><ol>\n<li><p><strong>安装Node.js和npm</strong>：</p>\n<ul>\n<li>首先，你需要安装Node.js，这是Hexo运行的基础。你可以从Node.js的官方网站（<a href=\"https://nodejs.org/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%E9%80%82%E5%90%88%E4%BD%A0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82\">https://nodejs.org/）下载并安装适合你操作系统的版本。</a></li>\n<li>安装Node.js时，npm（Node Package Manager）会一并安装。</li>\n</ul>\n</li>\n<li><p><strong>全局安装Hexo</strong>：</p>\n<ul>\n<li>打开你的命令行工具（在Windows上是CMD或PowerShell，在macOS或Linux上是Terminal）。</li>\n<li>输入以下命令来全局安装Hexo：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n<li>这将安装Hexo的命令行工具，允许你通过命令行来创建和管理Hexo博客。</li>\n</ul>\n</li>\n<li><p><strong>初始化Hexo博客</strong>：</p>\n<ul>\n<li>选择一个你想要存放博客代码的文件夹，并导航到该文件夹。</li>\n<li>输入以下命令来初始化一个新的Hexo博客：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure></li>\n<li>这将创建一个名为<code>myblog</code>的新文件夹，里面包含了Hexo博客的基本结构和默认主题。</li>\n<li>进入<code>myblog</code>文件夹：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> myblog</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>安装依赖</strong>：</p>\n<ul>\n<li>在<code>myblog</code>文件夹内，运行以下命令来安装博客所需的依赖项：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>启动本地服务器</strong>：</p>\n<ul>\n<li>输入以下命令来启动Hexo的本地服务器，并预览你的博客：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li>默认情况下，服务器会在<code>http://localhost:4000</code>上运行。你可以在浏览器中打开这个地址来查看你的博客。</li>\n</ul>\n</li>\n<li><p><strong>创建和编辑文章</strong>：</p>\n<ul>\n<li>在<code>myblog/source/_posts</code>文件夹中，你可以创建新的Markdown文件来编写文章。</li>\n<li>Hexo会自动将这些Markdown文件转换为HTML页面，并在你启动本地服务器时显示。</li>\n</ul>\n</li>\n<li><p><strong>生成静态文件</strong>：</p>\n<ul>\n<li>当你准备好将博客部署到GitHub Pages时，你可以使用以下命令来生成静态HTML文件：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></li>\n<li>这将在<code>myblog/public</code>文件夹中生成静态文件。</li>\n</ul>\n</li>\n<li><p><strong>部署到GitHub Pages</strong>（我们将在后续步骤中详细讨论）。</p>\n</li>\n</ol>\n<p>现在你已经成功安装了Hexo，并创建了一个基本的博客。</p>\n<h2 id=\"第三步：创建和编辑内容\"><a href=\"#第三步：创建和编辑内容\" class=\"headerlink\" title=\"第三步：创建和编辑内容\"></a>第三步：创建和编辑内容</h2><h4 id=\"1-了解Hexo的文件结构\"><a href=\"#1-了解Hexo的文件结构\" class=\"headerlink\" title=\"1. 了解Hexo的文件结构\"></a>1. <strong>了解Hexo的文件结构</strong></h4><p>在你之前初始化的Hexo博客文件夹（比如<code>myblog</code>）中，有几个重要的文件夹和文件：</p>\n<ul>\n<li><code>source/</code>：存放你的原始内容，包括Markdown文章、图片等。</li>\n<li><code>source/_posts/</code>：存放你的文章，每个文章都是一个<code>.md</code>文件。</li>\n<li><code>themes/</code>：存放你选择的Hexo主题。</li>\n<li><code>_config.yml</code>：Hexo博客的全局配置文件。</li>\n</ul>\n<h4 id=\"2-编写新文章\"><a href=\"#2-编写新文章\" class=\"headerlink\" title=\"2. 编写新文章\"></a>2. <strong>编写新文章</strong></h4><ol>\n<li><p><strong>创建Markdown文件</strong>：</p>\n<ul>\n<li>进入<code>source/_posts/</code>文件夹。</li>\n<li>创建一个新的Markdown文件，文件名通常遵循<code>YYYY-MM-DD-title.md</code>的格式，其中<code>YYYY</code>是年份，<code>MM</code>是月份，<code>DD</code>是日期，<code>title</code>是你的文章标题（用英文短横线<code>-</code>分隔单词）。</li>\n</ul>\n</li>\n<li><p><strong>编写文章头部信息</strong>（Front-matter）：</p>\n<ul>\n<li>在Markdown文件的顶部，添加如下信息（用三个短横线<code>---</code>包围）：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">你的文章标题</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"string\">YYYY-MM-DD</span> <span class=\"string\">HH:MM:SS</span> <span class=\"comment\"># 发布日期和时间</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"comment\"># 文章的分类</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">分类1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">分类2</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"comment\"># 文章的标签</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">标签1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">标签2</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure></li>\n<li>替换<code>你的文章标题</code>、<code>YYYY-MM-DD HH:MM:SS</code>、<code>分类1</code>、<code>分类2</code>、<code>标签1</code>和<code>标签2</code>为实际的内容。</li>\n</ul>\n</li>\n<li><p><strong>编写文章内容</strong>：</p>\n<ul>\n<li>在Front-matter之后，你可以开始编写你的文章内容了。使用Markdown语法来格式化文本，比如标题、段落、列表、图片、链接等。</li>\n</ul>\n</li>\n<li><p><strong>保存文件</strong>：</p>\n<ul>\n<li>完成文章编写后，保存Markdown文件。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-预览文章\"><a href=\"#3-预览文章\" class=\"headerlink\" title=\"3. 预览文章\"></a>3. <strong>预览文章</strong></h4><ul>\n<li>回到你的命令行工具，确保Hexo的本地服务器还在运行（如果关闭了，重新运行<code>hexo server</code>）。</li>\n<li>在浏览器中打开<code>http://localhost:4000</code>，你应该能看到你的新文章已经出现在博客上了。</li>\n</ul>\n<h4 id=\"4-编辑现有文章\"><a href=\"#4-编辑现有文章\" class=\"headerlink\" title=\"4. 编辑现有文章\"></a>4. <strong>编辑现有文章</strong></h4><ul>\n<li>如果需要编辑现有的文章，只需在<code>source/_posts/</code>文件夹中找到对应的Markdown文件，进行修改，然后保存。</li>\n<li>Hexo会自动检测文件的更改，并刷新本地服务器上的预览。</li>\n</ul>\n<h4 id=\"5-添加其他页面\"><a href=\"#5-添加其他页面\" class=\"headerlink\" title=\"5. 添加其他页面\"></a>5. <strong>添加其他页面</strong></h4><ul>\n<li>除了文章之外，你还可以添加其他页面，比如关于我、作品集等。</li>\n<li>创建一个新的Markdown文件，放在<code>source/</code>文件夹中（而不是<code>_posts/</code>），然后按照文章的方式编写头部信息和内容。</li>\n<li>在Hexo的主题配置文件中，你可能需要添加一些路由规则来确保这些页面能够正确显示。</li>\n</ul>\n<p>现在你已经知道如何创建和编辑Hexo博客的内容了。</p>\n<h2 id=\"第四步：本地预览和调试\"><a href=\"#第四步：本地预览和调试\" class=\"headerlink\" title=\"第四步：本地预览和调试\"></a>第四步：本地预览和调试</h2><h4 id=\"1-启动Hexo本地服务器\"><a href=\"#1-启动Hexo本地服务器\" class=\"headerlink\" title=\"1. 启动Hexo本地服务器\"></a>1. <strong>启动Hexo本地服务器</strong></h4><p>确保你的Hexo博客项目文件夹（比如<code>myblog</code>）是打开的，然后在命令行工具中导航到该文件夹。运行以下命令来启动Hexo的本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>或者，如果你安装了<code>hexo-cli</code>并且想要从任何位置启动服务器，你可以使用全局命令（但需要先导航到博客项目文件夹的父目录，然后使用相对路径或绝对路径指定博客文件夹）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server -d myblog</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>myblog</code>是你的博客项目文件夹的名称。</p>\n<h4 id=\"2-在浏览器中预览\"><a href=\"#2-在浏览器中预览\" class=\"headerlink\" title=\"2. 在浏览器中预览\"></a>2. <strong>在浏览器中预览</strong></h4><p>默认情况下，Hexo的本地服务器会在<code>http://localhost:4000</code>上运行。打开你的网页浏览器，输入这个地址，你应该能看到你的博客的本地预览。</p>\n<h4 id=\"3-浏览和导航\"><a href=\"#3-浏览和导航\" class=\"headerlink\" title=\"3. 浏览和导航\"></a>3. <strong>浏览和导航</strong></h4><ul>\n<li>点击博客上的链接，确保导航正常。</li>\n<li>检查文章的布局和样式，确保它们符合你的期望。</li>\n<li>如果你的博客有侧边栏、页脚等组件，也请确保它们显示正确。</li>\n</ul>\n<h4 id=\"4-调试和修改\"><a href=\"#4-调试和修改\" class=\"headerlink\" title=\"4. 调试和修改\"></a>4. <strong>调试和修改</strong></h4><ul>\n<li>如果发现任何问题（比如布局错乱、链接失效等），回到你的Markdown文件或主题配置文件中进行修改。</li>\n<li>修改后，保存文件，然后刷新浏览器页面，查看更改是否生效。</li>\n<li>重复这个过程，直到你对博客的预览满意为止。</li>\n</ul>\n<h4 id=\"5-使用Hexo的内置命令\"><a href=\"#5-使用Hexo的内置命令\" class=\"headerlink\" title=\"5. 使用Hexo的内置命令\"></a>5. <strong>使用Hexo的内置命令</strong></h4><ul>\n<li>在调试过程中，你可能会频繁地生成静态文件和重启服务器。Hexo提供了一些方便的命令来简化这些操作：<ul>\n<li><code>hexo clean</code>：删除生成的静态文件（在<code>public</code>文件夹中）。</li>\n<li><code>hexo generate</code>（或简写为<code>hexo g</code>）：生成静态文件。</li>\n<li><code>hexo server</code>（或简写为<code>hexo s</code>）：启动本地服务器。</li>\n<li>你可以组合这些命令来简化工作流程，比如<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-检查响应式设计\"><a href=\"#6-检查响应式设计\" class=\"headerlink\" title=\"6. 检查响应式设计\"></a>6. <strong>检查响应式设计</strong></h4><ul>\n<li>如果你的博客主题支持响应式设计（即在不同设备上都能良好显示），请在不同的屏幕尺寸和浏览器上测试你的博客。</li>\n<li>确保在移动设备上也能方便地浏览和导航。</li>\n</ul>\n<p>现在你已经知道如何在本地预览和调试你的Hexo博客了。</p>\n<h2 id=\"第五步：自定义博客主题和设置\"><a href=\"#第五步：自定义博客主题和设置\" class=\"headerlink\" title=\"第五步：自定义博客主题和设置\"></a>第五步：自定义博客主题和设置</h2><h4 id=\"1-选择并安装主题\"><a href=\"#1-选择并安装主题\" class=\"headerlink\" title=\"1. 选择并安装主题\"></a>1. <strong>选择并安装主题</strong></h4><p>Hexo拥有丰富的第三方主题，你可以根据自己的喜好选择一个。以下是如何安装一个主题的步骤：</p>\n<ol>\n<li><p><strong>浏览Hexo主题</strong>：</p>\n<ul>\n<li>你可以访问Hexo的官方文档或GitHub上的Hexo主题仓库来浏览可用的主题。</li>\n<li>选择一个你感兴趣的主题，并查看其文档以了解如何安装和配置。</li>\n</ul>\n</li>\n<li><p><strong>下载或克隆主题</strong>：</p>\n<ul>\n<li>根据主题的文档，你可能需要下载主题的ZIP文件，或者通过Git克隆主题的仓库到你的本地计算机。</li>\n</ul>\n</li>\n<li><p><strong>将主题放入Hexo项目</strong>：</p>\n<ul>\n<li>将下载或克隆的主题文件夹放入你的Hexo项目中的<code>themes/</code>文件夹内。</li>\n</ul>\n</li>\n<li><p><strong>更新配置文件</strong>：</p>\n<ul>\n<li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li>\n<li>找到<code>theme</code>字段，并将其值设置为你刚刚安装的主题的文件夹名。</li>\n</ul>\n</li>\n</ol>\n<p>例如，如果你安装了一个名为<code>landscape</code>的主题，你的<code>_config.yml</code>文件中的<code>theme</code>字段应该像这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">landscape</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>生成和预览</strong>：<ul>\n<li>运行<code>hexo generate</code>（或简写为<code>hexo g</code>）来生成静态文件。</li>\n<li>运行<code>hexo server</code>（或简写为<code>hexo s</code>）来启动本地服务器并预览你的博客。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-自定义主题设置\"><a href=\"#2-自定义主题设置\" class=\"headerlink\" title=\"2. 自定义主题设置\"></a>2. <strong>自定义主题设置</strong></h4><p>大多数Hexo主题都允许你通过修改主题的配置文件来自定义博客的外观和行为。以下是如何自定义主题设置的步骤：</p>\n<ol>\n<li><p><strong>找到主题配置文件</strong>：</p>\n<ul>\n<li>在你安装的主题文件夹内，通常会有一个名为<code>_config.yml</code>的文件（有时可能是其他名称，比如<code>config.yml</code>，具体取决于主题）。</li>\n</ul>\n</li>\n<li><p><strong>编辑主题配置文件</strong>：</p>\n<ul>\n<li>使用文本编辑器打开主题配置文件。</li>\n<li>根据文件中的注释和说明，修改你感兴趣的设置。</li>\n</ul>\n</li>\n</ol>\n<p>例如，你可能想要修改以下设置：</p>\n<ul>\n<li>网站标题和副标题</li>\n<li>菜单项和导航栏</li>\n<li>侧边栏和小工具</li>\n<li>文章布局和样式</li>\n<li>社交媒体链接和分享按钮</li>\n</ul>\n<ol start=\"3\">\n<li><p><strong>生成和预览更改</strong>：</p>\n<ul>\n<li>每次修改主题配置文件后，都需要运行<code>hexo generate</code>来生成静态文件。</li>\n<li>然后运行<code>hexo server</code>来预览更改。</li>\n</ul>\n</li>\n<li><p><strong>高级自定义</strong>：</p>\n<ul>\n<li>如果你想要进行更高级的自定义（比如修改CSS样式或JavaScript脚本），你可能需要编辑主题文件夹中的其他文件。</li>\n<li>在进行这些更改时，请务必备份原始文件，以便在需要时恢复。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-测试和调试\"><a href=\"#3-测试和调试\" class=\"headerlink\" title=\"3. 测试和调试\"></a>3. <strong>测试和调试</strong></h4><ul>\n<li>在进行自定义时，不断测试你的博客以确保所有功能都按预期工作。</li>\n<li>检查不同设备和浏览器上的显示效果。</li>\n<li>如果遇到问题，请查阅主题的文档或寻求社区的帮助。</li>\n</ul>\n<p>现在你已经知道如何自定义Hexo博客的主题和设置了。</p>\n<h2 id=\"第六步：将博客部署到GitHub-Pages\"><a href=\"#第六步：将博客部署到GitHub-Pages\" class=\"headerlink\" title=\"第六步：将博客部署到GitHub Pages\"></a>第六步：将博客部署到GitHub Pages</h2><h4 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1. 创建GitHub仓库\"></a>1. <strong>创建GitHub仓库</strong></h4><ol>\n<li><p><strong>登录GitHub</strong>：</p>\n<ul>\n<li>使用你的GitHub账户登录到GitHub网站。</li>\n</ul>\n</li>\n<li><p><strong>创建新仓库</strong>：</p>\n<ul>\n<li>点击右上角的加号（+）图标，然后选择“New repository”（新建仓库）。</li>\n<li>为你的仓库命名，通常使用<code>username.github.io</code>的格式，其中<code>username</code>是你的GitHub用户名。这样命名的仓库会自动启用GitHub Pages。</li>\n<li>设置仓库为“Public”（公开），因为GitHub Pages不支持私有仓库。</li>\n<li>初始化仓库时可以选择添加一个README文件，但这对于Hexo部署不是必需的。</li>\n<li>点击“Create repository”（创建仓库）按钮。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-配置Hexo以部署到GitHub-Pages\"><a href=\"#2-配置Hexo以部署到GitHub-Pages\" class=\"headerlink\" title=\"2. 配置Hexo以部署到GitHub Pages\"></a>2. <strong>配置Hexo以部署到GitHub Pages</strong></h4><ol>\n<li><p><strong>安装<code>hexo-deployer-git</code>插件</strong>：</p>\n<ul>\n<li>在你的Hexo项目文件夹中，运行以下命令来安装<code>hexo-deployer-git</code>插件，这个插件允许你将Hexo生成的静态文件部署到Git仓库中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save-dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>配置部署设置</strong>：</p>\n<ul>\n<li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li>\n<li>在文件底部添加以下部署（deploy）配置：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&lt;your-repository-url&gt;</span> <span class=\"comment\"># 替换为你的GitHub仓库的HTTPS URL</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span> <span class=\"comment\"># 或者你希望部署到的分支名，通常是main或gh-pages</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">&quot;Site updated: <span class=\"template-variable\">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span> <span class=\"comment\"># 提交时的消息模板</span></span><br></pre></td></tr></table></figure></li>\n<li>将<code>&lt;your-repository-url&gt;</code>替换为你的GitHub仓库的完整HTTPS URL，例如<code>https://github.com/username/username.github.io.git</code>。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-生成静态文件并部署\"><a href=\"#3-生成静态文件并部署\" class=\"headerlink\" title=\"3. 生成静态文件并部署\"></a>3. <strong>生成静态文件并部署</strong></h4><ol>\n<li><p><strong>生成静态文件</strong>：</p>\n<ul>\n<li>在你的Hexo项目文件夹中，运行以下命令来生成静态文件。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure></li>\n<li>或者使用简写命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>部署到GitHub Pages</strong>：</p>\n<ul>\n<li>运行以下命令来将生成的静态文件部署到你的GitHub仓库中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></li>\n<li>首次部署时，你可能需要输入你的GitHub用户名和密码（或者使用GitHub提供的个人访问令牌）。</li>\n</ul>\n</li>\n<li><p><strong>验证部署</strong>：</p>\n<ul>\n<li>打开你的浏览器，输入你的GitHub Pages网址（通常是<code>https://username.github.io</code>，其中<code>username</code>是你的GitHub用户名）。</li>\n<li>你应该能看到你的Hexo博客已经成功部署到GitHub Pages上了。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"4-更新博客\"><a href=\"#4-更新博客\" class=\"headerlink\" title=\"4. 更新博客\"></a>4. <strong>更新博客</strong></h4><ul>\n<li>每次你更新博客内容时，只需重复生成静态文件和部署的步骤。</li>\n<li>你可以将这两个步骤合并为一个命令，通过添加<code>--deploy</code>选项到<code>hexo generate</code>命令中来实现：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g --deploy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者使用简写命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo gd</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>现在你已经知道如何将Hexo博客部署到GitHub Pages上了。</p>\n<h2 id=\"第七步：维护和更新你的博客\"><a href=\"#第七步：维护和更新你的博客\" class=\"headerlink\" title=\"第七步：维护和更新你的博客\"></a>第七步：维护和更新你的博客</h2><h4 id=\"1-定期更新内容\"><a href=\"#1-定期更新内容\" class=\"headerlink\" title=\"1. 定期更新内容\"></a>1. <strong>定期更新内容</strong></h4><ul>\n<li><strong>撰写新文章</strong>：使用Markdown编写新的博客文章，并保存在Hexo项目的<code>source/_posts/</code>目录下。</li>\n<li><strong>发布文章</strong>：每次撰写完新文章后，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件，然后运行<code>hexo deploy</code>将更新推送到GitHub Pages。你也可以使用<code>hexo g --deploy</code>（或<code>hexo gd</code>）一次性完成这两个步骤。</li>\n<li><strong>管理旧文章</strong>：定期回顾和更新你的旧文章，确保它们的信息是最新的，并且没有过时或错误的链接。</li>\n</ul>\n<h4 id=\"2-监控和分析\"><a href=\"#2-监控和分析\" class=\"headerlink\" title=\"2. 监控和分析\"></a>2. <strong>监控和分析</strong></h4><ul>\n<li><strong>使用Google Analytics（谷歌分析）</strong>：在Google Analytics中注册一个账户，并将提供的跟踪代码添加到你的Hexo博客的HTML模板中，以便监控博客的流量和访问者行为。</li>\n<li><strong>检查错误和性能</strong>：定期检查你的博客是否有任何错误（如404页面、断开的链接等），并使用工具（如Google PageSpeed Insights）来优化博客的性能。</li>\n</ul>\n<h4 id=\"3-备份和恢复\"><a href=\"#3-备份和恢复\" class=\"headerlink\" title=\"3. 备份和恢复\"></a>3. <strong>备份和恢复</strong></h4><ul>\n<li><strong>定期备份</strong>：定期将你的Hexo项目文件夹和GitHub仓库的内容备份到安全的位置，以防数据丢失。</li>\n<li><strong>恢复数据</strong>：如果出现问题，你可以使用备份的数据来恢复你的博客。</li>\n</ul>\n<h4 id=\"4-保持主题和插件更新\"><a href=\"#4-保持主题和插件更新\" class=\"headerlink\" title=\"4. 保持主题和插件更新\"></a>4. <strong>保持主题和插件更新</strong></h4><ul>\n<li><strong>更新Hexo</strong>：定期检查Hexo的更新，并运行<code>npm update -g hexo</code>来更新到最新版本。</li>\n<li><strong>更新主题和插件</strong>：同样地，定期检查你使用的主题和插件是否有更新，并按照它们的文档进行更新。</li>\n</ul>\n<h4 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. <strong>安全性</strong></h4><ul>\n<li><strong>保护你的GitHub账户</strong>：确保你的GitHub账户使用了强密码，并启用了双重身份验证。</li>\n<li><strong>避免敏感信息</strong>：不要在博客中发布任何敏感信息，如密码、密钥或私人电子邮件地址。</li>\n</ul>\n<h4 id=\"6-与读者互动\"><a href=\"#6-与读者互动\" class=\"headerlink\" title=\"6. 与读者互动\"></a>6. <strong>与读者互动</strong></h4><ul>\n<li><strong>添加评论系统</strong>：考虑在你的博客中添加一个评论系统，如Disqus或Gitalk，以便与读者互动。</li>\n<li><strong>回复评论和问题</strong>：定期查看并回复读者的评论和问题，以建立和维护与读者的关系。</li>\n</ul>\n<h4 id=\"7-优化SEO\"><a href=\"#7-优化SEO\" class=\"headerlink\" title=\"7. 优化SEO\"></a>7. <strong>优化SEO</strong></h4><ul>\n<li><strong>使用关键词</strong>：在撰写文章时，使用相关的关键词，并在标题、元描述和正文中适当地放置它们。</li>\n<li><strong>创建内部链接</strong>：在你的文章之间创建内部链接，以便读者可以轻松地找到相关的内容。</li>\n<li><strong>优化图片</strong>：为图片添加描述性的文件名和alt属性，并使用适当的压缩来优化它们的加载速度。</li>\n</ul>\n<p>现在你已经知道如何维护和更新你的Hexo博客了。</p>\n<h2 id=\"安装Gitalk\"><a href=\"#安装Gitalk\" class=\"headerlink\" title=\"安装Gitalk\"></a>安装Gitalk</h2><ol>\n<li><p><strong>注册Gitalk</strong></p>\n<ul>\n<li>访问<a href=\"https://gitalk.github.io/\">Gitalk官网</a>，点击“开始使用”按钮，跳转到Github页面。</li>\n<li>在Github页面，点击“使用说明”中的“Click here to register”进行注册。</li>\n<li>填写相关信息，包括应用名称（Application name）、主页地址（Homepage URL，一般填写域名地址或名称.github.io）、项目描述（Application description，非必需）和认证回调地址（Authorization callback URL，一般填写域名地址或名称.github.io）。</li>\n<li>完成注册后，可以修改并更新信息，包括上传新头像和设置背景色。</li>\n</ul>\n</li>\n<li><p><strong>创建Github Application</strong></p>\n<ul>\n<li>登录Github，点击右上角头像，依次进入“Settings”-&gt;“Developer settings”-&gt;“OAuth Apps”-&gt;“New OAuth App”进行基本配置。</li>\n<li>填写应用名称、主页URL、回调URL等信息，并生成Client ID和Client Secret。</li>\n</ul>\n</li>\n<li><p><strong>配置Hexo博客</strong></p>\n<ul>\n<li>进入Hexo博客的主题配置文件（_config.yml），添加Gitalk配置。</li>\n<li>配置项包括：<ul>\n<li><code>enable</code>: 是否启用Gitalk，设置为true。</li>\n<li><code>github_id</code>: Github仓库所有者。</li>\n<li><code>repo</code>: 存储评论的仓库名称。</li>\n<li><code>client_id</code>: Github Application的Client ID。</li>\n<li><code>client_secret</code>: Github Application的Client Secret。</li>\n<li><code>admin_user</code>: Github仓库所有者和协作者，只有他们可以初始化Github issues。</li>\n<li><code>distraction_free_mode</code>: 是否启用无干扰模式，类似于Facebook。</li>\n<li><code>language</code>: 语言设置，如中文设置为zh-CN。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、使用Gitalk\"><a href=\"#二、使用Gitalk\" class=\"headerlink\" title=\"二、使用Gitalk\"></a>二、使用Gitalk</h3><ol>\n<li><p><strong>在Hexo主题中添加Gitalk容器</strong></p>\n<ul>\n<li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>-&gt;<code>post</code>目录。</li>\n<li>在当前目录下新建一个<code>gitalk.ejs</code>文件，并写入以下代码：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">new</span> <span class=\"title class_\">Gitalk</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">clientID</span>: <span class=\"string\">&#x27;你的Client ID&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;你的Client Secret&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">repo</span>: <span class=\"string\">&#x27;你的仓库名称&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">owner</span>: <span class=\"string\">&#x27;你的Github用户名&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">admin</span>: [<span class=\"string\">&#x27;你的Github用户名&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">id</span>: <span class=\"title function_\">md5</span>(location.<span class=\"property\">pathname</span>), <span class=\"comment\">// 使用md5确保唯一性和长度限制</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">distractionFreeMode</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;).<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;gitalk-container&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意替换代码中的<code>clientID</code>、<code>clientSecret</code>、<code>repo</code>、<code>owner</code>和<code>admin</code>为实际值。</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>在文章模板中添加Gitalk容器引用</strong></p>\n<ul>\n<li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>目录，找到<code>article.ejs</code>文件。</li>\n<li>在<code>article.ejs</code>文件的最后面加入以下代码：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gitalk-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  &lt;%- include post/gitalk.ejs %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p><strong>生成并部署Hexo博客</strong></p>\n<ul>\n<li>在Hexo博客的根目录下，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件。</li>\n<li>运行<code>hexo deploy</code>将更新推送到Github Pages。</li>\n</ul>\n</li>\n<li><p><strong>初始化评论</strong></p>\n<ul>\n<li>访问你的Hexo博客文章页面，登录Github后尝试发表评论。</li>\n<li>评论将作为issues存储在指定的Github仓库中，并可以在仓库的issues页面进行管理。</li>\n</ul>\n</li>\n</ol>\n<p>通过以上步骤，你就可以在Hexo博客中成功安装和使用Gitalk评论系统了。记得定期检查和更新你的Gitalk配置和Github仓库，以确保评论系统的正常运行。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm2odwimm00011kud385l5ic3","category_id":"cm2oe5xwd00021kud65q25xoh","_id":"cm2oe5xwg00091kuda7zi1hv5"},{"post_id":"cm2oeyaba001f1kud4g55ciq2","category_id":"cm2of06e0001l1kud4k4x1nmh","_id":"cm2of06e0001m1kudgrhi4upw"},{"post_id":"cm2ohxaha0000z8ud2xrhgwrp","category_id":"cm2oe5xwd00021kud65q25xoh","_id":"cm2ohxahh0002z8udg4lt8isf"}],"PostTag":[{"post_id":"cm2odwimm00011kud385l5ic3","tag_id":"cm2oec01i00141kud0f7tavkd","_id":"cm2oec01i00151kudexg1dhxp"},{"post_id":"cm2odwimm00011kud385l5ic3","tag_id":"cm2oe5xwf00041kudbi7u7x3q","_id":"cm2oec01i00161kudbye97syu"},{"post_id":"cm2oeyaba001f1kud4g55ciq2","tag_id":"cm2oezz5t001j1kudci1x30w4","_id":"cm2oezz5t001k1kudc7k145o1"},{"post_id":"cm2ohxaha0000z8ud2xrhgwrp","tag_id":"cm2ohxahg0001z8udde24d18t","_id":"cm2ohxahi0003z8udapvv9i31"}],"Tag":[{"name":"标签1","_id":"cm2oe5xwe00031kudcs6w6mun"},{"name":"编程","_id":"cm2oe5xwf00041kudbi7u7x3q"},{"name":"python","_id":"cm2oec01i00141kud0f7tavkd"},{"name":"投资","_id":"cm2oezz5t001j1kudci1x30w4"},{"name":"教程","_id":"cm2ohxahg0001z8udde24d18t"}]}}