<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>债券投资简明解释</title>
    <link href="/2024/10/28/2024-10-28-%E5%80%BA%E5%88%B8/"/>
    <url>/2024/10/28/2024-10-28-%E5%80%BA%E5%88%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="债券投资简明解释">债券投资简明解释</h1><h2 id="债券类别">债券类别：</h2><ul><li>国债（低风险，低利率）</li><li>地方债（中风险，中低利率）</li><li>金融债（低风险，低利率）比如逆回购</li><li>企业债（高风险，高利率）</li></ul><h2 id="债券收益计算方式">债券收益计算方式：</h2><blockquote><p>例：某公司发行债券（一般是面值<strong>100元</strong>），<strong>5年</strong>到期，利率<strong>6%</strong>。我们花了1000元购买了10张。</p><p>那么我们持有5年的收益就是：1000 * 6% * 5 = 300元 ；加上本金我们就有了1300 元</p><p>另一种收益方式就是在二级市场买卖债券（跟买卖股票类似）</p><p>:star:这里详细说明一下在二级市场上的买卖价格，因为有的高有的低：</p><ul><li>如果<strong>银行利率</strong>降低到 3% ，100 * 3% * 5 =15元，算上本金收益为 115 元。 而我们买的是 6% 的利率的债券可以获得 100 *6% * 5 = 30元，算上本金收益为 130 元。 这种情况下，就会有人以高于 100元的价格购买债券，但是不会高于115元，因为130-115=15元，加上本金115元和银行利率一样了，所以人们愿意购买的价格一般为115元以下，比如 110元。仔细看就会发现这里面有15元的差异。</li><li>另一种情况就是，企业经营差，投资者担心公司破产问题，其债券价格就会低于初始面值100元，比如60元。这种情况下，如果你对企业资产负债表有更好的了解，觉得这个公司不会破产，那么你就会获得每张债券40元的额外收益：40+ 30 + 100 = 170 元，那么这5年的综合收益就会达到 70% 。</li></ul></blockquote><h2 id="债券风险和购买注意点">债券风险和购买注意点</h2><p>企业债券，如果企业破产，我们也会优先与普通股得到偿还，但一般是以折价的方式偿还我们的本金，简而言之就是我们亏损了。:zap:但也有完全无法偿还的情况。</p><ol type="1"><li>期限</li><li>收益率</li><li>购买价格</li><li>风险评级（实际上就是看兑付利息是否守信），这个一般会有机构给出评级</li><li>担保事项，注意企业债券是否有担保人，有担保人的企业债相对于没有担保人的风险要小一点点。</li></ol>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原理</tag>
      
      <tag>投资</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>价值评估读书笔记</title>
    <link href="/2024/10/26/2024-10-26-%E4%BB%B7%E5%80%BC%E8%AF%84%E4%BC%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/26/2024-10-26-%E4%BB%B7%E5%80%BC%E8%AF%84%E4%BC%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1id="价值评估公司价值的衡量与管理">价值评估：公司价值的衡量与管理</h1><hr /><p>这本书是基于普通的经济学原理写成的。</p><h2 id="经济学原理">经济学原理：</h2><ul><li>人们面临权衡取舍</li><li>某种东西的成本是为了得到它所放弃的东西的价值——机会成本</li><li>理性人考虑边际量——决策者会在边际效益大于边际成本时采取行动</li><li>人们会对激励做出反应</li><li>贸易使每个人的状况变得更好</li><li>市场是组织经济活动一种好方法</li><li>政府有时可以改善市场结果</li><li>一国的生活水平取决于该国的生产率</li><li>超发货币会引起通货膨胀</li><li>社会面临通货膨胀和失业之间的权衡取舍</li></ul><p>:star:<strong>这本书的观点</strong>：公司只要能为股东创造真正的经济价值，就能兴盛。公司是通过资本投资并取得高出资本成本的回报来创造价值的。</p><p>核心原理?</p><ul><li>:star:<strong>公司通过进行资本回报率高于资本成本的投资创造价值</strong></li><li><strong>在高回报率投资项目上投入的资本越多，公司创造的价值越大</strong></li><li><strong>资本回报超过资本成本，增长越快，创造的价值越大</strong></li></ul><p>公司是如何运用这些原理提高价值？</p><ul><li>通过绩效管理提升投入资本回报率和增长率</li><li>通过兼并、收购和剥离来创造价值</li><li>利用资本结构来支持价值创造</li><li>与投资者有效沟通以保证公司的股价反映其内在价值</li></ul><p>原理的实用途径有哪些？</p><p>本书源于麦肯锡顾问的一本手册。作者认为公司的管理者掌握价值评估技能是做好公司的先决条件，他们必须理解价值。作者希望通过本书帮助企业管理者更好的理解：</p><ul><li>如何根据对每项战略选择的价值估算，在可供选择的经营战略中做出决策</li><li>如何制定公司的业务组合战略。</li><li>评价主要的交易，包括收购、剥离和重组</li><li>改进公司的绩效管理体系</li><li>设计有效的资本结构</li></ul><h2 id="这本书的结构">这本书的结构：</h2><ul><li>第一篇，介绍了价值创造的基本原理——原理</li><li>第二篇，分步骤介绍了公司的价值评估的方法——方法</li><li>第三篇，将价值创造的原理应用于管理问题——应用</li><li>第四篇，介绍了较为复杂的估值问题和特殊案例——高级应用</li></ul><h2 id="第一篇-价值的基础原理">第一篇 价值的基础（原理）</h2><p>根据上面的介绍，我们看一看有哪些原理。</p><ul><li>由于股市热衷于关注短期盈利的心里，<strong>企业领导人面临公司短期绩效和长期健康之间的权衡取舍困境</strong></li><li>专业的投资者采用<strong>基本面分析</strong>和<strong>折现现金流模型（他们假设公司未来产生的现金流和利润决定了公司股票的价格）</strong>作为公司估值的计算标准</li><li>提到了本书的核心观点：企业为股东创造真实经济价值的过程中实现自身的茁壮成长</li><li>:star:<strong>公司通过进行资本回报率高于资本成本的投资创造价值</strong></li><li><strong>在高回报率投资项目上投入的资本越多，公司创造的价值越大</strong></li><li><strong>资本回报超过资本成本，增长越快，创造的价值越大</strong></li><li>DCF<strong>现金流折现方法</strong></li></ul><p>作者的观点：从长期看，股票市场确实是在追寻公司和经济的基本绩效。当企业、投资者和银行无视经济学原理时，市场就会偏离基本面。<strong>简而言之就是股价是跟随公司基本面的变动而变动的，时有偏离，但不会长久偏离。</strong></p><p>:bulb:1980——1999牛市背后的要素有三个：盈利的增长、利率及通货膨胀率的下降、大市值股票的出现。</p><p>总结：<strong>DCF等于经济利润的现值，ROIC和增长率驱动倍数。</strong><span class="math display">\[ROIC=\frac{净利润}{净资产+有息负债}\]</span></p><p>WACC加权平均资本成（利息和股息等）本计算公式：</p><ul><li>WACC：加权平均资本成本</li><li>K<sub>e</sub>：公司普通权益资本成本（普通股成本就是股息）</li><li>K<sub>d</sub>：公司债务资本成本（有息负债的利息）</li><li>W<sub>e</sub>：权益资本再资本结构中的占比（净资产占总资产的比例）</li><li>W<sub>d</sub>：负债占总资产的比例</li><li>T：所得税率</li></ul><p><span class="math display">\[WACC=(k_e*w_e)+(k_d*[1-t]*w_d)\]</span></p><h2 id="第二篇-核心估值技巧方法">第二篇 核心估值技巧（方法）</h2><p>本篇学习如何在实际操作中分析和评估一个公司的价值。所使用的方法是：<strong>企业折现现金流</strong>、<strong>折现经济利润</strong></p><p>:star:<ahref="../资产/公司分析（简化）终2021.xls">企业现金流折现模型</a>：<code>净利润+折旧+经营性现金净流量-资本支出-无形资产和商誉+其他营业性资产减少或增加-投资总额</code>这个只是一年的，估值的话需要计算不同的年份，比如5、7、10年等，计算这些年份时需要用到<strong>折现率（10%）</strong>，就是未来的钱现值是多少。一般我们用的是<code>10%</code>左右。然后再加总就是你估计企业未来多少年的现金流总和（也就是企业的价值），再除以总股本，就是大概的每股价值了，这是一个区间，并不是一个单一的数值。比如：<code>20---40</code>这个价值区间，股价低于最低的就是低估，高于最高的就是高估，中间的是合理的价值。</p><p>:star:<strong>经济利润估值模型</strong>：这个模型主要测算公司在单一期间所创造的价值。<strong>投入资本为总资产</strong>。也就是比较大公司与小公司的差距，因为光看增长率很容易陷入误区，100亿创造10%和10亿创造30%是有很大的差别。</p><p>公式为：<spanclass="math inline">\(经济利润=净利润-（投入资本*WACC）\)</span></p><p><strong>调整现值模型</strong>：这个模型把经营价值分成两部分：一部分是把公司的所有资本全部当做权益资本计算得出的经营价值，另一部分是由债务融资所形成的税盾的价值。<code>税盾：指可以产生避免或减少企业税负作用的工具或方法</code></p><p>公式为：<spanclass="math inline">\(调整现值=把公司所有资本全部当做权益资本计算得出的企业价值+税盾的现值\)</span></p><p><strong>资本现金流模型</strong>：当一家公司有目的地把负债比率保持在某个目标水平上时，自由现金流和利息税盾都以无负债的权益资本成本折现。其中：</p><ul><li>自由现金流：FCF</li><li>利息税盾：ITS</li><li>无负债的权益资本成本：k<sub>u</sub></li></ul><p>公式为：<span class="math inline">\(V=PV（资本现金流）=\sum_{t=1}^\propto \frac{FCF_t+ITS_T}{(1+k_u)^t}\)</span></p><p>后面还有权益现金流估值模型、基于折现现金流的其他方法等等，这些并不常用，最常用的就是企业现金流折现模型和经济利润估值模型。</p><p>总结：<strong>在所有的估值工具中，企业折现现金流是效果最好的方法，还有一种倍数分析法也应该留意。这种分析法是总资产和净利润的增长率，就是ROIC和ROE的增长率。</strong></p><h2 id="第三篇-实现价值应用">第三篇 实现价值（应用）</h2><p>这一章将从管理的角度来看待价值创造，探讨的主题有以下几个：</p><ul><li><p>通过绩效管理提升投入资本回报率和增长率</p><blockquote><p>收入增长率和投入资本回报率是衡量历史绩效最好的指标。</p><p>公司健康指标解释了财务结果是怎样实现的，并提供了对未来绩效的深入见解。.</p></blockquote><pre><code class=" mermaid">graph LR内在价值(内在价值)--&gt;长期增长(长期增长)内在价值(内在价值)--&gt;ROIC(ROIC)内在价值(内在价值)--&gt;资本成本(资本成本)长期增长(长期增长)--短期指标--&gt;销售生产率(销售生产率)ROIC(ROIC)--短期指标--&gt;经营成本生产率(经营成本生产率)ROIC(ROIC)--短期指标--&gt;资本生产率(资本生产率)销售生产率(销售生产率)--中期指标--&gt;商业健康(商业健康)经营成本生产率(经营成本生产率)--中期指标--&gt;成本结构健康(成本结构健康)资本生产率(资本生产率)--中期指标--&gt;资产健康(资产健康)商业健康(商业健康)--长期指标--&gt;核心业务&#123;核心业务和增长机会&#125;成本结构健康(成本结构健康)--长期指标--&gt;核心业务&#123;核心业务和增长机会&#125;资产健康(资产健康)--长期指标--&gt;核心业务&#123;核心业务和增长机会&#125;</code></pre><blockquote><p>:star:绩效管理：公司建立价值创造理念、澄清公司短期和长期价值驱动因素、制定员工相信并可以实现的挑战目标、实施基于事实绩效评估并有效激励员工。</p></blockquote></li><li><p>通过兼并、收购和剥离来创造价值</p><blockquote><p>通过并购创造价值：针对每个公司、协同效应和合并后的公司建立模型，直至得出<strong>自由现金流</strong>。</p><p>这一套下来使你对收购能否为股东创造价值会有一个清晰的认识。</p></blockquote></li><li><p>利用资本结构来支持价值创造</p><blockquote><p>如果业务单元对其他所有者的价值较高，或在其他所有权结构中的价值较高，则剥离将创造价值。例如，母公司文化为成熟业务所主导，从而限制了创新活动。</p><p>剥离绩效不善的业务，可以避免承担其进一步恶化所导致的直接成本。</p></blockquote></li><li><p>与投资者有效沟通以保证公司的股价反映其内在价值</p><blockquote><p>通过理解公司价值，理解公司现在和潜在投资者并与之进行沟通，可以提高公司价值与其内在价值的一致性。</p></blockquote></li></ul><h2 id="第四篇-高级的价值评估问题高级应用">第四篇高级的价值评估问题（高级应用）</h2><p>作者评估的公司估值低于单一业务的同类公司时，原因主要是公司的业务单元相对于单一业务的同类公司而言，其增长率或资本回报率较低。换句话说，存在一个绩效折扣，而不是业务多样化或企业集团化折扣。</p><p>根据各部分业务对多业务公司进行估值时，依据的也是企业折现现金流和折现经济利润，但有几个独特的问题：</p><ul><li>创建业务单元的财务报表</li><li>估计每个业务单元的资本成本</li><li>单独评估每项业务，对各业务单元加总，并解释结果</li></ul><p>经济利润和关键价值驱动因素公式：<spanclass="math inline">\(V=IC_0+\frac{经济利润}{WACC-g}\)</span>，根据这个公式，公司的企业价值（内在价值）等于投入资本的账面价值加上所有未来经济利润的现值。</p><ul><li>IC：当期投入资本</li><li>经济利润：<spanclass="math inline">\(经济利润=净利润-（投入资本*WACC）\)</span></li></ul><p>经济利润的折现值等于自由现金流的折现值：<spanclass="math inline">\(V=IC_0+\sum_{t=1}^\propto\frac{经济利润_t}{(1+WACC_t)}\)</span>，公司的企业价值等于投入资本的账面价值加上所有未来经济利润的现值。</p>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>投资思维</title>
    <link href="/2024/10/26/2024-10-26-%E6%8A%95%E8%B5%84%E6%80%9D%E7%BB%B4/"/>
    <url>/2024/10/26/2024-10-26-%E6%8A%95%E8%B5%84%E6%80%9D%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="投资思维">投资思维</h1><hr /><h2id="一如何做出投资决策如何确定企业的内在价值">一、如何做出投资决策？如何确定企业的内在价值？</h2><p>巴菲特举了一个例子：</p><blockquote><p>我们从这里向北走了30英里，我们发现那里的农场每英亩可以生产120蒲式耳的玉米，每英亩可以生产45蒲式耳的大豆，我们知道化肥的成本、收入的税收成本，我们也知道我们需要向农民支付多少钱才能真正完成相关的工作。然后我们会得到一些我们可以用相当保守的假设得出的每英亩的利润。当你通过计算，你可以每英亩赚70美元而无需自己干更多的工作</p></blockquote><p><strong>那么问题的关键就在于，为这70美元你花了多少钱？以及你是否认为，随着时间的推移，你的产量会更高一点吗？农作物价格会随着时间的推移而上涨吗？农业的前景会变得更好一些吗？</strong></p><p>如果你综合来看，现在可能有7%的回报就很棒了，那你相当于觉得每英亩1000美元<code>70/7%</code>的价格就很好，如果此时农田卖900美元，那么你会有一个买入信号，如果他的售价是1200美元，你就会去看别的东西。</p><p><strong>努力弄清楚我们正在研究的那些企业将生产什么，要做到这一点，我们必须了解他们的竞争地位，我们必须了解业务的动态。</strong></p><p>我们必须能够展望未来，有些生意你不能看得很远，那就放弃它们。</p><p>你可能只对很少几个企业有洞察力，我的意思是，如果我们离开这里，走过一个<ahref="https://xueqiu.com/S/MCD?from=status_stock_match&amp;xueqiu_status_id=166878168&amp;xueqiu_status_source=statusdetail&amp;xueqiu_private_from_source=0105">麦当劳</a>的摊位，你会决定为那个<ahref="https://xueqiu.com/S/MCD?from=status_stock_match">麦当劳</a>的摊位支付100万美元，还是300万美元，你会想到有多大可能会有更多的竞争，麦当劳是否会改变你的特许经营安排，人们是否会继续吃汉堡，你知道，以及各种各样的事情。你可能会对自己说，<ahref="https://xueqiu.com/S/MCD?from=status_stock_match&amp;xueqiu_status_id=166878168&amp;xueqiu_status_source=statusdetail&amp;xueqiu_private_from_source=0105">麦当劳</a>的这个摊位可能会在几年内赚到多余X的钱，因为随着时间的推移，价格会略有上涨。这就是投资的全部，你必须知道你在做什么，你必须知道你什么时候超越了你的能力圈，关于投资我没有更好的办法。</p><p>芒格：</p><blockquote><p>你必须认识到，当你试图确定内在价值和安全边际之类的东西时，不存在任何简单的方法可以机械地应用在所有公司。就像没有任何计算机，能让所有按下其按钮的人变得富有。从定义上来说，这将是一个需要你用多种技术和模型来玩的游戏，因此经验是非常有用的。</p></blockquote><p><strong>伟大的投资者不能速成，就像伟大的骨肿瘤病理学家不能速成一样，这需要很多经验，这就是为什么很早开始是有帮助的。</strong></p><blockquote><p>我们从来没有任何系统能够对所有企业的价值做出正确的判断。我们几乎把所有的决定都扔进了太难的一堆，我们只是筛选出一些我们可以做出的容易的决定，这是一个比较的过程。如果你正在寻找一种在任何时候都能正确评估所有投资的能力，我们帮不了你。</p></blockquote><h2 id="二估值体系框架郑泉">二、估值体系框架（郑泉）</h2><p>这个估值体系框架将通过提出问题，并通过收集资料回答问题的方式进行。框架会提出几个问题，在层层深入研究：</p><ul><li>公司生产什么产品</li><li>公司现在属于什么阶段（初创、成长中、成熟、夕阳），对于每个阶段要有不同的要求</li><li>公司所处行业近5年的变化（了解公司在行业中的竞争地位）</li><li>近5年盈利变化（增长、负增长）财务分析</li><li>公司文化（高管口碑）</li><li>公司估值（对不同行业用不同方法进行估值）</li><li>公司的投资评价（预期投资收益），自由现金流评估</li></ul><h2 id="三巴菲特估值计算方法">三、巴菲特估值计算方法</h2><ul><li><p>选股标准</p><blockquote><p>巴菲特会问未来12个月会有多少家公司到15倍PE？有多少家5年后赚得更多（置信区间90%）？有多少家会达到7%的复合增长率（置信区间50%）？</p></blockquote></li><li><p>对确定性的理解</p><blockquote><p><strong>自由现金流</strong>：这个是企业账面可以确定的。C</p><p><strong>增长速度</strong>：这个是根据具体企业来估算的，不同的企业有不同的增长率---置信区间（可信度），简而言之就是要问，增速是多少，增长确定性有多高（就是可信度）。g</p><p><strong>折现率</strong>：增长率确定性高的企业给定折现应相应的低一点，确定性不高的折现相对给高点。r</p><p>永续增长的企业估值=<span class="math inline">\(C/(r-g)\)</span></p></blockquote></li></ul><p>15倍市盈率意味着买入当年的收益率6.67%，与前一笔投资10%年化收益差距很大，但这笔投资里企业可以成长，即此后年份的收益率会越来越高。如果此后企业能保持7%的增长，那么第5年的收益率<code>6.67%*（1+7%）^5=9.35%</code>，第10年期的收益率达到<code>6.67%*（1+7%）^10=13.11%</code>，整个十年间的累计收益率为98.55%（忽略资金的时间成本），也相当于十年回本，折合年化收益率约10%（简化计算，可以直接取6.67%和13.11%的平均数）</p><p><strong>所以，“15倍PE和7%增长的企业”和“10倍PE无增长的企业”基本等价，大致可以理解为巴菲特内心感到舒服的投资是“十年回本”。这就是巴菲特的估值逻辑，尽管巴菲特从低估值的烟蒂进化而来，但没有放弃内心的预期收益率要求，这个15倍PE是巴菲特愿意为“成长”所付出的溢价。</strong></p><p><strong>因此，巴菲特选择15倍市盈率这个买入标尺，是隐含了一个很强的预期，即未来10年企业能持续7%的年化增长——切不可忘记，这一切建立在前一部分讨论的确定性的基础之上。</strong></p><p>例：</p><blockquote><p>早期巴菲特以净资产折扣价买入烟蒂股，后来进化到以合理价格买入优秀企业的策略，本质是他愿意给予企业的成长一定的溢价。如果你有较高的把握确信<strong><ahref="https://xueqiu.com/S/SH600519?from=status_stock_match">茅台</a></strong>未来10年能以15%的速度增长，</p><p>第10年的收益率将达到<code>4%*（1+15%）^10=16.18%</code>，算术平均匡算出十年的合计收益率<code>[(4%+16.18%)/2]*10=100%</code>。这样，你还觉得25倍的茅台估值贵吗？</p></blockquote><p><strong>总结：</strong></p><ol type="1"><li>买的便宜，即使是好的企业，也轻易不在<code>15</code>倍市盈率以上出手。</li><li>追求成长和置信度，其实是现金流折现思维的一种应用。巴菲特愿意为有成长的企业支付溢价，投资这门学问的本质就是判断成长和确定性的艺术，也是如何对“成长”进行估值的艺术。</li><li>机会成本是最重要的决策依据，15倍PE和7%增长约等于10倍PE的无增长，后者可思维巴菲特的机会成本。</li><li>确定性从哪里来？客观方面要先找到好的商业模式，业务简单、护城河深、业绩可预测性强；主观方面深入研究基本面，探寻规律和真相，寻找不容易被打断的强逻辑。</li></ol><h2 id="收益率估值思维">收益率估值思维</h2><p>意思就是你买的股票数量乘以每股收益，然后在除以你买的成本。看看实际收益率是多少。分红多少。</p><p>这个思维的核心就是把每股收益当做自己应得的利润，分红作为现金流。</p><h2 id="彼得林奇投资思维分享">彼得林奇投资思维分享</h2><p>如果你没有办法在10分钟内向一个小孩解释清楚你为什么要买这只股票，那么你最好别买。</p><h2id="雪球市赚率公式-----roe大于15才考虑">雪球市赚率公式-----ROE大于15%才考虑</h2><h3 id="修正公式">修正公式</h3><p>适用于国内普通股</p><p>PR=PE*N<code>/</code>ROE<code>X</code>100</p><p>参数解释：</p><ul><li><p><strong>PR：市赚率</strong></p><blockquote><p>这个结果为1时是合理估值，小于1时为低估，大于1时为高估</p><p>当这个结果为0.5以下是，就是巴菲特说的4角买1元的时候</p></blockquote></li><li><p><strong>N：修正系数。股利支付率=税前每股股利/当年每股收益</strong></p><blockquote><p>股利支付率≥50%的企业，修正系数为1.0（50%除50%）</p><p>股利支付率≤25%的企业，修正系数为2.0（50%除以25%）</p><p>50%＞股利支付率＞25%的企业，例如40%的企业，修正系数为1.25（50%除以40%）</p></blockquote></li><li><p><strong>PE：市盈率</strong></p></li><li><p><strong>ROE：净资产收益率</strong></p></li></ul><h3 id="第一公式">第一公式</h3><p>适用于普通股</p><p>PR=PE/ROE</p><h3 id="第二公式">第二公式</h3><p>在投资周期股时，可以把<strong>当期PB和多年ROE平均值代入第二公式</strong>，从而计算出周期股的市赚率估值</p><p>PR=PB/ROE<sup>2</sup></p><h2 id="修正现金流">修正现金流</h2><p><strong>简而言之就是当ROE在10%~33%之间时，使用市赚率估值比较准确，否则就是现金流估值比较准确</strong></p><blockquote><p><strong>当ROE在10%～33%之间时，市赚率公式的计算结果竟与DCF十分接近。考虑到巴菲特投资的大部企业，</strong></p><p><strong>ROE均在10%～33%之间。这也意味着，巴菲特完全可以用心算的市赚率公式，来替代极为复杂的DCF计算器。</strong></p><p><strong>巴菲特宣称5分钟就能决定投资一家企业，看来也并非虚言！</strong></p><p><strong>上述研究表明，ROE小于10%或大于33%之时，市赚率容易失真或失效。</strong></p><p>ROE小于10%时，可以参考巴菲特投资B夫人案例。将其看作是债券，就比较容易理解了。</p><p>ROE为5%时，最多只能给到0.5PB估值。</p><p>ROE略微大于33%时，市赚率公式勉强可用。明显大于33%时（如<ahref="https://xueqiu.com/S/AAPL?from=status_stock_match">苹果</a>），</p><p>则需要用ROA替代ROE，市赚率公式则相应变成了<strong>PR=PE/ROA</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原理</tag>
      
      <tag>投资</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机致富的傻瓜读书笔记</title>
    <link href="/2024/10/26/2024-10-26-%E9%9A%8F%E6%9C%BA%E8%87%B4%E5%AF%8C%E7%9A%84%E5%82%BB%E7%93%9C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/26/2024-10-26-%E9%9A%8F%E6%9C%BA%E8%87%B4%E5%AF%8C%E7%9A%84%E5%82%BB%E7%93%9C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="随机致富的傻瓜读书笔记">随机致富的傻瓜读书笔记</h1><hr /><p>这本书的作者混迹股市多年，他平时对文学、哲学颇有见解；<strong>塔勒布</strong>把生活中的随机现象分解出基本的原理给我们看；作者还利用股市的随机现象为典型给我们讲了他的操作手法（珍惜每一次<strong>稀有事件----黑天鹅</strong>）。本书分为了三个部分来讲解。</p><h2 id="第一部分">第一部分</h2><p>这部分讲了概率分布上的不对称，黑天鹅事件的出现就是最典型的:star:<strong>偏态</strong>，现实意义就是如果失败的代价过于沉重、难以接受，那么这件事成功的概率有多高根本无关紧要。</p><p>比如说，在自家游泳池溺死的概率远远大于在恐怖袭击中死亡的概率，但民众对政府的反恐政策的关注却远胜于游泳池，就是由于恐怖袭击的可能性虽然小，但是出现恐怖袭击的后果却是民众不能承受的。</p><p>这部分也说了全靠运气得来的东西终究还是可能被运气取回，只有靠实力、打拼换来的幸福我们才能享受得心安理得。</p><p>作者用了两个背景各殊的交易员讲了一个例子：塔利波和约翰，塔利波是统计学博士，学术功底深厚，理性地规避股市风险，但他的风头却被学养、心思均和健身教练没两样的约翰盖过，约翰比他晚入行5年，收入却是他的10倍，但是最后约翰因为忽视风险，投资过于激进，丧失了全部，塔利波却因为谨慎行事，而存活了下了，并保留了所得。</p><p>用投资的思维理解的话就是，如果你关注概率很大的事情，其他人也会同样关注，你所获得的收益不过是大家的平均收益而已。如果遇到黑天鹅事件要认真对待并且珍惜，因为人一辈子怕是也遇不到几次。危机危机，有危就有机。所有人觉得机会很大的时候常常伴随着很大的危险；所有人觉得危险很大的时候，常常伴随着很大的机会。</p><p>中国有句古话是：福兮祸所伏，祸兮福所倚。</p><h2 id="第二部分">第二部分</h2><p>这部分讲了概率中的一个经典现象——:star:<strong>幸存者偏差</strong>，由于我们只看到成功者，而由此形成的对机遇的歪曲看法。</p><p>比如说，我们常会认为长得英俊漂亮的人薪水会比较高，其实这是因为我们经常只会注意到那些薪水比较高的人，或者说那些薪水比较高的人容易被我们注意到罢了。</p><p>这部分举了一个很有名的例子，就是让很多很多的猴子放在打字机前，他们肯定会有那么一两只会打出一字不差的《伊利亚特》叙事诗。换句话说，从事商业的人数越多，其中某个人单靠机遇便能有惊人表现的可能性就越高。</p><p>作者还引用了<strong>生日悖论</strong>，随便找一个人，你和他生日是同一天的概率是<code>0.27%</code>，可是如果一个房间内有<code>23</code>个人，有两个生日相同的概率高达<code>50%</code>，在生活中，我们随处遭遇着幸存者偏差，把一个变量的极大值分布误作为那个变量本身。</p><p>用投资的思维看的话，就是我们通常只会关注在投资领域成功的投资者，比如巴菲特等，我们会对我们也可以成为像他一样成功的投资者产生误解，就连巴菲特自己都说过，他只不过是中了<strong>卵巢红利</strong>（生在一个对的地方，并做了一些对的事情）。我们只要仔细观察我们的股市就会发现，中国股民有接近3亿，但是成功的寥寥可数。</p><h2 id="第三部分">第三部分</h2><p>这部分讲到了一个人性的问题，就是:star:<strong>路径依赖</strong>，这个有点像物理学上的“惯性”，人们过去做出的选择决定了他们现在及未来可能的选择。作者还用索罗斯说了，他这类股市大鳄完全不受过去的行为约束，摆脱了路径依赖，每一天对他们来说都是一张白纸。</p><p>作者举了一个有点带有迷信的例子，这个是我们每个人都会有那么一点点的东西。</p><p>塔勒布这样谙熟概率的人也会做出不合理的行为，他因为有一天上班时误打误撞在一个街口下了车，而那天的操作组合赚了不少的钱，结果以后每天他都特意在那个街口下车，可见人类的本性是多么的根深蒂固。</p><p>用投资的思维理解的话就是，我们以前的成功并不能让我们以后也可以用同样的方法再次成功。</p>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>投资最重要的事学习笔记</title>
    <link href="/2024/10/26/2024-10-26-%E6%8A%95%E8%B5%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/26/2024-10-26-%E6%8A%95%E8%B5%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="投资最重要的事学习笔记">投资最重要的事学习笔记</h1><h2 id="star第一章-学习第二层次思维">:star:第一章 学习第二层次思维</h2><h3 id="什么是第二层次思维">什么是第二层次思维？</h3><p>要理解第二层次思维，要先知道什么是第一层次思维。</p><p>这里我们先理解什么是第一层次思维，我理解的第一层次思维就是<strong>大众共识</strong>，简单的说就是对于事物的表面认识，行为和反应、思考是和大众一样的。</p><p>那么第二层次思维呢？我理解为是和大众共识对立的或者是与众不同的，大家都认为是好的时候，不一定是好的，大家都认为是坏的时候，也不一定是坏的。</p><h3 id="第二层次思维是怎么运用的">第二层次思维是怎么运用的？</h3><ul><li><strong>第一层次思维说</strong>：这是一家好公司。让我们买进公司的股票吧。<strong>第二层次思维说</strong>：这是一家好公司，但是人人都认为它是一家好公司，因此它不是一家好公司。因为股票的估价和定价都过高，让我们卖出股票吧。</li><li><strong>第一层次思维说</strong>：会出现增长低迷、通货膨胀加重的前景。让我们卖出股票吧。<strong>第二层次思维说</strong>：前景糟糕透顶，但是所有人都在恐慌中卖出股票。我们应该买进。</li></ul><p>第二层次思维和第一层次思维之间的工作量差异是巨大的。第一层次思维者所需的只是一种对于未来的看法，譬如：公司前景是光明的，表示股票会上涨。而第二层次思维者则需要考虑更多的东西，比如：</p><ul><li>未来可能出现的结果会再什么范围之内？</li><li>我认为会出现什么样的结果？</li><li>我正确的概率有多大？</li><li>人们的共识是什么？</li><li>我的预期与人们的共识有多大的差异？</li><li>资产的当前价格与大众所认为的未来价格以及我所认为的未来价格相符的程度如何？</li><li>价格中所反映的共识心理是过于乐观还是过于悲观？</li><li>如果大众的看法是正确的，资产价格将会发生怎么样的改变？如果我是正确的，资产价格有会怎么样？</li></ul><h3 id="为什么要有第二层次思维">为什么要有第二层次思维？</h3><p>你不可能在和他人做着相同事情的时候期待胜出，如果你的行为是常规性的，你很可能就会得到常规性的结果（无论好坏）。只有当你的行为是非常规性的时候，你的表现才有可能是非常规性的，而只有当你的判断高人一等时，你的表现才会高于平均水平。</p><p>我们投资的目的不是达到平均水平，我们想要的是<strong>超越平均水平</strong>。因此，我们的思维必须比别人更好、更强有力、水平更高。其他投资者也许非常聪明、消息灵通，因此我们必须找出一种他们所不具备的优势。想他们所未想，见他们所未见，我们的反应与行为必须<strong>与众不同</strong>。简而言之，保持正确可能是投资成功的必要条件（无之者不然），但不是充分条件（有之必然），我们必须比其他人做的更加正确。</p><p>为了取得优异的投资结果，我们必须对价值有非常规性的并且必须是正确的看法。这并不容易。</p><p>很多人认为投资过程简单，没有第二层次思维的需要，甚至有的还不知道有第二层次思维的存在。所以很多人被误导了，相信人人都能成为一名成功的投资者。其实并不是人人都能成功的，现在的唯一好消息是，第一层次思维者的广泛存在使得第二层次思维者的可得收益增加了。为了持之以恒地获得优异的投资回报，我们必须成为第二层次思维的人。</p><h2 id="第二章-理解市场有效性及局限性">第二章理解市场有效性及局限性</h2><h3 id="什么是有效市场理论">什么是有效市场理论？</h3><p>有效市场假说最重要的结论是“你无法战胜市场”。只能取得和大众一样的收益。</p><h3 id="有效市场理论是怎么运用的">有效市场理论是怎么运用的？</h3><p>根据有效市场投资理论，人们有规避风险的本能，即人们普遍愿意承担更少的风险。想要他们进行风险性更高的投资，必须以更高的收益承诺来诱导。</p><p>为了获得更高的收益，他们唯一要做的就是进行高风险投资。这里其实有个悖论：<strong>如果可以指望通过高风险投资来实现高收益的话，那些投资其实就不是高风险了</strong>。</p><h3id="有效市场理论的局限性和无效市场理论的理解">有效市场理论的局限性和无效市场理论的理解？</h3><p>市场价格永远是正确的是不可能的。因为有效市场理论的观点或其运作方式都是<strong>主观性</strong>的。<strong>缺少客观性</strong>。恰恰就是这一点为无效市场理论奠定了基础。</p><p>没有一个市场是完全有效或无效的，它只是一个程度问题。但是我们要认识到，有效性并没有普遍到我们该放弃良好业绩的程度。今天存在的有效性并不意味着有效性会永远存在。</p><p><strong>认为市场无效性</strong>是杰出投资的必要条件。错误总会发生，有时候某些资产定价过低，有时候又定价过高。我们必须具有比其他人更深刻的洞察力，才能更多的买到定价过低的资产。</p><p>有效市场理论应提<strong>供信息辅助我们决策而不是控制决策</strong>。如果完全无视该理论，可能会犯下大错。</p><h2 id="star第三章-准确估计价值">:star:第三章 准确估计价值</h2><p>投资要想取得切实成功，<strong>对内在价值的准确估计是根本出发点</strong>。没有它，投资者任何取得持续投资成功的希望都仅仅是希望。</p><p>这里有一个词，就是<strong>资产的内在价值</strong>。我们常规或者说应该做的就是，以低于内在价值的价格买进，以更高的价格卖出。</p><h3 id="内在价值是什么">内在价值是什么？</h3><p>要了解内在价值是什么，我们要对投资股票或企业有一个基础的认识。一般方法可以被分为两种基本类型：</p><ul><li>基于公司特性的分析，就是基本面的分析。</li><li>基于证券自身价格行为的研究。</li></ul><p>简单来说投资者有两种基本选择：</p><ol type="1"><li>判断证券的内在价值并在价格偏离内在价值时买进或卖出</li><li>将决策完全建立在对未来价格走势的预期的基础上。</li></ol><p>公司的内在价值都是基于公司<strong>基本面</strong>来做分析的。理性的投资者或者是基于内在价值的投资者又分为两种：</p><ul><li>价值投资</li><li>成长型投资</li></ul><p>价值投资者的目标是得出证券当前的内在价值，并在价格低于当前价值时买进，而成长型投资者的目标则是寻找未来将迅速增值（公司内在价值增加）的证券。这两种投资者没有明确的界限，用一句话来说就是：<em>成长型投资关心未来，而价值投资强调当前，但不可避免地要面对未来。</em></p><p>这里我们可以大概知道了，公司的价值体现在，公司财力、资源、管理、商业模式、专利、人力资源、商标、增长潜力，以及最重要的——:star:<strong>创造收益和现金流的能力</strong>。</p><h3 id="如何估算内在价值">如何估算内在价值？</h3><p>这里书中没有给出明确的方法论。不过我自己对估算内在价值是有一定的学习的:smile:，所以这段内容是我自己的经验总结。方法有以下几种：</p><ul><li>现金流折现法（这种方法适用于现金流稳定的行业，比如消费、医药等）</li><li>市净率估值法（适用于银行）</li><li>PEV内含价值（这个指标适用于保险行业，因为这个行业的保单是负债但未来会转化为利润）</li><li>NAV估值法（这种方法适用于地产行业，就是净资产价值，包括土地储备等）</li><li>周期行业估值方法比较特殊，这里彼得林奇的方法是可取的，就是根据市盈率和市净率反着买，当市盈率高而市净率低的时候买入，当市盈率低而市净率高的时候卖出。这是因为低市盈率表示行业景气，那价格和价值都应该是体现了的，所以无法以一个很好的价格买到。</li></ul><p>巴菲特举了一个例子：</p><blockquote><p>我们从这里向北走了30英里，我们发现那里的农场每英亩可以生产120蒲式耳的玉米，每英亩可以生产45蒲式耳的大豆，我们知道化肥的成本、收入的税收成本，我们也知道我们需要向农民支付多少钱才能真正完成相关的工作。然后我们会得到一些我们可以用相当保守的假设得出的每英亩的利润。当你通过计算，你可以每英亩赚70美元而无需自己干更多的工作</p></blockquote><p><strong>那么问题的关键就在于，为这70美元你花了多少钱？以及你是否认为，随着时间的推移，你的产量会更高一点吗？农作物价格会随着时间的推移而上涨吗？农业的前景会变得更好一些吗？</strong></p><p>如果你综合来看，现在可能有7%的回报就很棒了，那你相当于觉得每英亩1000美元<code>70/7%</code>的价格就很好，如果此时农田卖900美元，那么你会有一个买入信号，如果他的售价是1200美元，你就会去看别的东西。</p><h3 id="为什么要估算内在价值">为什么要估算内在价值？</h3><p>我们的目的是以低于内在价值的价格买入，那么这个内在价值我们不知道或计算不准确的话就让我们无法看清我们买的到底是什么。</p><p>如果没有对价值的准确估计，那么我们可能会高价买进自以为的特价股，对于我们来说，任何取得持续成功的希望都仅仅是希望而已。</p><p>我们只有准确估算了内在价值才能在证券下跌或上涨的时候胸有成竹的买进或卖出。实际上只有准确估算了内在价值我们才能在一个下跌的市场上获利，通过学习上面两章，我觉得我们只要在上涨的市场中保持和指数差不多的涨幅，而下跌的市场中低于指数的跌幅，我们就已经胜过绝大部分投资者了。这里有几个基本要素要讲讲：<strong>我们必须了解内在价值；同时我们必须足够自信，坚定的持有股票不断在下跌过程中买进，即使价格已经跌倒似乎在暗示我们做错了的时候，还有最重要的是我们必须估算正确。</strong></p><h2 id="star第四章-价格与价值的关系">:star:第四章 价格与价值的关系</h2><p>成功的投资不仅仅在于“买好的”，还要“买得好”。</p><h3 id="价格与价值有什么关系">价格与价值有什么关系？</h3><p>在格雷厄姆所作的《聪明的投资者》中指出，<strong>价格是围绕价值上下波动的</strong>，我认为这是价格与价值的一般关系。</p><p>价格是怎么来的？这个问题毫无疑问的关系基本面价值，不过大多数情况还受到另外两个因素的影响：<strong>心理</strong>和<strong>技术</strong>。</p><h3id="价格与价值的关系是怎么运行的">价格与价值的关系是怎么运行的？</h3><p>我们除了要知道企业的内在价值（上一章所学）外，我们还要考察相对于资产价值的资产价格。</p><p>:star:建立：基本面——价值——价格之间的关系。</p><p>确定价值的关键是熟练的财务分析，而理解价格、价值关系及其前景的关键，则主要依赖对其他投资者思维的洞察。投资者心理几乎可以导致证券在短期内出现任何定价，而无论<strong>基本面</strong>如何。因此在这里我觉得我们必须投入时间和精力去了解<strong>市场心理</strong>。只有这样做，我们才会知道什么时候会有买入和卖出的好时机。</p><p>以公平价值的价格买进某种证券，那么你可以得到的也只是公平收益，这也就是“市场有效假说”的基本前提。如果我们对内在价值的估计是大概正确的，那么随着时间推移，资产价格将会与资产价值趋于一致。</p><h3id="为什么我们要知道价格与价值的关系">为什么我们要知道价格与价值的关系？</h3><p>这里有个重点是市场心理，也就是<strong>心理学</strong>。从买进证券的那一刻起我们就必须了解，基本面价值（内在价值）只是决定证券价格的因素之一，我们还要设法让心理和技术为我们所用。</p><p>在泡沫时期和暴跌时期，对市场势头的迷恋取代了价值和公平价格的观念，贪婪和恐惧会占据人们的心理取代智慧。</p><p>我们真正需要是知道的是，资产的<strong>内在价值的增长</strong>（就是公司业绩的上升）也会带动资产的价格上涨。但我们要警惕预测未来是个不太可靠的事情。</p><p>如果我们现在估算的内在价值是正确的，以低于其价值的价格买进现在看是好的，也有可能企业经营不善，其内在价值降低了，那么其价格也会降低，我们就会发现<strong>当初估算的价值低于现在的价格了</strong>，所以我们需要动态的调整我们的估算。</p><p>也就是说在所有可能的投资获利途径中，低价买进显然是最可靠的一种。但也要注意，我们可能错误估计了当前价值。或者可能会出现价值降低的事件，或者我们的态度与市场的冷淡导致证券以更低的价格出售。也可能价格与价值趋于一致所需的时间比我们想象的要长得多。</p><p>:star:低于价值的价格买进并非万无一失，但它是我们最好的机会。</p><h2 id="第五章-理解风险">第五章 理解风险</h2><p>风险意味着可能发生的事件多于确定发生的事件。</p><h3 id="风险是什么">风险是什么？</h3><p>风险意味着可能发生的事件多于确定发生的事件。在投资中风险定义为：首要的是:star:<strong>永久性损失的概率</strong>，但我们还应该认识其他的风险：</p><ul><li><strong>没有达到目标的风险</strong>：比如我们预期的每年8%的收益是我们日常开支的需求，我们投资的收益只有6%的收益，这就出现了风险。</li><li>业绩不佳的风险：收益跟不上指数。</li><li>职业风险：当资金管理者和所有者不是同一人的情况下，会出现管理者如果业绩不好怕失业而承担的风险。</li><li>非常规风险：也就是与众不同也是有风险的。</li><li>流动性风险：也就是资金的流动性，如果急需一笔钱开销，那么投资的资金就会出现风险。</li></ul><h3 id="怎么去理解风险">怎么去理解风险？</h3><p>风险很大程度上是一个见仁见智的问题。基本面弱的企业、业绩欠佳的企业的股票，如果买进的价格足够低，也能成为一项非常成功的投资。损失风险主要归因于心理过于积极，以及由此导致的价格过高。理论认为高收益伴随着高风险，但我们应该认识到，<strong>在以低于内在价值的价格买进证券时，高收益和低风险是可以同时实现的</strong>。</p><p>:star:判断风险的主要依据应该是<strong>价值的稳定性和可靠性</strong>，以及<strong>价格与价值之间的关系</strong>。</p><p>概率与结果之间存在巨大差异。可能的事情没有发生，不可能的事情却发生了。这是我们对于投资应该知道的最重要的事。</p><h3 id="为什么要理解风险">为什么要理解风险？</h3><p>投资只关乎一件事，就是应对未来。没有人能够确切地预知未来，所以风险是不可避免的。因此应对风险是投资中一个必不可少的要素。找到好的投资标的并不难，但是如果我们不能正确地应对风险，那么我们的成功是不可能长久的。应对风险主要有三步：</p><ul><li>理解风险</li><li>识别风险</li><li>控制风险</li></ul><p>为什么说风险评估是投资过程中必不可少的要素呢？主要有三个理由：</p><ul><li><strong>风险是件坏事</strong>，大多数头脑清醒的人都希望避免风险或将其最小化。</li><li><strong>在考虑某项投资时</strong>，投资决策应将风险以及潜在收益考虑在内。简单的讲，国债和企业债都是7%的收益，你肯定会选择国债。因为相比企业债，国债风险更小。因为买国债的人多，所以国债的价格一定会比企业债的价格高。</li><li><strong>在考虑投资结果时</strong>，收益仅仅代表收益，评估所承担的风险是必须的。要评估我们的收益是承担很小的风险还是很大的风险得来的。</li></ul><h2 id="第六章-识别风险">第六章 识别风险</h2><p>人们普遍认为，风险在经济衰退以及经济由盛转衰时增大，与此相反，认为风险在经济上升时增加，并且随着经济失衡的扩大在衰退期化为现实的想法，可能更好。</p><p>无论基本面有多好，人类的贪婪与犯错倾向都会把事情搞得一团糟。</p><p>承接上一章，我们要<strong>控制风险就需要识别风险，要识别风险就要理解风险</strong>。这里再说一下风险的定义：:star:风险意味着即将发生的结果的不确定，以及不利结果发生时损失概率的不确定。</p><h3 id="如何识别风险">如何识别风险？</h3><p>识别风险往往从投资者盲目乐观并因此对某项资产出价过高的时候开始。换句话说就是，<strong>高风险主要伴随高价格出现</strong>。无论是对被估价过高从而定价过高的单项证券或其他资产，还是对在看涨情绪支持下价格高企的整体市场，:star:<strong>在高价时不知规避反而蜂拥而上都是风险的主要来源</strong>。</p><p>我认为高风险和低预期收益不过是同一硬币的两面，二者都源自于高价格。因此，:star:<strong>洞察价格与价值之间的关系是成功应对风险的重要组成部分</strong>。<em>当市场价格被推高，以至价格意味着更多的损失而不是潜在回报时，风险就增加了。</em></p><p>普遍相信没有风险本身就是最大的风险。</p><h3 id="为什么要识别风险">为什么要识别风险？</h3><p>风险的实现远比感知风险来得简单粗暴。人们过高地估计了自己认识风险的能力，过低地估计了规避风险所需的条件；因此人们在不知不觉中接受了风险，由此促进了风险的产生。这也就是我们为什么要用<em>第二层次思维</em>来思考这个问题所在的原因了。</p><h2 id="第七章-控制风险">第七章 控制风险</h2><p>投资者的工作是以盈利为目的聪明的承担风险。能够出色的做到这一点，是最好的投资者与其他投资者之间的区别。</p><h3 id="如何控制风险">如何控制风险？</h3><p>无论风险控制取得怎样的成绩，在繁荣时期是永远也表现不出来的，因为风险是隐蔽的，不可见的。能观察到的是损失，而损失通常只在风险与负面事件相碰撞时才会发生。:star:重要的是我们要意识到，即使没有发生损失，风险也有可能存在。因此没有损失并不一定意味着投资组合是安全的。我们应该在繁荣时更加注意自己的投资组合，并观察它是低风险还是高风险。</p><p>这里有两个点值得一说：</p><ul><li>承担同样的风险，但收益比普通投资者高一些</li><li>获取同样的收益，但承担的风险比普通投资者小一些</li></ul><p>作者认为第二种是杰出投资者的表现。</p><h3 id="为什么要控制风险">为什么要控制风险？</h3><p>首先我们要明确一点，:zap:就是<strong>风险控制</strong>与<strong>风险规避</strong>之间的重要区别。风险控制是规避损失的最佳方法。反之，风险规避则很有可能会连同收益一起规避。</p><p>贯穿长期投资成功之路的，是风险控制而不是冒进。在整个投资生涯中，大多数投资者取得的结果将更多的取决于<strong>失败投资</strong>的次数及程度，而不是<strong>成功投资</strong>的程度，因为良好的风险控制是优秀投资者的标志。</p><h2 id="star第八章-关注周期">:star:第八章 关注周期</h2><p>牢记万物皆有周期是至关重要的。周期永远胜在最后。任何东西都不可能朝同一个方向永远发展下去。坚持以今天的事件推测未来是对投资者健康最大的危害。<strong>反者道之动</strong></p><h3 id="什么是周期">什么是周期？</h3><p>很少有事物是直线发展的。事物有进有退，有盛有衰。经济、市场和企业同样如此：<strong>起伏不定</strong>。</p><p>周期是自我修正的，周期的逆转不一定依赖外源性时间。周期的发展趋势本身就是造成周期逆转的原因。因此我又要提到我们的一句老话：<strong>祸兮福之所倚，福兮祸之所伏</strong>。</p><p>世界具有周期性的根本原因是人类的参与，人是情绪化并且善变的，缺乏稳定性和客观性。周期的极端性主要源自人类的情绪与弱点、主观与矛盾。</p><h3 id="怎么去关注周期">怎么去关注周期？</h3><p>作为投资者，我们应重点关注:radioactive:<strong>信贷周期</strong>，它具有必然性、极端波动性，也具有为适应它的投资者创造机会的能力。只要经济有微小的波动，就能导致信贷可得性的巨大波动，并对<strong>资产价格及其背后的整体经济</strong>造成巨大影响。</p><p>这个过程如下：</p><ol type="1"><li>经济进入繁荣期。资金提供者增多，资本基础增加。</li><li>坏消息极少，因此贷款风险与投资风险似乎“已经减少”。</li><li>风险规避消失。</li><li>金融机构开始扩大业务，通过降息、降准等提供更多资本。</li><li>资本提供者开始为不具备资格的借款人和项目提供资本，即资本投资项目的资本成本超过其资本收益最终导致没有资本收益。这时候————周期的上升部分就开始出现逆转。:exclamation:</li><li>损失导致借款人畏难回避。</li><li>风险规避增加，伴随着利率、信贷限制与条款要求的提高。</li><li>可得资本减少————在周期的谷底，只有资质最好的借款人才能借到资本。</li><li>企业迫切需要资本。借款人无法展期债务，导致债务违约及企业破产。</li><li>这一过程导致并加剧经济萎缩。</li></ol><p>还有一点比较重要，认为周期性已经结束所体现的思维方式，基于一个危险的前提——“<strong>这次是不同的</strong>”。这6个字应该警醒我们，或许对我们还预示着赢利的机会。<strong>因此当出现这种形式的错误时，具有识别它的能力是至关重要的</strong>。</p><h3 id="为什么要关注周期">为什么要关注周期？</h3><p>投资就像生活一样，完全有把握的事非常少。价值可以消失，预测可能出错，环境可以改变，“有把握的事”可能失败。但我们应该把握住两个概念：</p><ul><li>:star:法则一：多数事物都是周期性的。</li><li>:star:法则二：当别人忘记法则一时，某些最大的盈亏机会就会到来。</li></ul><p>证明“一切会更好”的最佳时机是存在的，那就是当市场触底、人人都以廉价抛售的时候。</p><p>危险发生在市场创记录地触及以往从未达到过的高点的时候。这种情况过去有，未来也将会再次发生。</p><p><strong>我们应该意识到，周期是永远不会中断的，并将这种认识转化为自身的优势</strong>。</p><p>:smile:<strong>我们无法预测，但我们可以准备</strong></p><h2 id="star第九章-钟摆意识">:star:第九章 钟摆意识</h2><p>当形式良好、价格高企时，投资者迫不及待地买进，把所有谨慎忘在脑后。随后，当四周一片混乱，资产廉价待沽时，他们又完全丧失了承担风险的意愿，迫不及待地卖出。永远如此。</p><h3 id="什么是钟摆意识">什么是钟摆意识？</h3><p>投资市场遵循钟摆式摆动：</p><ul><li>处于<strong>兴奋</strong>与<strong>沮丧</strong>之间</li><li>处于值得庆祝的<strong>积极发展</strong>与令人困扰的<strong>消极发展</strong>之间</li><li>因此，处于<strong>定价过高</strong>与<strong>定价过低</strong>之间</li></ul><p>这种摆动是投资世界最可靠的特征之一。当投资者风险容忍过度时，证券价格体现的是更高的风险而不是收益。当投资者过度规避风险时，价格体现出来的收益高于风险。</p><p>作者在这一章将投资的主要风险归结为两个：<strong>亏损的风险</strong>和<strong>错失机会的风险</strong>。简而言之就是当整体市场或单个企业过于热情的时候会出现亏损的风险，而当市场或单个企业过于冷淡的时候会出现错失机会的风险。:smile:理想状态下，投资者会使两者达到平衡。当钟摆摆动到最高点时，一种风险或另一种风险一次又一次的占据上风。</p><p>这里我们总结一下作者对钟摆的认识：</p><ul><li>理论上，恐惧与贪婪是两个极端，多数时候钟摆应处于两极之间，但它在中点停留的时间并不长</li><li>投资者心理是主要因素，在它的影响下，钟摆通常处于摆向端点或从端点摆回的过程中</li><li>钟摆不可能永远朝向某个端点摆动，或永远停留在端点处</li><li>与钟摆类似，投资者心理朝向某个极端的摆动，最终回成为促进反方向回摆的力量</li><li>自端点摆回的速度通常更快——因此，比朝向端点摆动的事件要短得多</li></ul><h3 id="怎么去利用钟摆意识">怎么去利用钟摆意识？</h3><p>牛市有三个阶段：</p><ul><li>第一阶段，少数有远见的人开始相信一切会更好。</li><li>第二阶段，大多数投资者意识到进步的确已经发生。</li><li>第三阶段，人人断言一切永远会更好。</li></ul><p>熊市也有三个阶段：</p><ul><li>第一阶段，少数善于思考的投资者意识到，尽管形势一片大好，但不可能永远称心如意。</li><li>第二阶段，大多数投资者意识到势态的恶化。</li><li>第三阶段，人人相信形势只会更糟</li></ul><p>一切都是相辅相成的。任何事件都不是孤立的或偶然的。相反，他们都是一定的循环模式的组成部分，是可以掌握并从中获利的。</p><h3 id="为什么要有钟摆意识">为什么要有钟摆意识？</h3><p>我们能够肯定的事情之一是，极端市场行为会发生逆转。相信钟摆将朝着一个方向永远摆动——或永远停留在端点的人，最终将损失惨重；了解钟摆行为的人则将受益无穷。</p><h2 id="第十章-抵御消极影响">第十章 抵御消极影响</h2><p>得到更多的渴望、担心错过的恐惧、与他人比较的倾向、群体的影响以及对胜利的期望——这些因素几乎是普遍存在的。因此它们对大多数投资者和市场都有着深远的影响。结果就是错误——频繁的、普遍的、不断重复发生的错误。</p><h3 id="消极影响有哪些">消极影响有哪些？</h3><ul><li><p><strong>贪婪</strong>（对财富或利润过度的或无节制的占有欲）</p><blockquote><p>对利润的渴望是驱动市场及整体经济运转的最重要的因素之一。:zap:危险就产生于<strong>渴望</strong>变成<strong>贪婪</strong>的时候。</p></blockquote></li><li><p><strong>恐惧</strong></p><blockquote><p>在投资领域，这个词不代表理性的、明智的风险规避。相反，恐惧就像贪婪一样，意味着过度。因此有时恐惧更像是恐慌。恐惧是一种过度忧虑，妨碍了投资者采取本应采取的积极行动。</p></blockquote></li><li><p><strong>自愿终止怀疑</strong>。这种情绪是的人们愿意接受任何能让他们致富的可疑的建议。在投资过程中需要大量的怀疑，而怀疑并不会导致投资损失。</p></li><li><p><strong>从众心理</strong>。即使群体共识存在显而易见的荒谬，也不坚持己见。不从众会感觉受到了排斥。从众的压力和赚钱的欲望致使人们放弃了自己的<strong>独立性和怀疑精神</strong>，将与生俱来的风险规避抛诸脑后，转而去相信毫无意义的东西。</p></li><li><p><strong>嫉妒</strong>。一个在孤立环境下感觉快乐的人，当他看到别人做的更好时，可能会变得痛苦不堪。在投资领域大多难以坐视别人赚钱比自己多这一事实。</p><blockquote><p>这里作者举了一个例子：一个防御型投资基金年收益16%，但是同行的23%令他沮丧不堪。但后来这只防御型基金只有3%的收益，而同行大多出现亏损，他反而兴高采烈。这很有意思。当16%的收益时他沮丧，而3%时他却很高兴。这就是人们都有与别人相比较的倾向，这种倾向会对投资过程产生不利的影响。</p></blockquote></li><li><p><strong>自负</strong>。就是在得到更好的收益时，要认清是自己的能力还是运气，这一点很多人容易搞混，认为运气是实力的一部分。而我要说的是——<strong>运气带来的东西，也会被运气带走</strong>。实力带来的东西，即使短暂的被运气拿走了，但是实力还会再带来更多。</p></li><li><p><strong>妥协</strong>。这种现象通常出现在周期后期的投资行为特征。投资者会尽他们的最大努力坚持自己的信念，但是当经济和心理压力变得无法抗拒时，他们会放弃并跟风倒。</p></li></ul><p>:star:我们应该默默无闻的认真工作，在好的年份赚取稳定的收益，在坏的年份承担更低的损失。</p><p>这一章还讲了一个比较有意思的词:smile:“银弹”——当市场、个体或一种投资技术获得短期高额收益时，它通常会吸引人们的过度（盲目）崇拜。</p><p>作者的结论是，:zap:理性者有可能屈服于情感的破坏性力量。</p><h3 id="怎样抵御消极影响">怎样抵御消极影响？</h3><p>没有告诉我们市场已经摆向非理性极端的公式；没有保证我们永远做出正确决策的完美工具；也没有保护我们不受消极情绪影响的魔法药丸。我们应该注意下面这几点：</p><ul><li><strong>对内在价值有坚定的认识</strong>。</li><li><strong>当价格偏离价值时，坚持做该做的事</strong>。</li><li><strong>足够了解以往的周期</strong>——先从<strong>阅读</strong>和与经验丰富的投资者交谈开始，之后通过<strong>经验积累</strong>——从而了解市场过度膨胀或过度萎缩最终得到的是惩罚而不是奖励。</li><li><strong>透彻理解市场对极端市场投资过程的潜在影响</strong>。</li><li><strong>当事情看起来“好到不像真的”时，它们通常不是真的</strong>。</li><li><strong>当市场错误估价的程度越来越深以致自己貌似错误的时候，愿意承受这样的结果</strong>。</li><li><strong>与志趣相投的朋友或同时相互支持</strong>。</li></ul><p>:smile:这些方法并不一定奏效，但它们能够赋予我们可以一搏的机会。</p><h3 id="为什么要抵御消极影响">为什么要抵御消极影响？</h3><p>很多人会通过分析得出相似的认知结论。但是，因为各自所受的心理的影响不同，他们在这些结论的基础上所采取的行动各不相同。:star:最大的投资错误不是来自信息因素或分析因素，而是来自<strong>消极心理因素</strong>。这些因素往往会导致错误决策。</p><h2 id="star第十一章-逆向投资">:star:第十一章 逆向投资</h2><p>在别人沮丧地抛售时买进，在别人兴奋地买进时抛售需要最大的勇气，但它能带来最大的收益。</p><h3 id="什么是逆向投资">什么是逆向投资？</h3><p>这里我们要先知道，大多数投资者都是——趋势跟踪者，而杰出的投资者恰恰相反。</p><p>卓越投资需要第二层次思维——一种不同于常人的更复杂、更具洞察力的思维方式。从定义上来看。大多数投资者不具备这种思维能力，因此成功的关键不可能是群体的判断。</p><p>这里有几点可以让我们能很好的理解逆向投资的原理：</p><ul><li>我们永远不知道市场的钟摆能摆多远，也不知道什么时候会发生逆转。</li><li>可以肯定的是，一旦市场达到极端，它最终会摆回。</li><li>由于影响市场的各种因素的易变性，没有任何工具是完全靠得住的（包括逆向投资）。</li><li>逆向投资并不是稳赚不赔的方法，在大多数情况下，没有值得下注的<strong>过度市场</strong>。</li><li><strong>估价过高与明天就会跌</strong>是截然不同的。市场可以被高估或低估，并且能够将这种状态维持一段时间有时候长有时候短。</li><li>:star:有时候<strong>逆向投资</strong>本身会变得过于热门，从而有可能会被误以为是群体行为。</li></ul><h3 id="怎么去逆向投资">怎么去逆向投资？</h3><p>“低买高卖”是一句古老的名言，但是被卷入市场周期中的投资者却常常反其道而行之。正确的做法应该是逆向投资：</p><p>:star:在人们冷落时买入，在人们追捧时卖出。这样做需要很大的勇气。</p><p>有时候我们仅仅做与大众相反的投资是不够的。我们必须在推理和分析的基础上，辨别如何脱离群体思维才能获利，我们必须在进行逆向投资的时候，知道与大众的做法相反，还要知道大众错在哪里。</p><p>投资成功需要坚定的立场，即使它因为与群体共识存在分歧而<strong>令人不安</strong>。如果我相信别人都相信的故事，我就会和他们做同样的事。显然这不是逆向投资者应该做的。</p><p>:smile:我们应时刻保持怀疑，在恰当的时间说出：<strong>不对，事情好到不像真的</strong>。或者，<strong>不对，事情坏到不像真的</strong>。比如最近的中国2024年7、8月份，大家都抛售房地产行业，以致于房地产行业股票的价格低到令人发指，但是有少部分人已经认识到，事情好像坏道不是真的。果真如此？到2024年10月份房地产行业的股票价格短短两个月就上升了50%至100%。</p><p>我们需要认识到，我们<strong>不可能买在最低点和卖在最高点</strong>，当我们去接<em>刀子</em>时，如果<em>刀子</em>停止下落，尘埃已然落定，不确定性得到解决的时候，<strong>利润丰厚的特价股也将不复存在</strong>。</p><h3 id="为什么要逆向投资">为什么要逆向投资？</h3><p>几乎所有的最佳投资中，他们通常都是<strong>逆向投资</strong>。作为逆向投资者，:zap:我们的任务就是尽可能谨慎熟练的接住落下的“刀子”。这也是<strong>内在价值</strong>的概念如此重要的原因。如果我们对价值的认识能够让我们在<strong>别人都在卖出的时候买进</strong>——并且如果我们的<strong>观点事后被证明是正确的</strong>——那么这就是以<strong>最低风险获取最高回报</strong>的途径。</p><h2 id="第十二章-寻找便宜货">第十二章 寻找便宜货</h2><p>:star:在大多数人不愿做的事情中，通常能够发掘出最佳机会。</p><h3 id="如何定义便宜货">如何定义便宜货？</h3><p><strong>价格显著低于内在价值的公司</strong>，大众所厌恶的。但其基本面是稳定的（就像彼得林奇说的，没有负债的公司，你想让他破产都是见非常困难的事）但表面看上去是有问题的。</p><h3id="怎么寻找并构建便宜货投资组合">怎么寻找并构建便宜货投资组合？</h3><p>便宜货一般具有下列特征：</p><ul><li>鲜为人知或人们一知半解。</li><li>表面上看基本面有问题的。</li><li>有争议、不合时宜或令人恐慌的。</li><li>被认为不适于“正规”投资组合的。</li><li>不被欣赏、不受欢迎和不受追捧的。</li><li>收益不佳的追踪记录。</li><li>最近有亏损问题、没有资本增益的。</li></ul><p>:zap:便宜货存在的必要条件是感觉必须远不如现实。也就是说，最好的机会通常是在大多数人不愿做的事情中发掘出来的。</p><p>构建投资组合的过程是卖出不那么好的投资从而留出空间买进最好的投资（:star:投资是相对选择的训练），不碰最差的投资，这个过程需要以下步骤：</p><ul><li>潜在投资的清单:star:（在能力圈范围的投资，超出认知的就不要放在这个清单里面）</li><li>对它们内在价值的估计</li><li>对其价格相对于内在价值的感知</li><li>对每种投资涉及到的风险及其对在建投资组合的影响的了解</li></ul><h3 id="为什么要寻找便宜货">为什么要寻找便宜货？</h3><p>我们改变不了市场，若想参与其中，我们唯一的选择就是从现存的可能性中选择最好的。这就是相对决策。</p><p>便宜货的价值在于其<strong>不合理的低价位</strong>——因而具有不寻常的收益风险比率，因此它们呢就是投资者的“圣杯”。:smile:我们是积极投资者，因为我们相信我们可以通过识别好的机会而击败市场。另一方面，<strong>许多摆在我们面前的“特殊交易”好到不像真的，避开它们是取得投资成功的关键</strong>。因此，我们要对<strong>有效市场假说的怀疑和成为一个积极的投资者两方面保持平衡</strong>。投资者可能会因心理弱点、错误分析或拒绝进入不确定领域而犯错。:zap:这些错误为能够看到别人错误的第二层次思维者创造了便宜货。</p><p>公平定价的资产从来不是我们的目标，因为他们只能带来有风险的一般收益，当然，定价过高的资产对我们更没有任何好处。我们的目标是寻找估价过低的资产。</p><h2 id="第十三章-耐心等待机会">第十三章 耐心等待机会</h2><p>市场不是有求必应的机器，它不会仅仅因为你需要就提供高额收益。</p><h3 id="什么对于我们来说是机会">什么对于我们来说是机会？</h3><p>在低收益环境（普遍价格偏高）中要想得到较高收益，需要具备逆流而上的能力，以及找到相对较少的制胜投资的能力。这显然不是我们所说的机会。:star:高收益环境（普遍价格较低）所提供的高额收益机会是通过低价买进实现的，并且通常是低风险的，这才是我们所说的<strong>机会</strong>。比如，2000年的互联网泡沫后，2008年的危机后。这些时机都出现了高额收益的机会，而且是通过<strong>损失概率</strong>很小的投资做到这一点的。</p><h3 id="如何耐心等待机会">如何耐心等待机会？</h3><p>我们要等待投资机会的到来而不是追逐投资机会。在卖家积极卖出的东西中挑选，而不是固守想要什么才买什么的观念，这样的交易往往会更划算。</p><p>买入的绝佳机会出现在资产持有者被迫卖出的时候，在经济危机中这样的人比比皆是。比如近期中国从2021年开始，房地产泡沫开始破裂后，大部分基金投资者开始赎回他们的投资，所以基金经理不得不<strong>被迫卖出</strong>所持有的资产，这个时间段一直持续到了至今（2024年9月），国家开始出台强效政策试图救活房地产行业在经济中的流动性，才有所缓止。但是否有效，我们静心观之。:zap:但是2023到2024这个过程中确实出现了我们所说的机会（有一部分优质公司，因房地产行业下行的带动下，股价跌到了非常低的水平）。</p><p>:smile:潜在卖家会在卖个好价和尽快卖掉之间做出权衡。而强制卖家的妙处在于他们别无选择，他们必须不计价格卖出。如果我们是交易的另一方，那么“不计价格”这四个字将是世界上最美妙的词汇。</p><p>在危机中关键要做到远离强制卖出的力量，并<strong>把自己定位为买家</strong>。要达到这一标准，我们需要做到以下几点：</p><ul><li>坚信价值</li><li>少用或不用杠杆</li><li>有长期资本和顽强的意志力</li></ul><p>在逆向投资态度和强大资产负债表支撑下，耐心等待机会，便能在灾难中收获惊人的收益。</p><h3 id="为什么要等待机会">为什么要等待机会？</h3><p>在周期中逆势而动的逆向投资者们有了扬名立万的黄金机遇，但并不是总有伟大的事情等着我们去做，有时候我们可以通过敏锐的洞察和相对消极的行动将成果最大化。耐心等待机会——等待便宜货——往往是最好的策略。</p><h2 id="第四十章-认识预测的局限性">第四十章 认识预测的局限性</h2><p>:smile_cat:世界上有两类预言家：无知的，和不知道自己无知的。赔钱的人有两种：<strong>一无所知</strong>的和<strong>无所不知</strong>的。</p><h3 id="预测的局限性有哪些">预测的局限性有哪些？</h3><p>我们有可能推知未来将会发生什么，但是在最需要预测的紧要关头，我们却几乎无法预测未来将会发生什么。</p><ul><li>多数时候人们会根据以往预测未来。</li><li>人们不一定是错的：未来多数时候在很大程度上是以往的重复。</li><li>然而根据以往的经验作出的准确预测并不具备太大价值（概率太小）。</li><li>然而，未来每隔一段时间就会与过去大不相同。此时的准确预测具有巨大价值，但也是预测最难准确的时候。</li><li>某些关键时刻（比如2000年，2008年）作出的预测能最终被证实是对的，表明准确地预测关键事件是有可能的，但同一个人持续做出准确预测是不太可能的。</li><li>总而言之，预测的价值很小。</li></ul><p>这里我补充一点：巴菲特在1999年提示过，美国股市泡沫严重。2007年也提示过股市泡沫。两次他都用行动（抛售）证明了，人狂热的时候做出逆向决策是多么重要，也说明有人能大概推测未来，但并不是所有人都可以，他也只是<strong>个例</strong>。但仔细观察会发现，其实他遵循的就是<strong>价值和价格的关系</strong>这一点。</p><h3 id="怎么去认识预测的局限性">怎么去认识预测的局限性？</h3><p>如何去看待说自己能预测，并预测准确的人呢？</p><p>:smile:这里我们可以借用<strong>塔勒布</strong>的《随机致富的傻瓜》一书中的知识。</p><blockquote><p>概率中的一个经典现象——:star:<strong>幸存者偏差</strong>，由于我们只看到成功者，而由此形成的对机遇的歪曲看法。</p><p>比如说，我们常会认为长得英俊漂亮的人薪水会比较高，其实这是因为我们经常只会注意到那些薪水比较高的人，或者说那些薪水比较高的人容易被我们注意到罢了。</p><p>这部分举了一个很有名的例子，就是让很多很多的猴子放在打字机前，他们肯定会有那么一两只会打出一字不差的《伊利亚特》叙事诗。换句话说，从事商业的人数越多，其中某个人单靠机遇便能有惊人表现的可能性就越高。</p><p>作者还引用了<strong>生日悖论</strong>，随便找一个人，你和他生日是同一天的概率是<code>0.27%</code>，可是如果一个房间内有<code>23</code>个人，有两个生日相同的概率高达<code>50%</code>，在生活中，我们随处遭遇着幸存者偏差，把一个变量的极大值分布误作为那个变量本身。</p><p>用投资的思维看的话，就是我们通常只会关注在投资领域成功的投资者，比如巴菲特等，我们会对我们也可以成为像他一样成功的投资者产生误解，就连巴菲特自己都说过，他只不过是中了<strong>卵巢红利</strong>（生在一个对的地方，并做了一些对的事情）。我们只要仔细观察我们的股市就会发现，中国股民有接近3亿，但是成功的寥寥可数。</p></blockquote><p>很少有人把预测未来转化为投资优势的知识，<strong>但是我们对细节关注越多，越有可能获得知识优势。我们应尽量弄清自己在周期和钟摆中所处的阶段。这不会令未来变得可知，但是它能帮助我们为可能的发展作好准备</strong>。简单的说是，我们不能靠预测的结果指导我们的行为，但是我们可以细心观察或预测大概概率（就像，我不需要精确的错误，我需要的是模糊的正确），并作好准备应对。</p><h3 id="为什么要认识预测的局限性">为什么要认识预测的局限性？</h3><p>无论是进行脑外科手术、数学竞赛还是投资，过高估计自己的认知或行动能力都是<strong>极度危险</strong>的。正确认识自己的<strong>可知范围</strong>（巴菲特说的能力圈）——适度行动而不冒险越界——会令我们获益匪浅。</p><h2 id="star第十五章-正确认识自身">:star:第十五章 正确认识自身</h2><p>我们不知道一个趋势会持续多久，不知道它何时反转，也不知道导致反转的因素以及反转的程度。但我们应该相信，趋势迟早都会终止。没有任何东西能够永远存在。</p><h3 id="自身指的是什么">自身指的是什么？</h3><p>这里我们说的自身是以下两点：</p><ul><li>自己的知识、常识、情绪</li><li>自己的资源（可以利用的投资资金）</li></ul><p>当然这其中还有，自身现在处于市场周期的那个阶段。</p><h3id="在投资中怎么认识自身处于周期的哪个阶段">在投资中怎么认识自身处于周期的哪个阶段？</h3><p>我们在投资中面对周期，我们或许永远不会知道要去往何处，但最好弄明白我们身在何处。也就是说，即使我们不能预测周期性波动的时间和幅度，力争<strong>弄清我们处于周期的哪个阶段并采取相应的行动</strong>也是很重要的。这并不是说知道自己处于哪个阶段就会准确地预知接下来的事情。但对我们自身处境的正确认识会为我们了解未来事件、采取相应对策提供宝贵的洞见。</p><p>下面几点做法在对认识自身中或许会有帮助：</p><ul><li>当市场已经到达极端的时候，保持警惕。</li><li>相应地调整我们的行为。</li><li>:star:拒绝向<strong>导致无数投资者在市场顶部或底部犯下致命错误的群体行为</strong>看齐。</li></ul><p>:smile:了解未来很困难，但是了解现在没有那么难。第九章的牛市和熊市的几个阶段也可以用来观察。</p><p>我们必须力求了解我们身边所发生的事情的含义。当其他人盲目自信、积极买入时，我们应加倍小心；当其他人不知所措或恐慌性抛售时，我们应该更加积极。</p><ul><li><p>收益率差（利差）是收窄还是扩大？——收益率差 = 企业债券收益率 -国债收益率</p><blockquote><p><strong>利差收窄</strong></p><p>在信用风险降低的情况下，低等级债券与无风险债券之间的收益率差可能会减小。:zap:通常发生在经济环境改善、企业盈利能力增强、违约风险降低、经济稳定增长、通货膨胀率较低、央行政策利率保持稳定的时期。</p><p><strong>利差扩大</strong></p><p>在信用风险方面，收益率差扩大可能反映市场对某些行业或企业的担忧增加。例如，在经济衰退或行业不景气的情况下，特定行业或企业的违约风险可能会上升，导致相关债券的收益率差扩大。:zap:通常发生在经济不确定性增加、通货膨胀率上升、央行政策利率调整或市场预期未来利率变化较大的时期。</p></blockquote></li></ul><p>作者这里给出了个表格用于测试市场温度（市场现在的阶段），当<strong>呆滞项</strong>逐渐变成<strong>活跃项</strong>时是往牛市走，反过来则是往熊市走。全部项目都在一个大项里面就代表最高和最低了。</p><table><thead><tr><th style="text-align: center;">经济</th><th style="text-align: center;">活跃</th><th style="text-align: center;">呆滞</th></tr></thead><tbody><tr><td style="text-align: center;">前景</td><td style="text-align: center;">积极</td><td style="text-align: center;">消极</td></tr><tr><td style="text-align: center;">贷款人</td><td style="text-align: center;">急切</td><td style="text-align: center;">谨慎</td></tr><tr><td style="text-align: center;">资本市场</td><td style="text-align: center;">宽松</td><td style="text-align: center;">紧缩</td></tr><tr><td style="text-align: center;">资本</td><td style="text-align: center;">充足</td><td style="text-align: center;">短缺</td></tr><tr><td style="text-align: center;">贷款条款</td><td style="text-align: center;">宽松</td><td style="text-align: center;">严格</td></tr><tr><td style="text-align: center;">利率</td><td style="text-align: center;">低</td><td style="text-align: center;">高</td></tr><tr><td style="text-align: center;">利差</td><td style="text-align: center;">窄</td><td style="text-align: center;">宽</td></tr><tr><td style="text-align: center;">投资者</td><td style="text-align: center;">乐观、自信、渴望买入</td><td style="text-align: center;">悲观、担忧、丧失购买兴趣</td></tr><tr><td style="text-align: center;">资产持有人</td><td style="text-align: center;">乐于持有</td><td style="text-align: center;">急于出手</td></tr><tr><td style="text-align: center;">卖家</td><td style="text-align: center;">少</td><td style="text-align: center;">多</td></tr><tr><td style="text-align: center;">市场（整个市场交易量）</td><td style="text-align: center;">拥挤</td><td style="text-align: center;">急需关注</td></tr><tr><td style="text-align: center;">基金</td><td style="text-align: center;">申购门栏高、每天都有新基金</td><tdstyle="text-align: center;">对所有人开放、只有最好的才能募到资金</td></tr><tr><td style="text-align: center;">近期表现</td><td style="text-align: center;">强</td><td style="text-align: center;">弱</td></tr><tr><td style="text-align: center;">资产价格</td><td style="text-align: center;">高</td><td style="text-align: center;">低</td></tr><tr><td style="text-align: center;">预期的回报</td><td style="text-align: center;">低</td><td style="text-align: center;">高</td></tr><tr><td style="text-align: center;">风险</td><td style="text-align: center;">高</td><td style="text-align: center;">低</td></tr><tr><td style="text-align: center;">人群特征</td><td style="text-align: center;">积极进取、广泛投资</td><td style="text-align: center;">谨慎守纪、有选择地投资</td></tr></tbody></table><h3 id="为什么要认识自身">为什么要认识自身？</h3><p>市场在周期性运动，有涨有跌。钟摆在不断摆动，极少停留在弧线的中点。这是危险还是机会？投资者该如何应对？对于这两个问题我们只要:muscle:<strong>努力了解我们身边所发生的事情，并以此指导我们的行动</strong>。</p><h2 id="第十六章-重视运气">第十六章 重视运气</h2><p>每隔一段时间，就会有一个在不可能或不明朗的结果上下了高风险赌注的人，结果他看起来像个天才。但我们应该认识到，他之所以能够成功，靠的是运气和勇气。而不是技能。（幸存者偏差）</p><h3 id="怎么识别运气">怎么识别运气？</h3><p>随机性（运气）对结果起着巨大的作用，我们应区别对待<strong>随机事件</strong>与<strong>非随机事件</strong>带来的结果。我们在评判投资结果是否具有<strong>可重复性</strong>时，必须考虑随机性对我们的影响，必须考虑我们的业绩靠的是<strong>技能</strong>还是单纯的<strong>运气</strong>。</p><p>例：有一个投资者在2023年获得200%的收益，超过了所有人，但其他年份收益率却表现平平只有3%甚至有时是负的，你认为他的业绩靠的是运气还是技能？</p><p>例：另一个投资者从1956年开始直到2023年，每年平均收益而19%左右，很显然2023年他的收益远远低于200%，那你认为他的投资业绩是靠运气还是技能？</p><h3 id="为什么要重视运气">为什么要重视运气？</h3><p>有很大概率发生并不代表一定发生，也有可能发生小概率事件。在一个人成功的时候，运气看起来就像是技能一样。作为投资者所取得的成功深受偶然因素的影响。</p><p>:star:适度尊重风险，知道未来不能预知，明白未来是概率分布的并相应地进行投资，坚持防御型投资，强调避免错误的重要性，这点在作者看来，就是有关聪明投资的一切。</p><h2 id="第十七章-多元化投资">第十七章 多元化投资</h2><p>有老投资者，有大胆的投资者，但没有大胆的老投资者。</p><h3 id="什么是多元化投资">什么是多元化投资？</h3><p>投资不同领域、不同的产业，通过分散投资来降低整体投资组合的风险。:zap:多元化投资属于防御型投资，反之，集中化投资属于进攻型投资。这两种策略的<strong>思维模型</strong>有很大的不同。</p><h3 id="怎么去多元化投资">怎么去多元化投资？</h3><p>多元化投资是防御型投资的关键策略之一。通过投资多个不同的资产，可以分散风险，提高投资组合的稳定性。比如我常有的如下比例：</p><ul><li>国债 15%</li><li>货币基金或企业债券 39%</li><li>黄金 8%</li><li>大宗商品 8%</li><li>股票 30%</li></ul><h3 id="为什么要多元化投资">为什么要多元化投资？</h3><p>在主流股票市场主动寻求<strong>致胜投资</strong>未必有好处。相反，投资者应尽量避免<strong>致败投资</strong>。换句话说，攻守选择没有对错之分。条条大陆通罗马，我们的决策必须基于我们的性格与学识、我们对自己能力的信任程度以及我们所在的市场。</p><p>这本书强调的也是<strong>防御型投资</strong>（就是避免错误投资），也就是在投资组合中要有足够的<strong>安全边际</strong>。这里可以用一个例子来解释安全边际：</p><blockquote><p>:star:我们通过计算、分析，发现一些估值为100元的资产。如果90元买进，我们就得到一个获利的好机会，同时，如果我们推断过于乐观，也会有一定的损失概率。但是如果我们用60元而不是90元买进，我们的损失概率就会减少。减少的这30元就为我们的失误提供了额外的空间，同时仍然有很好的获利机会。低价是安全边际的源泉。</p></blockquote><p>我们在长期的投资生涯中持续性是我们能够存活的根基，所以防守型投资是我们这样的业余投资者最好的选择。尤其在资金不断增长后，越是大资金越寻求的是安全。</p><h2 id="star第十八章-避免错误">:star:第十八章 避免错误</h2><p>投资者几乎无须做对什么事，他只需能够避免犯重大错误。</p><h3 id="有哪些错误">有哪些错误？</h3><p>错误的形式多种多样——多到不胜枚举。以下是一些常见的错误：</p><ul><li>分析过程中数据或计算错误导致错误股价。<strong>（分析错误）</strong></li><li>对各种可能性及其后果估计不足。<strong>（想象无能错误）</strong></li><li>贪婪、恐惧、嫉妒、自负、终止怀疑、盲从和屈服达到极致。最终，风险承担或风险容忍过度。<strong>（心理错误）</strong></li><li>价格显著偏离价值，投资者没有注意到这种偏离甚至还要推波助澜。<strong>（认识错误）</strong></li></ul><h3 id="怎么去避免错误">怎么去避免错误？</h3><p>对于分析错误，我们应该更仔细的收集资料，以及对不同资产的估值方式区别对待，没有一种估值方式可以估计所有资产类别。</p><p>对于想象无能错误，我们要理解一种资产可能会对另一种资产的变化做出反应。理解并预测相关性的影响——进而理解并预测多元化的局限——是风险控制和投资组合管理的主要任务，这很难实现。但是<strong>不能正确预测投资组合内的协同运动是投资失败的一个关键原因</strong>。<em>比如，一家汽车制造商的股票下跌，共同因素将会导致所有汽车股同时下跌等。</em>如果我们的投资组合内类别不同且有良好的比例控制可以避免这样的情况出现。</p><p>对于心理错误，我们必须保持警惕，尤其是当人们狂热的时候。</p><p>对于认识错误，市场就是课堂，每天都在传授着各种经验教训。投资成功的关键在于<strong>观察和学习</strong>。</p><p>:smile:尽管识别和避免具体错误并不容易，但这是一个很好的时机，令我们意识到有许多错误潜伏在暗处，进而持有防御型更强的仓位。做不到这一点也是一个巨大的错误。我们应该做到以下几点：</p><ul><li>留意他人的轻率举动。</li><li>做好应对低迷的心理准备。</li><li>卖出资产，或至少卖出风险更高的资产。</li><li>减少杠杆。</li><li>筹集现金。</li><li>加强投资组合的防御性。</li></ul><p>从定义来看，大多数人都会犯错误，因为如果不是他们的一致性，错误就不会存在。采取相反的行动<strong>需要逆向投资态度</strong>，而长期逆向投资会带来<strong>孤独感</strong>和<strong>错误感</strong>。</p><h3 id="为什么要避免错误">为什么要避免错误？</h3><p>设法<strong>避免损失</strong>比<strong>争取伟大的成功</strong>更加重要。后者有时会实现，但偶尔失败可能会导致严重后果。前者可能是我们可以更经常做的，并且更可靠，失败的结果也更容易接受。</p><ul><li>投资组合风险过高时，向下的波动会令我们失去信心或低价抛售。</li><li>投资组合风险过低时，会令我们在牛市中表现不佳，但从未有人曾经因此而失败。</li></ul><p>普通的投资者能避免错误就算万幸了，而优秀的投资者期待的却是从错误中获利。</p><h2 id="第十九章-增值的意义">第十九章 增值的意义</h2><p>增值型投资者的表现是<strong>不对称</strong>的。他们获得的市场收益率高于他们蒙受的损失率，只有依靠技术，才能保证有利环境中的收益高于不利环境中的损失。这就是我们寻找的投资不对称性。</p><p>不对称性——（牛市收益率尽量跟随指数，熊市收益率超过指数或损失低于指数。）</p><h3id="增值对于经验丰富的投资者的意义是什么">增值对于经验丰富的投资者的意义是什么？</h3><p>这里作者讲了两个投资理论术语：::smile:我们可以仅当参考。</p><ul><li><p>β系数。衡量投资组合相对市场走势的敏感度。<strong>公式为</strong>：$投资组合β系数=w_1<em>β_1+w_2</em>β_2++w_n*β_n$（其中 <strong>w</strong> 代表组合中每支股票的资金比例，<strong>β</strong>代表每只股票的被系数，可以通过金融软件来获取每只股票的β系数）</p><blockquote><p>如果β为1，则市场上涨10%，股票上涨10%；市场下滑10%，股票相应下滑10%。</p><p>如果β为1.1，市场上涨10%时，股票上涨11%；市场下滑10%时，股票下滑11%。</p><p>如果β为0.9，市场上涨10%时，股票上涨9%；市场下滑10%时，股票下滑9%。</p><ul><li><strong>β &gt; 1</strong>：投资组合的波动性高于市场。</li><li><strong>β = 1</strong>：投资组合的波动性与市场一致。</li><li><strong>β &lt; 1</strong>：投资组合的波动性低于市场。</li><li><strong>β = 0</strong>：投资组合与市场完全不相关。</li><li><strong>β &lt;0</strong>：投资组合与市场呈负相关，即当市场上涨时下跌，反之亦然。</li></ul></blockquote></li><li><p>α系数。个人投资技术，与市场走势无关的获利能力。</p><blockquote><p>假设有一投资组合，通过对其的风险水平分析，资本资产定价模型预测其每年回报率为14%。但是该投资组合的实际回报率为每年19%。此时，这个投资组合的α系数为5%（19%－14%），即表示该组合的实际回报率超过由资本资产定价模型预测的回报率5个百分点。</p><p>α＞0，表示基金或股票的价格可能被低估，建议买入。亦即表示该基金或股票以投资技术获得平均比预期回报大的实际回报。</p><p>α＜0，表示基金或股票的价格可能被高估，建议卖空。亦即表示该基金或股票以投资技术获得平均比预期回报小的实际回报。</p><p>α=0，表示基金或股票的价格准确反映其内在价值，未被高估也未被低估。亦即表示该基金或股票以投资技术获得平均与预期回报相等的实际回报。</p></blockquote></li></ul><table><caption>zap:<span class="math inline">\(投资组合的表现 = α + β *x\)</span>(其中x为市场平均收益)</caption><thead><tr><th style="text-align: center;">时间</th><th style="text-align: center;">市场平均收益</th><th style="text-align: center;">投资组合收益</th></tr></thead><tbody><tr><td style="text-align: center;">:x:1</td><td style="text-align: center;">10</td><td style="text-align: center;">20</td></tr><tr><td style="text-align: center;">:x:2</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr><td style="text-align: center;">:x:3</td><td style="text-align: center;">-10</td><td style="text-align: center;">-20</td></tr><tr><td style="text-align: center;">:o:4</td><td style="text-align: center;">10</td><td style="text-align: center;">12</td></tr><tr><td style="text-align: center;">:o:5</td><td style="text-align: center;">0</td><td style="text-align: center;">2</td></tr><tr><td style="text-align: center;">:o:6</td><td style="text-align: center;">-10</td><td style="text-align: center;">-1</td></tr><tr><td style="text-align: center;">:heavy_check_mark:7</td><td style="text-align: center;">10</td><td style="text-align: center;">25</td></tr><tr><td style="text-align: center;">:heavy_check_mark:8</td><td style="text-align: center;">0</td><td style="text-align: center;">-5</td></tr><tr><td style="text-align: center;">:heavy_check_mark:9</td><td style="text-align: center;">-10</td><td style="text-align: center;">-15</td></tr></tbody></table><p>上面这个表格粗略的表示了一个投资组合风格的好坏：</p><ul><li>:x:表示并不是一个好的组合或一个好的资风格</li><li>:o:表示一个比较好的组合或投资风格</li><li>:heavy_check_mark:如果能容忍波动，这个组合或这种投资风格就是技术最高的。</li></ul><h3 id="如何利用技术实现增值">如何利用技术实现增值？</h3><p>我们怎么实现增值取决于，我们要认清周期，也就是第十五章说的内容。在衰退期，防御型投资者的损失少于积极进取型投资者，在繁荣期，积极进取型投资者比防御性投资者赚得更多。但他们提升价值了吗？未必。</p><table><caption>grin:我个人认为这里讲的<strong>技术</strong>就是：</caption><thead><tr><th style="text-align: center;"></th><th style="text-align: center;">积极进取型投资者</th><th style="text-align: center;">防御型投资者</th></tr></thead><tbody><tr><td style="text-align: center;">无技术</td><tdstyle="text-align: center;">市场上涨时获利丰厚，市场下跌时损失惨重</td><tdstyle="text-align: center;">市场下跌时损失不多，但市场上涨时获利也不多</td></tr><tr><td style="text-align: center;">有技术</td><tdstyle="text-align: center;">市场上涨时获利丰厚，下跌时不会同等程度下跌</td><tdstyle="text-align: center;">市场下跌时损失不多，但上涨时获利颇丰</td></tr></tbody></table><ul><li><strong>准确估值、时刻记住安全边际、保持良好的心态、仔细观察周期的变化</strong>:heavy_check_mark:</li></ul><h3 id="为什么要知道增值的意义">为什么要知道增值的意义？</h3><p>就风险与收益来看，达到市场一致的表现并不难，难的是比市场表现的更好：增值。这里就又要回到第二层次思维者身上去思考。</p><p>:star:为了在市场表现良好时与市场表现一致，一个投资组合必须有适当的β系数和市场相关性，但是，如果市场在上涨时我们得益于β系数，它们会不会在市场下跌的时候伤害我们？如果我们能持之以恒地做到在市场衰退时损失更少、在市场上涨时充分参与，那么原因只有一个：<strong>α系数</strong>，或技术。</p><p>不对称性——上涨时收益高于下跌时的损失，并且超过单纯投资风格所致的结果——应成为我们的目标。</p><p>:zap:<span class="math inline">\(投资组合的表现 = α + β *x\)</span>(其中x为市场平均收益)</p><h2 id="star第二十章-最重要的事">:star:第二十章 最重要的事</h2><p>成功的投资或成功的投资生涯的基础，是<strong>价值</strong>。我们必须清楚的认识到我们想买进的东西的价值。价值简单来说就是：</p><ul><li><p>账面现金和有形资产价值（账面价值）</p></li><li><p>公司或资产产生现金流的能力（商业模式）</p></li><li><p>以及所有这些东西的增值潜力（增长潜力）</p><blockquote><p>这里可以将增长潜力设置一个<strong>置信区</strong>（参考现实经济形势），比如，你依照以往来看，下一年该公司盈利能力可能增长30%，但是任何事物都有周期，不可能好的一直好，坏的一直坏，我们假设置信区为50%，那么我们得到公司增长潜力就是<code>30%*50%=15%</code></p></blockquote></li></ul><p>为了取得卓越的投资结果，<strong>我们必须学会别人不会的东西、以不同的视角看待问题、对问题分析得更到位</strong>。</p><h2 id="评语">评语</h2><p>本书主要讲解了<strong>逆向思维</strong>的重要性，通过逆向思维来理解市场周期，理解风险，和定义投资风格的好坏，并强调<strong>价值和价格的关系</strong>是最重要的事。</p><p>我认为作者的理论论证是符合现实情况的。但有些时候是有些执着和路径依赖的，虽然防御性投资风格在很多时候是理性并且好的，但是也有很多进攻型投资风格取得连续很好的成绩，比如巴菲特，费雪等。</p><p>作为投资者的我来理解是，不管进攻性还是防御性投资风格，最重要的是要认识到<strong>资产的价值</strong>并在合适的周期阶段进行投资动作（买入和卖出），还要衡量资产比重（仓位），才能取得好的结果，这才是关键。这一点在所有投资大师身上都可以看得到，本杰明格雷厄、巴菲特、彼得林奇、费雪、格林布拉特、西蒙斯等，当然还有本书的作者霍华德马克思。</p><p>一个合理的组合应该是根据市场而定：</p><p>经济周期：繁荣——衰退——萧条——复苏</p><ul><li>经济衰退、萧条期，防御型资产占比应该为70%-80%，进攻型资产占比为30%-20%</li><li>经济复苏、繁荣期，进攻型资产占比应该为70%-80%，防御型资产占比为30%-20%</li><li>平常期（这个时间段非常短），防御型和进攻型各占50%</li></ul>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo制作博客教程</title>
    <link href="/2024/10/25/2024-10-25-Hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <url>/2024/10/25/2024-10-25-Hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Hexo常用命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 文章的书写<br>hexo new [layout] &lt;title&gt;<br><br>eg: hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span> 其中 layout为_config.yml中的默认参数值。<br><br>-p --path 自定义新文章<br>-r --replace 存在同名文章，替换<br>-s --slug 文章的slug，作为新文章的文件名和发布后的URL<br>eg： hexo new page --path about/me <span class="hljs-string">&quot;About me&quot;</span><br><br>2. 生成静态文件<br>hexo generate 或 hexo g<br><br>-d 或--deploy 文件生成后部署网站<br>-w 或--watch 监视文件变动<br>-b 或--bail 生成过程中出现异常则抛出。<br>-f 或--force 强制重新生成文件<br>-c 或--concurrency 最大同时生成文件数量，默认无限制。<br>3. 发布草稿<br>hexo publish [layout] &lt;filename&gt;<br><br>4.启动服务器<br>hexo server 启动服务器，ctrl+c 结束，默认地址为：http://localhost:4000/<br><br>5.部署网站<br>hexo deploy 或hexo d<br><br>-g 或--generate 部署之前写成静态文件<br>6.渲染文件<br>hexo render &lt;file1&gt; [file2]<br><br>-o或--output 设置输出路径<br>7. 清除缓存文件<br>hexo clean<br><br>8. 列出网站资料<br>hexo list &lt;<span class="hljs-built_in">type</span>&gt;<br><br>9. 显示草稿<br>hexo --deaft<br><br>10. 自定义当前工作目录<br>hexo --cwd /path/to/cwd<br></code></pre></td></tr></table></figure></p><p>建立一个基于GitHub的个人博客网站是一个既实用又能提升技术能力的好项目。以下是一个详细的步骤清单，帮助你从零开始搭建个人博客：</p><h2 id="第一步-注册">第一步 注册</h2><h3 id="注册和设置github账户">1.<strong>注册和设置GitHub账户</strong></h3><ul><li><strong>注册GitHub</strong>：如果你还没有GitHub账户，需要先注册一个。</li><li><strong>设置个人信息</strong>：完善你的个人资料，包括头像、简介等，这将展示在你的博客页面上。</li></ul><h3 id="选择博客框架工具">2. <strong>选择博客框架/工具</strong></h3><ul><li><strong>静态网站生成器</strong>：如Jekyll（Ruby）、Hugo（Go）、Hexo（Node.js）等，它们可以从Markdown文件生成静态HTML页面。</li><li><strong>主题选择</strong>：选择一个你喜欢的主题，很多框架都有现成的主题库可以选择，也可以自定义。</li></ul><h3 id="安装和配置博客框架">3. <strong>安装和配置博客框架</strong></h3><ul><li><strong>安装必要的软件</strong>：根据你选择的框架，安装相应的软件（如Ruby、Node.js等）。</li><li><strong>初始化博客</strong>：按照框架的官方文档，通过命令行工具初始化一个新的博客项目。</li><li><strong>配置_config.yml</strong>（以Jekyll为例）：修改配置文件，设置博客的基本信息，如标题、作者、社交链接等。</li></ul><h3 id="创建和编辑内容">4. <strong>创建和编辑内容</strong></h3><ul><li><strong>Markdown文件</strong>：使用Markdown编写你的文章，存放在指定的文件夹中（通常是<code>_posts</code>）。</li><li><strong>添加页面</strong>：根据需要添加其他页面，如关于我、作品集等，也是使用Markdown编写。</li></ul><h3 id="本地预览">5. <strong>本地预览</strong></h3><ul><li><strong>运行博客</strong>：在本地运行博客，预览效果。大多数框架都提供了命令行工具来启动一个本地服务器。</li><li><strong>调试和修改</strong>：根据预览效果，调整文章内容和样式。</li></ul><h3 id="部署到github-pages">6. <strong>部署到GitHub Pages</strong></h3><ul><li><strong>创建仓库</strong>：在GitHub上创建一个新的仓库，命名为<code>username.github.io</code>（<code>username</code>是你的GitHub用户名），这是GitHubPages的默认域名。</li><li><strong>推送代码</strong>：将你的博客代码推送到这个仓库。</li><li><strong>启用GitHubPages</strong>：在仓库的设置中，找到“Pages”部分，选择“main”或“gh-pages”分支（取决于你的配置），然后保存设置。</li><li><strong>自定义域名</strong>（可选）：如果你想使用自己的域名，可以在Pages设置中添加CNAME记录，并在域名提供商处配置A记录指向GitHubPages的IP地址。</li></ul><h3 id="优化和维护">7. <strong>优化和维护</strong></h3><ul><li><strong>SEO优化</strong>：添加meta标签，使用SEO友好的URL结构，确保内容易于被搜索引擎索引。</li><li><strong>更新内容</strong>：定期发布新文章，保持博客活跃。</li><li><strong>备份</strong>：定期备份你的博客代码和文章，以防万一。</li><li><strong>安全性</strong>：注意GitHub仓库的安全设置，避免敏感信息泄露。</li></ul><h3 id="推广和互动">8. <strong>推广和互动</strong></h3><ul><li><strong>社交媒体</strong>：通过社交媒体分享你的文章，增加曝光度。</li><li><strong>读者互动</strong>：添加评论系统（如Disqus、Utterances），鼓励读者留言反馈。</li><li><strong>加入社区</strong>：参与技术社区，与其他博主交流，互相学习。</li></ul><p>完成以上步骤后，你就拥有了一个基于GitHub的个人博客网站。记得持续学习和探索，不断优化你的博客，让它成为你展示才华和分享知识的平台。</p><p>没问题，即使你对编程不太熟悉，我们仍然可以一步一步地搭建你的个人博客。既然你已经完成了GitHub账户的注册和设置，接下来我们将选择并配置一个适合初学者的博客框架。</p><h2 id="第二步选择博客框架工具">第二步：选择博客框架/工具</h2><p>对于初学者来说，我推荐使用<strong>Hexo</strong>或<strong>Hugo</strong>这样的静态网站生成器，因为它们相对简单且易于上手，尤其是Hexo，它使用Markdown编写内容，非常适合不熟悉编程的人。</p><h4 id="选择hexo的原因">选择Hexo的原因：</h4><ul><li><strong>Markdown支持</strong>：你可以使用Markdown语法来编写文章，这是一种轻量级标记语言，易于学习和使用。</li><li><strong>主题丰富</strong>：Hexo有大量的第三方主题可供选择，你可以很容易地找到一个你喜欢的样式。</li><li><strong>插件支持</strong>：Hexo有丰富的插件生态系统，可以扩展博客的功能，比如添加评论系统、SEO优化等。</li><li><strong>部署简单</strong>：Hexo可以轻松地将你的博客部署到GitHubPages上。</li></ul><h4 id="安装hexo">安装Hexo</h4><ol type="1"><li><strong>安装Node.js和npm</strong>：<ul><li>首先，你需要安装Node.js，这是Hexo运行的基础。你可以从Node.js的官方网站（https://nodejs.org/）下载并安装适合你操作系统的版本。</li><li>安装Node.js时，npm（Node Package Manager）会一并安装。</li></ul></li><li><strong>全局安装Hexo</strong>：<ul><li>打开你的命令行工具（在Windows上是CMD或PowerShell，在macOS或Linux上是Terminal）。</li><li>输入以下命令来全局安装Hexo： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li>这将安装Hexo的命令行工具，允许你通过命令行来创建和管理Hexo博客。</li></ul></li><li><strong>初始化Hexo博客</strong>：<ul><li>选择一个你想要存放博客代码的文件夹，并导航到该文件夹。</li><li>输入以下命令来初始化一个新的Hexo博客： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br></code></pre></td></tr></table></figure></li><li>这将创建一个名为<code>myblog</code>的新文件夹，里面包含了Hexo博客的基本结构和默认主题。</li><li>进入<code>myblog</code>文件夹： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>安装依赖</strong>：<ul><li>在<code>myblog</code>文件夹内，运行以下命令来安装博客所需的依赖项：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>启动本地服务器</strong>：<ul><li>输入以下命令来启动Hexo的本地服务器，并预览你的博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure></li><li>默认情况下，服务器会在<code>http://localhost:4000</code>上运行。你可以在浏览器中打开这个地址来查看你的博客。</li></ul></li><li><strong>创建和编辑文章</strong>：<ul><li>在<code>myblog/source/_posts</code>文件夹中，你可以创建新的Markdown文件来编写文章。</li><li>Hexo会自动将这些Markdown文件转换为HTML页面，并在你启动本地服务器时显示。</li></ul></li><li><strong>生成静态文件</strong>：<ul><li>当你准备好将博客部署到GitHubPages时，你可以使用以下命令来生成静态HTML文件： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure></li><li>这将在<code>myblog/public</code>文件夹中生成静态文件。</li></ul></li><li><strong>部署到GitHubPages</strong>（我们将在后续步骤中详细讨论）。</li></ol><p>现在你已经成功安装了Hexo，并创建了一个基本的博客。</p><h2 id="第三步创建和编辑内容">第三步：创建和编辑内容</h2><h4 id="了解hexo的文件结构">1. <strong>了解Hexo的文件结构</strong></h4><p>在你之前初始化的Hexo博客文件夹（比如<code>myblog</code>）中，有几个重要的文件夹和文件：</p><ul><li><code>source/</code>：存放你的原始内容，包括Markdown文章、图片等。</li><li><code>source/_posts/</code>：存放你的文章，每个文章都是一个<code>.md</code>文件。</li><li><code>themes/</code>：存放你选择的Hexo主题。</li><li><code>_config.yml</code>：Hexo博客的全局配置文件。</li></ul><h4 id="编写新文章">2. <strong>编写新文章</strong></h4><ol type="1"><li><strong>创建Markdown文件</strong>：<ul><li>进入<code>source/_posts/</code>文件夹。</li><li>创建一个新的Markdown文件，文件名通常遵循<code>YYYY-MM-DD-title.md</code>的格式，其中<code>YYYY</code>是年份，<code>MM</code>是月份，<code>DD</code>是日期，<code>title</code>是你的文章标题（用英文短横线<code>-</code>分隔单词）。</li></ul></li><li><strong>编写文章头部信息</strong>（Front-matter）：<ul><li>在Markdown文件的顶部，添加如下信息（用三个短横线<code>---</code>包围）：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">你的文章标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-string">HH:MM:SS</span> <span class="hljs-comment"># 发布日期和时间</span><br><span class="hljs-attr">categories:</span> <span class="hljs-comment"># 文章的分类</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类2</span><br><span class="hljs-attr">tags:</span> <span class="hljs-comment"># 文章的标签</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li><li>替换<code>你的文章标题</code>、<code>YYYY-MM-DD HH:MM:SS</code>、<code>分类1</code>、<code>分类2</code>、<code>标签1</code>和<code>标签2</code>为实际的内容。</li></ul></li><li><strong>编写文章内容</strong>：<ul><li>在Front-matter之后，你可以开始编写你的文章内容了。使用Markdown语法来格式化文本，比如标题、段落、列表、图片、链接等。</li></ul></li><li><strong>保存文件</strong>：<ul><li>完成文章编写后，保存Markdown文件。</li></ul></li></ol><h4 id="预览文章">3. <strong>预览文章</strong></h4><ul><li>回到你的命令行工具，确保Hexo的本地服务器还在运行（如果关闭了，重新运行<code>hexo server</code>）。</li><li>在浏览器中打开<code>http://localhost:4000</code>，你应该能看到你的新文章已经出现在博客上了。</li></ul><h4 id="编辑现有文章">4. <strong>编辑现有文章</strong></h4><ul><li>如果需要编辑现有的文章，只需在<code>source/_posts/</code>文件夹中找到对应的Markdown文件，进行修改，然后保存。</li><li>Hexo会自动检测文件的更改，并刷新本地服务器上的预览。</li></ul><h4 id="添加其他页面">5. <strong>添加其他页面</strong></h4><ul><li>除了文章之外，你还可以添加其他页面，比如关于我、作品集等。</li><li>创建一个新的Markdown文件，放在<code>source/</code>文件夹中（而不是<code>_posts/</code>），然后按照文章的方式编写头部信息和内容。</li><li>在Hexo的主题配置文件中，你可能需要添加一些路由规则来确保这些页面能够正确显示。</li></ul><p>现在你已经知道如何创建和编辑Hexo博客的内容了。</p><h2 id="第四步本地预览和调试">第四步：本地预览和调试</h2><h4 id="启动hexo本地服务器">1. <strong>启动Hexo本地服务器</strong></h4><p>确保你的Hexo博客项目文件夹（比如<code>myblog</code>）是打开的，然后在命令行工具中导航到该文件夹。运行以下命令来启动Hexo的本地服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>或者，如果你安装了<code>hexo-cli</code>并且想要从任何位置启动服务器，你可以使用全局命令（但需要先导航到博客项目文件夹的父目录，然后使用相对路径或绝对路径指定博客文件夹）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server -d myblog<br></code></pre></td></tr></table></figure><p>其中<code>myblog</code>是你的博客项目文件夹的名称。</p><h4 id="在浏览器中预览">2. <strong>在浏览器中预览</strong></h4><p>默认情况下，Hexo的本地服务器会在<code>http://localhost:4000</code>上运行。打开你的网页浏览器，输入这个地址，你应该能看到你的博客的本地预览。</p><h4 id="浏览和导航">3. <strong>浏览和导航</strong></h4><ul><li>点击博客上的链接，确保导航正常。</li><li>检查文章的布局和样式，确保它们符合你的期望。</li><li>如果你的博客有侧边栏、页脚等组件，也请确保它们显示正确。</li></ul><h4 id="调试和修改">4. <strong>调试和修改</strong></h4><ul><li>如果发现任何问题（比如布局错乱、链接失效等），回到你的Markdown文件或主题配置文件中进行修改。</li><li>修改后，保存文件，然后刷新浏览器页面，查看更改是否生效。</li><li>重复这个过程，直到你对博客的预览满意为止。</li></ul><h4 id="使用hexo的内置命令">5. <strong>使用Hexo的内置命令</strong></h4><ul><li>在调试过程中，你可能会频繁地生成静态文件和重启服务器。Hexo提供了一些方便的命令来简化这些操作：<ul><li><code>hexo clean</code>：删除生成的静态文件（在<code>public</code>文件夹中）。</li><li><code>hexo generate</code>（或简写为<code>hexo g</code>）：生成静态文件。</li><li><code>hexo server</code>（或简写为<code>hexo s</code>）：启动本地服务器。</li><li>你可以组合这些命令来简化工作流程，比如<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>。</li></ul></li></ul><h4 id="检查响应式设计">6. <strong>检查响应式设计</strong></h4><ul><li>如果你的博客主题支持响应式设计（即在不同设备上都能良好显示），请在不同的屏幕尺寸和浏览器上测试你的博客。</li><li>确保在移动设备上也能方便地浏览和导航。</li></ul><p>现在你已经知道如何在本地预览和调试你的Hexo博客了。</p><h2 id="第五步自定义博客主题和设置">第五步：自定义博客主题和设置</h2><h4 id="选择并安装主题">1. <strong>选择并安装主题</strong></h4><p>Hexo拥有丰富的第三方主题，你可以根据自己的喜好选择一个。以下是如何安装一个主题的步骤：</p><ol type="1"><li><strong>浏览Hexo主题</strong>：<ul><li>你可以访问Hexo的官方文档或GitHub上的Hexo主题仓库来浏览可用的主题。</li><li>选择一个你感兴趣的主题，并查看其文档以了解如何安装和配置。</li></ul></li><li><strong>下载或克隆主题</strong>：<ul><li>根据主题的文档，你可能需要下载主题的ZIP文件，或者通过Git克隆主题的仓库到你的本地计算机。</li></ul></li><li><strong>将主题放入Hexo项目</strong>：<ul><li>将下载或克隆的主题文件夹放入你的Hexo项目中的<code>themes/</code>文件夹内。</li></ul></li><li><strong>更新配置文件</strong>：<ul><li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li><li>找到<code>theme</code>字段，并将其值设置为你刚刚安装的主题的文件夹名。</li></ul></li></ol><p>例如，如果你安装了一个名为<code>landscape</code>的主题，你的<code>_config.yml</code>文件中的<code>theme</code>字段应该像这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br></code></pre></td></tr></table></figure><ol start="5" type="1"><li><strong>生成和预览</strong>：<ul><li>运行<code>hexo generate</code>（或简写为<code>hexo g</code>）来生成静态文件。</li><li>运行<code>hexo server</code>（或简写为<code>hexo s</code>）来启动本地服务器并预览你的博客。</li></ul></li></ol><h4 id="自定义主题设置">2. <strong>自定义主题设置</strong></h4><p>大多数Hexo主题都允许你通过修改主题的配置文件来自定义博客的外观和行为。以下是如何自定义主题设置的步骤：</p><ol type="1"><li><strong>找到主题配置文件</strong>：<ul><li>在你安装的主题文件夹内，通常会有一个名为<code>_config.yml</code>的文件（有时可能是其他名称，比如<code>config.yml</code>，具体取决于主题）。</li></ul></li><li><strong>编辑主题配置文件</strong>：<ul><li>使用文本编辑器打开主题配置文件。</li><li>根据文件中的注释和说明，修改你感兴趣的设置。</li></ul></li></ol><p>例如，你可能想要修改以下设置：</p><ul><li>网站标题和副标题</li><li>菜单项和导航栏</li><li>侧边栏和小工具</li><li>文章布局和样式</li><li>社交媒体链接和分享按钮</li></ul><ol start="3" type="1"><li><strong>生成和预览更改</strong>：<ul><li>每次修改主题配置文件后，都需要运行<code>hexo generate</code>来生成静态文件。</li><li>然后运行<code>hexo server</code>来预览更改。</li></ul></li><li><strong>高级自定义</strong>：<ul><li>如果你想要进行更高级的自定义（比如修改CSS样式或JavaScript脚本），你可能需要编辑主题文件夹中的其他文件。</li><li>在进行这些更改时，请务必备份原始文件，以便在需要时恢复。</li></ul></li></ol><h4 id="测试和调试">3. <strong>测试和调试</strong></h4><ul><li>在进行自定义时，不断测试你的博客以确保所有功能都按预期工作。</li><li>检查不同设备和浏览器上的显示效果。</li><li>如果遇到问题，请查阅主题的文档或寻求社区的帮助。</li></ul><p>现在你已经知道如何自定义Hexo博客的主题和设置了。</p><h2 id="第六步将博客部署到github-pages">第六步：将博客部署到GitHubPages</h2><h4 id="创建github仓库">1. <strong>创建GitHub仓库</strong></h4><ol type="1"><li><strong>登录GitHub</strong>：<ul><li>使用你的GitHub账户登录到GitHub网站。</li></ul></li><li><strong>创建新仓库</strong>：<ul><li>点击右上角的加号（+）图标，然后选择“Newrepository”（新建仓库）。</li><li>为你的仓库命名，通常使用<code>username.github.io</code>的格式，其中<code>username</code>是你的GitHub用户名。这样命名的仓库会自动启用GitHubPages。</li><li>设置仓库为“Public”（公开），因为GitHub Pages不支持私有仓库。</li><li>初始化仓库时可以选择添加一个README文件，但这对于Hexo部署不是必需的。</li><li>点击“Create repository”（创建仓库）按钮。</li></ul></li></ol><h4 id="配置hexo以部署到github-pages">2. <strong>配置Hexo以部署到GitHubPages</strong></h4><ol type="1"><li><strong>安装<code>hexo-deployer-git</code>插件</strong>：<ul><li>在你的Hexo项目文件夹中，运行以下命令来安装<code>hexo-deployer-git</code>插件，这个插件允许你将Hexo生成的静态文件部署到Git仓库中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save-dev<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>配置部署设置</strong>：<ul><li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li><li>在文件底部添加以下部署（deploy）配置： <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;your-repository-url&gt;</span> <span class="hljs-comment"># 替换为你的GitHub仓库的HTTPS URL</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 或者你希望部署到的分支名，通常是main或gh-pages</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;Site updated: <span class="hljs-template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span> <span class="hljs-comment"># 提交时的消息模板</span><br></code></pre></td></tr></table></figure></li><li>将<code>&lt;your-repository-url&gt;</code>替换为你的GitHub仓库的完整HTTPSURL，例如<code>https://github.com/username/username.github.io.git</code>。</li></ul></li></ol><h4 id="生成静态文件并部署">3. <strong>生成静态文件并部署</strong></h4><ol type="1"><li><strong>生成静态文件</strong>：<ul><li>在你的Hexo项目文件夹中，运行以下命令来生成静态文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure></li><li>或者使用简写命令： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>部署到GitHub Pages</strong>：<ul><li>运行以下命令来将生成的静态文件部署到你的GitHub仓库中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure></li><li>首次部署时，你可能需要输入你的GitHub用户名和密码（或者使用GitHub提供的个人访问令牌）。</li></ul></li><li><strong>验证部署</strong>：<ul><li>打开你的浏览器，输入你的GitHubPages网址（通常是<code>https://username.github.io</code>，其中<code>username</code>是你的GitHub用户名）。</li><li>你应该能看到你的Hexo博客已经成功部署到GitHub Pages上了。</li></ul></li></ol><h4 id="更新博客">4. <strong>更新博客</strong></h4><ul><li>每次你更新博客内容时，只需重复生成静态文件和部署的步骤。</li><li>你可以将这两个步骤合并为一个命令，通过添加<code>--deploy</code>选项到<code>hexo generate</code>命令中来实现：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g --deploy<br></code></pre></td></tr></table></figure><ul><li>或者使用简写命令： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo gd<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>现在你已经知道如何将Hexo博客部署到GitHub Pages上了。</p><h2 id="第七步维护和更新你的博客">第七步：维护和更新你的博客</h2><h4 id="定期更新内容">1. <strong>定期更新内容</strong></h4><ul><li><strong>撰写新文章</strong>：使用Markdown编写新的博客文章，并保存在Hexo项目的<code>source/_posts/</code>目录下。</li><li><strong>发布文章</strong>：每次撰写完新文章后，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件，然后运行<code>hexo deploy</code>将更新推送到GitHubPages。你也可以使用<code>hexo g --deploy</code>（或<code>hexo gd</code>）一次性完成这两个步骤。</li><li><strong>管理旧文章</strong>：定期回顾和更新你的旧文章，确保它们的信息是最新的，并且没有过时或错误的链接。</li></ul><h4 id="监控和分析">2. <strong>监控和分析</strong></h4><ul><li><strong>使用Google Analytics（谷歌分析）</strong>：在GoogleAnalytics中注册一个账户，并将提供的跟踪代码添加到你的Hexo博客的HTML模板中，以便监控博客的流量和访问者行为。</li><li><strong>检查错误和性能</strong>：定期检查你的博客是否有任何错误（如404页面、断开的链接等），并使用工具（如GooglePageSpeed Insights）来优化博客的性能。</li></ul><h4 id="备份和恢复">3. <strong>备份和恢复</strong></h4><ul><li><strong>定期备份</strong>：定期将你的Hexo项目文件夹和GitHub仓库的内容备份到安全的位置，以防数据丢失。</li><li><strong>恢复数据</strong>：如果出现问题，你可以使用备份的数据来恢复你的博客。</li></ul><h4 id="保持主题和插件更新">4. <strong>保持主题和插件更新</strong></h4><ul><li><strong>更新Hexo</strong>：定期检查Hexo的更新，并运行<code>npm update -g hexo</code>来更新到最新版本。</li><li><strong>更新主题和插件</strong>：同样地，定期检查你使用的主题和插件是否有更新，并按照它们的文档进行更新。</li></ul><h4 id="安全性">5. <strong>安全性</strong></h4><ul><li><strong>保护你的GitHub账户</strong>：确保你的GitHub账户使用了强密码，并启用了双重身份验证。</li><li><strong>避免敏感信息</strong>：不要在博客中发布任何敏感信息，如密码、密钥或私人电子邮件地址。</li></ul><h4 id="与读者互动">6. <strong>与读者互动</strong></h4><ul><li><strong>添加评论系统</strong>：考虑在你的博客中添加一个评论系统，如Disqus或Gitalk，以便与读者互动。</li><li><strong>回复评论和问题</strong>：定期查看并回复读者的评论和问题，以建立和维护与读者的关系。</li></ul><h4 id="优化seo">7. <strong>优化SEO</strong></h4><ul><li><strong>使用关键词</strong>：在撰写文章时，使用相关的关键词，并在标题、元描述和正文中适当地放置它们。</li><li><strong>创建内部链接</strong>：在你的文章之间创建内部链接，以便读者可以轻松地找到相关的内容。</li><li><strong>优化图片</strong>：为图片添加描述性的文件名和alt属性，并使用适当的压缩来优化它们的加载速度。</li></ul><p>现在你已经知道如何维护和更新你的Hexo博客了。</p><h2 id="安装gitalk">安装Gitalk</h2><ol type="1"><li><p><strong>注册Gitalk</strong></p><ul><li>访问<ahref="https://gitalk.github.io/">Gitalk官网</a>，点击“开始使用”按钮，跳转到Github页面。</li><li>在Github页面，点击“使用说明”中的“Click here toregister”进行注册。</li><li>填写相关信息，包括应用名称（Application name）、主页地址（HomepageURL，一般填写域名地址或名称.github.io）、项目描述（Applicationdescription，非必需）和认证回调地址（Authorization callbackURL，一般填写域名地址或名称.github.io）。</li><li>完成注册后，可以修改并更新信息，包括上传新头像和设置背景色。</li></ul></li><li><p><strong>创建Github Application</strong></p><ul><li>登录Github，点击右上角头像，依次进入“Settings”-&gt;“Developersettings”-&gt;“OAuth Apps”-&gt;“New OAuth App”进行基本配置。</li><li>填写应用名称、主页URL、回调URL等信息，并生成Client ID和ClientSecret。</li></ul></li><li><p><strong>配置Hexo博客</strong></p><ul><li>进入Hexo博客的主题配置文件（_config.yml），添加Gitalk配置。</li><li>配置项包括：<ul><li><code>enable</code>: 是否启用Gitalk，设置为true。</li><li><code>github_id</code>: Github仓库所有者。</li><li><code>repo</code>: 存储评论的仓库名称。</li><li><code>client_id</code>: Github Application的Client ID。</li><li><code>client_secret</code>: Github Application的Client Secret。</li><li><code>admin_user</code>:Github仓库所有者和协作者，只有他们可以初始化Github issues。</li><li><code>distraction_free_mode</code>:是否启用无干扰模式，类似于Facebook。</li><li><code>language</code>: 语言设置，如中文设置为zh-CN。</li></ul></li></ul></li></ol><h3 id="二使用gitalk">二、使用Gitalk</h3><ol type="1"><li><p><strong>在Hexo主题中添加Gitalk容器</strong></p><ul><li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>-&gt;<code>post</code>目录。</li><li>在当前目录下新建一个<code>gitalk.ejs</code>文件，并写入以下代码：</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Gitalk</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">clientID</span>: <span class="hljs-string">&#x27;你的Client ID&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">clientSecret</span>: <span class="hljs-string">&#x27;你的Client Secret&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">repo</span>: <span class="hljs-string">&#x27;你的仓库名称&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">owner</span>: <span class="hljs-string">&#x27;你的Github用户名&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">admin</span>: [<span class="hljs-string">&#x27;你的Github用户名&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">id</span>: <span class="hljs-title function_">md5</span>(location.<span class="hljs-property">pathname</span>), <span class="hljs-comment">// 使用md5确保唯一性和长度限制</span></span><br><span class="language-javascript">  <span class="hljs-attr">distractionFreeMode</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;gitalk-container&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注意替换代码中的<code>clientID</code>、<code>clientSecret</code>、<code>repo</code>、<code>owner</code>和<code>admin</code>为实际值。</li></ul><ol start="2" type="1"><li><p><strong>在文章模板中添加Gitalk容器引用</strong></p><ul><li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>目录，找到<code>article.ejs</code>文件。</li><li>在<code>article.ejs</code>文件的最后面加入以下代码：</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% if(theme.gitalk.enable)&#123; %&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gitalk-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  &lt;%- include post/gitalk.ejs %&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><p><strong>生成并部署Hexo博客</strong></p><ul><li>在Hexo博客的根目录下，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件。</li><li>运行<code>hexo deploy</code>将更新推送到Github Pages。</li></ul></li><li><p><strong>初始化评论</strong></p><ul><li>访问你的Hexo博客文章页面，登录Github后尝试发表评论。</li><li>评论将作为issues存储在指定的Github仓库中，并可以在仓库的issues页面进行管理。</li></ul></li></ol><p>通过以上步骤，你就可以在Hexo博客中成功安装和使用Gitalk评论系统了。记得定期检查和更新你的Gitalk配置和Github仓库，以确保评论系统的正常运行。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python入门学习笔记</title>
    <link href="/2024/10/25/2024-10-25-Python%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%AC%E4%B8%89%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/25/2024-10-25-Python%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%AC%E4%B8%89%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一部分-基础知识">第一部分 基础知识</h1><p><a href="https://zqten.github.io/">回到主頁</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># python更新指令<br>pip install --upgrade python<br># pip更新指令<br>python.exe -m pip install --upgrade pip<br># 国内镜像安装<br>pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br>pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br># pip查看可更新包<br>pip list --outdated<br># 批量升级所有包,升级前先确认<br>pip-review --local --interactive<br># 一键升级所有包<br>pip-review --auto<br></code></pre></td></tr></table></figure><p>前面的安装环节网络上讲得比书上的要详细多了，官方文档也讲得很清楚，所以这里就不在这里说了，有兴趣可以去访问官方网站<ahref="https://www.python.org/"><sup>😺</sup></a>。</p><h2 id="第一章-变量和简单的数据类型">第一章 变量和简单的数据类型</h2><h3 id="变量">变量</h3><p>变量命名有一定的规则</p><ul><li>不能是数字开头，比如：<strong>1_message</strong></li><li>不能包含空格，比如：<strong>mess age</strong></li><li>不能是python里面的关键字，比如：print 或 def等，python里面有很多关键字一般你打出来会高亮显示</li><li>最好的变量名应该是既简短又有描述性，比如：name、student_name等等。</li></ul><p>这里message是变量名，'Hello PythonWorld!'是指向message变量的值。变量是可以重复赋值的，但它只会储存最后的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-string">&#x27;Hello Python World!&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br>Hello Python World!<br><br>message = <span class="hljs-string">&#x27;你好!&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br>你好!<br></code></pre></td></tr></table></figure><h3 id="字符串">字符串</h3><p>有双引号或单引号包裹的内容就称为字符串，有些编程语言只有双引号是字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;This is string.&quot;</span><br><span class="hljs-string">&#x27;This is string.&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>1.方法：title()、upper()、lower()</strong></p><p>方法(method)是python对数据执行的操作，name后面的点(.)是让python对name变量执行<strong>title()</strong>方法指定的操作，这个方法就是把单词的手写字幕改成大写。<strong>upper()</strong>方法是让所有字母变成大写、<strong>lower()</strong>方法是让所有字母变成小写。还有一个方法修改字符串中的指定单词。<strong>replace()</strong>这个方法我们在后面的练习中会用到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;zheng kai nan&quot;</span><br><span class="hljs-built_in">print</span>(name.title())<br>Zheng Kai Nan<br><br>name = <span class="hljs-string">&quot;Zheng Kai Nan&quot;</span><br><span class="hljs-built_in">print</span>(name.upper())<br>ZHENG KAI NAN<br><span class="hljs-built_in">print</span>(name.lower())<br>zheng kai nan<br><br>name = <span class="hljs-string">&quot;zheng kai nan&quot;</span><br>name_01 = name.replace(<span class="hljs-string">&quot;kai nan&quot;</span>, <span class="hljs-string">&quot;ji zhong&quot;</span>)<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(name_01)<br>zheng kai nan<br>zheng ji zhong<br></code></pre></td></tr></table></figure><p><strong>2.在字符串中插入变量</strong></p><p>这个功能很常用，python的方式是在字符串的引号前面加一个<strong>f</strong> 字母：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">first_name = <span class="hljs-string">&quot;zheng&quot;</span><br>last_name = <span class="hljs-string">&quot;kai nan&quot;</span><br>full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(full_name)<br>zheng kai nan<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello,<span class="hljs-subst">&#123;full_name.title()&#125;</span>!&quot;</span>)<br>Hello,Zheng Kai Nan!<br></code></pre></td></tr></table></figure><p>**3.制表符和换行符控制字符串 *</p><p>在字符串中添加<strong>、</strong>*可以缩进和换行，字符串引号前加<strong><code>r</code></strong>可以让取消里面所有转义符号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-string">&quot;你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>你知道这几种编程语言吗？Python Swift C++ Go Java<br><br>message = <span class="hljs-string">&quot;\t你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>     你知道这几种编程语言吗？Python Swift C++ Go Java<br><br>message = <span class="hljs-string">&quot;你知道这几种编程语言吗？\nPython Swift C++ Go Java&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>你知道这几种编程语言吗？<br>Python Swift C++ Go Java<br><br><span class="hljs-comment"># 也可以同时使用</span><br>message = <span class="hljs-string">&quot;你知道这几种编程语言吗？\n\tPython \n\tSwift \n\tC++ \n\tGo \n\tJava&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>你知道这几种编程语言吗？<br>Python <br>Swift <br>C++ <br>Go <br>Java<br><span class="hljs-comment"># 取消转义    </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;\nasd&quot;</span>) <br>\nasd<br></code></pre></td></tr></table></figure><p><strong>4.删除字符串里面的空白rstrip()、lstrip()、strip()</strong></p><p>有时候后输入字符串的时候会多输空格，在python里面多一个空格就意味着两个不同的字符串了。这里有3个方法：分别是<strong>rstrip()、lstrip()、strip()</strong>，<em>rstrip()</em>是删除字符串右边的空格，<em>lstrip()</em>是删除左边的空格，<em>strip()</em>是删除两边的空格。但是这种删除只是暂时的，要想永久删除就要重新赋值给变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">language = <span class="hljs-string">&#x27; python &#x27;</span><br><span class="hljs-built_in">print</span>(language.rstrip())<br><span class="hljs-string">&#x27; python&#x27;</span><br><span class="hljs-built_in">print</span>(language.lstrip())<br><span class="hljs-string">&#x27;python &#x27;</span><br><span class="hljs-built_in">print</span>(language.strip())<br><span class="hljs-string">&#x27;python&#x27;</span><br><span class="hljs-comment"># 重新赋值给变量</span><br>language = language.strip()<br><span class="hljs-built_in">print</span>(language)<br><span class="hljs-string">&#x27;python&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>5.删除前缀和后缀 removeprefix()、removesuffix()</strong></p><p>有些内容有统一的前缀，比如你有很多照片，前缀是某一个时间比如2023.7.25+名字或序号，你就只想要序号或名字就可以用到这个功能，还有就是URL里面的https://这个是网站前缀，就可以用<em>removeprefix()</em>括号里面填写你想删除的前缀，用引号括起来。这种方法的删除也是暂时的，要想永久删除需要重新赋值，和上面的删除空白一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除前缀</span><br>Travel_photo = <span class="hljs-string">&quot;2023.7.25-镇远旅游照片&quot;</span><br><span class="hljs-built_in">print</span>(Travel_photo.removeprefix(<span class="hljs-string">&#x27;2023.7.25-&#x27;</span>))<br>镇远旅游照片<br>url = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br><span class="hljs-built_in">print</span>(url.removeprefix(<span class="hljs-string">&#x27;https://&#x27;</span>))<br>www.baidu.com<br><br><span class="hljs-comment">#删除后缀</span><br>file_name = <span class="hljs-string">&#x27;abc.jpg&#x27;</span><br><span class="hljs-built_in">print</span>(file_name.removesuffix(<span class="hljs-string">&#x27;.jpg&#x27;</span>))<br>abc<br></code></pre></td></tr></table></figure><h3 id="数">数</h3><p>可以理解为数学里面的数字，用来计算或可视化数据</p><p><strong>1.整数及其运算</strong></p><p>integer()或简写int()表示整数，**+、-、*、/<strong>这几个符号表示加减乘除，还有些复杂的后面会讲到，比如(</strong>)两个星号代表乘方运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span> + <span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">3</span> ** <span class="hljs-number">2</span><br><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>2.浮点数</strong></p><p>float()表示浮点数，就是带有小数点的数称为浮点数，数字同样都可以应用上面的计算符号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span><br><span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure><p><strong>3.数字中的下划线</strong></p><p>下划线用在数字中，并不会有其他的效果，只是方便我们更好观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">1000_000_000</span><br><span class="hljs-built_in">print</span>(number)<br><span class="hljs-number">10000000000</span><br></code></pre></td></tr></table></figure><p><strong>4.同时给多个变量赋值</strong></p><p>同时给多个变量赋值，需要用逗号将变量名分开，对于要赋给变量的值也需要做同样的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">x,y,z = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">2</span><br>z = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 错误演示</span><br>x,y,z = <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(x)<br>发生异常: ValueError x<br><span class="hljs-keyword">not</span> enough values to unpack (expected <span class="hljs-number">3</span>, got <span class="hljs-number">2</span>)<br>  File <span class="hljs-string">&quot;F:\第一章变量和简单数据类型\full_name.py&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    x, y, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>    ^^^^^^^<br>ValueError: <span class="hljs-keyword">not</span> enough values to unpack (expected <span class="hljs-number">3</span>, got <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>5.常量</strong></p><p>Python里面没有常量(就是整个程序的生命周期不改变值的“变量”)，一般是用全大写字母来共同与其他程序员形成约定，遇到全大写字母的变量时，视为常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">NAME = <span class="hljs-string">&quot;太阳&quot;</span><br></code></pre></td></tr></table></figure><p><strong>6.注释</strong></p><p>注释的主要目的是阐述代码要做什么，以及是如何做的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印出Hello World</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="小结">小结</h3><p>本章我们学习了如何使用变量，创建了描述性的变量名，学习了字符串是什么，以及如何使用全大写、全小写和首字母大写的方式显示字符串和制表符、换行符。还学习了如何删除字符串中多余的字符和空格，以及字符串中插入变量的方法。还学习了整数和浮点数，还有学习了写注释的目的。</p><h2 id="第二章-列表简介">第二章 列表简介</h2><h3 id="列表是什么">列表是什么</h3><p>列表(list)由一系列按<strong>特定顺序</strong>排列的元素组成，一般给列表命名以复数形式，比如：name就用names。在python中列表用“[]”表示，每个元素用逗号隔开。列表里面有两个东西要搞清楚，一个是索引，一个是元素的值。要访问列表时使用索引和元素值都可以，列表的索引是从0开始的，所以要访问的n个元素就使用n-1的索引值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表</span><br>bicycles = [<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]<br><span class="hljs-built_in">print</span>(bicycles)<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]<br><span class="hljs-comment"># 利用索引值访问列表元素</span><br><span class="hljs-built_in">print</span>(bicycles[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(bicycles[<span class="hljs-number">3</span>])<br>trek<br>specialized<br><span class="hljs-comment"># 访问列表的倒数第一个元素</span><br><span class="hljs-built_in">print</span>(bicycles[-<span class="hljs-number">1</span>])<br>specialized<br><span class="hljs-comment"># 使用列表里面的元素到其他场景</span><br>message = <span class="hljs-string">f&#x27;我喜欢<span class="hljs-subst">&#123;bicycles[<span class="hljs-number">0</span>]&#125;</span>品牌的摩托车。&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br>我喜欢trek品牌的摩托车。<br></code></pre></td></tr></table></figure><h3 id="修改添加和删除列表元素">修改、添加和删除列表元素</h3><p>大多数列表将是动态的，意味着列表创建后，随着程序的运行将修改、增加、或删除其中的元素。这中间增加有<strong>append()</strong>方法在列表末尾添加元素，<strong>insert()</strong>在列表的指定位置插入元素。删除有<strong>del列表元素</strong>将删除列表元素并且无法在访问这个元素了。<strong>pop()</strong>默认删除列表最后一个元素，也可以指定删除列表中的其他元素，在括号里面填上该元素的索引值就可以了。这里说下，pop()删除的元素可以赋值给一个变量继续使用，不像del不能在赋值和访问了。<strong>remove()</strong>方法是删除一个指定的元素值，列表有多个同样的值的话这个方法只删除第一个，要想全部删除就要使用循环。值得一提的是这个方法和pop()一样删除了的元素可以赋值给一个变量继续使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改列表元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>motorcycles[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;da yang&#x27;</span><br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;da yang&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><br><span class="hljs-comment"># 添加列表元素</span><br><span class="hljs-comment">## 在列表末尾添加元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>motorcycles.append(<span class="hljs-string">&#x27;da yang&#x27;</span>)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>, <span class="hljs-string">&#x27;da yang&#x27;</span>]<br><span class="hljs-comment">## 在列表的指定位置插入元素</span><br>motorcycles.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;li fan&#x27;</span>)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;li fan&#x27;</span>, <span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>, <span class="hljs-string">&#x27;da yang&#x27;</span>]<br><br><span class="hljs-comment"># 删除列表元素</span><br><span class="hljs-comment">## del方法删除</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-keyword">del</span> motorcycles[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-comment">## pop方法删除</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>poped_motorcycles = motorcycles.pop()<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>]<br><span class="hljs-built_in">print</span>(poped_motorcycles)<br>suzuki<br><span class="hljs-comment">### pop方法删除指定位置的元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>last_motorcycles = motorcycles.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(last_motorcycles)<br>honda<br><span class="hljs-comment">## remove()根据值删除元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>mid_motorcycles = <span class="hljs-string">&#x27;yamaha&#x27;</span><br>motorcycles.remove(mid_motorcycles)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;mid_motorcycles.title()&#125;</span>&#x27;</span>)<br>Yamaha<br></code></pre></td></tr></table></figure><h3 id="列表管理">列表管理</h3><p><strong>1.sort()</strong>方法可以对列表<strong>永久排序</strong>，该方法是将列表按字母顺序或数字从小到大的顺序进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">cars = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br>cars.sort()<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-comment"># 反向排序</span><br>cars.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br><span class="hljs-comment"># 反转列表,这是一种快捷方法</span><br>cars = cars[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>2.sorted()</strong>方法是对列表进行<strong>临时排序</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 临时反向排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(cars, reverse=<span class="hljs-literal">True</span>))<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>3.reverse()</strong>方法是<strong>永久反转排列</strong>列表里面的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cars.reverse()<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>4.len()</strong>方法可以快速获取列表长度，其显示的是列表内有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cars))<br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>5.enumerate()</strong>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，<strong>同时列出数据和数据下标</strong>，一般用在for 循环当中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>seq = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i, element <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(seq):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span> i, element<br>...<br><span class="hljs-number">0</span> one<br><span class="hljs-number">1</span> two<br><span class="hljs-number">2</span> three<br></code></pre></td></tr></table></figure><h3 id="小节">小节</h3><p>本章学习了什么是列表，以及如何使用列表内的元素。学习了定义列表，增删改列表内元素，以及如何对列表进行永久排序和临时排序，还学习了反转列表顺序和反向排序。</p><h2 id="第三章-操作列表">第三章 操作列表</h2><h3 id="遍历整个列表">遍历整个列表</h3><p>使用<strong>for</strong>循环可以很轻松的访问整个列表，以及对列表进行操作。这里值得一提的是for循环里面的变量名，在遍历列表是尽可能用列表的单数名，比如列表名为cars，那么for循环的变量尽量写成car。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">magicians = [<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;david&#x27;</span>, <span class="hljs-string">&#x27;carolina&#x27;</span>]<br><span class="hljs-keyword">for</span> magician <span class="hljs-keyword">in</span> magicians:<br>    <span class="hljs-built_in">print</span>(magician)<br><br>alice<br>david<br>carolina<br><span class="hljs-comment"># 进行其他操作</span><br><span class="hljs-keyword">for</span> magician <span class="hljs-keyword">in</span> magicians:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;magician.title()&#125;</span>,你的表演很精彩！&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;谢谢你，<span class="hljs-subst">&#123;magician.title()&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;感谢你们每一个人的表演&#x27;</span>)<br>Alice,你的表演很精彩！<br>谢谢你，Alice<br>David,你的表演很精彩！<br>谢谢你，David<br>Carolina,你的表演很精彩！<br>谢谢你，Carolina<br>感谢你们每一个人的表演<br></code></pre></td></tr></table></figure><h3 id="创建数值列表">创建数值列表</h3><p><strong>range()</strong>函数可以生成一系列数，但它实际上不会打印最后一个数，这是编程语言中常见的<strong>差一</strong>行为结果，要想打印最后个数需要使用<strong>+1或者是使用比最后一个数大1的数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 打印最后一位</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>+<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br></code></pre></td></tr></table></figure><p><strong>list()</strong>函数可以将range()的结果直接转换为列表，方法是将range()作为list()的参数，同时range（）还可以指定步长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(number)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-comment"># 从2开始到11结束，指定步长为2</span><br>even_number = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(even_number)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br><span class="hljs-comment"># 用for循环创建数值列表</span><br>squares = []<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    square = value**<span class="hljs-number">2</span><br>    squares.append(square)<br><span class="hljs-built_in">print</span>(squares)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<br></code></pre></td></tr></table></figure><p>使用这几个函数可以对数值列表进行统计<strong>列表作为其参数</strong>，min（）列表里面最小值，max（）列表里面最大值，sum（）列表所有数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 简单统计数值列表</span><br>values = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(values))<br><span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(values))<br><span class="hljs-number">9</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(values))<br><span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p><strong>列表推导式</strong>是一种简化方法，这种方法首先指定一个列表名（变量名），然后等号右边用中括号开始，括号内的排列顺序是表达式------for循环，这种方法需要经常练习。比如创建上面数值列表可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(squares)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 1到50的奇数之和游戏</span><br>jishu_num = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(jishu_num))<br><span class="hljs-number">625</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([jishu <span class="hljs-keyword">for</span> jishu <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>, <span class="hljs-number">2</span>)]))<br><span class="hljs-number">625</span><br></code></pre></td></tr></table></figure><h3 id="使用列表的一部分">使用列表的一部分</h3><p><strong>切片</strong>，要使用列表的一部分，其实就是使用列表的索引。使用的方法是在调用列表时在列表名后面[0:1]，这代表列表的第一个和第二个值，就是在列表索引值0,1的值。这里面也要注意差一行为。在一个班级需要评出前三名或后三名或部分名单时，切片可以起到很好的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 切片</span><br>players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 索引值1到3的元素因为差一行为，所以并不会打印索引值3的元素</span><br><span class="hljs-built_in">print</span>(players[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br>[<span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>]<br><span class="hljs-comment"># 索引值0到3的元素</span><br><span class="hljs-built_in">print</span>(players[:<span class="hljs-number">3</span>])<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>]<br><span class="hljs-comment"># 索引值1到列表最后一个的元素</span><br><span class="hljs-built_in">print</span>(players[<span class="hljs-number">1</span>:])<br>[<span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 索引值0到列表最后一个的元素</span><br><span class="hljs-built_in">print</span>(players[:])<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 索引值为列表最后3个的元素</span><br><span class="hljs-built_in">print</span>(players[-<span class="hljs-number">3</span>:])<br>[<span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 遍历切片</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下面是我们的前三名&#x27;</span>)<br><span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(player.title())<br>下面是我们的前三名<br>Charles<br>Martina<br>Michael<br></code></pre></td></tr></table></figure><p><strong>复制列表或列表切片</strong></p><p>需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变，要复制列表时尽量使用切片复制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><br>yuwen_win = players[:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;语文前三名是：&#x27;</span>)<br><span class="hljs-built_in">print</span>(yuwen_win)<br>语文前三名是：<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>]<br><br>shuxue_win = players[-<span class="hljs-number">3</span>:]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数学前三名是：&#x27;</span>)<br><span class="hljs-built_in">print</span>(shuxue_win)<br>数学前三名是：<br>[<span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><br><span class="hljs-comment"># 需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变</span><br>new_players = players<br><span class="hljs-built_in">print</span>(new_players)<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br>players.append(<span class="hljs-string">&#x27;AAABBB&#x27;</span>)<br><span class="hljs-built_in">print</span>(new_players)<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>, <span class="hljs-string">&#x27;AAABBB&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="元组">元组</h3><p>不可以改变值的列表，称为元组（tuple），元组和列表很像，但是列表是用方括号，而元组是用圆括号。虽然不可以修改元组里面的值，但是可以通过重新赋值改变该变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">dimensions = (<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(dimensions)<br>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-comment"># 遍历</span><br>dimensions = (<span class="hljs-number">400</span>, <span class="hljs-number">50</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dimensions:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-number">400</span><br><span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><h3 id="设置代码格式">设置代码格式</h3><p>为什么要设置代码格式？</p><p>代码被阅读的次数远大于编写的次数。在编写完以后的多次阅读中，良好的代码格式可以让阅读花的时间很短。PEP 8是设置代码指南，它建议每级缩进4个空格。每个编辑器（IDE）都可以设置，通常（tab）使用是最多的。每行长度建议不超过79个字符，但这并不是不可逾越的红线，刚开始学的时候不必在意，不过养成这样的习惯后，会对以后和别人合作带来很多方便。空行建议：不同内容建议用一个空行隔开，不建议使用3、4或多个空行来区隔，主要是空行多了影响阅读。</p><h3 id="小结-1">小结</h3><p>本章学习了如何高效的处理列表中的元素，如何使用for循环遍历列表，如何创建简单的数值列表以及对数值列表执行的一些操作。还学习了如何使用切片对列表进行操作和复制，最后还学习了元组，以及设置代码格式。</p><h2 id="第四章-if语句">第四章 if语句</h2><p>编程时经常需要检查一系列的条件，并根据此决定采取什么措施。if语句让你能够检查程序的当前状态，并采取相应的措施。每条if语句的核心都是一个值为True或False的表达式。相应的符号有：==、!=、&lt;、&gt;、&lt;=、&gt;=。关键字有：if、elif、else。在检查多个条件时会用到与、或、非：他们的关键词是：and（两个都为真）、or（一个为真）、not（条件为假）。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例</span><br>cars = [<span class="hljs-string">&#x27;audi&#x27;</span>, <span class="hljs-string">&#x27;bmw&#x27;</span>, <span class="hljs-string">&#x27;subaru&#x27;</span>, <span class="hljs-string">&#x27;toyota&#x27;</span>]<br><span class="hljs-keyword">for</span> car <span class="hljs-keyword">in</span> cars:<br>    <span class="hljs-keyword">if</span> car == <span class="hljs-string">&#x27;bmw&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(car.upper())<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(car.title())<br>Audi<br>BMW<br>Subaru<br>Toyota<br></code></pre></td></tr></table></figure><h3 id="条件测试">条件测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>car = <span class="hljs-string">&#x27;bmw&#x27;</span><br><span class="hljs-comment"># ==是相等运算符，目的是比较等式两边的值是否相等，相等就是True否则就是False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>car == <span class="hljs-string">&#x27;bmw&#x27;</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>car == <span class="hljs-string">&#x27;toyota&#x27;</span><br><span class="hljs-literal">False</span><br><span class="hljs-comment"># 检查是忽略大小写可以用到字符串的方法upper（）或title（）等等</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>car.upper() == <span class="hljs-string">&#x27;BMW&#x27;</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>检查是否不等</strong>，这里用的符号是 != 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">requested_topping = <span class="hljs-string">&#x27;mushrooms&#x27;</span><br><span class="hljs-keyword">if</span> requested_topping != <span class="hljs-string">&#x27;anchovies&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hold the anhovies!&#x27;</span>)<br>Hold the anhovies!<br></code></pre></td></tr></table></figure><p><strong>数值比较</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>age = <span class="hljs-number">18</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age == <span class="hljs-number">19</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age == <span class="hljs-number">18</span>  <br><span class="hljs-literal">True</span><br><br>answer = <span class="hljs-number">17</span><br><span class="hljs-keyword">if</span> answer != <span class="hljs-number">42</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个数值不是42，请再次更改变量值！&#x27;</span>)<br>这个数值不是<span class="hljs-number">42</span>，请再次更改变量值！<br></code></pre></td></tr></table></figure><p><strong>检查多个条件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>age_0 = <span class="hljs-number">21</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age_1 = <span class="hljs-number">18</span><br><span class="hljs-comment"># and</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age_0 &gt;=<span class="hljs-number">21</span> <span class="hljs-keyword">and</span> age_1 &gt;=<span class="hljs-number">21</span><br><span class="hljs-literal">False</span><br><span class="hljs-comment"># or</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age_0 &gt;=<span class="hljs-number">21</span> <span class="hljs-keyword">or</span> age_1 &gt;=<span class="hljs-number">21</span>  <br><span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><p><strong>检查某个特定的值是否在或不在列表中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>number = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> <span class="hljs-keyword">in</span> number<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">9</span> <span class="hljs-keyword">in</span> number<br><span class="hljs-literal">False</span><br><br>number = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>number_0 = <span class="hljs-number">8</span><br><span class="hljs-keyword">if</span> number_0 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> number:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;number_0&#125;</span>不在我们的数字列表里面。我们把他加进来吧！&#x27;</span>)<br><span class="hljs-number">8</span>不在我们的数字列表里面。我们把他加进来吧！<br></code></pre></td></tr></table></figure><h3 id="if-语句">if 语句</h3><p>在了解了条件测试之后，就可以编写if语句了，具体使用哪一种取决于测试的条件数量。</p><p><strong>最简单的if 语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经成年了。&#x27;</span>)<br>你已经成年了。<br></code></pre></td></tr></table></figure><p><strong>if-else语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">age = <span class="hljs-number">17</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经成年了。&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你还是未成年。&#x27;</span>)<br>你还是未成年。<br></code></pre></td></tr></table></figure><p><strong>if-elif-else语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">12</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以免费观看电影。&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以半价购买电影票。&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你需要购买全票。&#x27;</span>)<br>你可以半价购买电影票。<br><span class="hljs-comment"># 有些情况下是可以省略else这个代码块的</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以免费观看电影。&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以半价购买电影票。&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你需要购买全票。&#x27;</span>)<br>你可以半价购买电影票。<br></code></pre></td></tr></table></figure><h3 id="使用if-语句处理列表">使用if 语句处理列表</h3><p><strong>检查列表里面是否有相应的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers:<br>    <span class="hljs-keyword">if</span> number == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个列表里3是中间数&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这个列表里有<span class="hljs-subst">&#123;number&#125;</span>.&#x27;</span>)<br>这个列表里有<span class="hljs-number">1.</span><br>这个列表里有<span class="hljs-number">2.</span><br>这个列表里<span class="hljs-number">3</span>是中间数<br>这个列表里有<span class="hljs-number">4.</span><br>这个列表里有<span class="hljs-number">5.</span><br></code></pre></td></tr></table></figure><p><strong>确定列表是不是空列表</strong>，列表为空时都是返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = []<br><span class="hljs-keyword">if</span> numbers:<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;adding <span class="hljs-subst">&#123;number&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n所有数字添加了&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;好像这里面没有数字诶!&#x27;</span>)<br>好像这里面没有数字诶!<br></code></pre></td></tr></table></figure><p><strong>多个列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers_0 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>numbers_1 = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(numbers_0)<br><span class="hljs-built_in">print</span>(numbers_1)<br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers_1:<br>    <span class="hljs-keyword">if</span> number <span class="hljs-keyword">in</span> numbers_0:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这两个列表都有 <span class="hljs-subst">&#123;number&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第一个列表里面没有 <span class="hljs-subst">&#123;number&#125;</span> 这个数。&#x27;</span>)<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br>第一个列表里面没有 <span class="hljs-number">6</span> 这个数。<br>第一个列表里面没有 <span class="hljs-number">7</span> 这个数。<br>第一个列表里面没有 <span class="hljs-number">8</span> 这个数。<br>第一个列表里面没有 <span class="hljs-number">9</span> 这个数。<br>这两个列表都有 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="小结-2">小结</h3><p>本章学习了if语句以及相关的关键词和符号，也使用for循环遍历列表时对某些元素做特出处理。</p><h2 id="第五章-字典">第五章 字典</h2><p>字典就是储存多个有两种相关信息的元素，比如姓名及其年龄，单词及其含义等，字典的信息量也不守限制。</p><h3 id="一个简单的字典">一个简单的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;color&#x27;</span>])<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;points&#x27;</span>])<br>bule<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="使用字典">使用字典</h3><p>字典（dictionary）是一系列的<strong>键值对</strong>，每个键都对应一个值，字典用放在花括号{}中的一系列键值对表示。</p><p><strong>访问字典中的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;color&#x27;</span>])<br>bule<br></code></pre></td></tr></table></figure><p><strong>添加键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br>alien[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(alien）<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建一个空字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;&#125;<br>alien[<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&#x27;blue&#x27;</span><br>alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br>alien[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>修改字典中的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">alien[<span class="hljs-string">&#x27;speed&#x27;</span>] = <span class="hljs-string">&#x27;medium&#x27;</span><br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br><span class="hljs-comment"># 删除键值对</span><br><span class="hljs-keyword">del</span> alien[<span class="hljs-string">&#x27;speed&#x27;</span>]<br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>由类似对象组成字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">favonlie_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;swift&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> favonlie_languages.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key.title()&#125;</span>喜欢使用<span class="hljs-subst">&#123;value.title()&#125;</span>语言编程！&#x27;</span>)<br>Jen喜欢使用Python语言编程！<br>Sarah喜欢使用C语言编程！<br>Edward喜欢使用Swift语言编程！<br>Phil喜欢使用Python语言编程！<br></code></pre></td></tr></table></figure><p><strong>使用get()方法来访问值</strong></p><p>如果你访问的值不存在字典里，你直接访问的话会出现错误，这时候可以使用get()方法来访问，这个方法可以让你在访问不存在的值的时候返回一个默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;speed&#x27;</span>])<br><br>发生异常: KeyError<br><span class="hljs-string">&#x27;speed&#x27;</span><br>  File <span class="hljs-string">&quot;favonlie_languages.py&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;speed&#x27;</span>])<br>          ~~~~~^^^^^^^^^<br>KeyError: <span class="hljs-string">&#x27;speed&#x27;</span><br><br><span class="hljs-built_in">print</span>(alien.get(<span class="hljs-string">&#x27;speed&#x27;</span>, <span class="hljs-string">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))<br>不好意思，没有这个索引且没有对应的值<br>alien[<span class="hljs-string">&#x27;speed&#x27;</span>] = <span class="hljs-string">&#x27;medium&#x27;</span><br><span class="hljs-built_in">print</span>(alien.get(<span class="hljs-string">&#x27;speed&#x27;</span>, <span class="hljs-string">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))<br>medium<br></code></pre></td></tr></table></figure><h3 id="遍历字典">遍历字典</h3><p>遍历字典中的内容有3个基本的关键词，items()字典中的键和值，有这个方法需要两个临时变量用于遍历字典、keys()遍历字典中的键、values()遍历字典中的值。</p><p><strong>遍历所有键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">like_number = &#123;<br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;5&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-string">&#x27;9&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> like_number.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key.title()&#125;</span> like number is <span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br>A like number <span class="hljs-keyword">is</span> <span class="hljs-number">8</span><br>B like number <span class="hljs-keyword">is</span> <span class="hljs-number">7</span><br>C like number <span class="hljs-keyword">is</span> <span class="hljs-number">5</span><br>D like number <span class="hljs-keyword">is</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>遍历所有键</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">favonlie_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c#&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;swift&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>&#125;<br><span class="hljs-comment"># 遍历所有键</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> favonlie_languages.keys():<br>    <span class="hljs-built_in">print</span>(name.title())<br>Jen<br>Sarah<br>Edward<br>Phil<br><br><span class="hljs-comment"># 按特定顺序遍历字典中的所有键</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(favonlie_languages.keys()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Thank you <span class="hljs-subst">&#123;name.title()&#125;</span>,you are welcome!&#x27;</span>)<br>Thank you Edward,you are welcome!<br>Thank you Jen,you are welcome!<br>Thank you Phil,you are welcome!<br>Thank you Sarah,you are welcome!<br><br><span class="hljs-comment"># 遍历字典中的所有值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;编程语言&#x27;</span>)<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> favonlie_languages.values():<br>    <span class="hljs-built_in">print</span>(language)<br>编程语言<br>python<br>c<span class="hljs-comment">#</span><br>swift<br>python<br></code></pre></td></tr></table></figure><p><strong>set()</strong>方法用于提取列表或集合中的不同元素，如果有相同的只会提取一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;编程语言&#x27;</span>)<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(favonlie_languages.values()):<br>    <span class="hljs-built_in">print</span>(language.title())<br>编程语言<br>swift<br>c<span class="hljs-comment">#</span><br>python<br><br><span class="hljs-comment"># 集合表现形式，一般用花括号，但里面是没有键值对的，里面的元素表现跟列表一样</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>number = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>number<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套">嵌套</h3><p>有些时候需要将多个字典储存在列表中或将列表作为值储存在字典中，这中行为就成为嵌套。</p><p><strong>字典列表</strong>就是在列表中储存字典可以应用于用户信息等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">alien_0 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>alien_1 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>alien_2 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">15</span>&#125;<br>aliens = [alien_0, alien_1, alien_2]<br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens:<br>    <span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">15</span>&#125;<br><br><span class="hljs-comment"># 创建一个用于储存外星人的空列表</span><br>aliens = []<br><span class="hljs-comment"># 用for循环创建30个绿色的外星人</span><br><span class="hljs-keyword">for</span> alien_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    new_alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>    aliens.append(new_alien)<br><span class="hljs-comment"># 打印前5个外星人</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br><span class="hljs-comment"># 显示创建了多少个外星人</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;创建了多少个外星人:<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(aliens)&#125;</span>&#x27;</span>)<br>创建了多少个外星人:<span class="hljs-number">30</span><br><span class="hljs-comment"># 修改前三个</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">if</span> alien[<span class="hljs-string">&#x27;color&#x27;</span>] == <span class="hljs-string">&#x27;green&#x27;</span>:<br>        alien[<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&#x27;yellow&#x27;</span><br>        alien[<span class="hljs-string">&#x27;points&#x27;</span>] = <span class="hljs-number">10</span><br>        alien[<span class="hljs-string">&#x27;speed&#x27;</span>] = <span class="hljs-string">&#x27;medium&#x27;</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>在字典中储存列表</strong>可以用于食品配方等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">pizza = &#123;<br>    <span class="hljs-string">&#x27;crust&#x27;</span>: <span class="hljs-string">&#x27;think&#x27;</span>,<br>    <span class="hljs-string">&#x27;toppings&#x27;</span>: [<span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">f&#x27;You ordered a <span class="hljs-subst">&#123;pizza[<span class="hljs-string">&quot;crust&quot;</span>]&#125;</span>-crust pizza &#x27;</span><span class="hljs-string">&quot;with the following toppings:&quot;</span>)<br><span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> pizza[<span class="hljs-string">&#x27;toppings&#x27;</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\t<span class="hljs-subst">&#123;topping&#125;</span>&#x27;</span>)<br>You ordered a think-crust pizza <span class="hljs-keyword">with</span> the following toppings:<br>mushrooms<br>extra cheese<br></code></pre></td></tr></table></figure><p><strong>在字典中储存字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">user = &#123;<br>    <span class="hljs-string">&#x27;aeinstein&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;albert&#x27;</span>,<br>        <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;einstein&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;princeton&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-string">&#x27;mcurie&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;marie&#x27;</span>,<br>        <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;curie&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;paris&#x27;</span>,<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> username, user_info <span class="hljs-keyword">in</span> user.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nUsername: <span class="hljs-subst">&#123;username&#125;</span>&#x27;</span>)<br>    full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;first&#x27;</span>]&#125;</span> <span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;last&#x27;</span>]&#125;</span>&quot;</span><br>    location = user_info[<span class="hljs-string">&#x27;location&#x27;</span>]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\tFullname: <span class="hljs-subst">&#123;full_name.title()&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\tLocation: <span class="hljs-subst">&#123;location.title()&#125;</span>&#x27;</span>)<br><br>Username: aeinstein<br>Fullname: Albert Einstein<br>Location: Princeton<br><br>Username: mcurie<br>Fullname: Marie Curie<br>Location: Paris<br></code></pre></td></tr></table></figure><h3 id="小结-3">小结</h3><p>本章我们学习了如何定义字典，以及如何使用储存在字典中的信息。然后学习了如何访问和修改字典中的元素，以及如何遍历字典中的信息。还学习了如何遍历字典中的所有键值对、所有的键和所有的值。学习了如何在列表中嵌套字典，在字典中如何嵌套列表，在字典中嵌套字典。</p><h2 id="第六章-用户输入和while循环">第六章 用户输入和while循环</h2><h3 id="input函数的工作原理">input()函数的工作原理</h3><p>input()函数让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，以便使用。input()函数接受一个参数，即要向用户显示的提示(prompt)。用户输入的内容Python默认为字符串，要想用户输入其他内容需要再input()前面制定类型，比如：要想用户输入的是数值int(input("How old are you"))。<strong>注意：</strong>有些文本编辑器不能运行提示用户输入的程序，要运行他们需要从终端运行。在cmd终端里面直接运行python文件就可以了，<strong>格式是</strong>：路径&gt;py文件名和文件后缀。有些python版本需要使用：路径&gt;python文件名和文件后缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;tell me something, and I will repeat it back to you:&quot;</span>)<br>tell me something, <span class="hljs-keyword">and</span> I will repeat it back to you: hello world<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(message)<br> hello world<br><span class="hljs-meta">&gt;&gt;&gt; </span>  <br></code></pre></td></tr></table></figure><p><strong>使用int()来获取数值输入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 控制用户输入的内容为数字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How old are you: &quot;</span>))<br>How old are you: <span class="hljs-number">36</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age&gt;<span class="hljs-number">20</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>求模运算</strong>是个很有用的工具，它将两个数相除并返回余数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数，我可以判断是奇数还是偶数：&quot;</span>))<br><span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个数是偶数！&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个数是奇数！&quot;</span>)<br>请输入一个数，我可以判断是奇数还是偶数：<span class="hljs-number">50</span><br>这个数是偶数！<br></code></pre></td></tr></table></figure><h3 id="while-循环简介">while 循环简介</h3><p>for 循环用于针对集合中的每个元素执行一个代码块，而 while循环这不断地运行，只到指定的条件不再满足为止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> number &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(number, end=<span class="hljs-string">&quot; &quot;</span>)<br>    number += <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>让用户选择何时退出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只要用户输入的不是‘quit’和‘exit’该循环就继续运行。</span><br>prompt = <span class="hljs-string">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span><br>message = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> message != <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message != <span class="hljs-string">&quot;exit&quot;</span>:<br>    <span class="hljs-comment"># 这里添加了一个lower方法目的是让用户输入的内容都变成小写和下面的if进行判断。</span><br>    message = <span class="hljs-built_in">input</span>(prompt).lower()<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class="hljs-number">2</span><br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class="hljs-number">3</span><br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: ExiT<br>恭喜你！<br><br><span class="hljs-comment"># 使用标志让用户选择何时退出</span><br>prompt = <span class="hljs-string">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span><br>active = <span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> active:<br>    message = <span class="hljs-built_in">input</span>(prompt).lower()<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你！&quot;</span>)<br>        active = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再想想退出的英文是什么？&quot;</span>)<br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: qwe<br>再想想退出的英文是什么？<br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: QUIT<br>恭喜你！<br></code></pre></td></tr></table></figure><p><strong>break 退出循环</strong>，不管条件满不满足，想立即退出 while循环，不再运行后面的代码，可以使用 break语句。上面的例子已经使用过一次了。我们再使用一个特别的例子。break还可以用来退出遍历列表或字典的 for 循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请你说说你喜欢哪个城市: &quot;</span>).lower()<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再见！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;除了<span class="hljs-subst">&#123;message.title()&#125;</span>还有其他的城市么？&quot;</span>)<br>请你说说你喜欢哪个城市: shang hai<br>除了Shang Hai 还有其他的城市么？<br>请你说说你喜欢哪个城市: QUIT<br>再见！<br></code></pre></td></tr></table></figure><p><strong>在循环中使用 continue</strong></p><p>要返回循环的开头，并根据条件测试的结果决定是否继续执行循环，可以使用continue 语句，他不像 break 那样不执行余下的代码并退出整个循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> number &lt; <span class="hljs-number">10</span>:<br>    number += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(number, end=<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <br></code></pre></td></tr></table></figure><p><strong>避免无线循环</strong></p><p>while 循环一定要设置退出条件，如果没有退出条件，while循环就会无止境的一直执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> number &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(number)<br></code></pre></td></tr></table></figure><h3 id="使用-while-循环处理列表和字典">使用 while循环处理列表和字典</h3><p>for 循环是一种遍历列表的有效方式，但不应该在 for循环中修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时修改它，可使用while 循环。通过将 while循环与列表和字典结合起来使用，可收集、存储并组织大量的输入，供以后查看和使用。<strong>注意</strong>，这里有个有意思的事情，就是列表里面是空的时候它的布尔值是False ，列表里面有元素的时候，它的布尔值是 True 。</p><p><strong>在列表之间移动元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先创建一个待验证的用户列表</span><br><span class="hljs-comment"># 和一个用户储存已验证用户的空列表</span><br>unconfirmed_users = [<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;zqten&#x27;</span>, <span class="hljs-string">&#x27;candace&#x27;</span>]<br>confirmed_users = []<br><span class="hljs-comment"># 验证每个用户，直到没有未验证的用户为止</span><br><span class="hljs-comment"># 将每个经过验证的用户添加到已验证用户列表中</span><br><span class="hljs-keyword">while</span> unconfirmed_users:<br>    current_user = unconfirmed_users.pop()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Verifying user: <span class="hljs-subst">&#123;current_user.title()&#125;</span>&#x27;</span>)<br>    confirmed_users.append(current_user)<br><span class="hljs-comment"># 显示所有的已验证的用户</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nThe following users have been confirmed:&#x27;</span>)<br><span class="hljs-keyword">for</span> confirmed_user <span class="hljs-keyword">in</span> confirmed_users:<br>    <span class="hljs-built_in">print</span>(confirmed_user.title())<br>    <br>Verifying user: Candace<br>Verifying user: Zqten<br>Verifying user: Admin<br><br>The following users have been confirmed:<br>Candace<br>Zqten<br>Admin<br></code></pre></td></tr></table></figure><p><strong>删除为特定值的所有列表元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除为特定值的所有列表元素</span><br>pets = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]<br><span class="hljs-built_in">print</span>(pets)<br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets:<br>    pets.remove(<span class="hljs-string">&#x27;cat&#x27;</span>)<br><span class="hljs-built_in">print</span>(pets)<br>[<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]<br>[<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>使用用户输入填充字典</strong></p><p>可以使用 while 循环提示用户输入任意多的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用用户输入填充字典</span><br>responses = &#123;&#125;<br><span class="hljs-comment"># 设置一个标志，指出调查是否继续</span><br>polling_active = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是调查每个人的爱好，请根据提示输入。&#x27;</span>)<br><span class="hljs-keyword">while</span> polling_active:<br>    <span class="hljs-comment"># 提示输入被调查者的名字和回答</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入被调查者的名字：&quot;</span>)<br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入被调查者的回答：&quot;</span>)<br>    <span class="hljs-comment"># 将输入的数据储存在字典中</span><br>    responses[name] = response<br>    <span class="hljs-comment"># 询问用户是否继续调查</span><br>    repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)<br>    <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>:<br>        polling_active = <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 下面这段代码的目的是让用户输入yes和no，输入其他的会提示错误，如果是只判断退出循环条件的话，可以省略下面。</span><br>    <span class="hljs-keyword">elif</span> repeat == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> repeat != <span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">or</span> repeat != <span class="hljs-string">&#x27;no&#x27;</span>:<br>            <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>:<br>                polling_active = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> repeat == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入错误，请重新输入&quot;</span>)<br>                repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)<br>        <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>:<br>            polling_active = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 输出调查结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n---调查结果---&#x27;</span>)<br><span class="hljs-keyword">for</span> name, response <span class="hljs-keyword">in</span> responses.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>的爱好是: <span class="hljs-subst">&#123;response&#125;</span>。&quot;</span>)<br><br>这是调查每个人的爱好，请根据提示输入。<br>请输入被调查者的名字：刘翔<br>请输入被调查者的回答：跨栏<br>是否有人继续参与调查？（yes/no）不知道<br>输入错误，请重新输入<br>是否有人继续参与调查？（yes/no）yes<br>请输入被调查者的名字：姚明<br>请输入被调查者的回答：篮球<br>是否有人继续参与调查？（yes/no）不知道<br>输入错误，请重新输入<br>是否有人继续参与调查？（yes/no）no<br><br>---调查结果---<br>刘翔的爱好是: 跨栏。<br>姚明的爱好是: 篮球。<br></code></pre></td></tr></table></figure><h3 id="小结-4">小结</h3><p>本章学习了如何在程序中使用 input()来让用户提供信息，如何处理文本和数的输入，以及如何使用 while循环让程序按用户的要求不断地运行。然后见识了多种控制 while循环流程的方式：设置活动标志，使用 break 语句，以及使用 continue语句。还学习了如何使用 while循环在列表之间移动元素，以及如何从列表中删除所有包含特定值的元素。最后，学习了如何结合使用while 循环和字典。</p><h2 id="第七章-函数">第七章 函数</h2><p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用（call）该函数。当需要再程序中多次执行同一项任务时，无须反复编写完成该任务的代码，只需要调用执行该任务的函数，让Python运行其中的代码即可。</p><h3 id="定义函数">定义函数</h3><p>定义函数的关键字是 def。后面是函数名和括号，没有参数时可以是空括号，然后和 for 、while一样也需要冒号，表示定义完成，换行后缩进表示要执行的代码块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br><br>greet_user()<br>Hello World!<br></code></pre></td></tr></table></figure><p><strong>向函数传递信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>(<span class="hljs-params">uesrname</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello,<span class="hljs-subst">&#123;uesrname&#125;</span>!&quot;</span>)<br><br><br>greet_user(<span class="hljs-string">&#x27;zqten&#x27;</span>)<br>Hello,zqten!<br></code></pre></td></tr></table></figure><p><strong>实参和形参</strong></p><p>在上面的例子中，uesrname是一个形参，即函数完成工作所需要的信息。 而'zqten' 则是实参，即在调用函数时传递给函数的信息。</p><h3 id="传递实参">传递实参</h3><p>传递实参有两种方式，一种是按照位置顺序传递，另一种是按照关键字传递。按照关键字传递实参不用考虑顺序，但要记得关键字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">animal_type, pet_name: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nI have a <span class="hljs-subst">&#123;animal_type&#125;</span>.&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My <span class="hljs-subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="hljs-subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)<br>    <br><span class="hljs-comment"># 按位置顺序传递实参</span><br>describe_pet(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;duoduo&#x27;</span>)<br>I have a cat.<br>My cat<span class="hljs-string">&#x27;s name is Duoduo.</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 按关键字传递实参</span><br><span class="hljs-string">describe_pet(pet_name=&#x27;</span>nai cha<span class="hljs-string">&#x27;, animal_type=&#x27;</span>dog<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">I have a dog.</span><br><span class="hljs-string">My dog&#x27;</span>s name <span class="hljs-keyword">is</span> Nai Cha.<br></code></pre></td></tr></table></figure><p><strong>默认值</strong></p><p>有些时候你想改变某个参数，但有些时候你想让这个参数先有一个默认值，后面调用的时候看情况是否修改。这种情况可以为参数设置一个默认值。如果没有设置默认值，在调用的时候也没有传递参数Python 就会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">animal_type=<span class="hljs-string">&#x27;cat&#x27;</span>, pet_name=<span class="hljs-string">&#x27;duo duo&#x27;</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nI have a <span class="hljs-subst">&#123;animal_type&#125;</span>.&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My <span class="hljs-subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="hljs-subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)<br><span class="hljs-comment"># 有默认值的情况下，可以不用传递参数，也可以看需要传递</span><br>describe_pet()<br>I have a cat.<br>My cat<span class="hljs-string">&#x27;s name is Duo Duo.</span><br><span class="hljs-string"></span><br><span class="hljs-string">describe_pet(&#x27;</span>dog<span class="hljs-string">&#x27;, &#x27;</span>nai cha<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">I have a dog.</span><br><span class="hljs-string">My dog&#x27;</span>s name <span class="hljs-keyword">is</span> Nai Cha.<br></code></pre></td></tr></table></figure><h3 id="返回值">返回值</h3><p>函数并非总是直接显示输出，它还可以处理一些数据，并返回一个或一组值，函数返回的值称为返回值。在函数中<strong>return</strong>语句将值返回到调用函数的那行代码，返回值能让你将程序的大部分繁重工作移到函数中，从而简化程序。</p><p><strong>返回简单的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span><br>    full_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>Jimi Hendrix <br></code></pre></td></tr></table></figure><p><strong>让实参变成可选</strong></p><p>就是先设置参数的默认值，但这个默认值是一个空值。不需要的时候就不会出现，需要的时候只需要在调用的时候传递一个参数就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name, middle_name=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span><br>    full_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span> <span class="hljs-subst">&#123;middle_name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>Jimi Hendrix <br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>, <span class="hljs-string">&#x27;YYY&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>Jimi Hendrix Yyy<br></code></pre></td></tr></table></figure><p><strong>返回字典</strong></p><p>这里有个小小的细节，就是 age=None 是一个布尔值并且是 False。意思就是这个参数并没有值返回 False。如果为这个参数传递了一个值，它就返回 True 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_person</span>(<span class="hljs-params">first_name, last_name, age=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回一个字典，其中包含一个人的信息&#x27;&#x27;&#x27;</span><br>    person = &#123;<span class="hljs-string">&#x27;first&#x27;</span>: first_name, <span class="hljs-string">&#x27;last&#x27;</span>: last_name&#125;<br>    <span class="hljs-keyword">if</span> age:<br>        person[<span class="hljs-string">&#x27;age&#x27;</span>] = age<br>    <span class="hljs-keyword">return</span> person<br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendeix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>&#123;<span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;hendeix&#x27;</span>&#125;<br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendeix&#x27;</span>, age=<span class="hljs-number">36</span>)<br><span class="hljs-built_in">print</span>(musician)<br>&#123;<span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;hendeix&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">36</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>结合使用函数和 while 循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name, middle_name=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span><br>    full_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span> <span class="hljs-subst">&#123;middle_name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nPleasr tell me your name:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(enter &#x27;q&#x27; at any time to quit.)&quot;</span>)<br><br>    f_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你姓什么：&quot;</span>)<br>    <span class="hljs-keyword">if</span> f_name == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    l_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你的名字是什么：&quot;</span>)<br>    <span class="hljs-keyword">if</span> l_name == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br><br>    full_name = get_formatted_name(f_name, l_name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你好, <span class="hljs-subst">&#123;full_name&#125;</span>&quot;</span>)<br><br>Pleasr tell me your name:<br>(enter <span class="hljs-string">&#x27;q&#x27;</span> at <span class="hljs-built_in">any</span> time to quit.)<br>你姓什么：yao<br>你的名字是什么：ming<br>你好, Yao Ming <br><br>Pleasr tell me your name:<br>(enter <span class="hljs-string">&#x27;q&#x27;</span> at <span class="hljs-built_in">any</span> time to quit.)<br>你姓什么：q<br></code></pre></td></tr></table></figure><h3 id="传递列表">传递列表</h3><p>将列表传递给函数后，函数就能直接访问其内容，进行修改等等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_users</span>(<span class="hljs-params">names</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;向列表中的每个用户发出简单的问候&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, %s!&#x27;</span> % name)<br><br>username = [<span class="hljs-string">&#x27;zqten&#x27;</span>, <span class="hljs-string">&#x27;zhengjizhong&#x27;</span>, <span class="hljs-string">&#x27;zhengkainan&#x27;</span>, <span class="hljs-string">&#x27;zhouhuarong&#x27;</span>]<br>greet_users(username)<br><br>Hello, zqten!<br>Hello, zhengjizhong!<br>Hello, zhengkainan!<br>Hello, zhouhuarong!<br></code></pre></td></tr></table></figure><p><strong>在函数中修改列表</strong>这个程序演示了一个概念：每个函数都应只负责一项具体工作。这有助于将复杂的任务分解成一系列简单的步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">unprinted_designs = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>completed_models = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_models</span>(<span class="hljs-params">unprinted_designs, completed_models</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    模拟打印每个数字，直到没有未打印的数字为止</span><br><span class="hljs-string">    打印每个数字后，都将其移到列表completed_models中</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> unprinted_designs:<br>        current_design = unprinted_designs.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Printing model: %s&#x27;</span> % current_design)<br>        completed_models.append(current_design)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_completed_models</span>(<span class="hljs-params">completed_models</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示打印好的所有数字&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nThe following models have been printed:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> completed_model <span class="hljs-keyword">in</span> completed_models:<br>        <span class="hljs-built_in">print</span>(completed_model, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><br>print_models(unprinted_designs, completed_models)<br>show_completed_models(completed_models)<br><span class="hljs-built_in">print</span>(unprinted_designs)<br><br>Printing model: <span class="hljs-number">1</span><br>Printing model: <span class="hljs-number">2</span><br>Printing model: <span class="hljs-number">3</span><br>Printing model: <span class="hljs-number">4</span><br>Printing model: <span class="hljs-number">5</span><br>Printing model: <span class="hljs-number">6</span><br>Printing model: <span class="hljs-number">7</span><br>Printing model: <span class="hljs-number">8</span><br>Printing model: <span class="hljs-number">9</span><br>Printing model: <span class="hljs-number">10</span><br><br>The following models have been printed:<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> []<br><span class="hljs-comment"># 如果不希望传递后列表为空，可以使用副本传递参数 [:] 切片传递</span><br>print_models(unprinted_designs[:], completed_models)<br>show_completed_models(completed_models)<br><span class="hljs-built_in">print</span>(unprinted_designs)<br><br>Printing model: <span class="hljs-number">1</span><br>Printing model: <span class="hljs-number">2</span><br>Printing model: <span class="hljs-number">3</span><br>Printing model: <span class="hljs-number">4</span><br>Printing model: <span class="hljs-number">5</span><br>Printing model: <span class="hljs-number">6</span><br>Printing model: <span class="hljs-number">7</span><br>Printing model: <span class="hljs-number">8</span><br>Printing model: <span class="hljs-number">9</span><br>Printing model: <span class="hljs-number">10</span><br><br>The following models have been printed:<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h3 id="传递任意数量的参数">传递任意数量的参数</h3><p>“ * ”带形参名中的星号让Python创建一个名为形参名的元组，该元组包含函数收到的所有值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">*toppings</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nMaking a pizza with the following toppings:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings:<br>        <span class="hljs-built_in">print</span>(topping)<br><br>make_pizza(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>make_pizza(<span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br><br>Making a pizza <span class="hljs-keyword">with</span> the following toppings:<br>aaa<br><br>Making a pizza <span class="hljs-keyword">with</span> the following toppings:<br>mushrooms<br>extra cheese<br></code></pre></td></tr></table></figure><p><strong>结合使用位置实参和任意数量的实参</strong></p><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置和关键字实参，再将余下的实参都收集到最后一个形参中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">size, *toppings</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nMaking a <span class="hljs-subst">&#123;size&#125;</span>-inch pizza with the following toppings:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;- <span class="hljs-subst">&#123;topping&#125;</span>&#x27;</span>)<br><br>make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>make_pizza(<span class="hljs-number">19</span>, <span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- aaa<br><br>Making a <span class="hljs-number">19</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- mushrooms<br>- extra cheese<br></code></pre></td></tr></table></figure><p><strong>使用任意数量的关键字实参</strong></p><p>“ ** ”带形参名中的两个星号让Python创建一个名为形参名的字典，该字典包含函数收到的所有的键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_profile</span>(<span class="hljs-params">first, last, **user_info</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;创建一个字典，其中包含我们知道的有关用户的一切&#x27;&#x27;&#x27;</span><br>    user_info[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first<br>    user_info[<span class="hljs-string">&#x27;last_name&#x27;</span>] = last<br>    <span class="hljs-keyword">return</span> user_info<br><br>user_profile = build_profile(<br>    <span class="hljs-string">&#x27;zheng&#x27;</span>, <span class="hljs-string">&#x27;ji zhong&#x27;</span>, age=<span class="hljs-number">11</span>, height=<span class="hljs-string">&#x27;147cm&#x27;</span>, weight=<span class="hljs-string">&#x27;48kg&#x27;</span>)<br><span class="hljs-built_in">print</span>(user_profile)<br>&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&#x27;147cm&#x27;</span>, <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-string">&#x27;48kg&#x27;</span>, <span class="hljs-string">&#x27;first_name&#x27;</span>: <span class="hljs-string">&#x27;zheng&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>: <span class="hljs-string">&#x27;ji zhong&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="将函数存储在模块中">将函数存储在模块中</h3><p>将函数存储在称为模块的独立文件中，再将模块导入（import）主程序。可以让代码看起来容易理解。</p><p><strong>导入整个模块</strong></p><p>要让函数是可导入的，得先创建模块。模块是扩展名为 .py 的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pizza<br>pizza.make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>pizza.make_pizza(<span class="hljs-number">17</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">17</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br></code></pre></td></tr></table></figure><p><strong>导入特定的函数</strong></p><p>只想导入模块中的特定函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pizza <span class="hljs-keyword">import</span> make_pizza<br><br>make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>make_pizza(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br></code></pre></td></tr></table></figure><p><strong>使用 as 给函数指定别名</strong></p><p>如果要导入的函数的名称太长或者可能与程序中的其他名称有冲突，可指定简短而独一无二的别名。这个方法也可以应用到给模块指定别名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pizza <span class="hljs-keyword">import</span> make_pizza <span class="hljs-keyword">as</span> mp<br><br>mp(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>mp(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>, <span class="hljs-string">&#x27;fanqie&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br>- fanqie<br><br><span class="hljs-comment"># 也可以给模块指定别名</span><br><span class="hljs-keyword">import</span> pizza <span class="hljs-keyword">as</span> p<br><br>p.make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>p.make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>, <span class="hljs-string">&#x27;fanqie&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br>- fanqie<br><br></code></pre></td></tr></table></figure><p><strong>导入模块中的所有函数</strong></p><p>这种方法一般慎用，因为如果模块中有函数的名称与当前项目中的名称相同，可能导致意想不到的结果。<strong>最好的做法是要么只导入需要使用的函数，要么导入整个模块并使用点号调用</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pizza <span class="hljs-keyword">import</span> *<br><br>make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>, <span class="hljs-string">&#x27;fanqie&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br>- fanqie<br><br><span class="hljs-comment"># 导入其他文件夹的模块</span><br><span class="hljs-keyword">from</span> 文件夹名称 <span class="hljs-keyword">import</span> 模块<br><span class="hljs-keyword">from</span> 文件夹名称.模块 <span class="hljs-keyword">import</span> 函数<br></code></pre></td></tr></table></figure><h3 id="函数编写指南">函数编写指南</h3><p>在编写函数时需要牢记几个细节。</p><ul><li>应给函数指定描述性的名称，且只使用小写字母和下划线。</li><li>每个函数都应包含简要阐述其功能的注释。意思就是每个函数都需要编写使用说明的注释。</li><li>形参指定默认值时，等号两边不要有空格。</li><li>如果程序或模块包含多个函数，可以使用两个空行将函数隔开。</li><li>所有的 import语句都应该放在文件开头。唯一的例外是，你要在文件开头编写整个程序的注释。</li><li>导入自己边学的模块时，尽量把模块和程序放在一个文件夹。</li></ul><h3 id="小结-5">小结</h3><p>本章学习了如何编写函数，以及如何传递实参，让函数能够访问完成工作所需的信息。然后学习了如何使用位置实参和关键字实参，以及如何接受任意数量的实参，学习了显示输出的函数和返回值的函数，知道了如何将函数与列表、字典、if、语句和while循环结合起来使用，以及如何将函数存储在称为模块的独立文件中，让程序文件更简单、更易于理解。最后，了解了函数编写指南，遵循这些指南可让程序始终保持良好的结构。程序员的目标之一是编写简单的代码来完成任务，而函数有助于实现这样的目标。</p><h2 id="第八章-类">第八章 类</h2><p>面向对象编程（object-oriented-programming,OOP）是最有效的软件编写方法之一。在基于类创建对象时，每个对象都自动具备类定义的通用行为。然后，你可根据需要赋予每个对象独特的个性。根据类来创建对象称为<strong>实例化</strong>，这让你能够使用类的实例。</p><p>面相对象变成有助于你像程序员那样看世界，并且真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维能力，让你能够通过编写程序来解决遇到的几乎任何问题。</p><h3 id="创建和使用类">创建和使用类</h3><p><strong>创建Dog类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建Dog类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟小狗的简单尝试&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化属性name和age&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sit</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;模拟小狗坐下&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is now sitting.&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_over</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;模拟小狗打滚&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> rolled over.&quot;</span>)<br></code></pre></td></tr></table></figure><p>“<strong>init</strong>()”方法是类的初始化方法，类中的函数称为方法。这个方法的开头和结尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。这个方法定义成包含三个形参：self 、name、age。这个方法中self是必不可少，而且必须位于其他形参的前面。self就是类的自身，当我们实例化这个类时，我们传递的参数会通过self 传递给类自身。self.name = name 里面 self前缀的变量可供类中的所有方法使用。</p><p><strong>根据类创建实例</strong></p><p>可以将类视为有关如何创建实例的说明。:yum:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建实例</span><br>my_dog = Dog(<span class="hljs-string">&#x27;duoduo&#x27;</span>, <span class="hljs-number">7</span>)<br><span class="hljs-comment"># my_dog.name 就是访问实例的属性</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My dog&#x27;s name is <span class="hljs-subst">&#123;my_dog.name&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My dog&#x27;s age is <span class="hljs-subst">&#123;my_dog.age&#125;</span>&quot;</span>)<br><br>My dog<span class="hljs-string">&#x27;s name is duoduo</span><br><span class="hljs-string">My dog&#x27;</span>s age <span class="hljs-keyword">is</span> <span class="hljs-number">7</span><br><span class="hljs-comment"># 调用方法</span><br>my_dog.sit()<br>my_dog.roll_over()<br><br>duoduo <span class="hljs-keyword">is</span> now sitting.<br>duoduo rolled over.<br><span class="hljs-comment"># 创建多个实例</span><br>your_dog = Dog(<span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Your dog&#x27;s name is <span class="hljs-subst">&#123;your_dog.name&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Your dog&#x27;s age is <span class="hljs-subst">&#123;your_dog.age&#125;</span>&quot;</span>)<br>your_dog.sit()<br><br>Your dog<span class="hljs-string">&#x27;s name is Lucy</span><br><span class="hljs-string">Your dog&#x27;</span>s age <span class="hljs-keyword">is</span> <span class="hljs-number">4</span><br>Lucy <span class="hljs-keyword">is</span> now sitting.<br></code></pre></td></tr></table></figure><h3 id="使用类和实例">使用类和实例</h3><p><strong>Car 类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.make = make<br>        <span class="hljs-variable language_">self</span>.model = model<br>        <span class="hljs-variable language_">self</span>.year = year<br><span class="hljs-comment"># 给属性默认值</span><br>        <span class="hljs-variable language_">self</span>.odometer = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.oli = <span class="hljs-number">240</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span><br>        long_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.year&#125;</span>年 <span class="hljs-subst">&#123;self.make&#125;</span>生产<span class="hljs-subst">&#123;self.model&#125;</span>&quot;</span><br>        <span class="hljs-keyword">return</span> long_name.title()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这两车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.odometer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> mileage &gt;= <span class="hljs-variable language_">self</span>.odometer:<br>            <span class="hljs-variable language_">self</span>.odometer = mileage<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你不能往回设置公里数&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.odometer += mileage<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">car_oli_v</span>(<span class="hljs-params">self, oli</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;描述车辆油箱的容积&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.oli = oli<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这辆车的油箱容积是<span class="hljs-subst">&#123;self.oli&#125;</span>L.&#x27;</span>)<br><br>my_new_car = Car(<span class="hljs-string">&#x27;奥迪汽车公司&#x27;</span>, <span class="hljs-string">&#x27;奥迪A4&#x27;</span>, <span class="hljs-string">&#x27;2003&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_new_car.get_descriptive_name())<br><span class="hljs-comment"># 修改属性值</span><br>my_new_car.odometer = <span class="hljs-number">1</span><br>my_new_car.read_odometer()<br><span class="hljs-comment"># 通过方法修改属性值</span><br>my_new_car.update_odometer(<span class="hljs-number">34</span>)<br>my_new_car.increment_odometer(<span class="hljs-number">12</span>)<br>my_new_car.update_odometer(<span class="hljs-number">12</span>)<br><br><span class="hljs-number">2003</span>年奥迪汽车公司生产奥迪A4<br>这两车已经行驶了<span class="hljs-number">1</span>公里了。<br>这两车已经行驶了<span class="hljs-number">34</span>公里了。<br>这辆车已经行驶了<span class="hljs-number">46</span>公里了。<br>你不能往回设置公里数<br></code></pre></td></tr></table></figure><h3 id="继承">继承</h3><p>编写类的时候并非总是要从头开始，如果要编写的类是一个已经存在的类的特殊版本，可以使用<strong>继承</strong>。当一个类继承另一个类时，将自动获得后者的素有属性和方法。原有类称为<strong>父类</strong>，而新的类称为<strong>子类</strong>。子类不仅继承了父类的所有属性和方法，还可以定义自己的属性和方法。</p><p><strong>子类初始化方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br></code></pre></td></tr></table></figure><p><strong>给子类定义属性和方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery_size = <span class="hljs-number">40</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br>my_leaf.describe_battery()<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br>This car has a <span class="hljs-number">40</span>-KWh battery.<br></code></pre></td></tr></table></figure><p><strong>重写父类中的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery_size = <span class="hljs-number">40</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">car_oli_v</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;电动汽车没有油箱&quot;</span>)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br>my_leaf.describe_battery()<br>my_leaf.car_oli_v()<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br>This car has a <span class="hljs-number">40</span>-KWh battery.<br>电动汽车没有油箱<br></code></pre></td></tr></table></figure><p><strong>将实例用作属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery = Battery()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">car_oli_v</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;电动汽车没有油箱&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">40</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.battery_size = battery_size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br>my_leaf.battery.describe_battery()<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br>This car has a <span class="hljs-number">40</span>-KWh battery.<br></code></pre></td></tr></table></figure><h3 id="导入类">导入类</h3><p>主要目的是让文件整洁，我们可以将类存储在模块中，然后在主程序导入所需的模块。我们需要整理一下代码，把上面我们学的三个类都复制到一个文件，命名为car.py 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.make = make<br>        <span class="hljs-variable language_">self</span>.model = model<br>        <span class="hljs-variable language_">self</span>.year = year<br>        <span class="hljs-variable language_">self</span>.odometer = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span><br>        long_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.year&#125;</span>年<span class="hljs-subst">&#123;self.make&#125;</span>生产<span class="hljs-subst">&#123;self.model&#125;</span>&quot;</span><br>        <span class="hljs-keyword">return</span> long_name.title()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.odometer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> mileage &gt;= <span class="hljs-variable language_">self</span>.odometer:<br>            <span class="hljs-variable language_">self</span>.odometer = mileage<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你不能往回设置公里数&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.odometer += mileage<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <br><span class="hljs-comment"># 电池模组</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">40</span>, car_model_isoli=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.battery_size = battery_size<br>        <span class="hljs-string">&#x27;&#x27;&#x27;默认是电动汽车,如果是汽油车可以设置会Ture.&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.car_model_isoli = car_model_isoli<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.car_model_isoli <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是一辆油车，没有电池.&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;升级电池容量&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.battery_size != <span class="hljs-number">65</span>:<br>            <span class="hljs-variable language_">self</span>.battery_size = <span class="hljs-number">65</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_range</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条消息，指出汽车的续航里程&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.battery_size == <span class="hljs-number">40</span>:<br>            <span class="hljs-built_in">range</span> = <span class="hljs-number">150</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.battery_size == <span class="hljs-number">65</span>:<br>            <span class="hljs-built_in">range</span> = <span class="hljs-number">225</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这辆车的续航里程为<span class="hljs-subst">&#123;<span class="hljs-built_in">range</span>&#125;</span>公里.&#x27;</span>)<br><br><span class="hljs-comment"># 电动车</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery = Battery()<br></code></pre></td></tr></table></figure><p><strong>导入单个类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> Car<br></code></pre></td></tr></table></figure><p><strong>导入多个类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> Car, ElectricCar<br></code></pre></td></tr></table></figure><p><strong>导入整个模块</strong></p><p>这里我把上面的代码分成了两个文件，Car类单独储存成 car.py，电池模组和电动车储存为 electric_car.py 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> car<br><span class="hljs-comment"># 用法就是用点引用该模块的类</span><br>my_car = car.Car(<span class="hljs-string">&quot;柳州五菱&quot;</span>, <span class="hljs-string">&quot;五菱之光&quot;</span>, <span class="hljs-number">2008</span>)<br><br><span class="hljs-comment"># 还有下面这种方法，但是不推荐用，因为可能会引起很多难以诊断的错误，比如出现同名的类</span><br><span class="hljs-comment"># 这种方法是导入模块的所有类</span><br><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><p><strong>使用别名</strong></p><p>就是给导入的模块或类更改使用名，这并不会影响该模块和类的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给模块使用别名</span><br><span class="hljs-keyword">import</span> electric_car <span class="hljs-keyword">as</span> ec<br><span class="hljs-comment"># 给类使用别名</span><br><span class="hljs-keyword">from</span> electric_car <span class="hljs-keyword">import</span> ElectricCar <span class="hljs-keyword">as</span> EC<br></code></pre></td></tr></table></figure><h3 id="合适的工作流程">合适的工作流程</h3><p>首先尝试在一个文件中完成所有工作，确定一切都能正确运行后，在将类移到独立的模块中。</p><p>这里讲一下 <strong>VMC</strong> 模式：</p><ul><li>V： 就是视窗，用户界面等可视化的代码。</li><li>M：就是模块或类等等的代码。</li><li>C：就是整个程序的运行逻辑，流程控制等等的代码。</li></ul><p>这个模式可以简单的理解为建立三个文件夹，分别存放这三种类型的文件。这样可以让自己的代码更加简洁高效，别人理解也更容易。</p><h3 id="python标准库">Python标准库</h3><p>Python标准库是一组模块，在安装Python时已经包含在内了。我们可以使用标准可中的任何函数和类。查看Python标准库，可以在命令行输入<strong>help("modules")</strong> 命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 随机数模组，返回两个数之间的随机一个数。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-meta">&gt;&gt;&gt; </span>randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">4</span>   <br><span class="hljs-comment"># 返回一个列表里随机一个元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice <br><span class="hljs-meta">&gt;&gt;&gt; </span>players = [<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-string">&#x27;ddd&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>choice(players)<br><span class="hljs-string">&#x27;ccc&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="类的编程风格">类的编程风格</h3><p>编写复杂程序时采用以下几项：</p><ul><li>类名：驼峰命名法。例：MyNewCar 。类名不使用下划线。</li><li>模块名和实例名都采用全小写格式，并在单词之间采用下划线。</li><li>每个类都要在定义后面和函数一样需要描述类功能的文档字符串。</li><li>当需要导入标准库中的模块和自己编写的模块时，优先导入标准库中的模块，在导入自己编写的模块。</li></ul><h3 id="小结-6">小结</h3><p>本章我们学习了如何编写类，如何使用属性在类中存储的信息，以及如何编写方法让类具备所需的行为。然后学习了init初始化方法。了解了如何修改实例的属性，包括直接修改以及通过方法修改。还了解到使用继承可简化相关类的创建工作，将一个类的实例用作另一个类的属性能让类更简洁。明白了，通过将类存储在模块（文件）中，并在需要使用这些类的文件中导入它们，可让项目变的更简洁。开始了解python标准库，还看了一个random模块，最后学习了编写类时应遵循的Python约定。</p><h2 id="第九章-文件和异常">第九章 文件和异常</h2><p>处理文件，让程序能够快速地分析大量数据；错误处理，避免程序在面对意外情况时崩溃；异常是Python创建特殊对象，用于管理程序运行时出现的错误；还将学习使用json 模块保存用户数据，以免这些数据在程序结束运行后丢失。</p><h3 id="读取文件">读取文件</h3><p>读取文件对数据分析应用程序很有用。要使用文本文件中的信息，首先需要将信息读取到内存中。既可以一次性读取文件的全部内容，也可以逐行读取。</p><p><strong>读取文件的全部内容</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-params">#</span> 这是一个txt文件<br>3.1415926535<br>  8979323846<br>  2643383279<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取文件</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-comment"># 这里值得注意的是VScode里面用的斜杠是反的</span><br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br>contents = path.read_text()<br><span class="hljs-comment"># 删除文档中的空格</span><br><span class="hljs-comment"># contents = contents.strip()</span><br><span class="hljs-built_in">print</span>(contents)<br><br><span class="hljs-number">3.1415926535</span><br>  <span class="hljs-number">8979323846</span><br>  <span class="hljs-number">2643383279</span><br></code></pre></td></tr></table></figure><p><strong>相对文件路径和绝对文件路径</strong></p><p><strong>相对文件路径</strong>让 Python到相对于当前运行的程序所在目录的指定位置去查找。比如上面的文件可以这样读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&quot;text_files/pi_digits.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>绝对文件路径</strong>可以读取系统中任何地方的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在最简单的做法是，要么将数据文件存储在程序文件所在的目录中，要么将其存储在存续文件所在目录下的一个文件夹中。</p><p><strong>注意</strong>：在显示文件路径时，windows 系统使用反斜杠（ ）而不是斜杠（ / ）但是你在代码中应该始终使用斜杠（ /），即便在windows系统中也是如此。在与你或其他用户的系统交互时，pathlib库会自动使用正确的路径表示方法。</p><p><strong>访问文件中的各行</strong></p><p>使用 <strong>splitlines()</strong>方法可以将字符串转换为一系列行，在使用 for循环遍历文件中的每一行，splitlines()方法返回一个列表，其中包含文件中所有的行。可以把这个列表赋值给变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br>contents = path.read_text()<br>lines = contents.splitlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(line)<br><br><span class="hljs-number">3.1415926535</span><br>  <span class="hljs-number">8979323846</span><br>  <span class="hljs-number">2643383279</span><br></code></pre></td></tr></table></figure><p><strong>使用文件的内容</strong></p><p>读取文件后才能使用这些数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br>contents = path.read_text()<br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br>lines = contents.splitlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line<br><br><span class="hljs-built_in">print</span>(pi_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><span class="hljs-number">3.1415926535</span>  <span class="hljs-number">8979323846</span>  <span class="hljs-number">2643383279</span><br><span class="hljs-number">36</span><br><br><span class="hljs-comment"># 删除左边空格</span><br>--snip--<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.lstrip()<br><br><span class="hljs-built_in">print</span>(pi_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><span class="hljs-number">3.141592653589793238462643383279</span><br><span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：读取文本文件时，python将其中的所有文本都解释为字符串。如果读取的是数，并且要将其作为数字使用，就必须使用int() 函数将其转换为整数，或者使用 float() 函数将其转为浮点数。</p><p><strong>大型文件</strong>可以做切片等列表的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">--snip--<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.lstrip()<br><br><span class="hljs-built_in">print</span>(pi_string[:<span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><span class="hljs-number">3.14159265</span><br><span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p><strong>趣味小练习</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 圆周率中包含你的生日吗</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;pi_million_digits.txt&quot;</span>)<br>contents = path.read_text()<br><br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br>lines = contents.splitlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.strip()<br><br>birthday = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你的生日如(20200506):&quot;</span>)<br><span class="hljs-keyword">if</span> birthday <span class="hljs-keyword">in</span> pi_string:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率包含了你的生日&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率没有你的生日哦...&quot;</span>)<br>    <br>你的生日如(<span class="hljs-number">20200506</span>):<span class="hljs-number">20200506</span><br>圆周率没有你的生日哦...<br></code></pre></td></tr></table></figure><h3 id="写入文件">写入文件</h3><p>保存数据的最简单的方式之一是将其写入文件。</p><p><strong>写入一行</strong></p><p><strong>注意</strong>：在python调用 <strong>write_text()</strong>方法时，如果指定文件已存在，这个方法会将其内容<strong>替换</strong>为你要写入的内容。<strong>replace()</strong>方法可以将字符串中的特定单词替换为另一个单词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 写入一行文字</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&#x27;programming.txt&#x27;</span>)<br>path.write_text(<span class="hljs-string">&quot;hello world&quot;</span>)<br><br>programming.txt<br>hello world<br><span class="hljs-comment"># 替换字符串 replace()</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">&#x27;How are you?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.replace(<span class="hljs-string">&#x27;you&#x27;</span>,<span class="hljs-string">&#x27;me&#x27;</span>)<br><span class="hljs-string">&#x27;How are me?&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：Python只能将字符串写入文本，如果要将数值数据存储到文本文件中，须使用 str()函数将其转换为字符串格式。</p><p><strong>写入多行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&#x27;programming.txt&#x27;</span>)<br>contents = <span class="hljs-string">&quot;nihao&quot;</span><br>contents += <span class="hljs-string">&quot;\nwohao&quot;</span><br>contents += <span class="hljs-string">&quot;\ndajiahao&quot;</span><br>path.write_text(contents)<br><br>programming.txt<br>nihao<br>wohao<br>dajiahao<br></code></pre></td></tr></table></figure><p><strong>趣味小练习</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复写入多个词语</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&quot;guest.txt&quot;</span>)<br>n = <span class="hljs-number">0</span><br>c = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> n != <span class="hljs-number">5</span>:<br>    b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入内容：&quot;</span>)<br>    c += <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;b&#125;</span>\n&quot;</span><br>    n += <span class="hljs-number">1</span><br>    path.write_text(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c&#125;</span>&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="异常">异常</h3><p>异常是使用 try-except代码块处理的。也就是说你运行一段代码，如过出错了会根据你编写的代码执行，如果没有对异常进行处理，程序出错了就会停止。<strong>如果你运行一段代码出错，编辑器会提示你是什么错误，你可以针对这个错误给出处理方法，就像下面的0 不能作为除数的错误是：ZeroDivisionError</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span>/<span class="hljs-number">0</span>)<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p><strong>使用 try-except 代码块</strong></p><p>当你认为可能会发生错误的时候，可以使用这个代码块来处理可能引发的错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">5</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0不能作为除数。&quot;</span>)<br>    <br><span class="hljs-number">0</span>不能作为除数。<br></code></pre></td></tr></table></figure><p><strong>处理 FileNotFoundError 异常</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;alice.txt&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有找到这个文件。&quot;</span>)<br><br>没有找到这个文件。<br></code></pre></td></tr></table></figure><p><strong>分析文本</strong></p><p>split() 方法是把一个很长的字符串转换成很多单词的列表的一个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;alice.txt&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有找到这个文件。&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 计算文件大概包含多少个单词</span><br>    words = contents.split()<br>    num_words = <span class="hljs-built_in">len</span>(words)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The file <span class="hljs-subst">&#123;path&#125;</span> has about <span class="hljs-subst">&#123;num_words&#125;</span> words&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>读取多个文件</strong></p><p>利用函数我们可以读取多个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_words</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;没有找到<span class="hljs-subst">&#123;path&#125;</span>这个文件。&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 计算文件大概包含多少个单词</span><br>        words = contents.split()<br>        num_words = <span class="hljs-built_in">len</span>(words)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The file <span class="hljs-subst">&#123;path&#125;</span> has about <span class="hljs-subst">&#123;num_words&#125;</span> words&quot;</span>)<br><br><br>filenames = [<span class="hljs-string">&#x27;alice.txt&#x27;</span>, <span class="hljs-string">&#x27;little_women.txt&#x27;</span>, <span class="hljs-string">&#x27;moby_dick.txt&#x27;</span>, <span class="hljs-string">&#x27;kkk.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>    path = Path(filename)<br>    count_words(path)<br>   <br>The file alice.txt has about <span class="hljs-number">29594</span> words<br>The file little_women.txt has about <span class="hljs-number">189142</span> words<br>The file moby_dick.txt has about <span class="hljs-number">215864</span> words<br>没有找到kkk.txt这个文件。<br></code></pre></td></tr></table></figure><p><strong>静默失败</strong></p><p>并非每次错误都需要告诉用户，有时候有错误什么也不做，但是就是让程序继续运行可以使用pass 语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_words</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 计算文件大概包含多少个单词</span><br>        words = contents.split()<br>        num_words = <span class="hljs-built_in">len</span>(words)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The file <span class="hljs-subst">&#123;path&#125;</span> has about <span class="hljs-subst">&#123;num_words&#125;</span> words&quot;</span>)<br><br>filenames = [<span class="hljs-string">&#x27;alice.txt&#x27;</span>, <span class="hljs-string">&#x27;little_women.txt&#x27;</span>, <span class="hljs-string">&#x27;moby_dick.txt&#x27;</span>, <span class="hljs-string">&#x27;kkk.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>    path = Path(filename)<br>    count_words(path)<br><br>The file alice.txt has about <span class="hljs-number">29594</span> words<br>The file little_women.txt has about <span class="hljs-number">189142</span> words<br>The file moby_dick.txt has about <span class="hljs-number">215864</span> words<br></code></pre></td></tr></table></figure><h3 id="存储数据">存储数据</h3><p>json模块能够将简单的Python数据结构转换为JSON格式的字符串，并在程序再次运行时从文件中加载数据。</p><p><strong>注意：</strong>JSON格式最初是为 JavaScript开发的，但后来成为了一种通用格式，被众多语言采用。</p><p><strong>json.dumps() 和 json.loads()</strong></p><p>json.dumps()接受一个参数，即要转换为JSON格式的数据。这个函数返回一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 存储数据 json.dumps()</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>number = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br>path = Path(<span class="hljs-string">&#x27;number.json&#x27;</span>) <span class="hljs-comment"># 文件路径，如果没有就会自动创建这个文件</span><br>contents = json.dumps(number) <span class="hljs-comment"># 数据通过json.dumps()转化文JSON格式，存储在变量contents中</span><br>path.write_text(contents) <span class="hljs-comment"># 把contents中的数据写入number.json这个文件中</span><br><span class="hljs-comment"># number.json文件内容</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-comment"># 读取数据 json.loads()</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>path = Path(<span class="hljs-string">&#x27;number.json&#x27;</span>) <span class="hljs-comment"># 文件路径，如果没有就会自动创建这个文件</span><br>contents = path.read_text() <span class="hljs-comment"># 把读取的数据存储在变量contents中</span><br>number = json.loads(contents)<span class="hljs-comment"># contents中的数据通过json.loads()转化文JSON格式，并存储在变量number中</span><br><span class="hljs-built_in">print</span>(number)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p><strong>保存和读取用户生成的数据</strong></p><p>保存数据很有必要，因为如果不以某种方式进行存储，用户的信息就会在程序停止运行时丢失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存用户数据</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>)<br>path = Path(<span class="hljs-string">&#x27;username.json&#x27;</span>)<br>contents = json.dumps(username)<br>path.write_text(contents, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我们将储存你的名字。&quot;</span>)<br>请输入你的名字：zqten<br>我们将储存你的名字。<br><span class="hljs-comment"># username.json文件</span><br><span class="hljs-string">&quot;zqten&quot;</span><br><br><span class="hljs-comment"># 读取用户生成的数据</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br>path = Path(<span class="hljs-string">&quot;username.json&quot;</span>)<br>contents = path.read_text()<br>username = json.loads(contents)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome back <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>Welcome back zqten<br></code></pre></td></tr></table></figure><p>Path类提供了很多有用的方法。如果指定的文件或文件夹存在，<strong>exists()</strong>方法返回 True ，否则返回 False 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>path = Path(<span class="hljs-string">&#x27;username.json&#x27;</span>)<br><span class="hljs-keyword">if</span> path.exists():<br>    contents = path.read_text()<br>    username = json.loads(contents)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome back <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>)<br>    contents = json.dumps(username)<br>    path.write_text(contents, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我们将储存你的名字。<span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>Welcome back zqten<br></code></pre></td></tr></table></figure><p><strong>重构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存用户数据</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_stored_username</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;如果用户存储了用户名，我们就获取他&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> path.exists():<br>        contents = path.read_text()<br>        username = json.loads(contents)<br>        <span class="hljs-keyword">return</span> username<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_username</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;提示用户输入用户名&#x27;&#x27;&#x27;</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>)<br>    contents = json.dumps(username)<br>    path.write_text(contents, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> username<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;问候用户，并指出其名字&#x27;&#x27;&#x27;</span><br>    path = Path(<span class="hljs-string">&#x27;username.json&#x27;</span>)<br>    username = get_stored_username(path)<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome back <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        username = get_new_username(path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我们将储存你的名字，<span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br><br>greet_user()<br>请输入你的名字：zqten<br>我们将储存你的名字，zqten<br><span class="hljs-comment"># 在运行一次</span><br>greet_user()<br>Welcome back zqten<br></code></pre></td></tr></table></figure><h3 id="小结-7">小结</h3><p>本章学习了如何使用文件，包括如何读取整个文件，如何读取文件中的各行，以及如何根据需要将任意数量的文本写入文件。然后学习了异常，以及如何处理程序可能引发的异常。最后学习了如何存储Python数据结构，以保存用户提供的信息，避免让用户在每次运行程序时都重新提供。</p><h2 id="第十章-测试代码">第十章 测试代码</h2><p>本章使用的是pip安装的pytest库来进行测试代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台安装</span><br>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pytest<br></code></pre></td></tr></table></figure><h3 id="测试函数">测试函数</h3><p>测试基本分为下面几种：</p><ul><li>单元测试，用于核实函数的某个方面没有问题。</li><li>测试用例，是一组单元测试，核实函数在各种情况下的行为都符合要求。</li><li>全覆盖，测试一整套单元测试，涵盖了各种可能的函数使用方式。</li></ul><p>测试函数，需要新建一个文件，导入需要测试的函数，然后定义一个测试函数（这个函数的命名规范是：必须以test加下划线打头）。在测试过程中，<strong>pytest</strong>会找出并运行所有以test加下划线打头的函数。运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># name_function.py 文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">frist, last, middle=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> middle:<br>        full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;frist&#125;</span> <span class="hljs-subst">&#123;middle&#125;</span> <span class="hljs-subst">&#123;last&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;frist&#125;</span> <span class="hljs-subst">&#123;last&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br><span class="hljs-comment"># test_name_function.py 测试文件</span><br><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_frist_last_name</span>():<br>    formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> formatted_name == <span class="hljs-string">&#x27;Janis Joplin&#x27;</span><br>    <br><span class="hljs-comment"># 运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</span><br>======================== test session starts ========================<br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">1</span> item<br><br>test_name_function.py .                                     [<span class="hljs-number">100</span>%]<br><br>======================== <span class="hljs-number">1</span> passed <span class="hljs-keyword">in</span> <span class="hljs-number">0.01</span>s ==========================<br><br><br><span class="hljs-comment"># 未通过测试示例</span><br>===================== test session starts ============================<br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">1</span> item<br><br>test_name_function.py F                                         [<span class="hljs-number">100</span>%]<br><br>====================== FAILURES ====================================== <br>__________________ test_frist_last_name_______________________________ <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_frist_last_name</span>():<br>        formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>)<br>&gt;       <span class="hljs-keyword">assert</span> formatted_name == <span class="hljs-string">&#x27;Janis Joplil&#x27;</span><br>E       AssertionError: <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;Janis Joplin&#x27;</span> == <span class="hljs-string">&#x27;Janis Joplil&#x27;</span><br>E         - Janis Joplil<br>E         ?            ^<br>E         + Janis Joplin<br>E         ?            ^<br><br>test_name_function.py:<span class="hljs-number">6</span>: AssertionError<br>============= short test summary info =========================================== <br>FAILED test_name_function.py:<br>:test_frist_last_name - AssertionError: <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;Janis Joplin&#x27;</span> == <span class="hljs-string">&#x27;Janis Joplil&#x27;</span><br>============= <span class="hljs-number">1</span> failed <span class="hljs-keyword">in</span> <span class="hljs-number">0.05</span>s ================================================= <br></code></pre></td></tr></table></figure><h3 id="测试类">测试类</h3><p>上面是测试了函数，现在我们针对类进行测试。</p><p><strong>各种断言：</strong></p><ul><li>assert a == b 断言两个值相等</li><li>assert a != b 断言两个值不等</li></ul><p>这里只列出了两个，测试能包含任意可用条件语句表示的断言，比如 not、in等等。</p><p><strong>要测试的类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试类 survey.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousSurvey</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;收集匿名调查问卷&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, question</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;存储一个问题，并为存储答案做准备&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.question = question<br>        <span class="hljs-variable language_">self</span>.responses = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_question</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;显示调查问卷&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.question)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">store_response</span>(<span class="hljs-params">self, new_response</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;存储单个调查答卷&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.responses.append(new_response)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_results</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;显示收集到的所有答案&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;所有问卷结果:&quot;</span>)<br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.responses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;- <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 实例化 language_survey.py</span><br><span class="hljs-comment"># survey类的实例</span><br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><span class="hljs-comment"># 定义个问题，并创建一个表示调查的 AnonymousSurvey 对象</span><br>question = <span class="hljs-string">&quot;你学习了几种语言？&quot;</span><br>language_survey = AnonymousSurvey(question)<br><br><span class="hljs-comment"># 显示问题并存储答案</span><br>language_survey.show_question()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按&#x27;q&#x27;退出。\n&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你学习的语言: &quot;</span>)<br>    <span class="hljs-keyword">if</span> response == <span class="hljs-string">&quot;q&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    language_survey.store_response(response)<br><br><span class="hljs-comment"># 显示答案</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n你学习的语言有&quot;</span>)<br>language_survey.show_results()<br><br>你学习了几种语言？<br>按<span class="hljs-string">&#x27;q&#x27;</span>退出。       <br><br>输入你学习的语言: 汉语<br>输入你学习的语言: 英语<br>输入你学习的语言: 日语<br>输入你学习的语言: 德语<br>输入你学习的语言: q<br><br>你学习的语言有<br>所有问卷结果: <br>- 汉语        <br>- 英语        <br>- 日语        <br>- 德语  <br></code></pre></td></tr></table></figure><p><strong>测试AnonymousSurvey类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试AnonymousSurvey类 test_survey.py</span><br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_single_response</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>    language_survey = AnonymousSurvey(question)<br>    language_survey.store_response(<span class="hljs-string">&#x27;English&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;English&#x27;</span> <span class="hljs-keyword">in</span> language_survey.responses<br>    <br>==================== test session starts ============================== <br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">1</span> items                                                                                                                       <br><br>test_survey.py .                               [<span class="hljs-number">100</span>%] <br><br>===================== <span class="hljs-number">1</span> passed <span class="hljs-keyword">in</span> <span class="hljs-number">0.02</span>s ===============================     <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_three_response</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>    language_survey = AnonymousSurvey(question)<br>    responses = [<span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-string">&#x27;Spanish&#x27;</span>, <span class="hljs-string">&#x27;Chinese&#x27;</span>]<br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        language_survey.store_response(response)<br><br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        <span class="hljs-keyword">assert</span> response <span class="hljs-keyword">in</span> language_survey.responses<br><br>========================= test session starts ===============================<br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">2</span> items                                                                                                                       <br><br>test_survey.py ..                   [<span class="hljs-number">100</span>%] <br><br>========================= <span class="hljs-number">2</span> passed <span class="hljs-keyword">in</span> <span class="hljs-number">0.02</span>s =================================<br></code></pre></td></tr></table></figure><p><strong>使用夹具</strong></p><p>夹具（<span class="citation"data-cites="pytest.fixture">@pytest.fixture</span>）可帮助我们搭建测试环境，用于测试多个项目。这个需要导入（importpytest）。夹具使用方法是放在函数定义前面的指令。要使用夹具时，可编写一个函数来生成供多个测试函数使用的资源再对这个函数应用装饰器@pytest.fixture，并让使用该资源的每个测试函数都接受一个与该函数同名的形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><span class="hljs-comment"># 测试AnonymousSurvey类</span><br><br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">language_survey</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;一个可供所有测试函数使用的AnonymousSurvey实例&#x27;&#x27;&#x27;</span><br>    question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>    language_survey = AnonymousSurvey(question)<br>    <span class="hljs-keyword">return</span> language_survey<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_single_response</span>(<span class="hljs-params">language_survey</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    language_survey.store_response(<span class="hljs-string">&#x27;English&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;English&#x27;</span> <span class="hljs-keyword">in</span> language_survey.responses<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_three_response</span>(<span class="hljs-params">language_survey</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    responses = [<span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-string">&#x27;Spanish&#x27;</span>, <span class="hljs-string">&#x27;Chinese&#x27;</span>]<br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        language_survey.store_response(response)<br><br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        <span class="hljs-keyword">assert</span> response <span class="hljs-keyword">in</span> language_survey.responses<br></code></pre></td></tr></table></figure><h3 id="小结-8">小结</h3><p>本章学习了如何使用 pytest模块中的工具来为函数和类编写测试。不仅学习了如何编写测试函数，以核实函数和类的行为符合预期，而且学习了如何使用夹具来高效地创建可在测试文件中的多个测试函数中使用的资源。</p><h1 id="第二部分-项目">第二部分 项目</h1><h2 id="第十二章-武装飞船">第十二章 武装飞船</h2><h3 id="外星人入侵项目规划">外星人入侵项目规划</h3><ul><li>玩家控制着一艘武装飞船出现在屏幕底部中央，玩家可以使用方向键左右移动飞船，使用空格键进行射击。</li><li>当游戏开始时，一个外形舰队出现在天空中，并向屏幕下方移动。</li><li>玩家的任务是消灭这些外星人。</li><li>玩家将万星人消灭干净后，将出现一个新的外形舰队，其移动速度更快。</li><li>只要有万星人撞到玩家的飞船或到达屏幕下边缘，玩家就损失一艘飞船。玩家损失三艘飞船游戏结束。</li></ul><p><strong>安装Pygame</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pygame<br></code></pre></td></tr></table></figure><h3 id="开始游戏项目">开始游戏项目</h3><p><strong>创建 Pygame 窗口及响应用户输入</strong></p><p>这里有及个新方法：</p><ul><li>pygame.display.set_mode((1200,800)) 设置显示画面的大小</li><li>pygame.display.set_caption("Alien Invasion") 设置标题和logo</li><li>pygame.display.flip() 让渲染的可见</li><li>pygame.time.Clock() 设置游戏帧率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        pygame.init()<br><br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-number">1200</span>,<span class="hljs-number">800</span>))<br>        pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>            <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>                <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                    sys.exit()<br>            <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>            pygame.display.flip()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建游戏实例并运行游戏</span><br>    ai = AlienInvasion()<br>    ai.run_game()<br></code></pre></td></tr></table></figure><p><strong>控制帧率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        pygame.init()<br>        <span class="hljs-comment"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span><br>        <span class="hljs-variable language_">self</span>.clock = pygame.time.Clock()<br>        --snip--<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            --snip--<br>            <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>            pygame.display.flip()    <br>            <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><p><strong>设置背景颜色</strong></p><p>fill() 方法是填充背景颜色，该方法只接受一个表示颜色的实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>   --snip--<br>       pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br>       <span class="hljs-comment"># 设置背景颜色</span><br>       <span class="hljs-variable language_">self</span>.bg_color = (<span class="hljs-number">230</span>,<span class="hljs-number">230</span>,<span class="hljs-number">230</span>)<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>       --snip--<br>       <span class="hljs-comment"># 每次循环时都重绘制屏幕</span><br>           <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.bg_color)<br>       <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>           pygame.display.flip()<br></code></pre></td></tr></table></figure><p><strong>创建 Settings 类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 屏幕设置</span><br>        <span class="hljs-variable language_">self</span>.screen_width = <span class="hljs-number">1200</span><br>        <span class="hljs-variable language_">self</span>.screen_height = <span class="hljs-number">800</span><br>        <span class="hljs-variable language_">self</span>.screen_color = (<span class="hljs-number">230</span>, <span class="hljs-number">230</span>, <span class="hljs-number">230</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span>        <br>        --snip--<br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-variable language_">self</span>.settings.screen_width, <span class="hljs-variable language_">self</span>.settings.screen_height))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        --snip--<br>            <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br></code></pre></td></tr></table></figure><h3 id="添加飞船图像">添加飞船图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen = ai_game.screen<br>        <span class="hljs-variable language_">self</span>.screen_rect = ai_game.screen.get_rect()<br><br>        <span class="hljs-comment"># 加载飞船图像并获取其外接矩形</span><br>        <span class="hljs-variable language_">self</span>.image = pygame.image.load(<span class="hljs-string">&#x27;images/ship.bmp&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.rect = <span class="hljs-variable language_">self</span>.image.get_rect()<br><br>        <span class="hljs-comment"># 每艘新飞船都放在屏幕底部的中央</span><br>        <span class="hljs-variable language_">self</span>.rect.midbottom = <span class="hljs-variable language_">self</span>.screen_rect.midbottom<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">blitme</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen.blit(<span class="hljs-variable language_">self</span>.image, <span class="hljs-variable language_">self</span>.rect)<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>在 pygame中，原点（0,0）位于屏幕左上角，当一个点向右下方移动时，它的坐标值将增大，在1200X800的屏幕上，原点位于左上角，右下角的坐标为（1200,800）。这些坐标对应的是游戏窗口，而不是物理屏幕。</p><p><strong>在屏幕上绘制飞船</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ship <span class="hljs-keyword">import</span> Ship<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>    --snip--<br>    pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br>    <span class="hljs-variable language_">self</span>.ship = Ship(<span class="hljs-variable language_">self</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>    --snip--<br>            <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br>            <span class="hljs-variable language_">self</span>.ship.blitme()<br></code></pre></td></tr></table></figure><h3id="重构_check_events-方法和-_update_screen-方法">重构：_check_events()方法和 _update_screen() 方法</h3><p>在Python中辅助方法的名称以单下划线打头</p><p>_ <em>check_events() 方法和</em> _update_screen()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-variable language_">self</span>._check_events()<br>        <span class="hljs-variable language_">self</span>._update_screen()<br>        <span class="hljs-comment"># 每秒60帧</span><br>        <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            sys.exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_screen</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 每次循环时都重绘制屏幕</span><br>    <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br>    <span class="hljs-variable language_">self</span>.ship.blitme()<br>    <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>    pygame.display.flip()<br></code></pre></td></tr></table></figure><h3 id="驾驶飞船">驾驶飞船</h3><p><strong>响应按键</strong></p><p>pygame中，事件都是通过 pygame.event.get() 方法获取的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">--snip--<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>            <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>                <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                    sys.exit()<br>                <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                        <span class="hljs-comment"># 飞船向右移动</span><br>                        <span class="hljs-variable language_">self</span>.ship.rect.x += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>持续移动</strong></p><p>pygame.KEYDOWN 和 pygame.KEYUP 两个事件是，按下键盘，和释放键盘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>                <span class="hljs-variable language_">self</span>._check_events()<br>                <span class="hljs-comment"># 调用飞船位置更新函数</span><br>                <span class="hljs-variable language_">self</span>.ship.update()<br>                <span class="hljs-comment"># 更新画面</span><br>                <span class="hljs-variable language_">self</span>._update_screen()<br>                <span class="hljs-comment"># 每秒60帧</span><br>                <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-comment"># 飞船向右移动</span><br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>                    <br><span class="hljs-comment"># ship.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        --snip--<br>        <span class="hljs-comment"># 移动标志（飞船一开始不移动）</span><br>        <span class="hljs-variable language_">self</span>.moving_right = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right:<br>            <span class="hljs-variable language_">self</span>.rect.x += <span class="hljs-number">1</span><br>        --snip--<br></code></pre></td></tr></table></figure><p><strong>左右移动</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br>--snip--<br>        <span class="hljs-comment"># 移动标志（飞船一开始不移动）</span><br>        <span class="hljs-variable language_">self</span>.moving_right = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.moving_left = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right:<br>            <span class="hljs-variable language_">self</span>.rect.x += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left:<br>            <span class="hljs-variable language_">self</span>.rect.x -= <span class="hljs-number">1</span><br>        --snip--<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br>                <span class="hljs-comment"># 飞船移动</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">False</span>    <br></code></pre></td></tr></table></figure><p><strong>调整飞船的速度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        --snip--<br>        <span class="hljs-comment"># 飞船的设置</span><br>        <span class="hljs-variable language_">self</span>.ship_speed = <span class="hljs-number">1.5</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span>    <br>        --snip--<br>        <span class="hljs-comment"># 在飞创的属性X中存储一个浮点数</span><br>        <span class="hljs-variable language_">self</span>.x = <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>.rect.x)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right:<br>            <span class="hljs-variable language_">self</span>.x += <span class="hljs-variable language_">self</span>.settings.ship_speed<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left:<br>            <span class="hljs-variable language_">self</span>.x -= <span class="hljs-variable language_">self</span>.settings.ship_speed<br><br>        <span class="hljs-comment"># 根据self.x更新self.rect.x</span><br>        <span class="hljs-variable language_">self</span>.rect.x = <span class="hljs-variable language_">self</span>.x        <br></code></pre></td></tr></table></figure><p><strong>限制飞船的活动范围</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> <br>        --snip--    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.right &lt; <span class="hljs-variable language_">self</span>.screen_rect.right:<br>            <span class="hljs-variable language_">self</span>.x += <span class="hljs-variable language_">self</span>.settings.ship_speed<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.left &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.x -= <span class="hljs-variable language_">self</span>.settings.ship_speed        <br></code></pre></td></tr></table></figure><p>**重构：_check_events() 方法**</p><p>检查事件方法越来越长，我们将其部分代码放在两个方法中，一个处理键盘按下(KEYDOWN)，一个处理键盘释放(KEYUP)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            sys.exit()<br>            <span class="hljs-comment"># 飞船移动</span><br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>            <span class="hljs-variable language_">self</span>._check_keydown_events(event)<br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>            <span class="hljs-variable language_">self</span>._check_keyup_events(event)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keydown_events</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keyup_events</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><strong>按 Q 退出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keydown_events</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> event.key == pygame.K_q:<br>        sys.exit()<br></code></pre></td></tr></table></figure><p><strong>在全屏模式下运行游戏</strong></p><p>在创建屏幕时，传入(0, 0), pygame.FULLSCREEN，这让pygame生成一个覆盖整个显示器的屏幕。由于无法知道屏幕的宽度和高度，所有后面接着要更新屏幕的rect 的属性宽和高来更新对象 settings。pygame不提供全屏模式下退出游戏的默认方式，所以运行前，确保可以使用 'q'退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        --snip--<br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), pygame.FULLSCREEN)<br>        <span class="hljs-variable language_">self</span>.settings.screen_width = <span class="hljs-variable language_">self</span>.screen.get_rect().width<br>        <span class="hljs-variable language_">self</span>.settings.screen_height = <span class="hljs-variable language_">self</span>.screen.get_rect().height        <br></code></pre></td></tr></table></figure><h3 id="简单回顾">简单回顾</h3><p>下面将添加射击功能，所以需要新增一个名为 bullet.py的文件，并修改一些原有的文件，在添加其他功能前，先回顾一下这些文件，以便对这个项目的组织结构有清楚的认识。</p><ul><li><p>alien_invasion.py 这个文件包含 AlienInvasion类，这个类创建在游戏的很多地方会用到的一系列属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">from</span> settings <span class="hljs-keyword">import</span> Settings<br><span class="hljs-keyword">from</span> ship <span class="hljs-keyword">import</span> Ship<br><span class="hljs-keyword">from</span> bullet <span class="hljs-keyword">import</span> Bullet<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        pygame.init()<br>        <span class="hljs-comment"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span><br>        <span class="hljs-variable language_">self</span>.clock = pygame.time.Clock()<br>        <span class="hljs-comment"># 设置背景颜色和窗口大小</span><br>        <span class="hljs-variable language_">self</span>.settings = Settings()<br>        <span class="hljs-comment"># 独立窗口运行程序</span><br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-variable language_">self</span>.settings.screen_width, <span class="hljs-variable language_">self</span>.settings.screen_height))<br>        <span class="hljs-comment"># 全屏模式游戏 &#x27;q&#x27; 退出</span><br>        <span class="hljs-comment"># self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)</span><br>        <span class="hljs-comment"># self.settings.screen_width = self.screen.get_rect().width</span><br>        <span class="hljs-comment"># self.settings.screen_height = self.screen.get_rect().height</span><br>        pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.ship = Ship(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.bullets = pygame.sprite.Group()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>            <span class="hljs-variable language_">self</span>._check_events()<br>            <span class="hljs-comment"># 调用飞船位置更新函数</span><br>            <span class="hljs-variable language_">self</span>.ship.update()<br>            <span class="hljs-comment"># 更新子弹的位置并删除已消失的子弹</span><br>            <span class="hljs-variable language_">self</span>._update_bullets()<br>            <span class="hljs-comment"># 更新画面</span><br>            <span class="hljs-variable language_">self</span>._update_screen()<br>            <span class="hljs-comment"># 每秒60帧</span><br>            <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br>                <span class="hljs-comment"># 飞船移动</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                <span class="hljs-variable language_">self</span>._check_keydown_events(event)<br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>                <span class="hljs-variable language_">self</span>._check_keyup_events(event)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keydown_events</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> event.key == pygame.K_q:<br>            sys.exit()<br>        <span class="hljs-keyword">elif</span> event.key == pygame.K_SPACE:<br>            <span class="hljs-variable language_">self</span>._fire_bullet()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keyup_events</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fire_bullet</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;创建一颗子弹，并将其加入编著bullets &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.bullets) &lt; <span class="hljs-variable language_">self</span>.settings.bullet_allowed:<br>            new_bullet = Bullet(<span class="hljs-variable language_">self</span>)<br>            <span class="hljs-variable language_">self</span>.bullets.add(new_bullet)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_bullets</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;更新子弹的位置并删除已消失的子弹&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新子弹位置</span><br>        <span class="hljs-variable language_">self</span>.bullets.update()<br>        <span class="hljs-comment"># 删除已消失的子弹</span><br>        <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.bullets.copy():<br>            <span class="hljs-keyword">if</span> bullet.rect.bottom &lt;= <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.bullets.remove(bullet)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_screen</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 每次循环时都重绘制屏幕</span><br>        <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br>        <span class="hljs-comment"># 子弹绘制        </span><br>        <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.bullets.sprites():<br>            bullet.draw_bullet()<br>        <span class="hljs-variable language_">self</span>.ship.blitme()<br>        <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>        pygame.display.flip()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建游戏实例并运行游戏</span><br>    ai = AlienInvasion()<br>    ai.run_game()<br></code></pre></td></tr></table></figure></li><li><p>settings.py 这个文件包含 Settings类，这个类只有一个方法，这个文件主要用于初始化控制游戏外观和飞船速度的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 屏幕设置</span><br>        <span class="hljs-variable language_">self</span>.screen_width = <span class="hljs-number">1200</span><br>        <span class="hljs-variable language_">self</span>.screen_height = <span class="hljs-number">800</span><br>        <span class="hljs-variable language_">self</span>.screen_color = (<span class="hljs-number">230</span>, <span class="hljs-number">230</span>, <span class="hljs-number">230</span>)<br><br>        <span class="hljs-comment"># 飞船的设置</span><br>        <span class="hljs-variable language_">self</span>.ship_speed = <span class="hljs-number">1.5</span><br><br>        <span class="hljs-comment"># 子弹设置</span><br>        <span class="hljs-variable language_">self</span>.bullet_speed = <span class="hljs-number">2.0</span><br>        <span class="hljs-variable language_">self</span>.bullet_width = <span class="hljs-number">3</span><br>        <span class="hljs-variable language_">self</span>.bullet_height = <span class="hljs-number">15</span><br>        <span class="hljs-variable language_">self</span>.bullet_color = (<span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>)<br>        <span class="hljs-comment"># 屏幕上最多出现的子弹数量</span><br>        <span class="hljs-variable language_">self</span>.bullet_allowed = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>ship.py 这个文件包含 Ship 类，这个类主要用于在屏幕上绘制飞船</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen = ai_game.screen<br>        <span class="hljs-variable language_">self</span>.settings = ai_game.settings<br>        <span class="hljs-variable language_">self</span>.screen_rect = ai_game.screen.get_rect()<br><br>        <span class="hljs-comment"># 加载飞船图像并获取其外接矩形</span><br>        <span class="hljs-variable language_">self</span>.image = pygame.image.load(<span class="hljs-string">&#x27;images/ship.bmp&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.rect = <span class="hljs-variable language_">self</span>.image.get_rect()<br><br>        <span class="hljs-comment"># 每艘新飞船都放在屏幕底部的中央</span><br>        <span class="hljs-variable language_">self</span>.rect.midbottom = <span class="hljs-variable language_">self</span>.screen_rect.midbottom<br><br>        <span class="hljs-comment"># 在飞船的属性X中存储一个浮点数</span><br>        <span class="hljs-variable language_">self</span>.x = <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>.rect.x)<br><br>        <span class="hljs-comment"># 移动标志（飞船一开始不移动）</span><br>        <span class="hljs-variable language_">self</span>.moving_right = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.moving_left = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.right &lt; <span class="hljs-variable language_">self</span>.screen_rect.right:<br>            <span class="hljs-variable language_">self</span>.x += <span class="hljs-variable language_">self</span>.settings.ship_speed<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.left &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.x -= <span class="hljs-variable language_">self</span>.settings.ship_speed<br><br>        <span class="hljs-comment"># 根据self.x更新self.rect.x</span><br>        <span class="hljs-variable language_">self</span>.rect.x = <span class="hljs-variable language_">self</span>.x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">blitme</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen.blit(<span class="hljs-variable language_">self</span>.image, <span class="hljs-variable language_">self</span>.rect)<br></code></pre></td></tr></table></figure></li></ul><h3 id="射击">射击</h3><ul><li>bullett.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">from</span> pygame.sprite <span class="hljs-keyword">import</span> Sprite<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bullet</span>(<span class="hljs-title class_ inherited__">Sprite</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船所发射子弹的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在飞船的当前位置创建一个子弹对象&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.screen = ai_game.screen<br>        <span class="hljs-variable language_">self</span>.settings = ai_game.settings<br>        <span class="hljs-variable language_">self</span>.color = <span class="hljs-variable language_">self</span>.settings.bullet_color<br><br>        <span class="hljs-comment"># 在（0,0）处创建一个表示子弹的矩形，再设置正确的位置</span><br>        <span class="hljs-variable language_">self</span>.rect = pygame.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">self</span>.settings.bullet_width, <span class="hljs-variable language_">self</span>.settings.bullet_height)<br>        <span class="hljs-variable language_">self</span>.rect.midtop = ai_game.ship.rect.midtop<br><br>        <span class="hljs-comment"># 存储用浮点数表示的子弹位置</span><br>        <span class="hljs-variable language_">self</span>.y = <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>.rect.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新子弹的准确位置</span><br>        <span class="hljs-variable language_">self</span>.y -= <span class="hljs-variable language_">self</span>.settings.bullet_speed<br>        <span class="hljs-comment"># 更新表示子弹的 rect 的位置</span><br>        <span class="hljs-variable language_">self</span>.rect.y = <span class="hljs-variable language_">self</span>.y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_bullet</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span><br>        pygame.draw.rect(<span class="hljs-variable language_">self</span>.screen, <span class="hljs-variable language_">self</span>.color, <span class="hljs-variable language_">self</span>.rect)<br></code></pre></td></tr></table></figure></li></ul><h3 id="小结-9">小结</h3><p>本章学习了游戏开发计划的指定以及使用Pygame编写的游戏的基本结构。接着学习了如何设置背景色，以及如何将设置存储在独立的类中。然后学习了如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动。不仅创建了能自动移动的元素，还删除了不再需要的对象。最后学习了经常性重构是如何为项目的后续开发提供便利的。</p><h2 id="第十三章-外星人">第十三章 外星人</h2><h3 id="项目回顾">项目回顾</h3><p>本章将完成下列开发：</p><ul class="task-list"><li><label><inputtype="checkbox" />在屏幕左上角添加一个外星人，并指定合适的边距。</label></li><li><label><inputtype="checkbox" />沿屏幕上边缘添加一行万星人，再不断地添加成行的外星人，直到填满屏幕的上半部分。</label></li><li><label><inputtype="checkbox" />让外星人向两侧和向下移动，直到外星舰队被全部击落、有外星人撞到飞船或有外星人抵达屏幕的下边缘。如果外星舰队都被击落，将再创建一个外星舰队；如果有外星人撞到飞船或抵达屏幕下边缘，就销毁飞船并再创建一个外星舰队。<strong>注意</strong>：pygame里面的精灵碰撞和对象碰撞是两个方法</label><ul><li>pygame.sprite.groupcollide(精灵1，精灵2，1是否参与碰撞，2是否参与碰撞)。<strong>这个是直接赋值给变量就可以了。和input 差不多</strong></li><li>pygame.sprite.spritecollideany(对象，精灵)。<strong>这个是返回一个bool值</strong></li></ul></li><li><label><inputtype="checkbox" />限制玩家可用的飞船数量，分配的飞船被用完后，游戏将结束。</label></li></ul><h3 id="创建第一个外星人">创建第一个外星人</h3><h3 id="小结-10">小结</h3><p>本章通过创建外星舰队学习了如何在游戏中添加大量相同的元素，如何使用嵌套循环来创建成行成列的整齐元素，以及如何通过调用每个元素的<code>update()</code>方法移动大量的元素。接着学习了如何控制对象在屏幕上的移动方向，以及如何响应特定的情形，如有外星人到达屏幕边缘。然后学习了如何检测并相应子弹和外星人的碰撞以及外星人和飞创的碰撞。最后学习了如何在游戏中跟踪统计信息，以及如何使用标志<code>game_active</code>来判断游戏是否结束。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑小技巧（持续更新）</title>
    <link href="/2024/10/25/2024-10-25-%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/10/25/2024-10-25-%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="win系统睡眠问题">WIN系统睡眠问题</h2><p><a href="https://zqten.github.io/">回到主頁</a></p><p>运行WIN+R，powershell 回车</p><p>进入命令行输入： powercfg /devicequery wake_armed查看哪些设备可以唤醒计算机。</p><p>输入：powercfg /lastwake 可以查看最近一次唤醒计算机的硬件是什么。</p><p><ahref="https://learn.microsoft.com/zh-cn/windows-hardware/design/device-experiences/powercfg-command-line-options">Powercfg命令行选项 | Microsoft Learn</a></p><table><caption>zap:<strong>还有可能是服务问题，禁用除Microsoft以外的所有服务</strong></caption><thead><tr><th>/?, -help</th><th>显示有关命令行参数的信息。</th></tr></thead><tbody><tr><td>/list, /L</td><td>列出所有电源方案。</td></tr><tr><td>/query, /Q</td><td>显示电源方案的内容。</td></tr><tr><td>/change, /X</td><td>修改当前电源方案中的设置值。</td></tr><tr><td>/changename</td><td>修改电源方案的名称和描述。</td></tr><tr><td>/duplicatescheme</td><td>复制电源方案。</td></tr><tr><td>/delete, /D</td><td>删除电源方案。</td></tr><tr><td>/deletesetting</td><td>删除电源设置。</td></tr><tr><td>/setactive, /S</td><td>使电源方案在系统上处于活动状态。</td></tr><tr><td>/getactivescheme</td><td>检索当前活动电源方案。</td></tr><tr><td>/setacvalueindex</td><td>设置系统由交流电源供电时与电源设置关联的值。</td></tr><tr><td>/setdcvalueindex</td><td>设置系统由 DC 电源供电时与电源设置关联的值。</td></tr><tr><td>/import</td><td>从文件导入所有电源设置。</td></tr><tr><td>/export</td><td>将电源方案导出到文件。</td></tr><tr><td>/aliases</td><td>显示所有别名及其对应的 GUID。</td></tr><tr><td>/getsecuritydescriptor</td><td>获取与指定电源设置、电源方案或操作关联的安全描述符。</td></tr><tr><td>/setsecuritydescriptor</td><td>设置与电源设置、电源方案或操作关联的安全描述符。</td></tr><tr><td>/hibernate, /H</td><td>启用和禁用休眠功能。</td></tr><tr><td>/availablesleepstates, /A</td><td>报告系统上可用的睡眠状态。</td></tr><tr><td>/devicequery</td><td>返回满足指定条件的设备列表。</td></tr><tr><td>/deviceenableawake</td><td>使设备能够将系统从睡眠状态唤醒。</td></tr><tr><td>/devicedisablewake</td><td>禁止设备将系统从睡眠状态唤醒。</td></tr><tr><td>/lastwake</td><td>报告有关系统从上次睡眠转换中唤醒的信息。</td></tr><tr><td>/waketimers</td><td>枚举活动唤醒计时器。</td></tr><tr><td>/requests</td><td>枚举应用程序和驱动程序电源请求。</td></tr><tr><td>/requestsoverride</td><td>设置特定进程、服务或驱动程序的 Power Request 替代。</td></tr><tr><td>/energy</td><td>分析系统常见的能效和电池寿命问题。</td></tr><tr><td>/batteryreport</td><td>生成电池使用情况报告。</td></tr><tr><td>/sleepstudy</td><td>生成诊断系统电源转换报告。</td></tr><tr><td>/srumutil</td><td>从系统资源使用情况监视器 （SRUM） 转储能量估算数据。</td></tr><tr><td>/systemsleepdiagnostics</td><td>生成系统睡眠转换的诊断报告。</td></tr><tr><td>/systempowerreport</td><td>生成诊断系统电源转换报告。</td></tr></tbody></table><h2 id="激活windows1011">激活windows10/11</h2><p>管理员运行PowerShell</p><p>站点：massgrave.dev 激活命令：irm https://massgrave.dev/get | iex</p><h2 id="极品垃圾电脑配置表">极品垃圾电脑配置表</h2><p>处理器 E5 2690V3 淘宝 53元 显卡 华擎580 8G 矿卡 夕夕 221元 散热器冰蝶4热管 夕夕35元 主板 精粤X99MH-D4 淘宝221元 硬盘 杂牌256G M2 夕夕60元电源 EVGA 450W铜牌 闲鱼65元 机箱 主板盒</p><h2 id="python安装下载地址">Python安装（下载地址）</h2><p><a href="https://www.python.org/downloads/windows/">Python Releasesfor Windows | Python.org</a></p><h2 id="python-pip">Python-pip</h2><p>安装pip命令</p><p>https://bootstrap.pypa.io/get-pip.py先将这个文件保存到电脑，再用cmd命令到该文件的目录下，执行下面的命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python get-pip.py<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 或者是这个<br>python -m ensurepip --upgrade<br></code></pre></td></tr></table></figure><p>更新pip</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><p>pip安装python库</p><p>临时使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple &#x27;库名称&#x27;<br></code></pre></td></tr></table></figure><p>设为默认python安装库的网址</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h2 id="pycharm下载地址">PyCharm下载地址</h2><p>分为专业版和社区版，专业版需要付费。</p><p><ahref="https://www.jetbrains.com.cn/en-us/pycharm/download/?section=windows">DownloadPyCharm: Python IDE</a></p><p><ahref="https://pan.baidu.com/s/1swyNqTFg-kuAFn0l7P3_KA">激活工具</a>提取码：cCn4</p><h2id="vscode里面python要读取相同目录的文件">vscode里面python要读取相同目录的文件</h2><p>需要再launch.json里面添加一行代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,<br></code></pre></td></tr></table></figure><h2 id="项目结构">项目结构</h2><p><strong>Web App</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs 1c">awesome<span class="hljs-punctuation">-</span>python3<span class="hljs-punctuation">-</span>webapp/  &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 根目录<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> backup/               &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 备份目录<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> conf/                 &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 配置文件<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> dist/                 &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 打包目录<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> www/                  &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> Web目录，存放.py文件<br><span class="hljs-string">|  |</span><br><span class="hljs-string">|  +- static/            &lt;-- 存放静态文件</span><br><span class="hljs-string">|  |</span><br><span class="hljs-string">|  +- templates/         &lt;-- 存放模板文件</span><br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> mobile/               &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 存放移动平台 App工程<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> LICENSE               &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 代码LICENSE<br></code></pre></td></tr></table></figure><h2 id="html特殊字符对照表">HTML特殊字符对照表</h2><p><ahref="https://www.cnblogs.com/samlin/archive/2009/07/28/html-entity-chart.html">网址:zap:</a></p><h2 id="github高级搜索">GitHub高级搜索</h2><p><a href="https://github.com/search/advanced">GitHub高级搜索</a></p><h2 id="chatgpt提示词模板">ChatGPT提示词模板</h2><p>我想让你成为我的 Prompt 创作者。你的目标是帮助我创建最佳的 Prompt，这个 Prompt 将由你 ChatGPT 使用。你将遵循以下过程：</p><ol type="1"><li><p>首先，你会问我 Prompt是关于什么的。我会告诉你，但我们需要通过不断的重复来改进它，通过则进行下一步。</p></li><li><p>根据我的输入，你会创建三个部分：</p><p>a）修订后的 Prompt （你编写修订后的 Prompt，应该清晰、精确、易于理解）</p><p>b）建议（你提出建议，哪些细节应该包含在 Prompt 中，以使其更好）</p><p>c）问题（你提出相关问题，询问我需要哪些额外信息来改进 Prompt）</p></li><li><p>你提供的 Prompt 应该采用我发出请求的形式，有 ChatGPT执行。</p></li><li><p>我们将继续这个迭代过程，我会提供更多的信息，你会更新 "修订后的Prompt" 不分的请求，直到它完整为止。</p></li></ol><h2 id="windows关闭端口">windows关闭端口</h2><p>查询端口：netstat -ano | findstr 8080</p><p>关闭端口：taskkill -PID 9172 -F 9172是进程ID</p><h2 id="powershell新手命令">PowerShell新手命令</h2><p>一、在当前目录下</p><p>新建文件</p><p>New-item空格1（文件名）.doc（文件类型后缀doc）</p><p>New-item 1.doc</p><p>删除文件</p><p>remove-item空格1（文件名）.doc（文件类型后缀doc）</p><p>remove-item 1.doc</p><p>对文件添加内容</p><p>Set-content 空格1.txt（文件名+后缀）空格-value空格”123（内容）”</p><p>Set-content 1.txt -value “123”</p><p>在文件中加内容</p><p>add-content空格1.txt(文件名+后缀)空格-value空格"123”（要添加的内容）</p><p>add-content 1.doc -value “123”</p><p>删除文件内容</p><p>Clear-content空格1.txt（文件名）</p><p>Clear-content 1.txt</p><p>打开创建的文件</p><p>.\1.txt</p><p>.+后缀</p><p>二、在其他目录</p><p>新建文件</p><p>new-item空格C:(创建目录)\2.ps1(文件名+后缀)</p><p>new-item C:\2.ps1</p><p>删除文件</p><p>Remove-item空格 C:（路径）\1.txt（+后缀）</p><p>remove-item C:\1.txt</p><p>添加内容</p><p>Set-content空格C:\1.txt（路径+后缀）空格-value空格”1111”(“添加的内容”)</p><p>set-content C:\1.txt -value "1111"</p><p>增加内容</p><p>add-content空格 C:\1.txt（路径+后缀）空格 -value"111"(“添加的内容”)</p><p>add-content C:\1.txt -value "111"</p><p>删除文件内容</p><p>clear-content空格 C:\1.txt（路径+后缀）</p><p>clear-content C:\1.txt</p><p>打开文件</p><p>C:\1.txt（路径+后缀）</p><p>C:\1.txt</p><h2 id="google搜索语法">Google搜索语法</h2><p>所有这些语法都可以组合使用，比如2和5里面<strong><code>intitle:"标题关键词" intext:"内容关键词"</code>。</strong></p><ol type="1"><li>用<code>"关键词"</code>限定关键词搜索，<code>" "</code>内的关键词是必须出现的。</li><li>用<code>intitle:标题关键词</code>前缀搜索，会以关键词为标题进行搜索。</li><li>用<code>allintitle:关键词A 关键词B</code>，限定标题多个关键词。</li><li>用<code>intext:内容关键词</code>，限定内容关键词。</li><li>用<code>inurl:网址关键词</code>，限定搜索网址的关键词。例：<code>李子柒 inurl:cctv</code></li><li>用<code>site:网址</code>，限定网址来源。例：<code>李子柒 site:zhihu.com</code></li><li>用<code>-搜索排除项</code>,可以排除包含有排除项搜索结果。</li><li>用<code>*</code>，表示通配符。例：<code>搜索*擎</code>，就会出现搜索引擎、搜索巨擎等。</li><li>用<code>imagesize:想要的图片尺寸（2560x1440）</code>，限定图片尺寸。</li><li>用<code>文件名 filetype:文件后缀</code>，限定文件格式。</li></ol><h2 id="rarpdf等文件破解流程">RAR,PDF等文件破解流程</h2><p>首先下载两个软件：</p><ul><li><a href="https://hashcat.net/hashcat/">hashcat</a></li><li><a href="https://www.openwall.com/john/">John the Ripper</a></li></ul><ol type="1"><li>进入John theRipper文件夹下的run文件夹，把需要破解的压缩包文件拖进去并重命名。以RAR为例：<code>test.rar</code></li><li>在该文件夹下的地址栏输入<code>cmd</code>进入命令行。windows10系统，其他系统可以通过命令行进入该文件夹。</li><li>输入命令：<code>rar2john.exe test.rar</code>，会得到一个以<code>$</code>开头的加密值，把它复制到<code>txt</code>文件。</li><li>进入到<code>hashcat</code>文件夹，在地址栏输入<code>cmd</code>进入命令行。</li><li>输入破解命令：hashcat.exe -m 13000 -a 3 上面$开头的哈希值 -opassword.txt这里的13000可以是哈希值为rar5的开头的值，如果是其他哈希值，可以通过<ahref="https://hashcat.net/wiki/doku.php?id=example_hashes">点击这里</a>查询-a是要使用的破解模式<code>-a 0</code>字典攻击，<code>-a 1</code>组合攻击，<code>-a 3</code>掩码攻击-o 是破解后输出明文密码的文件</li></ol><h2 id="markdown小技巧">MarkDown小技巧</h2><p>链接本地文件：</p><ul><li>绝对地址方法：<code>C:/文件夹/文件名.后缀</code></li><li>相对地址方法：<code>../文件夹/文件名.后缀</code></li><li>当前目录文件：<code>文件名.后缀</code></li></ul><h2 id="输入法切换">输入法切换</h2><p>当只有一个输入法或语言时：<code>win+空格</code>不能切换，需要添加一个语言才可以。</p><h2 id="删除右键菜单项目">删除右键菜单项目</h2><ul><li><p>注册表：计算机_CLASSES_ROOT</p><blockquote><p>这里面的<code>shell</code>是在桌面的情况下的右键菜单</p></blockquote></li><li><p>注册表：计算机_CLASSES_ROOT</p><blockquote><p>这个里面的<code>shell</code>是在<strong>右键点击文件</strong>的菜单</p></blockquote></li></ul><h2 id="安装激活-sublime-text4-4180">安装激活 sublime text4 4180</h2><p><a href="https://segmentfault.com/a/1190000045171775">运维 - SublimeText4 4180 安装激活 - 个人文章 - SegmentFault 思否</a></p><h2 id="steam市场批量卖出">steam市场批量卖出</h2><p>https://steamcommunity.com/market/multisell?appid=730&amp;contextid=2&amp;items[]=Kilowatt%20Case</p><p>:star:最后等号后面为物品代码（可以到市场点击物品查看复制）</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>常识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聪明的投资者——投资指南</title>
    <link href="/2024/10/25/2024-10-25-%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/25/2024-10-25-%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>防御型投资者和进攻型投资者之间的主要区别在于：</p><ul><li>防御型投资者要限制自己向大的和领先的公司投资</li><li>进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票</li></ul><p>评估普通股的规则：</p><ul><li><p>评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定</p></li><li><p>收益能力一般代表对未来7年平均收益的预测</p></li><li><p>上面的预测起点就是过去7到10年的真实情况</p></li><li><p>把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动</p></li><li><p>倍数应该反应未来收益更长期的变化</p><blockquote><p>倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，<strong>最大的倍数应该是20，最小的倍数应该是8</strong></p></blockquote></li><li><p>如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25</p></li><li><p>如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdowm表情符号</title>
    <link href="/2024/10/05/2024-10-05-markdown%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7%E8%A1%A8/"/>
    <url>/2024/10/05/2024-10-05-markdown%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>People</p><table><thead><tr><th>:bowtie: <code>:bowtie:</code></th><th>:smile: <code>:smile:</code></th><th>:laughing: <code>:laughing:</code></th></tr></thead><tbody><tr><td>:blush: <code>:blush:</code></td><td>:smiley: <code>:smiley:</code></td><td>:relaxed: <code>:relaxed:</code></td></tr><tr><td>:smirk: <code>:smirk:</code></td><td>:heart_eyes: <code>:heart_eyes:</code></td><td>:kissing_heart: <code>:kissing_heart:</code></td></tr><tr><td>:kissing_closed_eyes: <code>:kissing_closed_eyes:</code></td><td>:flushed: <code>:flushed:</code></td><td>:relieved: <code>:relieved:</code></td></tr><tr><td>:satisfied: <code>:satisfied:</code></td><td>:grin: <code>:grin:</code></td><td>:wink: <code>:wink:</code></td></tr><tr><td>:stuck_out_tongue_winking_eye:<code>:stuck_out_tongue_winking_eye:</code></td><td>:stuck_out_tongue_closed_eyes:<code>:stuck_out_tongue_closed_eyes:</code></td><td>:grinning: <code>:grinning:</code></td></tr><tr><td>:kissing: <code>:kissing:</code></td><td>:kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code></td><td>:stuck_out_tongue: <code>:stuck_out_tongue:</code></td></tr><tr><td>:sleeping: <code>:sleeping:</code></td><td>:worried: <code>:worried:</code></td><td>:frowning: <code>:frowning:</code></td></tr><tr><td>:anguished: <code>:anguished:</code></td><td>:open_mouth: <code>:open_mouth:</code></td><td>:grimacing: <code>:grimacing:</code></td></tr><tr><td>:confused: <code>:confused:</code></td><td>:hushed: <code>:hushed:</code></td><td>:expressionless: <code>:expressionless:</code></td></tr><tr><td>:unamused: <code>:unamused:</code></td><td>:sweat_smile: <code>:sweat_smile:</code></td><td>:sweat: <code>:sweat:</code></td></tr><tr><td>:disappointed_relieved: <code>:disappointed_relieved:</code></td><td>:weary: <code>:weary:</code></td><td>:pensive: <code>:pensive:</code></td></tr><tr><td>:disappointed: <code>:disappointed:</code></td><td>:confounded: <code>:confounded:</code></td><td>:fearful: <code>:fearful:</code></td></tr><tr><td>:cold_sweat: <code>:cold_sweat:</code></td><td>:persevere: <code>:persevere:</code></td><td>:cry: <code>:cry:</code></td></tr><tr><td>:sob: <code>:sob:</code></td><td>:joy: <code>:joy:</code></td><td>:astonished: <code>:astonished:</code></td></tr><tr><td>:scream: <code>:scream:</code></td><td>:neckbeard: <code>:neckbeard:</code></td><td>:tired_face: <code>:tired_face:</code></td></tr><tr><td>:angry: <code>:angry:</code></td><td>:rage: <code>:rage:</code></td><td>:triumph: <code>:triumph:</code></td></tr><tr><td>:sleepy: <code>:sleepy:</code></td><td>:yum: <code>:yum:</code></td><td>:mask: <code>:mask:</code></td></tr><tr><td>:sunglasses: <code>:sunglasses:</code></td><td>:dizzy_face: <code>:dizzy_face:</code></td><td>:imp: <code>:imp:</code></td></tr><tr><td>:smiling_imp: <code>:smiling_imp:</code></td><td>:neutral_face: <code>:neutral_face:</code></td><td>:no_mouth: <code>:no_mouth:</code></td></tr><tr><td>:innocent: <code>:innocent:</code></td><td>:alien: <code>:alien:</code></td><td>:yellow_heart: <code>:yellow_heart:</code></td></tr><tr><td>:blue_heart: <code>:blue_heart:</code></td><td>:purple_heart: <code>:purple_heart:</code></td><td>:heart: <code>:heart:</code></td></tr><tr><td>:green_heart: <code>:green_heart:</code></td><td>:broken_heart: <code>:broken_heart:</code></td><td>:heartbeat: <code>:heartbeat:</code></td></tr><tr><td>:heartpulse: <code>:heartpulse:</code></td><td>:two_hearts: <code>:two_hearts:</code></td><td>:revolving_hearts: <code>:revolving_hearts:</code></td></tr><tr><td>:cupid: <code>:cupid:</code></td><td>:sparkling_heart: <code>:sparkling_heart:</code></td><td>:sparkles: <code>:sparkles:</code></td></tr><tr><td>:star: <code>:star:</code></td><td>:star2: <code>:star2:</code></td><td>:dizzy: <code>:dizzy:</code></td></tr><tr><td>:boom: <code>:boom:</code></td><td>:collision: <code>:collision:</code></td><td>:anger: <code>:anger:</code></td></tr><tr><td>:exclamation: <code>:exclamation:</code></td><td>:question: <code>:question:</code></td><td>:grey_exclamation: <code>:grey_exclamation:</code></td></tr><tr><td>:grey_question: <code>:grey_question:</code></td><td>:zzz: <code>:zzz:</code></td><td>:dash: <code>:dash:</code></td></tr><tr><td>:sweat_drops: <code>:sweat_drops:</code></td><td>:notes: <code>:notes:</code></td><td>:musical_note: <code>:musical_note:</code></td></tr><tr><td>:fire: <code>:fire:</code></td><td>:hankey: <code>:hankey:</code></td><td>:poop: <code>:poop:</code></td></tr><tr><td>:shit: <code>:shit:</code></td><td>:+1: <code>:+1:</code></td><td>:thumbsup: <code>:thumbsup:</code></td></tr><tr><td>:-1: <code>:-1:</code></td><td>:thumbsdown: <code>:thumbsdown:</code></td><td>:ok_hand: <code>:ok_hand:</code></td></tr><tr><td>:punch: <code>:punch:</code></td><td>:facepunch: <code>:facepunch:</code></td><td>:fist: <code>:fist:</code></td></tr><tr><td>:v: <code>:v:</code></td><td>:wave: <code>:wave:</code></td><td>:hand: <code>:hand:</code></td></tr><tr><td>:raised_hand: <code>:raised_hand:</code></td><td>:open_hands: <code>:open_hands:</code></td><td>:point_up: <code>:point_up:</code></td></tr><tr><td>:point_down: <code>:point_down:</code></td><td>:point_left: <code>:point_left:</code></td><td>:point_right: <code>:point_right:</code></td></tr><tr><td>:raised_hands: <code>:raised_hands:</code></td><td>:pray: <code>:pray:</code></td><td>:point_up_2: <code>:point_up_2:</code></td></tr><tr><td>:clap: <code>:clap:</code></td><td>:muscle: <code>:muscle:</code></td><td>:metal: <code>:metal:</code></td></tr><tr><td>:fu: <code>:fu:</code></td><td>:walking: <code>:walking:</code></td><td>:runner: <code>:runner:</code></td></tr><tr><td>:running: <code>:running:</code></td><td>:couple: <code>:couple:</code></td><td>:family: <code>:family:</code></td></tr><tr><td>:two_men_holding_hands: <code>:two_men_holding_hands:</code></td><td>:two_women_holding_hands:<code>:two_women_holding_hands:</code></td><td>:dancer: <code>:dancer:</code></td></tr><tr><td>:dancers: <code>:dancers:</code></td><td>:ok_woman: <code>:ok_woman:</code></td><td>:no_good: <code>:no_good:</code></td></tr><tr><td>:information_desk_person:<code>:information_desk_person:</code></td><td>:raising_hand: <code>:raising_hand:</code></td><td>:bride_with_veil: <code>:bride_with_veil:</code></td></tr><tr><td>:person_with_pouting_face:<code>:person_with_pouting_face:</code></td><td>:person_frowning: <code>:person_frowning:</code></td><td>:bow: <code>:bow:</code></td></tr><tr><td>:couplekiss: <code>:couplekiss:</code></td><td>:couple_with_heart: <code>:couple_with_heart:</code></td><td>:massage: <code>:massage:</code></td></tr><tr><td>:haircut: <code>:haircut:</code></td><td>:nail_care: <code>:nail_care:</code></td><td>:boy: <code>:boy:</code></td></tr><tr><td>:girl: <code>:girl:</code></td><td>:woman: <code>:woman:</code></td><td>:man: <code>:man:</code></td></tr><tr><td>:baby: <code>:baby:</code></td><td>:older_woman: <code>:older_woman:</code></td><td>:older_man: <code>:older_man:</code></td></tr><tr><td>:person_with_blond_hair: <code>:person_with_blond_hair:</code></td><td>:man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code></td><td>:man_with_turban: <code>:man_with_turban:</code></td></tr><tr><td>:construction_worker: <code>:construction_worker:</code></td><td>:cop: <code>:cop:</code></td><td>:angel: <code>:angel:</code></td></tr><tr><td>:princess: <code>:princess:</code></td><td>:smiley_cat: <code>:smiley_cat:</code></td><td>:smile_cat: <code>:smile_cat:</code></td></tr><tr><td>:heart_eyes_cat: <code>:heart_eyes_cat:</code></td><td>:kissing_cat: <code>:kissing_cat:</code></td><td>:smirk_cat: <code>:smirk_cat:</code></td></tr><tr><td>:scream_cat: <code>:scream_cat:</code></td><td>:crying_cat_face: <code>:crying_cat_face:</code></td><td>:joy_cat: <code>:joy_cat:</code></td></tr><tr><td>:pouting_cat: <code>:pouting_cat:</code></td><td>:japanese_ogre: <code>:japanese_ogre:</code></td><td>:japanese_goblin: <code>:japanese_goblin:</code></td></tr><tr><td>:see_no_evil: <code>:see_no_evil:</code></td><td>:hear_no_evil: <code>:hear_no_evil:</code></td><td>:speak_no_evil: <code>:speak_no_evil:</code></td></tr><tr><td>:guardsman: <code>:guardsman:</code></td><td>:skull: <code>:skull:</code></td><td>:feet: <code>:feet:</code></td></tr><tr><td>:lips: <code>:lips:</code></td><td>:kiss: <code>:kiss:</code></td><td>:droplet: <code>:droplet:</code></td></tr><tr><td>:ear: <code>:ear:</code></td><td>:eyes: <code>:eyes:</code></td><td>:nose: <code>:nose:</code></td></tr><tr><td>:tongue: <code>:tongue:</code></td><td>:love_letter: <code>:love_letter:</code></td><td>:bust_in_silhouette: <code>:bust_in_silhouette:</code></td></tr><tr><td>:busts_in_silhouette: <code>:busts_in_silhouette:</code></td><td>:speech_balloon: <code>:speech_balloon:</code></td><td>:thought_balloon: <code>:thought_balloon:</code></td></tr><tr><td>:feelsgood: <code>:feelsgood:</code></td><td>:finnadie: <code>:finnadie:</code></td><td>:goberserk: <code>:goberserk:</code></td></tr><tr><td>:godmode: <code>:godmode:</code></td><td>:hurtrealbad: <code>:hurtrealbad:</code></td><td>:rage1: <code>:rage1:</code></td></tr><tr><td>:rage2: <code>:rage2:</code></td><td>:rage3: <code>:rage3:</code></td><td>:rage4: <code>:rage4:</code></td></tr><tr><td>:suspect: <code>:suspect:</code></td><td>:trollface: <code>:trollface:</code></td><td></td></tr></tbody></table><p>Nature</p><table><thead><tr><th>:sunny: <code>:sunny:</code></th><th>:umbrella: <code>:umbrella:</code></th><th>:cloud: <code>:cloud:</code></th></tr></thead><tbody><tr><td>:snowflake: <code>:snowflake:</code></td><td>:snowman: <code>:snowman:</code></td><td>:zap: <code>:zap:</code></td></tr><tr><td>:cyclone: <code>:cyclone:</code></td><td>:foggy: <code>:foggy:</code></td><td>:ocean: <code>:ocean:</code></td></tr><tr><td>:cat: <code>:cat:</code></td><td>:dog: <code>:dog:</code></td><td>:mouse: <code>:mouse:</code></td></tr><tr><td>:hamster: <code>:hamster:</code></td><td>:rabbit: <code>:rabbit:</code></td><td>:wolf: <code>:wolf:</code></td></tr><tr><td>:frog: <code>:frog:</code></td><td>:tiger: <code>:tiger:</code></td><td>:koala: <code>:koala:</code></td></tr><tr><td>:bear: <code>:bear:</code></td><td>:pig: <code>:pig:</code></td><td>:pig_nose: <code>:pig_nose:</code></td></tr><tr><td>:cow: <code>:cow:</code></td><td>:boar: <code>:boar:</code></td><td>:monkey_face: <code>:monkey_face:</code></td></tr><tr><td>:monkey: <code>:monkey:</code></td><td>:horse: <code>:horse:</code></td><td>:racehorse: <code>:racehorse:</code></td></tr><tr><td>:camel: <code>:camel:</code></td><td>:sheep: <code>:sheep:</code></td><td>:elephant: <code>:elephant:</code></td></tr><tr><td>:panda_face: <code>:panda_face:</code></td><td>:snake: <code>:snake:</code></td><td>:bird: <code>:bird:</code></td></tr><tr><td>:baby_chick: <code>:baby_chick:</code></td><td>:hatched_chick: <code>:hatched_chick:</code></td><td>:hatching_chick: <code>:hatching_chick:</code></td></tr><tr><td>:chicken: <code>:chicken:</code></td><td>:penguin: <code>:penguin:</code></td><td>:turtle: <code>:turtle:</code></td></tr><tr><td>:bug: <code>:bug:</code></td><td>:honeybee: <code>:honeybee:</code></td><td>:ant: <code>:ant:</code></td></tr><tr><td>:beetle: <code>:beetle:</code></td><td>:snail: <code>:snail:</code></td><td>:octopus: <code>:octopus:</code></td></tr><tr><td>:tropical_fish: <code>:tropical_fish:</code></td><td>:fish: <code>:fish:</code></td><td>:whale: <code>:whale:</code></td></tr><tr><td>:whale2: <code>:whale2:</code></td><td>:dolphin: <code>:dolphin:</code></td><td>:cow2: <code>:cow2:</code></td></tr><tr><td>:ram: <code>:ram:</code></td><td>:rat: <code>:rat:</code></td><td>:water_buffalo: <code>:water_buffalo:</code></td></tr><tr><td>:tiger2: <code>:tiger2:</code></td><td>:rabbit2: <code>:rabbit2:</code></td><td>:dragon: <code>:dragon:</code></td></tr><tr><td>:goat: <code>:goat:</code></td><td>:rooster: <code>:rooster:</code></td><td>:dog2: <code>:dog2:</code></td></tr><tr><td>:pig2: <code>:pig2:</code></td><td>:mouse2: <code>:mouse2:</code></td><td>:ox: <code>:ox:</code></td></tr><tr><td>:dragon_face: <code>:dragon_face:</code></td><td>:blowfish: <code>:blowfish:</code></td><td>:crocodile: <code>:crocodile:</code></td></tr><tr><td>:dromedary_camel: <code>:dromedary_camel:</code></td><td>:leopard: <code>:leopard:</code></td><td>:cat2: <code>:cat2:</code></td></tr><tr><td>:poodle: <code>:poodle:</code></td><td>:paw_prints: <code>:paw_prints:</code></td><td>:bouquet: <code>:bouquet:</code></td></tr><tr><td>:cherry_blossom: <code>:cherry_blossom:</code></td><td>:tulip: <code>:tulip:</code></td><td>:four_leaf_clover: <code>:four_leaf_clover:</code></td></tr><tr><td>:rose: <code>:rose:</code></td><td>:sunflower: <code>:sunflower:</code></td><td>:hibiscus: <code>:hibiscus:</code></td></tr><tr><td>:maple_leaf: <code>:maple_leaf:</code></td><td>:leaves: <code>:leaves:</code></td><td>:fallen_leaf: <code>:fallen_leaf:</code></td></tr><tr><td>:herb: <code>:herb:</code></td><td>:mushroom: <code>:mushroom:</code></td><td>:cactus: <code>:cactus:</code></td></tr><tr><td>:palm_tree: <code>:palm_tree:</code></td><td>:evergreen_tree: <code>:evergreen_tree:</code></td><td>:deciduous_tree: <code>:deciduous_tree:</code></td></tr><tr><td>:chestnut: <code>:chestnut:</code></td><td>:seedling: <code>:seedling:</code></td><td>:blossom: <code>:blossom:</code></td></tr><tr><td>:ear_of_rice: <code>:ear_of_rice:</code></td><td>:shell: <code>:shell:</code></td><td>:globe_with_meridians: <code>:globe_with_meridians:</code></td></tr><tr><td>:sun_with_face: <code>:sun_with_face:</code></td><td>:full_moon_with_face: <code>:full_moon_with_face:</code></td><td>:new_moon_with_face: <code>:new_moon_with_face:</code></td></tr><tr><td>:new_moon: <code>:new_moon:</code></td><td>:waxing_crescent_moon: <code>:waxing_crescent_moon:</code></td><td>:first_quarter_moon: <code>:first_quarter_moon:</code></td></tr><tr><td>:waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code></td><td>:full_moon: <code>:full_moon:</code></td><td>:waning_gibbous_moon: <code>:waning_gibbous_moon:</code></td></tr><tr><td>:last_quarter_moon: <code>:last_quarter_moon:</code></td><td>:waning_crescent_moon: <code>:waning_crescent_moon:</code></td><td>:last_quarter_moon_with_face:<code>:last_quarter_moon_with_face:</code></td></tr><tr><td>:first_quarter_moon_with_face:<code>:first_quarter_moon_with_face:</code></td><td>:moon: <code>:moon:</code></td><td>:earth_africa: <code>:earth_africa:</code></td></tr><tr><td>:earth_americas: <code>:earth_americas:</code></td><td>:earth_asia: <code>:earth_asia:</code></td><td>:volcano: <code>:volcano:</code></td></tr><tr><td>:milky_way: <code>:milky_way:</code></td><td>:partly_sunny: <code>:partly_sunny:</code></td><td>:octocat: <code>:octocat:</code></td></tr><tr><td>:squirrel: <code>:squirrel:</code></td><td></td><td></td></tr></tbody></table><p>Objects</p><table><thead><tr><th>:bamboo: <code>:bamboo:</code></th><th>:gift_heart: <code>:gift_heart:</code></th><th>:dolls: <code>:dolls:</code></th></tr></thead><tbody><tr><td>:school_satchel: <code>:school_satchel:</code></td><td>:mortar_board: <code>:mortar_board:</code></td><td>:flags: <code>:flags:</code></td></tr><tr><td>:fireworks: <code>:fireworks:</code></td><td>:sparkler: <code>:sparkler:</code></td><td>:wind_chime: <code>:wind_chime:</code></td></tr><tr><td>:rice_scene: <code>:rice_scene:</code></td><td>:jack_o_lantern: <code>:jack_o_lantern:</code></td><td>:ghost: <code>:ghost:</code></td></tr><tr><td>:santa: <code>:santa:</code></td><td>:christmas_tree: <code>:christmas_tree:</code></td><td>:gift: <code>:gift:</code></td></tr><tr><td>:bell: <code>:bell:</code></td><td>:no_bell: <code>:no_bell:</code></td><td>:tanabata_tree: <code>:tanabata_tree:</code></td></tr><tr><td>:tada: <code>:tada:</code></td><td>:confetti_ball: <code>:confetti_ball:</code></td><td>:balloon: <code>:balloon:</code></td></tr><tr><td>:crystal_ball: <code>:crystal_ball:</code></td><td>:cd: <code>:cd:</code></td><td>:dvd: <code>:dvd:</code></td></tr><tr><td>:floppy_disk: <code>:floppy_disk:</code></td><td>:camera: <code>:camera:</code></td><td>:video_camera: <code>:video_camera:</code></td></tr><tr><td>:movie_camera: <code>:movie_camera:</code></td><td>:computer: <code>:computer:</code></td><td>:tv: <code>:tv:</code></td></tr><tr><td>:iphone: <code>:iphone:</code></td><td>:phone: <code>:phone:</code></td><td>:telephone: <code>:telephone:</code></td></tr><tr><td>:telephone_receiver: <code>:telephone_receiver:</code></td><td>:pager: <code>:pager:</code></td><td>:fax: <code>:fax:</code></td></tr><tr><td>:minidisc: <code>:minidisc:</code></td><td>:vhs: <code>:vhs:</code></td><td>:sound: <code>:sound:</code></td></tr><tr><td>:speaker: <code>:speaker:</code></td><td>:mute: <code>:mute:</code></td><td>:loudspeaker: <code>:loudspeaker:</code></td></tr><tr><td>:mega: <code>:mega:</code></td><td>:hourglass: <code>:hourglass:</code></td><td>:hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code></td></tr><tr><td>:alarm_clock: <code>:alarm_clock:</code></td><td>:watch: <code>:watch:</code></td><td>:radio: <code>:radio:</code></td></tr><tr><td>:satellite: <code>:satellite:</code></td><td>:loop: <code>:loop:</code></td><td>:mag: <code>:mag:</code></td></tr><tr><td>:mag_right: <code>:mag_right:</code></td><td>:unlock: <code>:unlock:</code></td><td>:lock: <code>:lock:</code></td></tr><tr><td>:lock_with_ink_pen: <code>:lock_with_ink_pen:</code></td><td>:closed_lock_with_key: <code>:closed_lock_with_key:</code></td><td>:key: <code>:key:</code></td></tr><tr><td>:bulb: <code>:bulb:</code></td><td>:flashlight: <code>:flashlight:</code></td><td>:high_brightness: <code>:high_brightness:</code></td></tr><tr><td>:low_brightness: <code>:low_brightness:</code></td><td>:electric_plug: <code>:electric_plug:</code></td><td>:battery: <code>:battery:</code></td></tr><tr><td>:calling: <code>:calling:</code></td><td>:email: <code>:email:</code></td><td>:mailbox: <code>:mailbox:</code></td></tr><tr><td>:postbox: <code>:postbox:</code></td><td>:bath: <code>:bath:</code></td><td>:bathtub: <code>:bathtub:</code></td></tr><tr><td>:shower: <code>:shower:</code></td><td>:toilet: <code>:toilet:</code></td><td>:wrench: <code>:wrench:</code></td></tr><tr><td>:nut_and_bolt: <code>:nut_and_bolt:</code></td><td>:hammer: <code>:hammer:</code></td><td>:seat: <code>:seat:</code></td></tr><tr><td>:moneybag: <code>:moneybag:</code></td><td>:yen: <code>:yen:</code></td><td>:dollar: <code>:dollar:</code></td></tr><tr><td>:pound: <code>:pound:</code></td><td>:euro: <code>:euro:</code></td><td>:credit_card: <code>:credit_card:</code></td></tr><tr><td>:money_with_wings: <code>:money_with_wings:</code></td><td>:e-mail: <code>:e-mail:</code></td><td>:inbox_tray: <code>:inbox_tray:</code></td></tr><tr><td>:outbox_tray: <code>:outbox_tray:</code></td><td>:envelope: <code>:envelope:</code></td><td>:incoming_envelope: <code>:incoming_envelope:</code></td></tr><tr><td>:postal_horn: <code>:postal_horn:</code></td><td>:mailbox_closed: <code>:mailbox_closed:</code></td><td>:mailbox_with_mail: <code>:mailbox_with_mail:</code></td></tr><tr><td>:mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code></td><td>:door: <code>:door:</code></td><td>:smoking: <code>:smoking:</code></td></tr><tr><td>:bomb: <code>:bomb:</code></td><td>:gun: <code>:gun:</code></td><td>:hocho: <code>:hocho:</code></td></tr><tr><td>:pill: <code>:pill:</code></td><td>:syringe: <code>:syringe:</code></td><td>:page_facing_up: <code>:page_facing_up:</code></td></tr><tr><td>:page_with_curl: <code>:page_with_curl:</code></td><td>:bookmark_tabs: <code>:bookmark_tabs:</code></td><td>:bar_chart: <code>:bar_chart:</code></td></tr><tr><td>:chart_with_upwards_trend:<code>:chart_with_upwards_trend:</code></td><td>:chart_with_downwards_trend:<code>:chart_with_downwards_trend:</code></td><td>:scroll: <code>:scroll:</code></td></tr><tr><td>:clipboard: <code>:clipboard:</code></td><td>:calendar: <code>:calendar:</code></td><td>:date: <code>:date:</code></td></tr><tr><td>:card_index: <code>:card_index:</code></td><td>:file_folder: <code>:file_folder:</code></td><td>:open_file_folder: <code>:open_file_folder:</code></td></tr><tr><td>:scissors: <code>:scissors:</code></td><td>:pushpin: <code>:pushpin:</code></td><td>:paperclip: <code>:paperclip:</code></td></tr><tr><td>:black_nib: <code>:black_nib:</code></td><td>:pencil2: <code>:pencil2:</code></td><td>:straight_ruler: <code>:straight_ruler:</code></td></tr><tr><td>:triangular_ruler: <code>:triangular_ruler:</code></td><td>:closed_book: <code>:closed_book:</code></td><td>:green_book: <code>:green_book:</code></td></tr><tr><td>:blue_book: <code>:blue_book:</code></td><td>:orange_book: <code>:orange_book:</code></td><td>:notebook: <code>:notebook:</code></td></tr><tr><td>:notebook_with_decorative_cover:<code>:notebook_with_decorative_cover:</code></td><td>:ledger: <code>:ledger:</code></td><td>:books: <code>:books:</code></td></tr><tr><td>:bookmark: <code>:bookmark:</code></td><td>:name_badge: <code>:name_badge:</code></td><td>:microscope: <code>:microscope:</code></td></tr><tr><td>:telescope: <code>:telescope:</code></td><td>:newspaper: <code>:newspaper:</code></td><td>:football: <code>:football:</code></td></tr><tr><td>:basketball: <code>:basketball:</code></td><td>:soccer: <code>:soccer:</code></td><td>:baseball: <code>:baseball:</code></td></tr><tr><td>:tennis: <code>:tennis:</code></td><td>:8ball: <code>:8ball:</code></td><td>:rugby_football: <code>:rugby_football:</code></td></tr><tr><td>:bowling: <code>:bowling:</code></td><td>:golf: <code>:golf:</code></td><td>:mountain_bicyclist: <code>:mountain_bicyclist:</code></td></tr><tr><td>:bicyclist: <code>:bicyclist:</code></td><td>:horse_racing: <code>:horse_racing:</code></td><td>:snowboarder: <code>:snowboarder:</code></td></tr><tr><td>:swimmer: <code>:swimmer:</code></td><td>:surfer: <code>:surfer:</code></td><td>:ski: <code>:ski:</code></td></tr><tr><td>:spades: <code>:spades:</code></td><td>:hearts: <code>:hearts:</code></td><td>:clubs: <code>:clubs:</code></td></tr><tr><td>:diamonds: <code>:diamonds:</code></td><td>:gem: <code>:gem:</code></td><td>:ring: <code>:ring:</code></td></tr><tr><td>:trophy: <code>:trophy:</code></td><td>:musical_score: <code>:musical_score:</code></td><td>:musical_keyboard: <code>:musical_keyboard:</code></td></tr><tr><td>:violin: <code>:violin:</code></td><td>:space_invader: <code>:space_invader:</code></td><td>:video_game: <code>:video_game:</code></td></tr><tr><td>:black_joker: <code>:black_joker:</code></td><td>:flower_playing_cards: <code>:flower_playing_cards:</code></td><td>:game_die: <code>:game_die:</code></td></tr><tr><td>:dart: <code>:dart:</code></td><td>:mahjong: <code>:mahjong:</code></td><td>:clapper: <code>:clapper:</code></td></tr><tr><td>:memo: <code>:memo:</code></td><td>:pencil: <code>:pencil:</code></td><td>:book: <code>:book:</code></td></tr><tr><td>:art: <code>:art:</code></td><td>:microphone: <code>:microphone:</code></td><td>:headphones: <code>:headphones:</code></td></tr><tr><td>:trumpet: <code>:trumpet:</code></td><td>:saxophone: <code>:saxophone:</code></td><td>:guitar: <code>:guitar:</code></td></tr><tr><td>:shoe: <code>:shoe:</code></td><td>:sandal: <code>:sandal:</code></td><td>:high_heel: <code>:high_heel:</code></td></tr><tr><td>:lipstick: <code>:lipstick:</code></td><td>:boot: <code>:boot:</code></td><td>:shirt: <code>:shirt:</code></td></tr><tr><td>:tshirt: <code>:tshirt:</code></td><td>:necktie: <code>:necktie:</code></td><td>:womans_clothes: <code>:womans_clothes:</code></td></tr><tr><td>:dress: <code>:dress:</code></td><td>:running_shirt_with_sash:<code>:running_shirt_with_sash:</code></td><td>:jeans: <code>:jeans:</code></td></tr><tr><td>:kimono: <code>:kimono:</code></td><td>:bikini: <code>:bikini:</code></td><td>:ribbon: <code>:ribbon:</code></td></tr><tr><td>:tophat: <code>:tophat:</code></td><td>:crown: <code>:crown:</code></td><td>:womans_hat: <code>:womans_hat:</code></td></tr><tr><td>:mans_shoe: <code>:mans_shoe:</code></td><td>:closed_umbrella: <code>:closed_umbrella:</code></td><td>:briefcase: <code>:briefcase:</code></td></tr><tr><td>:handbag: <code>:handbag:</code></td><td>:pouch: <code>:pouch:</code></td><td>:purse: <code>:purse:</code></td></tr><tr><td>:eyeglasses: <code>:eyeglasses:</code></td><td>:fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code></td><td>:coffee: <code>:coffee:</code></td></tr><tr><td>:tea: <code>:tea:</code></td><td>:sake: <code>:sake:</code></td><td>:baby_bottle: <code>:baby_bottle:</code></td></tr><tr><td>:beer: <code>:beer:</code></td><td>:beers: <code>:beers:</code></td><td>:cocktail: <code>:cocktail:</code></td></tr><tr><td>:tropical_drink: <code>:tropical_drink:</code></td><td>:wine_glass: <code>:wine_glass:</code></td><td>:fork_and_knife: <code>:fork_and_knife:</code></td></tr><tr><td>:pizza: <code>:pizza:</code></td><td>:hamburger: <code>:hamburger:</code></td><td>:fries: <code>:fries:</code></td></tr><tr><td>:poultry_leg: <code>:poultry_leg:</code></td><td>:meat_on_bone: <code>:meat_on_bone:</code></td><td>:spaghetti: <code>:spaghetti:</code></td></tr><tr><td>:curry: <code>:curry:</code></td><td>:fried_shrimp: <code>:fried_shrimp:</code></td><td>:bento: <code>:bento:</code></td></tr><tr><td>:sushi: <code>:sushi:</code></td><td>:fish_cake: <code>:fish_cake:</code></td><td>:rice_ball: <code>:rice_ball:</code></td></tr><tr><td>:rice_cracker: <code>:rice_cracker:</code></td><td>:rice: <code>:rice:</code></td><td>:ramen: <code>:ramen:</code></td></tr><tr><td>:stew: <code>:stew:</code></td><td>:oden: <code>:oden:</code></td><td>:dango: <code>:dango:</code></td></tr><tr><td>:egg: <code>:egg:</code></td><td>:bread: <code>:bread:</code></td><td>:doughnut: <code>:doughnut:</code></td></tr><tr><td>:custard: <code>:custard:</code></td><td>:icecream: <code>:icecream:</code></td><td>:ice_cream: <code>:ice_cream:</code></td></tr><tr><td>:shaved_ice: <code>:shaved_ice:</code></td><td>:birthday: <code>:birthday:</code></td><td>:cake: <code>:cake:</code></td></tr><tr><td>:cookie: <code>:cookie:</code></td><td>:chocolate_bar: <code>:chocolate_bar:</code></td><td>:candy: <code>:candy:</code></td></tr><tr><td>:lollipop: <code>:lollipop:</code></td><td>:honey_pot: <code>:honey_pot:</code></td><td>:apple: <code>:apple:</code></td></tr><tr><td>:green_apple: <code>:green_apple:</code></td><td>:tangerine: <code>:tangerine:</code></td><td>:lemon: <code>:lemon:</code></td></tr><tr><td>:cherries: <code>:cherries:</code></td><td>:grapes: <code>:grapes:</code></td><td>:watermelon: <code>:watermelon:</code></td></tr><tr><td>:strawberry: <code>:strawberry:</code></td><td>:peach: <code>:peach:</code></td><td>:melon: <code>:melon:</code></td></tr><tr><td>:banana: <code>:banana:</code></td><td>:pear: <code>:pear:</code></td><td>:pineapple: <code>:pineapple:</code></td></tr><tr><td>:sweet_potato: <code>:sweet_potato:</code></td><td>:eggplant: <code>:eggplant:</code></td><td>:tomato: <code>:tomato:</code></td></tr><tr><td>:corn: <code>:corn:</code></td><td></td><td></td></tr></tbody></table><p>Places</p><table><thead><tr><th>:house: <code>:house:</code></th><th>:house_with_garden: <code>:house_with_garden:</code></th><th>:school: <code>:school:</code></th></tr></thead><tbody><tr><td>:office: <code>:office:</code></td><td>:post_office: <code>:post_office:</code></td><td>:hospital: <code>:hospital:</code></td></tr><tr><td>:bank: <code>:bank:</code></td><td>:convenience_store: <code>:convenience_store:</code></td><td>:love_hotel: <code>:love_hotel:</code></td></tr><tr><td>:hotel: <code>:hotel:</code></td><td>:wedding: <code>:wedding:</code></td><td>:church: <code>:church:</code></td></tr><tr><td>:department_store: <code>:department_store:</code></td><td>:european_post_office: <code>:european_post_office:</code></td><td>:city_sunrise: <code>:city_sunrise:</code></td></tr><tr><td>:city_sunset: <code>:city_sunset:</code></td><td>:japanese_castle: <code>:japanese_castle:</code></td><td>:european_castle: <code>:european_castle:</code></td></tr><tr><td>:tent: <code>:tent:</code></td><td>:factory: <code>:factory:</code></td><td>:tokyo_tower: <code>:tokyo_tower:</code></td></tr><tr><td>:japan: <code>:japan:</code></td><td>:mount_fuji: <code>:mount_fuji:</code></td><td>:sunrise_over_mountains: <code>:sunrise_over_mountains:</code></td></tr><tr><td>:sunrise: <code>:sunrise:</code></td><td>:stars: <code>:stars:</code></td><td>:statue_of_liberty: <code>:statue_of_liberty:</code></td></tr><tr><td>:bridge_at_night: <code>:bridge_at_night:</code></td><td>:carousel_horse: <code>:carousel_horse:</code></td><td>:rainbow: <code>:rainbow:</code></td></tr><tr><td>:ferris_wheel: <code>:ferris_wheel:</code></td><td>:fountain: <code>:fountain:</code></td><td>:roller_coaster: <code>:roller_coaster:</code></td></tr><tr><td>:ship: <code>:ship:</code></td><td>:speedboat: <code>:speedboat:</code></td><td>:boat: <code>:boat:</code></td></tr><tr><td>:sailboat: <code>:sailboat:</code></td><td>:rowboat: <code>:rowboat:</code></td><td>:anchor: <code>:anchor:</code></td></tr><tr><td>:rocket: <code>:rocket:</code></td><td>:airplane: <code>:airplane:</code></td><td>:helicopter: <code>:helicopter:</code></td></tr><tr><td>:steam_locomotive: <code>:steam_locomotive:</code></td><td>:tram: <code>:tram:</code></td><td>:mountain_railway: <code>:mountain_railway:</code></td></tr><tr><td>:bike: <code>:bike:</code></td><td>:aerial_tramway: <code>:aerial_tramway:</code></td><td>:suspension_railway: <code>:suspension_railway:</code></td></tr><tr><td>:mountain_cableway: <code>:mountain_cableway:</code></td><td>:tractor: <code>:tractor:</code></td><td>:blue_car: <code>:blue_car:</code></td></tr><tr><td>:oncoming_automobile: <code>:oncoming_automobile:</code></td><td>:car: <code>:car:</code></td><td>:red_car: <code>:red_car:</code></td></tr><tr><td>:taxi: <code>:taxi:</code></td><td>:oncoming_taxi: <code>:oncoming_taxi:</code></td><td>:articulated_lorry: <code>:articulated_lorry:</code></td></tr><tr><td>:bus: <code>:bus:</code></td><td>:oncoming_bus: <code>:oncoming_bus:</code></td><td>:rotating_light: <code>:rotating_light:</code></td></tr><tr><td>:police_car: <code>:police_car:</code></td><td>:oncoming_police_car: <code>:oncoming_police_car:</code></td><td>:fire_engine: <code>:fire_engine:</code></td></tr><tr><td>:ambulance: <code>:ambulance:</code></td><td>:minibus: <code>:minibus:</code></td><td>:truck: <code>:truck:</code></td></tr><tr><td>:train: <code>:train:</code></td><td>:station: <code>:station:</code></td><td>:train2: <code>:train2:</code></td></tr><tr><td>:bullettrain_front: <code>:bullettrain_front:</code></td><td>:bullettrain_side: <code>:bullettrain_side:</code></td><td>:light_rail: <code>:light_rail:</code></td></tr><tr><td>:monorail: <code>:monorail:</code></td><td>:railway_car: <code>:railway_car:</code></td><td>:trolleybus: <code>:trolleybus:</code></td></tr><tr><td>:ticket: <code>:ticket:</code></td><td>:fuelpump: <code>:fuelpump:</code></td><td>:vertical_traffic_light: <code>:vertical_traffic_light:</code></td></tr><tr><td>:traffic_light: <code>:traffic_light:</code></td><td>:warning: <code>:warning:</code></td><td>:construction: <code>:construction:</code></td></tr><tr><td>:beginner: <code>:beginner:</code></td><td>:atm: <code>:atm:</code></td><td>:slot_machine: <code>:slot_machine:</code></td></tr><tr><td>:busstop: <code>:busstop:</code></td><td>:barber: <code>:barber:</code></td><td>:hotsprings: <code>:hotsprings:</code></td></tr><tr><td>:checkered_flag: <code>:checkered_flag:</code></td><td>:crossed_flags: <code>:crossed_flags:</code></td><td>:izakaya_lantern: <code>:izakaya_lantern:</code></td></tr><tr><td>:moyai: <code>:moyai:</code></td><td>:circus_tent: <code>:circus_tent:</code></td><td>:performing_arts: <code>:performing_arts:</code></td></tr><tr><td>:round_pushpin: <code>:round_pushpin:</code></td><td>:triangular_flag_on_post:<code>:triangular_flag_on_post:</code></td><td>:jp: <code>:jp:</code></td></tr><tr><td>:kr: <code>:kr:</code></td><td>:cn: <code>:cn:</code></td><td>:us: <code>:us:</code></td></tr><tr><td>:fr: <code>:fr:</code></td><td>:es: <code>:es:</code></td><td>:it: <code>:it:</code></td></tr><tr><td>:ru: <code>:ru:</code></td><td>:gb: <code>:gb:</code></td><td>:uk: <code>:uk:</code></td></tr><tr><td>:de: <code>:de:</code></td><td></td><td></td></tr></tbody></table><p>Symbols</p><table><thead><tr><th>:one: <code>:one:</code></th><th>:two: <code>:two:</code></th><th>:three: <code>:three:</code></th></tr></thead><tbody><tr><td>:four: <code>:four:</code></td><td>:five: <code>:five:</code></td><td>:six: <code>:six:</code></td></tr><tr><td>:seven: <code>:seven:</code></td><td>:eight: <code>:eight:</code></td><td>:nine: <code>:nine:</code></td></tr><tr><td>:keycap_ten: <code>:keycap_ten:</code></td><td>:1234: <code>:1234:</code></td><td>:zero: <code>:zero:</code></td></tr><tr><td>:hash: <code>:hash:</code></td><td>:symbols: <code>:symbols:</code></td><td>:arrow_backward: <code>:arrow_backward:</code></td></tr><tr><td>:arrow_down: <code>:arrow_down:</code></td><td>:arrow_forward: <code>:arrow_forward:</code></td><td>:arrow_left: <code>:arrow_left:</code></td></tr><tr><td>:capital_abcd: <code>:capital_abcd:</code></td><td>:abcd: <code>:abcd:</code></td><td>:abc: <code>:abc:</code></td></tr><tr><td>:arrow_lower_left: <code>:arrow_lower_left:</code></td><td>:arrow_lower_right: <code>:arrow_lower_right:</code></td><td>:arrow_right: <code>:arrow_right:</code></td></tr><tr><td>:arrow_up: <code>:arrow_up:</code></td><td>:arrow_upper_left: <code>:arrow_upper_left:</code></td><td>:arrow_upper_right: <code>:arrow_upper_right:</code></td></tr><tr><td>:arrow_double_down: <code>:arrow_double_down:</code></td><td>:arrow_double_up: <code>:arrow_double_up:</code></td><td>:arrow_down_small: <code>:arrow_down_small:</code></td></tr><tr><td>:arrow_heading_down: <code>:arrow_heading_down:</code></td><td>:arrow_heading_up: <code>:arrow_heading_up:</code></td><td>:leftwards_arrow_with_hook:<code>:leftwards_arrow_with_hook:</code></td></tr><tr><td>:arrow_right_hook: <code>:arrow_right_hook:</code></td><td>:left_right_arrow: <code>:left_right_arrow:</code></td><td>:arrow_up_down: <code>:arrow_up_down:</code></td></tr><tr><td>:arrow_up_small: <code>:arrow_up_small:</code></td><td>:arrows_clockwise: <code>:arrows_clockwise:</code></td><td>:arrows_counterclockwise:<code>:arrows_counterclockwise:</code></td></tr><tr><td>:rewind: <code>:rewind:</code></td><td>:fast_forward: <code>:fast_forward:</code></td><td>:information_source: <code>:information_source:</code></td></tr><tr><td>:ok: <code>:ok:</code></td><td>:twisted_rightwards_arrows:<code>:twisted_rightwards_arrows:</code></td><td>:repeat: <code>:repeat:</code></td></tr><tr><td>:repeat_one: <code>:repeat_one:</code></td><td>:new: <code>:new:</code></td><td>:top: <code>:top:</code></td></tr><tr><td>:up: <code>:up:</code></td><td>:cool: <code>:cool:</code></td><td>:free: <code>:free:</code></td></tr><tr><td>:ng: <code>:ng:</code></td><td>:cinema: <code>:cinema:</code></td><td>:koko: <code>:koko:</code></td></tr><tr><td>:signal_strength: <code>:signal_strength:</code></td><td>:u5272: <code>:u5272:</code></td><td>:u5408: <code>:u5408:</code></td></tr><tr><td>:u55b6: <code>:u55b6:</code></td><td>:u6307: <code>:u6307:</code></td><td>:u6708: <code>:u6708:</code></td></tr><tr><td>:u6709: <code>:u6709:</code></td><td>:u6e80: <code>:u6e80:</code></td><td>:u7121: <code>:u7121:</code></td></tr><tr><td>:u7533: <code>:u7533:</code></td><td>:u7a7a: <code>:u7a7a:</code></td><td>:u7981: <code>:u7981:</code></td></tr><tr><td>:sa: <code>:sa:</code></td><td>:restroom: <code>:restroom:</code></td><td>:mens: <code>:mens:</code></td></tr><tr><td>:womens: <code>:womens:</code></td><td>:baby_symbol: <code>:baby_symbol:</code></td><td>:no_smoking: <code>:no_smoking:</code></td></tr><tr><td>:parking: <code>:parking:</code></td><td>:wheelchair: <code>:wheelchair:</code></td><td>:metro: <code>:metro:</code></td></tr><tr><td>:baggage_claim: <code>:baggage_claim:</code></td><td>:accept: <code>:accept:</code></td><td>:wc: <code>:wc:</code></td></tr><tr><td>:potable_water: <code>:potable_water:</code></td><td>:put_litter_in_its_place:<code>:put_litter_in_its_place:</code></td><td>:secret: <code>:secret:</code></td></tr><tr><td>:congratulations: <code>:congratulations:</code></td><td>:m: <code>:m:</code></td><td>:passport_control: <code>:passport_control:</code></td></tr><tr><td>:left_luggage: <code>:left_luggage:</code></td><td>:customs: <code>:customs:</code></td><td>:ideograph_advantage: <code>:ideograph_advantage:</code></td></tr><tr><td>:cl: <code>:cl:</code></td><td>:sos: <code>:sos:</code></td><td>:id: <code>:id:</code></td></tr><tr><td>:no_entry_sign: <code>:no_entry_sign:</code></td><td>:underage: <code>:underage:</code></td><td>:no_mobile_phones: <code>:no_mobile_phones:</code></td></tr><tr><td>:do_not_litter: <code>:do_not_litter:</code></td><td>:non-potable_water: <code>:non-potable_water:</code></td><td>:no_bicycles: <code>:no_bicycles:</code></td></tr><tr><td>:no_pedestrians: <code>:no_pedestrians:</code></td><td>:children_crossing: <code>:children_crossing:</code></td><td>:no_entry: <code>:no_entry:</code></td></tr><tr><td>:eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code></td><td>:eight_pointed_black_star:<code>:eight_pointed_black_star:</code></td><td>:heart_decoration: <code>:heart_decoration:</code></td></tr><tr><td>:vs: <code>:vs:</code></td><td>:vibration_mode: <code>:vibration_mode:</code></td><td>:mobile_phone_off: <code>:mobile_phone_off:</code></td></tr><tr><td>:chart: <code>:chart:</code></td><td>:currency_exchange: <code>:currency_exchange:</code></td><td>:aries: <code>:aries:</code></td></tr><tr><td>:taurus: <code>:taurus:</code></td><td>:gemini: <code>:gemini:</code></td><td>:cancer: <code>:cancer:</code></td></tr><tr><td>:leo: <code>:leo:</code></td><td>:virgo: <code>:virgo:</code></td><td>:libra: <code>:libra:</code></td></tr><tr><td>:scorpius: <code>:scorpius:</code></td><td>:sagittarius: <code>:sagittarius:</code></td><td>:capricorn: <code>:capricorn:</code></td></tr><tr><td>:aquarius: <code>:aquarius:</code></td><td>:pisces: <code>:pisces:</code></td><td>:ophiuchus: <code>:ophiuchus:</code></td></tr><tr><td>:six_pointed_star: <code>:six_pointed_star:</code></td><td>:negative_squared_cross_mark:<code>:negative_squared_cross_mark:</code></td><td>:a: <code>:a:</code></td></tr><tr><td>:b: <code>:b:</code></td><td>:ab: <code>:ab:</code></td><td>:o2: <code>:o2:</code></td></tr><tr><td>:diamond_shape_with_a_dot_inside:<code>:diamond_shape_with_a_dot_inside:</code></td><td>:recycle: <code>:recycle:</code></td><td>:end: <code>:end:</code></td></tr><tr><td>:on: <code>:on:</code></td><td>:soon: <code>:soon:</code></td><td>:clock1: <code>:clock1:</code></td></tr><tr><td>:clock130: <code>:clock130:</code></td><td>:clock10: <code>:clock10:</code></td><td>:clock1030: <code>:clock1030:</code></td></tr><tr><td>:clock11: <code>:clock11:</code></td><td>:clock1130: <code>:clock1130:</code></td><td>:clock12: <code>:clock12:</code></td></tr><tr><td>:clock1230: <code>:clock1230:</code></td><td>:clock2: <code>:clock2:</code></td><td>:clock230: <code>:clock230:</code></td></tr><tr><td>:clock3: <code>:clock3:</code></td><td>:clock330: <code>:clock330:</code></td><td>:clock4: <code>:clock4:</code></td></tr><tr><td>:clock430: <code>:clock430:</code></td><td>:clock5: <code>:clock5:</code></td><td>:clock530: <code>:clock530:</code></td></tr><tr><td>:clock6: <code>:clock6:</code></td><td>:clock630: <code>:clock630:</code></td><td>:clock7: <code>:clock7:</code></td></tr><tr><td>:clock730: <code>:clock730:</code></td><td>:clock8: <code>:clock8:</code></td><td>:clock830: <code>:clock830:</code></td></tr><tr><td>:clock9: <code>:clock9:</code></td><td>:clock930: <code>:clock930:</code></td><td>:heavy_dollar_sign: <code>:heavy_dollar_sign:</code></td></tr><tr><td>:copyright: <code>:copyright:</code></td><td>:registered: <code>:registered:</code></td><td>:tm: <code>:tm:</code></td></tr><tr><td>:x: <code>:x:</code></td><td>:heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code></td><td>:bangbang: <code>:bangbang:</code></td></tr><tr><td>:interrobang: <code>:interrobang:</code></td><td>:o: <code>:o:</code></td><td>:heavy_multiplication_x: <code>:heavy_multiplication_x:</code></td></tr><tr><td>:heavy_plus_sign: <code>:heavy_plus_sign:</code></td><td>:heavy_minus_sign: <code>:heavy_minus_sign:</code></td><td>:heavy_division_sign: <code>:heavy_division_sign:</code></td></tr><tr><td>:white_flower: <code>:white_flower:</code></td><td>:100: <code>:100:</code></td><td>:heavy_check_mark: <code>:heavy_check_mark:</code></td></tr><tr><td>:ballot_box_with_check: <code>:ballot_box_with_check:</code></td><td>:radio_button: <code>:radio_button:</code></td><td>:link: <code>:link:</code></td></tr><tr><td>:curly_loop: <code>:curly_loop:</code></td><td>:wavy_dash: <code>:wavy_dash:</code></td><td>:part_alternation_mark: <code>:part_alternation_mark:</code></td></tr><tr><td>:trident: <code>:trident:</code></td><td>:black_square: <code>:black_square:</code></td><td>:white_square: <code>:white_square:</code></td></tr><tr><td>:white_check_mark: <code>:white_check_mark:</code></td><td>:black_square_button: <code>:black_square_button:</code></td><td>:white_square_button: <code>:white_square_button:</code></td></tr><tr><td>:black_circle: <code>:black_circle:</code></td><td>:white_circle: <code>:white_circle:</code></td><td>:red_circle: <code>:red_circle:</code></td></tr><tr><td>:large_blue_circle: <code>:large_blue_circle:</code></td><td>:large_blue_diamond: <code>:large_blue_diamond:</code></td><td>:large_orange_diamond: <code>:large_orange_diamond:</code></td></tr><tr><td>:small_blue_diamond: <code>:small_blue_diamond:</code></td><td>:small_orange_diamond: <code>:small_orange_diamond:</code></td><td>:small_red_triangle: <code>:small_red_triangle:</code></td></tr><tr><td>:small_red_triangle_down:<code>:small_red_triangle_down:</code></td><td>:shipit: <code>:shipit:</code></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相对论的简单解释</title>
    <link href="/2024/10/05/2024-10-05-%E7%9B%B8%E5%AF%B9%E8%AE%BA%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <url>/2024/10/05/2024-10-05-%E7%9B%B8%E5%AF%B9%E8%AE%BA%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="相对论的简单解释">相对论的简单解释</h1><hr /><h3 id="狭义相对论">狭义相对论：</h3><ul><li><strong>核心思想：</strong>狭义相对论由爱因斯坦提出，主要研究物体在<strong>接近光速时的运动</strong>。</li><li><strong>两个主要原则：</strong><ol type="1"><li><strong>光速恒定：</strong>不论观察者如何运动，光的速度在真空中总是一样的。</li><li><strong>相对性原理：</strong>物理定律在所有的惯性参考系中都相同（无论你静止还是匀速运动）。</li></ol><strong>结果：</strong><ul><li>当物体接近光速时，时间会变慢（<strong>时间膨胀</strong>）、长度会缩短（<strong>长度收缩</strong>），而且质量会变大。</li></ul>简单来说，狭义相对论告诉我们，速度很快的物体会发生这些奇怪的现象。</li></ul><h3 id="广义相对论">广义相对论：</h3><ul><li><p><strong>核心思想：</strong>广义相对论扩展了狭义相对论，研究的是<strong>引力</strong>和<strong>时空的弯曲</strong>。</p></li><li><p><strong>主要观点：</strong>质量大的物体会<strong>弯曲时空</strong>，而引力就是物体沿着弯曲时空的路径运动的结果。</p><p><strong>结果：</strong></p><ul><li>重物（比如地球）使时空弯曲，导致物体（比如卫星）围绕它运动。</li><li>甚至光线也会被引力影响，弯曲经过质量大的天体。</li></ul></li></ul><p>简单来说，广义相对论把引力解释为时空的弯曲，而不是传统的“力”。</p><h2 id="狭义相对论解释">狭义相对论解释</h2><p>这些问题与狭义相对论的核心原理紧密相关。让我们逐一解释：</p><h3 id="为什么光速是恒定的">1.<strong>为什么光速是恒定的？</strong></h3><p>光速恒定是狭义相对论的基础假设之一，爱因斯坦在理论中指出，光速在真空中对于任何观察者来说都是不变的，不管观察者是否在运动。这个假设基于以下发现：</p><ul><li>在经典物理中，速度是相对的（如果你在一辆车上，车的速度会相对于地面不同于你在静止状态下测量的速度）。</li><li>然而，实验（如迈克尔逊-莫雷实验）显示，不管你怎么测量，光速在任何参考系下都保持不变。</li></ul><p><strong>为什么？</strong>这是因为光是一种不依赖于介质的传播波，它的速度取决于宇宙的基本常量（如电磁场的特性），而不是物体或观察者的运动。这与我们日常经验中的物体不同，因此光速恒定是相对论中的一个基本特性，属于宇宙的自然规律。</p><h3 id="物体接近光速时时间为什么会变慢时间膨胀">2.<strong>物体接近光速时，时间为什么会变慢？（时间膨胀）</strong></h3><p>根据狭义相对论，当物体的速度接近光速时，时间对于快速运动的物体会变慢。这可以通过爱因斯坦的<strong>时间膨胀</strong>公式来解释：</p><p><span class="math display">\[t&#39; = \frac{t}{\sqrt{1 - \frac{v^2}{c^2}}}\]</span> 其中： - (t') 是运动物体上的时间 - (t) 是静止参考系中的时间 -(v) 是物体的速度 - (c) 是光速</p><p><strong>为什么会这样？</strong>爱因斯坦认为时间并不是绝对的，而是相对的。时间膨胀意味着，随着物体速度越来越接近光速，时间会在不同的参考系中以不同的速度流逝。为了使光速保持不变，空间和时间都需要进行调整。因此，时间在物体接近光速时“变慢”，这是为了确保无论物体多快运动，光速对所有观察者来说都仍然是相同的。</p><h3 id="为什么长度会缩短长度收缩">3.<strong>为什么长度会缩短？（长度收缩）</strong></h3><p>当物体接近光速时，物体在运动方向上的长度会变短，这被称为<strong>长度收缩</strong>。公式为：<span class="math display">\[L = L_0 \sqrt{1 - \frac{v^2}{c^2}}\]</span> 其中： - (L) 是运动参考系中的长度 - (L_0)是静止参考系中的长度</p><p><strong>为什么会这样？</strong>长度收缩与时间膨胀类似，都是为了维持光速恒定而出现的现象。当物体以非常高的速度运动时，时空中的度量关系发生变化。运动物体的长度在运动方向上缩短，这种效应随着速度接近光速而变得越来越显著。这个收缩是观察者在静止参考系中看到的，而对于物体本身，它并没有感觉到自己的长度变化。</p><h3 id="为什么质量会变大">4. <strong>为什么质量会变大？</strong></h3><p>根据狭义相对论，当物体的速度接近光速时，它的动质量会增加。这个增加的质量通过以下公式描述：<span class="math display">\[m = \frac{m_0}{\sqrt{1 - \frac{v^2}{c^2}}}\]</span> 其中： - (m) 是物体运动时的质量 - (m_0) 是物体静止时的质量</p><p><strong>为什么会这样？</strong>质量的增加是物体接近光速时能量增加的结果。根据爱因斯坦的著名公式 (E =mc^2)，能量和质量是等价的。随着物体的速度越来越快，需要更多的能量来进一步加速它，因此它的动质量增加。实际上，这也是为什么物体不可能达到光速——因为需要无限的能量才能让质量无限大的物体达到光速。</p><h3 id="总结">总结：</h3><ul><li>光速恒定是一种自然现象，是宇宙的基本规律。</li><li>时间变慢、长度收缩和质量增大是为了确保光速在所有参考系中保持不变的结果。这些现象表明，空间和时间并不是固定的，而是随着速度的变化而相对变化。</li></ul><h2 id="广义相对论解释">广义相对论解释</h2><p>将“弯曲时空”具象化可以通过类比的方式来帮助理解。尽管时空弯曲是一个复杂的物理概念，但用一个简单的比喻可以帮助我们形成直观的印象。</p><h3 id="类比橡皮膜和重球">类比：<strong>橡皮膜和重球</strong></h3><p>想象一个<strong>弹性橡皮膜</strong>，代表<strong>二维的时空</strong>。现在，将一个<strong>重球</strong>（比如一个保龄球）放在橡皮膜的中心，橡皮膜会因为重球的重量而下陷，形成一个“凹坑”。</p><ul><li>在这个模型中，重球就像一个<strong>质量大的天体</strong>（例如地球、太阳或黑洞），它“压弯”了时空。</li><li><strong>橡皮膜的下陷</strong>就是时空被弯曲的结果。</li></ul><h3id="重球引起的凹陷代表时空的弯曲">重球引起的“凹陷”代表时空的弯曲：</h3><ul><li>如果你在这块橡皮膜上再放一个<strong>小球</strong>（比如一个弹珠），小球会沿着“凹坑”的边缘滚动，绕着重球转动。这个行为可以类比为<strong>行星围绕恒星的轨道运动</strong>。</li><li>小球并不是因为某种“力”被吸引，而是它在沿着被大质量物体弯曲的时空运动。这就是爱因斯坦的广义相对论告诉我们的：<strong>引力并不是一种“力”，而是时空的弯曲造成的效果</strong>。</li></ul><h3 id="三维时空的弯曲">三维时空的弯曲：</h3><p>在我们的日常生活中，时空是四维的（包括三维空间和一维时间），但为了简化理解，我们可以将时空的弯曲想象成橡皮膜的二维表面被“压弯”。实际上，<strong>时空的弯曲不仅仅是在空间维度上弯曲，还包括时间维度的变化</strong>。例如，靠近大质量天体（如黑洞），<strong>时间流逝得更慢</strong>，这就是所谓的<strong>引力时间膨胀</strong>。</p><h3 id="总结-1">总结：</h3><ul><li><strong>重球弯曲橡皮膜</strong>的类比帮助我们理解<strong>大质量天体弯曲时空</strong>。</li><li><strong>小球沿弯曲轨道运动</strong>类比了天体如何在弯曲时空中围绕其他天体运动（如地球绕着太阳转）。</li><li>这种弯曲并不局限于空间，还包括<strong>时间维度</strong>，影响时间的流逝。</li></ul><p>通过这个具象化的模型，我们可以理解：物体通过弯曲的时空运动，而引力只是这种时空几何变化的结果。</p><p>根据这个类比，直觉上似乎小球（行星）会最终滚入大球（恒星），但实际上在真实宇宙中并不总是这样。为了更好理解这一点，我们需要注意两个关键的因素：</p><h3 id="惯性运动与轨道稳定性">1.<strong>惯性运动与轨道稳定性：</strong></h3><p>在实际物理世界中，行星不会因为时空弯曲而直接掉进恒星。行星绕恒星运动时，它们受到的引力是由时空弯曲引起的，但行星本身也有<strong>惯性</strong>，即它们沿着某个速度方向前进。如果没有引力的作用，行星会沿着直线运动，但由于引力（时空的弯曲），它们被“牵引”到一个弯曲的轨道上。</p><p>这个轨道运动的结果是：<strong>行星不会直接坠入恒星，而是围绕恒星运行</strong>。只要行星的速度和轨道都保持适当的平衡，行星可以在很长时间内稳定地绕着恒星运转，而不会掉进去。这个过程就像你将小球沿着橡皮膜的弯曲部分快速旋转，它不会立刻滚入中央的重物，而是会沿着弯曲轨道绕圈。</p><h3 id="能量损耗的影响">2. <strong>能量损耗的影响：</strong></h3><p>尽管行星通常不会坠入恒星，但有一些特殊情况可能导致它们逐渐接近恒星。例如，在现实中，如果行星的<strong>轨道能量</strong>因为某种原因（例如大气摩擦、潮汐效应或辐射能量损耗）逐渐耗尽，它可能会慢慢向恒星靠近，并最终坠入。这种情况在一些天体系统中是可能发生的，比如人造卫星如果没有足够的速度保持轨道高度，就会逐渐坠入地球大气层。</p><p>不过，行星围绕恒星运行通常是<strong>稳定的轨道运动</strong>，只要没有外力干扰（如摩擦、碰撞或引力波耗能），行星可以长期处于稳定的轨道上。</p><h3 id="现实中的轨道运动">现实中的轨道运动：</h3><p>在广义相对论的框架下，行星沿着恒星周围的<strong>弯曲时空</strong>路径运行，这是稳定的椭圆或圆形轨道，类似经典物理中的开普勒定律解释的轨道运动。</p><p>所以，尽管类比橡皮膜的模型可能给我们直观感受小球会滚入大球，但在真实宇宙中，行星<strong>由于惯性和时空弯曲的共同作用</strong>，通常不会掉入恒星，而是在稳定的轨道上运行。</p><h3 id="总结-2">总结：</h3><ul><li>行星并不会直接坠入恒星，因为它们的<strong>惯性和引力的平衡</strong>保持了稳定的轨道。</li><li>只有在能量耗尽或受到外力的情况下，行星才可能慢慢坠入恒星。</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文框架</title>
    <link href="/2024/10/05/2024-10-05-%E8%AE%BA%E6%96%87%E7%9B%AE%E5%BD%95/"/>
    <url>/2024/10/05/2024-10-05-%E8%AE%BA%E6%96%87%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="论文框架">论文框架</h2><ol type="1"><li><h3 id="封面学校统一发放">封面：学校统一发放</h3></li><li><h3 id="标题页排版要求">标题页：排版要求</h3><ul><li>标题：四号黑体，居中</li><li>副标题（仅在必要时）：以破折号引导，四号黑体，居中</li><li>作者、指导教师、完成时间：宋体小四，1.5倍行距，缩进6个中文字符</li></ul></li><li><h3 id="鸣谢">鸣谢：</h3><ul><li>鸣谢是在自己论文写作过程中，在学术思想、资料或素材、写作条件等方面提供帮助的单位或个人表达的谢意，要求客观而不夸张，语气诚恳。字数以不超过1页为限。---内容排版要求：小四宋体，首行缩进2个字符</li><li>谢辞排版要求：小四，黑体，首行居中，段后空1行</li></ul></li><li><h3 id="诚信声明">诚信声明</h3></li><li><h3 id="中文摘要">中文摘要：</h3><p>摘要是对论文内容的高度概括（而不是引言），要让读者通过摘要能了解本论文的选题意义、研究方法、基本结论和本论文的创新点。关键词：3-5 个关键词</p><ul><li>排版要求：标题为首行居中，小四黑体，段后空1行，内容小四宋体，首行缩进2字符</li><li>关键词排版要求：首行缩进2字符，小四黑体，后面3-5个关键词小四宋体，相互间用逗号隔开</li></ul></li><li><h3 id="英文摘要">英文摘要：</h3><p>中文摘要的英文翻译，格式要求同上，英文字体为<code>times new roman</code></p></li><li><h3 id="目录">目录：</h3><p>由word生成，章节从引言开始，一级标题为章，二级标题为节，三级标题用“一、二、三……..”，正文四级标题用“1,2, 3……”。目录页显示限在三级标题以内。</p><ul><li>排版要求：“目录”首行居中，三号黑体</li><li>一级标题：黑体小四，无缩进</li><li>二级标题：宋体小四，缩进2字符</li><li>三级标题：宋体小四，缩进3字符</li></ul></li><li><h3 id="正文">正文</h3><ul><li><p>引言</p></li><li><p>导论</p></li><li><p>文献回顾</p></li><li><p>分析内容</p></li><li><p>结论与展望</p></li><li><p>参考文献</p></li><li><p>附录</p></li><li><p>排版要求：</p><blockquote><p>一级标题：首行居中，黑体小三，段后空1行</p><p>二级标题：无缩进，黑体小四，段前空1行</p><p>三级标题：首行缩进2字符，宋体小四，单倍行距</p><p>正文文字：首行缩进2字符，宋体小四，单倍行距</p><p>脚注：宋体5号</p><p>图表居中</p><p>公式缩进2字符</p></blockquote></li><li><p>内容写作规范</p><ol type="1"><li><p>论文在结构上和内容上，能清楚地分为导论、文献综述、主体和结论四个部分（每一部分可根据具体内容赋予一个或更多的特定的章节标题）：</p><ul><li>导论内容：该部分应明确提出研究的问题，该问题的意义（其它诸如题目的来源）等</li><li>文献综述：现有文献对该问题的研究方法、结论以及待研究的问题。文献综述要以一定的逻辑将已有的国内外研究成果进行梳理总结，而不是简单地将所掌握的各种研究文献简单地罗列在一起。</li><li>主体内容：本部分集中体现论文作者所进行的研究分析，应明确研究该问题的切入点，限定分析的前提条件，体现由前提到结论的逻辑推导过程（即论述展开过程）；在使用数据的场合，要注明数据来源，验证方法、基本结果及对结果的经济意义解释；</li><li>结论与展望：总结论文的基本结论及政策含义。结论必须是本文主题内容分析部分的结果，政策建议（或所谓的对策）也应与此紧密相关。最后是本论文研究的局限性和未来继续研究的方向（可选择）</li></ul></li><li><p>毕业论文的核心在于用理论、数据或事实资料证明或论证某个论点。为此必须做到如下几点：</p><ul><li><p>所研究的问题（论文的主题）要清晰准确，并对研究方向、切入点做出明确限定，不能过于宽泛。</p></li><li><p>各章节在逻辑上要连贯，每章节的内容要紧扣由本章节题目限定的具体内容；</p></li><li><p>要言之有据，每一个数据、资料都必须注明出处，而不能用“据研究”、“据报道”、“据分析”等类似表述。论文中每个论点、观点的提出都要对其进行论证，不是论点或建议的堆积；每个结论都应当通过符合逻辑推理而得出，不能用主观的意愿或推测。例如：</p><blockquote><p>如果用如下表述“我认为网络营销存在很多问题”，那么，（I）你要说明你所说的“问题”为什么成为问题；（II）有什么证据表明该问题的存在。</p><p>如果文中有“政府应当增加纺织品出口退税”，那么，（I）政府为什么要增加出口退税，（II）如果说是为了保护纺织品行业，要说明为什么要对它保护等等。</p></blockquote></li><li><p>学术论文研究某一经济问题，目的是揭示经济现象背后的实质，要用论证的语言来写，而不是工作总结或类似政府工作报告中的旨在凝聚人心的口号，不能用感情的、煽动的语言，例：</p><blockquote><p>可以写“因为中美贸易差额损害了某些美国利益集团（包括美国劳工）的利益，它们会向通过各种渠道向美国政府/国会施压，迫使人民币升值以缓解来自中国的竞争压力”。但要避免诸如“美国迫使人民币升值是为了阻碍中国经济的崛起，用心极其险恶”等字样。</p></blockquote></li></ul></li><li><p>参考文献和注的规范使用：</p><ul><li><p>参考文献体现了论文作者对所研究问题阅读的深度和广度，参考文献符合引用规范是一篇合格论文的基本要求。</p><ol type="1"><li><p>正文中引用的文献与论文后面的参考文献必须一一对应，即凡正文中引用的文献在文后参考文献条目中都能找到，正文中没有引用或提到的不能放在参考文献条目中；</p></li><li><p>应参考 5 篇以上中文核心期刊（如 CSSCI索引包含的期刊）、3篇以上外文期刊（不含电子刊物的文献，如Workingpaper）上的重要文献，这里的重要文献是指在所选研究领域极具影响力、在该领域研究中引用率极高的作品[例如，查阅这方面的最新研究文献，总能（或以极高的频率）从这些文献中看到对上述定义的重要文献的引用。</p></li><li><p>文后参考文献应编号，并将中文和英文分开排列：英文文献按（第一）作者姓氏第一字母顺序排列；中文文献可以按作者姓（名）的拼音顺序或汉字笔画排列；</p></li><li><p>参考文献在包括如下内容并按下列顺序排列：作者，出版年份，文章标题，刊物名称（斜体），卷，起止页；例：</p><blockquote><p>[正文中] Hau (2000) introduces non-traded goods into theanalysis.</p><p>[参考文献中] Hau, H., 2000. Exchange rate determination: the role offactor price rigidities and non-tradables. Journal of InternationalEconomics 50, 421–448.</p></blockquote></li></ol></li><li><p>注（使用脚注）是不宜放在正文但又需要对正文提到的内容加以解释或说明（或做其它延伸解释）的内容，因此是否使用要视论文内容而定。例：</p><blockquote><p>[正文中]Second, equilibrium prices set above marginal costrationalize demand-determined output in the short run, since firms arenot losing money on the additional production1. Third, monopoly powermeans that…….</p><p>[脚注中]1，As is discussed below, this is only true if the shock isnot so large as to drive marginal costs above marginal revenues.</p></blockquote></li></ul></li></ol></li></ul></li></ol><h2 id="论文题目"><strong>论文题目</strong></h2><p>I. <strong>引言</strong></p><p>A. 研究背景和意义</p><p>B. 研究目的和意义</p><p>C. 研究范围和结构</p><ol start="2" type="I"><li><strong>文献综述</strong></li></ol><p>A. 国内外环境保护政策执行研究现状</p><p>B. 相关理论和研究框架介绍</p><ol start="3" type="I"><li><strong>研究方法</strong></li></ol><p>A. 数据收集与采样方法</p><p>B. 数据分析方法和工具</p><ol start="4" type="I"><li><strong>镇远县环境保护政策执行情况分析</strong></li></ol><p>A. 政策执行机制与协调</p><p>B. 利益相关者参与与反馈</p><p>C. 环境保护政策执行效果评估</p><p>V. <strong>问题分析与讨论</strong></p><p>A. 政策执行中的问题与挑战</p><p>B. 政府部门能力与资源投入分析</p><p>C. 政策执行对环境和社会经济的影响分析</p><ol start="6" type="I"><li><strong>结论与建议</strong></li></ol><p>A. 研究总结与归纳</p><p>B. 政策改进建议和实施建议</p><ol start="7" type="I"><li><strong>参考文献</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>费曼学习法</title>
    <link href="/2024/10/05/2024-10-05-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
    <url>/2024/10/05/2024-10-05-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="费曼学习法">费曼学习法</h1><hr /><h3 id="选择目标领域并完全了解这个概念">1.选择目标领域，并完全了解这个概念</h3><p>​ 将需要学习的概念写在纸上，尽可能的去熟悉这个概念。</p><ul><li>一定要将自己脑海的语言组织出来并反应在书面上</li><li>如果写不出来再回去看哪里不懂</li></ul><h3 id="向别人复述这个概念">2. 向别人复述这个概念</h3><p>​向身边人复述一遍你所学习到的知识，如果没有，就只好假装自己是一个老师，向学生复述这个概念，记住，尽量使用简单的语言，这一步是为了让你更好的融入自己的理解。在复述时，一定会在所难免的会卡住，或者结巴，叙述不完整。这时候，恭喜你，喜提知识概念薄弱点。这时候，将这些薄弱点重新学习巩固一遍，直到真正理解。</p><h3 id="纠错之后的再次学习">3. 纠错之后的再次学习</h3><p>​把刚才学习的不完善的地方再次学习，回归原材料或者书本本身，直到能够流畅地阐述学习的知识点。</p><h3 id="回顾和精简">4. 回顾和精简</h3><p>​走完上述三个步骤之后，想必你们可以能够很流畅精准地将概念完整的阐述出来。而现在我们需要做的是用我们理解的语言去阐述知识概念。</p><p>​当你完成，请从头重复这整个过程。但是这一次要简化你的说法或使用图形的比喻。如果你还是一样解释的太冗长或混乱，那你可能并不太了解他，所以你必须重复的进行修饰，直到最好。</p>]]></content>
    
    
    <categories>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原理</tag>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经元学习</title>
    <link href="/2024/10/04/2024-10-04-%E7%A5%9E%E7%BB%8F%E5%85%83%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/04/2024-10-04-%E7%A5%9E%E7%BB%8F%E5%85%83%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2id="第一步了解神经网络的基本概念">第一步：了解神经网络的基本概念</h2><p>:smile:矩阵点乘规则：<strong>当矩阵A的列数（column）等于矩阵B的行数（row）时，A与B可以相乘</strong></p><ul><li>2行3列 * 3行2列 = 2行2列 （取第一个矩阵的行和第二个矩阵的列）</li><li>3行2列 * 2行3列 = 3行3列 （取第一个矩阵的行和第二个矩阵的列）</li></ul><p>神经网络是一种模拟生物神经网络的计算模型，用于处理复杂的模式识别问题。它们由一系列<strong>神经元</strong>（或称节点）组成，这些神经元通过<strong>权重</strong>相连，权重是神经网络中最重要的参数之一。每个神经元接收输入信号，并应用一个<strong>激活函数</strong>来决定输出信号。</p><h4 id="关键术语">关键术语：</h4><ol type="1"><li><strong>神经元（Neuron）</strong>：基本的处理单元，接收输入并生成输出。</li><li><strong>权重（Weight）</strong>：连接神经元之间的参数，决定信号的强度。</li><li><strong>偏置（Bias）</strong>：一个神经元输出中独立于输入的项，帮助调整输出。</li><li><strong>激活函数（ActivationFunction）</strong>：用于非线性转换神经元的输出，例如Sigmoid, Tanh,ReLU。</li></ol><h4 id="一个简单的神经网络结构">一个简单的神经网络结构：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">输入层（<span class="hljs-keyword">Input</span> Layer） → 隐藏层（Hidden Layer） → 输出层（<span class="hljs-keyword">Output</span> Layer）<br></code></pre></td></tr></table></figure><ul><li><strong>输入层</strong>：接收输入数据。</li><li><strong>隐藏层</strong>：中间层，可以有多层，用于提取特征。</li><li><strong>输出层</strong>：输出最终的结果。</li></ul><h3 id="练习">练习：</h3><ol type="1"><li><p>请你简单描述神经网络是什么。</p></li><li><p>列出并解释神经网络的三个主要组件。</p><p>神经网络是一种模拟生物神经网络的计算模型，用于处理复杂的模式识别问题；三个主要组件是输入层、隐藏层、输出层</p></li></ol><h2id="第二步理解一个简单神经元的工作原理">第二步：理解一个简单神经元的工作原理</h2><p>一个神经元接收输入、计算加权和并应用激活函数来生成输出。让我们更详细地看一下一个简单神经元的工作过程：</p><h4 id="神经元的数学表达">神经元的数学表达：</h4><p>假设我们有一个输入 ( x )，它经过权重 ( w ) 和偏置 ( b )调整，然后通过激活函数 ( f ) 来生成输出 ( y )：</p><p>$ y = f(w x + b) $</p><p>其中： - ( x ) 是输入。 - ( w ) 是权重。 - ( b ) 是偏置。 - ( f )是激活函数（例如：Sigmoid、ReLU 等）。</p><h4 id="常见激活函数">常见激活函数：</h4><ol type="1"><li><p><strong>Sigmoid 函数</strong>：将输入映射到 (0) 和 (1) 之间。 $(x) = $</p></li><li><p><strong>ReLU 函数</strong>：将负数部分映射为 (0)，正数部分不变。$ (x) = (0, x) $</p></li></ol><h4 id="练习-1">练习：</h4><ol type="1"><li>假设你有一个输入 ( x = 2 )，权重 ( w = 0.5 )，偏置 ( b = 1)，并且使用 Sigmoid 激活函数。计算输出 ( y )。</li><li>为什么激活函数是必要的？</li></ol><p>输入 x=2，权重 w=0.5，偏置 b=1，计算输出 y。</p><p>计算步骤如下：</p><ul><li>首先，计算加权和及偏置： <spanclass="math inline">\(w⋅x+b=0.5⋅2+1=1+1=2\)</span></li><li>然后，计算 Sigmoid 函数的值： <span class="math inline">\(\sigma(2)= \frac{1}{1 + e^{-2}} \approx 0.88\)</span></li></ul><p>因此，输出$ y≈0.88$</p><h4 id="为什么激活函数是必要的">为什么激活函数是必要的？</h4><p>激活函数引入了非线性，使得神经网络能够学习和表示复杂的模式。如果没有激活函数，网络只会进行线性变换（输入的加权求和），这无法有效地处理复杂的模式或决策问题。</p><h2 id="第三步构建一个简单的神经元">第三步：构建一个简单的神经元</h2><p>接下来，我们将把刚才学到的知识应用于构建一个简单的神经元，并用 Python代码来实现它。</p><h4 id="构建步骤">构建步骤：</h4><ol type="1"><li><strong>定义神经元的结构</strong>：包括输入、权重、偏置和激活函数。</li><li><strong>实现加权和及偏置</strong>：计算 <spanclass="math inline">\(( w \cdot x + b )\)</span>。</li><li><strong>应用激活函数</strong>：使用 Sigmoid 函数来计算输出。</li></ol><h3 id="python-代码实现">Python 代码实现</h3><p>以下是一个简单神经元的 Python 实现，包括输入、权重、偏置和 Sigmoid激活函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-comment"># 定义 Sigmoid 激活函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + math.exp(-x))<br><br><span class="hljs-comment"># 输入、权重和偏置</span><br>x = <span class="hljs-number">2</span>            <span class="hljs-comment"># 输入</span><br>w = <span class="hljs-number">0.5</span>          <span class="hljs-comment"># 权重</span><br>b = <span class="hljs-number">1</span>            <span class="hljs-comment"># 偏置</span><br><br><span class="hljs-comment"># 计算加权和及偏置</span><br>z = w * x + b<br><br><span class="hljs-comment"># 应用 Sigmoid 激活函数</span><br>y = sigmoid(z)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;输出 y = <span class="hljs-subst">&#123;y&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="代码解释">代码解释：</h4><ol type="1"><li>定义了一个 <code>sigmoid</code> 函数来计算 Sigmoid激活函数的值。</li><li>设置了输入 ( x )、权重 ( w ) 和偏置 ( b )。</li><li>计算了加权和及偏置 ( z )。</li><li>使用 <code>sigmoid</code> 函数计算输出 ( y )。</li><li>打印输出结果。</li></ol><h3 id="练习-2">练习：</h3><ol type="1"><li>请在你的 Python 环境中运行上述代码，观察输出。</li><li>尝试修改输入 ( x )、权重 ( w ) 和偏置 ( b )的值，观察输出是如何变化的。</li></ol><h2id="第四步构建一个简单的神经网络">第四步：构建一个简单的神经网络</h2><p>我们将构建一个包含输入层、一个隐藏层和输出层的简单神经网络。这个神经网络将接受两个输入，经过一个隐藏层处理后，生成一个输出。</p><h4 id="神经网络结构">神经网络结构：</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入层 <span class="hljs-comment">(2 个输入)</span> → 隐藏层 <span class="hljs-comment">(2 个神经元)</span> → 输出层 <span class="hljs-comment">(1 个输出)</span><br></code></pre></td></tr></table></figure><h3 id="具体步骤">具体步骤：</h3><ol type="1"><li><strong>初始化输入、权重和偏置</strong>。</li><li><strong>计算隐藏层的输出</strong>。</li><li><strong>计算输出层的输出</strong>。</li></ol><h3 id="python-代码实现-1">Python 代码实现</h3><p>以下代码展示了如何构建和运行这个简单的神经网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 定义 Sigmoid 激活函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br><br><span class="hljs-comment"># 输入</span><br>inputs = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])  <span class="hljs-comment"># 2 个输入</span><br><br><span class="hljs-comment"># 权重和偏置</span><br><span class="hljs-comment"># 隐藏层 (2 个神经元，每个神经元有 2 个输入)</span><br>hidden_weights = np.array([[<span class="hljs-number">0.5</span>, -<span class="hljs-number">0.6</span>], <br>                           [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>]])  <span class="hljs-comment"># 权重矩阵 2x2</span><br>hidden_bias = np.array([<span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])      <span class="hljs-comment"># 偏置向量</span><br><br><span class="hljs-comment"># 输出层 (1 个神经元，2 个输入)</span><br>output_weights = np.array([<span class="hljs-number">0.4</span>, -<span class="hljs-number">0.7</span>])  <span class="hljs-comment"># 权重向量</span><br>output_bias = <span class="hljs-number">0.1</span>                       <span class="hljs-comment"># 偏置</span><br><br><span class="hljs-comment"># 计算隐藏层的输出</span><br>hidden_input = np.dot(hidden_weights, inputs) + hidden_bias<br>hidden_output = sigmoid(hidden_input)<br><br><span class="hljs-comment"># 计算输出层的输出</span><br>output_input = np.dot(output_weights, hidden_output) + output_bias<br>output = sigmoid(output_input)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;隐藏层输出: <span class="hljs-subst">&#123;hidden_output&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终输出: <span class="hljs-subst">&#123;output&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="代码解释-1">代码解释：</h4><ol type="1"><li><strong>定义 Sigmoid 激活函数</strong>：使用 <code>numpy</code> 的<code>exp</code> 函数处理数组。</li><li><strong>初始化输入</strong>：<code>inputs</code> 是一个包含 2个输入的数组。</li><li><strong>初始化隐藏层的权重和偏置</strong>：<code>hidden_weights</code>是 2x2 的权重矩阵，<code>hidden_bias</code> 是包含 2 个偏置的数组。</li><li><strong>初始化输出层的权重和偏置</strong>：<code>output_weights</code>是 1x2 的权重向量，<code>output_bias</code> 是一个单一的偏置值。</li><li><strong>计算隐藏层的输出</strong>：使用 <code>np.dot</code>计算权重和输入的点积，加上偏置，再通过 <code>sigmoid</code>函数处理。</li><li><strong>计算输出层的输出</strong>：类似地，使用隐藏层的输出计算输出层的最终输出。</li></ol><h3 id="练习-3">练习：</h3><ol type="1"><li>请在你的 Python 环境中运行上述代码，并观察输出结果。</li><li>尝试修改输入、隐藏层和输出层的权重和偏置，观察输出是如何变化的。</li></ol><h2id="第五步理解神经网络的训练过程">第五步：理解神经网络的训练过程</h2><p>神经网络的训练主要包括两个阶段：<strong>前向传播（ForwardPropagation）</strong> 和<strong>反向传播（Backpropagation）</strong>。我们来逐步理解这两个过程。</p><h4 id="前向传播forward-propagation">1. 前向传播（ForwardPropagation）</h4><p>前向传播是将输入数据通过神经网络，计算出预测的输出。</p><p><strong>步骤</strong>：</p><ol type="1"><li>输入数据通过输入层传递到隐藏层。</li><li>隐藏层的输出传递到输出层。</li><li>输出层生成最终的预测输出。</li></ol><h4 id="损失函数loss-function">2. 损失函数（Loss Function）</h4><p>损失函数用于衡量预测输出与真实值之间的差距。一个常见的损失函数是<strong>均方误差（MeanSquared Error, MSE）</strong>：</p><p>$ = _{i=1}^N ( - y_i)^2 $</p><p>其中： - $ N $是样本数量。 - $ $是预测值。 - <spanclass="math inline">\(y_i\)</span> 是真实值。</p><h4 id="反向传播backpropagation">3. 反向传播（Backpropagation）</h4><p>反向传播用于调整神经网络中的权重和偏置，以最小化损失函数的值。它基于梯度下降算法，通过计算损失函数相对于每个权重和偏置的偏导数来更新它们。</p><p><strong>步骤</strong>： 1. 计算损失函数的梯度。 2.反向传播这些梯度，通过链式法则调整每一层的权重和偏置。</p><h3 id="python-代码实现简化版">Python 代码实现（简化版）</h3><p>我们将实现一个简单的神经网络训练过程，使用一个输入样本进行训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 定义激活函数及其导数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid_derivative</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">1</span> - x)<br><br><span class="hljs-comment"># 输入数据和真实输出</span><br>inputs = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>true_output = np.array([<span class="hljs-number">0.8</span>])<br><br><span class="hljs-comment"># 初始化权重和偏置</span><br>hidden_weights = np.array([[<span class="hljs-number">0.5</span>, -<span class="hljs-number">0.6</span>], <br>                           [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>]])<br>hidden_bias = np.array([<span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br><br>output_weights = np.array([[<span class="hljs-number">0.4</span>, -<span class="hljs-number">0.7</span>]])<br>output_bias = <span class="hljs-number">0.1</span><br><br><span class="hljs-comment"># 学习率</span><br>learning_rate = <span class="hljs-number">0.5</span><br><br><span class="hljs-comment"># 前向传播</span><br>hidden_input = np.dot(hidden_weights, inputs) + hidden_bias<br>hidden_output = sigmoid(hidden_input)<br><br>output_input = np.dot(output_weights, hidden_output) + output_bias<br>predicted_output = sigmoid(output_input)<br><br><span class="hljs-comment"># 计算损失（均方误差）</span><br>loss = np.mean((true_output - predicted_output) ** <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 反向传播</span><br><span class="hljs-comment"># 输出层误差</span><br>output_error = true_output - predicted_output<br>output_delta = output_error * sigmoid_derivative(predicted_output)<br><br><span class="hljs-comment"># 隐藏层误差</span><br>hidden_error = output_delta.dot(output_weights)<br>hidden_delta = hidden_error * sigmoid_derivative(hidden_output)<br><br><span class="hljs-comment"># 更新权重和偏置</span><br>output_weights += learning_rate * output_delta * hidden_output<br>output_bias += learning_rate * output_delta<br><br>hidden_weights += learning_rate * np.outer(hidden_delta, inputs)<br>hidden_bias += learning_rate * hidden_delta<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测输出: <span class="hljs-subst">&#123;predicted_output&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;损失: <span class="hljs-subst">&#123;loss&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;更新后的权重和偏置: <span class="hljs-subst">&#123;output_weights&#125;</span>, <span class="hljs-subst">&#123;output_bias&#125;</span>, <span class="hljs-subst">&#123;hidden_weights&#125;</span>, <span class="hljs-subst">&#123;hidden_bias&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="代码解释-2">代码解释：</h4><ol type="1"><li><strong>定义激活函数及其导数</strong>：<code>sigmoid</code> 及<code>sigmoid_derivative</code>。</li><li><strong>初始化输入和真实输出</strong>：<code>inputs</code> 和<code>true_output</code>。</li><li><strong>初始化权重和偏置</strong>：<code>hidden_weights</code>、<code>hidden_bias</code>、<code>output_weights</code>和 <code>output_bias</code>。</li><li><strong>设置学习率</strong>。</li><li><strong>前向传播</strong>：计算隐藏层和输出层的输出。</li><li><strong>计算损失</strong>：使用均方误差。</li><li><strong>反向传播</strong>：计算输出层和隐藏层的误差及更新量。</li><li><strong>更新权重和偏置</strong>。</li></ol><h3 id="练习-4">练习：</h3><ol type="1"><li>在你的 Python 环境中运行上述代码，观察输出和权重更新。</li><li>尝试修改输入、真实输出、权重和偏置的初始值，观察训练过程中的变化。</li></ol><h2 id="第六步扩展神经网络">第六步：扩展神经网络</h2><p>我们将扩展神经网络，增加更多的隐藏层和神经元，以处理更复杂的数据。然后，我们会使用批量梯度下降和其他优化技巧。</p><h4 id="批量梯度下降batch-gradient-descent">批量梯度下降（Batch GradientDescent）</h4><p>批量梯度下降是训练神经网络的一个重要方法，它在整个训练数据集上计算损失并更新权重。这种方法有助于稳定训练过程。</p><h4 id="扩展网络的步骤">扩展网络的步骤：</h4><ol type="1"><li><strong>增加更多的隐藏层</strong>：可以通过增加更多的隐藏层和神经元来提高网络的表现力。</li><li><strong>引入更多激活函数</strong>：比如ReLU，可以处理更复杂的非线性关系。</li><li><strong>使用批量梯度下降</strong>：在整个训练集上计算损失并更新权重。</li></ol><h3 id="python-代码实现扩展版">Python 代码实现（扩展版）</h3><p>以下代码展示了一个包含更多隐藏层的神经网络，并使用批量梯度下降来训练：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 定义激活函数及其导数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid_derivative</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">1</span> - x)<br><br><span class="hljs-comment"># 数据集（简单示例）</span><br>inputs = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.3</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.8</span>]])<br>true_outputs = np.array([[<span class="hljs-number">0.8</span>], [<span class="hljs-number">0.4</span>], [<span class="hljs-number">0.6</span>]])<br><br><span class="hljs-comment"># 初始化权重和偏置</span><br>input_size = <span class="hljs-number">2</span><br>hidden_size1 = <span class="hljs-number">3</span><br>hidden_size2 = <span class="hljs-number">2</span><br>output_size = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 隐藏层 1</span><br>hidden_weights1 = np.random.rand(hidden_size1, input_size)<br>hidden_bias1 = np.random.rand(hidden_size1)<br><br><span class="hljs-comment"># 隐藏层 2</span><br>hidden_weights2 = np.random.rand(hidden_size2, hidden_size1)<br>hidden_bias2 = np.random.rand(hidden_size2)<br><br><span class="hljs-comment"># 输出层</span><br>output_weights = np.random.rand(output_size, hidden_size2)<br>output_bias = np.random.rand(output_size)<br><br><span class="hljs-comment"># 学习率</span><br>learning_rate = <span class="hljs-number">0.5</span><br><br><span class="hljs-comment"># 训练过程</span><br>epochs = <span class="hljs-number">10000</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-comment"># 前向传播</span><br>    hidden_input1 = np.dot(inputs, hidden_weights1.T) + hidden_bias1<br>    hidden_output1 = sigmoid(hidden_input1)<br><br>    hidden_input2 = np.dot(hidden_output1, hidden_weights2.T) + hidden_bias2<br>    hidden_output2 = sigmoid(hidden_input2)<br><br>    output_input = np.dot(hidden_output2, output_weights.T) + output_bias<br>    predicted_output = sigmoid(output_input)<br><br>    <span class="hljs-comment"># 计算损失</span><br>    loss = np.mean((true_outputs - predicted_output) ** <span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 反向传播</span><br>    <span class="hljs-comment"># 输出层误差</span><br>    output_error = true_outputs - predicted_output<br>    output_delta = output_error * sigmoid_derivative(predicted_output)<br><br>    <span class="hljs-comment"># 隐藏层 2 误差</span><br>    hidden_error2 = np.dot(output_delta, output_weights)<br>    hidden_delta2 = hidden_error2 * sigmoid_derivative(hidden_output2)<br><br>    <span class="hljs-comment"># 隐藏层 1 误差</span><br>    hidden_error1 = np.dot(hidden_delta2, hidden_weights2)<br>    hidden_delta1 = hidden_error1 * sigmoid_derivative(hidden_output1)<br><br>    <span class="hljs-comment"># 更新权重和偏置</span><br>    output_weights += learning_rate * np.dot(output_delta.T, hidden_output2)<br>    output_bias += learning_rate * np.mean(output_delta, axis=<span class="hljs-number">0</span>)<br><br>    hidden_weights2 += learning_rate * np.dot(hidden_delta2.T, hidden_output1)<br>    hidden_bias2 += learning_rate * np.mean(hidden_delta2, axis=<span class="hljs-number">0</span>)<br><br>    hidden_weights1 += learning_rate * np.dot(hidden_delta1.T, inputs)<br>    hidden_bias1 += learning_rate * np.mean(hidden_delta1, axis=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 打印损失</span><br>    <span class="hljs-keyword">if</span> epoch % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;epoch&#125;</span>, Loss: <span class="hljs-subst">&#123;loss&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 最终预测输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终预测输出: <span class="hljs-subst">&#123;predicted_output&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="代码解释-3">代码解释：</h4><ol type="1"><li><strong>扩展数据集</strong>：使用多个样本。</li><li><strong>增加隐藏层</strong>：增加一个额外的隐藏层<code>hidden_layer2</code>。</li><li><strong>批量梯度下降</strong>：在每个 epoch 中更新权重和偏置。</li><li><strong>输出预测结果</strong>：打印损失并显示最终预测输出。</li></ol><h3 id="练习-5">练习：</h3><ol type="1"><li>请在你的 Python 环境中运行上述代码，并观察输出结果。</li><li>尝试调整网络结构（如增加神经元数量或隐藏层），观察对训练过程的影响。</li><li>了解批量大小（batch size）和 epoch 数对训练的影响。</li></ol><h3 id="常见问题">常见问题：</h3><ol type="1"><li><strong>如何避免过拟合？</strong><ul><li>使用正则化技术（如 L2 正则化）。</li><li>使用 Dropout 技术。</li><li>增加数据集。</li></ul></li><li><strong>如何选择学习率？</strong><ul><li>学习率过高会导致训练不稳定，过低会导致训练过慢。可以使用学习率调度器逐步调整。</li></ul></li></ol><h3 id="true-outputs-超过-1-的情况">True Outputs 超过 1 的情况</h3><h4 id="使用-sigmoid-作为输出层激活函数">1. 使用 Sigmoid作为输出层激活函数</h4><p><strong>Sigmoid 函数</strong>的输出范围是 0 到 1。如果<code>true_outputs</code> 超过 1，会导致以下问题：</p><ul><li><strong>不匹配的输出范围</strong>：Sigmoid 函数的输出永远不会超过1，因此 <code>true_outputs</code> 超过 1会导致较大的误差，可能影响训练效果。</li><li><strong>损失函数计算问题</strong>：如果使用均方误差 (MSE)作为损失函数，过大的误差会导致梯度过大，可能使训练不稳定。</li></ul><h4 id="解决方法">解决方法：</h4><ul><li><strong>归一化输出</strong>：将 <code>true_outputs</code> 归一化到 0到 1 范围内，使之与 Sigmoid 函数的输出匹配。</li><li><strong>使用不同的激活函数</strong>：如果输出不应该被限制在 0 到 1范围，可以考虑其他激活函数，如线性激活函数（即没有激活函数）。</li></ul><h3 id="修改代码以处理-true-outputs-超过-1">修改代码以处理 True Outputs超过 1</h3><h4 id="方法-1归一化-true-outputs">方法 1：归一化 True Outputs</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设你的 true_outputs 原始范围是 0 到 10</span><br>true_outputs = np.array([[<span class="hljs-number">8</span>], [<span class="hljs-number">4</span>], [<span class="hljs-number">6</span>]])<br><br><span class="hljs-comment"># 归一化 true_outputs 到 0 到 1</span><br>true_outputs = true_outputs / <span class="hljs-number">10.0</span><br></code></pre></td></tr></table></figure><h4 id="方法-2使用线性激活函数">方法 2：使用线性激活函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 线性激活函数及其导数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear_derivative</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 修改代码中 sigmoid 函数部分为线性函数</span><br>hidden_output2 = sigmoid(hidden_input2)  <span class="hljs-comment"># 隐藏层仍然使用 Sigmoid</span><br>output_input = np.dot(hidden_output2, output_weights.T) + output_bias<br>predicted_output = linear(output_input)  <span class="hljs-comment"># 输出层使用线性函数</span><br><br><span class="hljs-comment"># 反向传播</span><br>output_error = true_outputs - predicted_output<br>output_delta = output_error * linear_derivative(predicted_output)<br></code></pre></td></tr></table></figure><h3id="示例代码使用线性激活函数的完整示例">示例代码：使用线性激活函数的完整示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 定义激活函数及其导数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid_derivative</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">1</span> - x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linear_derivative</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 数据集（简单示例）</span><br>inputs = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.3</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.8</span>]])<br>true_outputs = np.array([[<span class="hljs-number">8</span>], [<span class="hljs-number">4</span>], [<span class="hljs-number">6</span>]])<br><br><span class="hljs-comment"># 初始化权重和偏置</span><br>input_size = <span class="hljs-number">2</span><br>hidden_size1 = <span class="hljs-number">3</span><br>hidden_size2 = <span class="hljs-number">2</span><br>output_size = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 隐藏层 1</span><br>hidden_weights1 = np.random.rand(hidden_size1, input_size)<br>hidden_bias1 = np.random.rand(hidden_size1)<br><br><span class="hljs-comment"># 隐藏层 2</span><br>hidden_weights2 = np.random.rand(hidden_size2, hidden_size1)<br>hidden_bias2 = np.random.rand(hidden_size2)<br><br><span class="hljs-comment"># 输出层</span><br>output_weights = np.random.rand(output_size, hidden_size2)<br>output_bias = np.random.rand(output_size)<br><br><span class="hljs-comment"># 学习率</span><br>learning_rate = <span class="hljs-number">0.5</span><br><br><span class="hljs-comment"># 训练过程</span><br>epochs = <span class="hljs-number">10000</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-comment"># 前向传播</span><br>    hidden_input1 = np.dot(inputs, hidden_weights1.T) + hidden_bias1<br>    hidden_output1 = sigmoid(hidden_input1)<br><br>    hidden_input2 = np.dot(hidden_output1, hidden_weights2.T) + hidden_bias2<br>    hidden_output2 = sigmoid(hidden_input2)<br><br>    output_input = np.dot(hidden_output2, output_weights.T) + output_bias<br>    predicted_output = linear(output_input)  <span class="hljs-comment"># 输出层使用线性函数</span><br><br>    <span class="hljs-comment"># 计算损失</span><br>    loss = np.mean((true_outputs - predicted_output) ** <span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 反向传播</span><br>    <span class="hljs-comment"># 输出层误差</span><br>    output_error = true_outputs - predicted_output<br>    output_delta = output_error * linear_derivative(predicted_output)<br><br>    <span class="hljs-comment"># 隐藏层 2 误差</span><br>    hidden_error2 = np.dot(output_delta, output_weights)<br>    hidden_delta2 = hidden_error2 * sigmoid_derivative(hidden_output2)<br><br>    <span class="hljs-comment"># 隐藏层 1 误差</span><br>    hidden_error1 = np.dot(hidden_delta2, hidden_weights2)<br>    hidden_delta1 = hidden_error1 * sigmoid_derivative(hidden_output1)<br><br>    <span class="hljs-comment"># 更新权重和偏置</span><br>    output_weights += learning_rate * np.dot(output_delta.T, hidden_output2)<br>    output_bias += learning_rate * np.mean(output_delta, axis=<span class="hljs-number">0</span>)<br><br>    hidden_weights2 += learning_rate * np.dot(hidden_delta2.T, hidden_output1)<br>    hidden_bias2 += learning_rate * np.mean(hidden_delta2, axis=<span class="hljs-number">0</span>)<br><br>    hidden_weights1 += learning_rate * np.dot(hidden_delta1.T, inputs)<br>    hidden_bias1 += learning_rate * np.mean(hidden_delta1, axis=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 打印损失</span><br>    <span class="hljs-keyword">if</span> epoch % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;epoch&#125;</span>, Loss: <span class="hljs-subst">&#123;loss&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 最终预测输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终预测输出: <span class="hljs-subst">&#123;predicted_output&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="总结">总结</h3><ul><li><strong>归一化 <code>true_outputs</code></strong>是一种简单的处理方法，可以让你的网络输出与 <code>true_outputs</code>匹配。</li><li><strong>使用线性激活函数</strong> 可以适应范围超过 0-1 的<code>true_outputs</code>，适合于回归问题等情况。</li></ul><p>你可以根据需要选择合适的处理方法，或者结合两者，确保网络输出与目标范围匹配。如果有进一步的问题或需要更多解释，请随时告知！</p><h2 id="各类神经网络在投资中的应用">各类神经网络在投资中的应用</h2><p>在投资领域，神经网络和深度学习技术有许多应用，主要用于数据分析、市场预测、交易策略的自动化等。以下是各类神经网络在投资中的具体应用及适用情况：</p><ol type="1"><li><strong>高级优化算法</strong><ul><li><strong>应用场景</strong>：优化交易策略、调优模型参数。</li><li><strong>适用情况</strong>：适用于需要精确控制模型训练过程的场景，如量化交易策略优化。</li></ul></li><li><strong>深度学习框架</strong><ul><li><strong>应用场景</strong>：快速构建和部署复杂的模型，如股票价格预测、投资组合优化。</li><li><strong>适用情况</strong>：适用于需要构建大规模深度学习模型的任务。</li></ul></li><li><strong>卷积神经网络（CNN）</strong><ul><li><strong>应用场景</strong>：分析金融市场中的图像数据，如股票走势图、财经新闻图片。</li><li><strong>适用情况</strong>：适用于从图像数据中提取信息，例如技术图表分析，但在投资中应用较少，除非涉及图像或图表识别。</li></ul></li><li><strong>递归神经网络（RNN）</strong><ul><li><strong>应用场景</strong>：时间序列预测，如股票价格走势预测、经济指标分析。</li><li><strong>适用情况</strong>：非常适合处理金融时间序列数据，能捕捉长期依赖关系。LSTM和 GRU 是常用的变体。</li></ul></li><li><strong>正则化技术</strong><ul><li><strong>应用场景</strong>：防止模型在训练数据上过拟合，提高模型的泛化能力。</li><li><strong>适用情况</strong>：适用于所有神经网络模型，以提高其稳定性和性能。</li></ul></li><li><strong>超参数调优</strong><ul><li><strong>应用场景</strong>：自动寻找最佳模型参数组合，如调优学习率、层数、神经元数量。</li><li><strong>适用情况</strong>：适用于需要自动化调优过程的场景。</li></ul></li><li><strong>迁移学习</strong><ul><li><strong>应用场景</strong>：利用预训练模型在金融数据上微调，如利用新闻分类模型来分析财经新闻对市场的影响。</li><li><strong>适用情况</strong>：适用于有相关预训练模型且新任务数据有限的情况。</li></ul></li><li><strong>生成对抗网络（GAN）</strong><ul><li><strong>应用场景</strong>：生成虚拟的市场数据用于模拟或测试交易策略。</li><li><strong>适用情况</strong>：适用于生成新的数据集或增强数据集，但在金融领域应用较少。</li></ul></li></ol><h3 id="最适合投资的神经网络类型">最适合投资的神经网络类型</h3><p><strong>递归神经网络（RNN）</strong>及其变体（如 LSTM 和GRU）是投资领域最常用的神经网络类型，特别适合时间序列预测。这类模型能够处理过去的金融数据并预测未来的市场行为。</p><p><strong>深度学习框架</strong>（如 TensorFlow 和PyTorch）能够帮助你快速构建和部署这些复杂的模型。此外，结合<strong>高级优化算法</strong>和<strong>正则化技术</strong>，可以进一步提高模型的性能和稳定性。</p><h3 id="实现步骤">实现步骤</h3><h4 id="使用-rnnlstm-进行股票价格预测">使用 RNN/LSTM进行股票价格预测</h4><ol type="1"><li><strong>数据准备</strong><ul><li>收集并预处理时间序列数据，如股票价格、交易量等。</li><li>常见数据源包括 Yahoo Finance、Alpha Vantage 等。</li></ul></li><li><strong>模型构建</strong><ul><li>构建 RNN 或 LSTM 模型，设定输入层、隐藏层和输出层。</li><li>定义损失函数（如 MSE）和优化算法（如 Adam）。</li></ul></li><li><strong>模型训练</strong><ul><li>使用历史数据训练模型，使用批量梯度下降优化模型参数。</li><li>可以设置多次迭代（epochs）和适当的学习率。</li></ul></li><li><strong>模型评估</strong><ul><li>在测试数据集上评估模型性能，使用指标如 RMSE、MAE 等。</li></ul></li><li><strong>预测和应用</strong><ul><li>使用训练好的模型进行未来价格预测，结合投资策略进行应用。</li></ul></li></ol><h3 id="代码示例">代码示例</h3><p>以下是使用 LSTM 进行股票价格预测的简化示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> MinMaxScaler<br><br><span class="hljs-comment"># 读取数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_stock_data</span>(<span class="hljs-params">file_path</span>):<br>    data = pd.read_csv(file_path, parse_dates=[<span class="hljs-string">&#x27;Date&#x27;</span>], index_col=<span class="hljs-string">&#x27;Date&#x27;</span>)<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-comment"># 特征工程：计算技术指标</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_technical_indicators</span>(<span class="hljs-params">data</span>):<br>    data[<span class="hljs-string">&#x27;SMA&#x27;</span>] = data[<span class="hljs-string">&#x27;close&#x27;</span>].rolling(window=<span class="hljs-number">10</span>).mean()<br>    data[<span class="hljs-string">&#x27;EMA&#x27;</span>] = data[<span class="hljs-string">&#x27;close&#x27;</span>].ewm(span=<span class="hljs-number">10</span>, adjust=<span class="hljs-literal">False</span>).mean()<br><br>    delta = data[<span class="hljs-string">&#x27;close&#x27;</span>].diff()<br>    gain = (delta.where(delta &gt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)).rolling(window=<span class="hljs-number">14</span>).mean()<br>    loss = (-delta.where(delta &lt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)).rolling(window=<span class="hljs-number">14</span>).mean()<br>    rs = gain / loss<br>    data[<span class="hljs-string">&#x27;RSI&#x27;</span>] = <span class="hljs-number">100</span> - (<span class="hljs-number">100</span> / (<span class="hljs-number">1</span> + rs))<br><br>    data[<span class="hljs-string">&#x27;Bollinger Upper&#x27;</span>] = data[<span class="hljs-string">&#x27;SMA&#x27;</span>] + <span class="hljs-number">2</span> * \<br>        data[<span class="hljs-string">&#x27;close&#x27;</span>].rolling(window=<span class="hljs-number">20</span>).std()<br>    data[<span class="hljs-string">&#x27;Bollinger Lower&#x27;</span>] = data[<span class="hljs-string">&#x27;SMA&#x27;</span>] - <span class="hljs-number">2</span> * \<br>        data[<span class="hljs-string">&#x27;close&#x27;</span>].rolling(window=<span class="hljs-number">20</span>).std()<br><br>    data = data.dropna()  <span class="hljs-comment"># 去除 NaN 值</span><br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-comment"># 数据预处理：标准化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_data</span>(<span class="hljs-params">data</span>):<br>    scaler = MinMaxScaler(feature_range=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>    scaled_data = scaler.fit_transform(data)<br>    <span class="hljs-keyword">return</span> scaled_data, scaler<br><br><span class="hljs-comment"># 创建数据集</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_dataset</span>(<span class="hljs-params">data, seq_length</span>):<br>    X, y = [], []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data) - seq_length - <span class="hljs-number">1</span>):<br>        X.append(data[i:(i + seq_length)])<br>        y.append(data[i + seq_length, <span class="hljs-number">3</span>])  <span class="hljs-comment"># 预测 &#x27;Close&#x27; 价格</span><br>    <span class="hljs-keyword">return</span> np.array(X), np.array(y)<br><br><span class="hljs-comment"># LSTM 单元实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LSTMCell</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_size, hidden_size</span>):<br>        <span class="hljs-variable language_">self</span>.input_size = input_size<br>        <span class="hljs-variable language_">self</span>.hidden_size = hidden_size<br>        <span class="hljs-variable language_">self</span>.Wf = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.Wi = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.Wc = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.Wo = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.bf = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.bi = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.bc = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.bo = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, h_prev, c_prev</span>):<br>        combined = np.concatenate((x, h_prev), axis=<span class="hljs-number">0</span>)<br><br>        ft = sigmoid(np.dot(<span class="hljs-variable language_">self</span>.Wf, combined) + <span class="hljs-variable language_">self</span>.bf)<br>        it = sigmoid(np.dot(<span class="hljs-variable language_">self</span>.Wi, combined) + <span class="hljs-variable language_">self</span>.bi)<br>        c_hat = np.tanh(np.dot(<span class="hljs-variable language_">self</span>.Wc, combined) + <span class="hljs-variable language_">self</span>.bc)<br>        c = ft * c_prev + it * c_hat<br>        ot = sigmoid(np.dot(<span class="hljs-variable language_">self</span>.Wo, combined) + <span class="hljs-variable language_">self</span>.bo)<br>        h = ot * np.tanh(c)<br><br>        <span class="hljs-keyword">return</span> h, c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br><br><span class="hljs-comment"># 训练 LSTM</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_lstm</span>(<span class="hljs-params">X, y, hidden_size, epochs, learning_rate</span>):<br>    input_size = X.shape[<span class="hljs-number">2</span>]<br>    lstm_cell = LSTMCell(input_size, hidden_size)<br>    W_out = np.random.randn(<span class="hljs-number">1</span>, hidden_size) * <span class="hljs-number">0.01</span><br>    b_out = np.zeros((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        total_loss = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">0</span>]):<br>            h_prev = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>            c_prev = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">1</span>]):<br>                x_t = X[i, t, :].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>                h_prev, c_prev = lstm_cell.forward(x_t, h_prev, c_prev)<br><br>            y_hat = np.dot(W_out, h_prev) + b_out<br>            loss = np.mean((y_hat - y[i]) ** <span class="hljs-number">2</span>)<br>            total_loss += loss<br><br>            <span class="hljs-comment"># 反向传播</span><br>            dW_out = (y_hat - y[i]) * h_prev.T<br>            db_out = (y_hat - y[i])<br><br>            <span class="hljs-comment"># dh_prev = np.dot(W_out.T, (y_hat - y[i]))</span><br><br>            W_out -= learning_rate * dW_out<br>            b_out -= learning_rate * db_out<br><br>        <span class="hljs-keyword">if</span> epoch % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;epoch&#125;</span>, Loss: <span class="hljs-subst">&#123;total_loss / X.shape[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># 返回训练好的模型参数</span><br>    <span class="hljs-keyword">return</span> lstm_cell, W_out, b_out<br><br><span class="hljs-comment"># 测试 LSTM</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_lstm</span>(<span class="hljs-params">X, lstm_cell, W_out, b_out</span>):<br>    h_prev = np.zeros((lstm_cell.hidden_size, <span class="hljs-number">1</span>))<br>    c_prev = np.zeros((lstm_cell.hidden_size, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">1</span>]):<br>        x_t = X[t, :].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        h_prev, c_prev = lstm_cell.forward(x_t, h_prev, c_prev)<br>    y_hat = np.dot(W_out, h_prev) + b_out<br>    <span class="hljs-keyword">return</span> y_hat<br><br><br><span class="hljs-comment"># 主流程</span><br>file_path = <span class="hljs-string">&#x27;data_600519.csv&#x27;</span><br>data = load_stock_data(file_path)<br>data = calculate_technical_indicators(data)<br>scaled_data, scaler = preprocess_data(<br>    data[[<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;SMA&#x27;</span>, <span class="hljs-string">&#x27;EMA&#x27;</span>, <span class="hljs-string">&#x27;RSI&#x27;</span>, <span class="hljs-string">&#x27;Bollinger Upper&#x27;</span>, <span class="hljs-string">&#x27;Bollinger Lower&#x27;</span>]])<br>seq_length = <span class="hljs-number">10</span><br>X, y = create_dataset(scaled_data, seq_length)<br><br><span class="hljs-comment"># 训练 LSTM</span><br>hidden_size = <span class="hljs-number">10</span><br>epochs = <span class="hljs-number">500</span><br>learning_rate = <span class="hljs-number">0.5</span><br>lstm_cell, W_out, b_out = train_lstm(X, y, hidden_size, epochs, learning_rate)<br><br><span class="hljs-comment"># 预测</span><br>X_test, y_test = create_dataset(scaled_data[-<span class="hljs-number">20</span>:], seq_length)<br>predicted = [predict_lstm(X_test[i], lstm_cell, W_out, b_out)<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X_test))]<br>predicted = np.array(predicted).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 扩展预测值</span><br>num_features = scaled_data.shape[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 原始数据的特征数量</span><br>predicted_full = np.zeros((predicted.shape[<span class="hljs-number">0</span>], num_features))<br>predicted_full[:, <span class="hljs-number">3</span>] = predicted[:, <span class="hljs-number">0</span>]  <span class="hljs-comment"># 假设 &#x27;Close&#x27; 是第 4 列（索引 3） </span><br><span class="hljs-comment"># 进行逆变换</span><br>original_predicted_full = scaler.inverse_transform(predicted_full)<br>original_predicted = original_predicted_full[:, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 提取 &#x27;Close&#x27; 列</span><br>pingjun = np.mean(original_predicted)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测结果: <span class="hljs-subst">&#123;original_predicted&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测结果(平均值): <span class="hljs-subst">&#123;pingjun&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="总结-1">总结</h3><ul><li><strong>RNN/LSTM</strong>非常适合处理时间序列数据，用于投资领域的市场预测和策略制定。</li><li>你可以结合<strong>深度学习框架</strong>和<strong>高级优化算法</strong>来提高模型的性能和效率。</li><li>结合投资实际需求选择合适的模型和方法，逐步构建和优化你的投资策略。</li></ul><h3 id="代码逐行解释">代码逐行解释：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> MinMaxScaler<br><span class="hljs-comment"># 读取数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_stock_data</span>(<span class="hljs-params">file_path</span>):<br>    data = pd.read_csv(file_path, parse_dates=[<span class="hljs-string">&#x27;Date&#x27;</span>], index_col=<span class="hljs-string">&#x27;Date&#x27;</span>)<br>    <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>这段代码定义了一个名为 <code>load_stock_data</code>的函数，用于加载和预处理股票数据。该函数接收一个参数<code>file_path</code>，即包含股票数据的CSV文件的路径。下面是逐行解释：</p><ol type="1"><li><p><code>import numpy as np</code>：这行代码导入了NumPy库，并将其简称为<code>np</code>。NumPy是Python中用于科学计算的一个基础库，提供了大量的数学函数操作以及高性能的多维数组对象。然而，在这段代码中，NumPy库实际上没有被直接使用，可能是为了其他部分的代码（未在此展示）准备的。</p></li><li><p><code>import pandas as pd</code>：这行代码导入了Pandas库，并将其简称为<code>pd</code>。Pandas是Python中用于数据分析的一个强大库，提供了易于使用的数据结构和数据分析工具。这段代码主要使用了Pandas来处理CSV格式的股票数据。</p></li><li><p><code>from sklearn.preprocessing import MinMaxScaler</code>：这行代码从scikit-learn（一个流行的Python机器学习库）的预处理模块中导入了<code>MinMaxScaler</code>类。<code>MinMaxScaler</code>用于将特征缩放到给定的最小值和最大值之间（通常是0和1），这是数据预处理中常用的一种技术，可以帮助改善许多机器学习算法的性能。然而，在这段特定的代码中，<code>MinMaxScaler</code>没有被直接使用，可能是为了后续的数据处理步骤预留的。</p></li><li><p>定义<code>load_stock_data</code>函数：</p><ul><li><code>def load_stock_data(file_path):</code>：定义了一个名为<code>load_stock_data</code>的函数，它接受一个参数<code>file_path</code>，即包含股票数据的CSV文件的路径。</li></ul></li><li><p>加载和预处理数据：</p><ul><li><code>data = pd.read_csv(file_path, parse_dates=['Date'], index_col='Date')</code>：使用Pandas的<code>read_csv</code>函数加载CSV文件。<code>parse_dates=['Date']</code>参数告诉Pandas将<code>Date</code>列解析为日期时间类型。<code>index_col='Date'</code>参数指定将<code>Date</code>列用作DataFrame的行索引。这意味着加载后的DataFrame将使用日期时间作为索引，而不是默认的整数索引。</li></ul></li><li><p>返回处理后的数据：</p><ul><li><code>return data</code>：函数返回处理后的DataFrame，其中包含了按日期时间索引的股票数据。</li></ul></li></ol><p>综上所述，这段代码的主要作用是加载一个包含股票数据的CSV文件，将<code>Date</code>列解析为日期时间类型，并将其作为行索引，然后返回这个处理后的DataFrame。虽然<code>MinMaxScaler</code>被导入了，但在这段代码中并没有直接使用，可能是为了后续的数据标准化步骤准备的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 特征工程：计算技术指标</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_technical_indicators</span>(<span class="hljs-params">data</span>):<br>    data[<span class="hljs-string">&#x27;SMA&#x27;</span>] = data[<span class="hljs-string">&#x27;close&#x27;</span>].rolling(window=<span class="hljs-number">10</span>).mean()<br>    data[<span class="hljs-string">&#x27;EMA&#x27;</span>] = data[<span class="hljs-string">&#x27;close&#x27;</span>].ewm(span=<span class="hljs-number">10</span>, adjust=<span class="hljs-literal">False</span>).mean()<br><br>    delta = data[<span class="hljs-string">&#x27;close&#x27;</span>].diff()<br>    gain = (delta.where(delta &gt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)).rolling(window=<span class="hljs-number">14</span>).mean()<br>    loss = (-delta.where(delta &lt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)).rolling(window=<span class="hljs-number">14</span>).mean()<br>    rs = gain / loss<br>    data[<span class="hljs-string">&#x27;RSI&#x27;</span>] = <span class="hljs-number">100</span> - (<span class="hljs-number">100</span> / (<span class="hljs-number">1</span> + rs))<br><br>    data[<span class="hljs-string">&#x27;Bollinger Upper&#x27;</span>] = data[<span class="hljs-string">&#x27;SMA&#x27;</span>] + <span class="hljs-number">2</span> * \<br>        data[<span class="hljs-string">&#x27;close&#x27;</span>].rolling(window=<span class="hljs-number">20</span>).std()<br>    data[<span class="hljs-string">&#x27;Bollinger Lower&#x27;</span>] = data[<span class="hljs-string">&#x27;SMA&#x27;</span>] - <span class="hljs-number">2</span> * \<br>        data[<span class="hljs-string">&#x27;close&#x27;</span>].rolling(window=<span class="hljs-number">20</span>).std()<br><br>    data = data.dropna()  <span class="hljs-comment"># 去除 NaN 值</span><br>    <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>这段代码定义了一个名为 <code>calculate_technical_indicators</code>的函数，它接受一个包含股票价格数据的<code>DataFrame</code>（假设至少包含 <code>close</code>列，即收盘价）作为输入，并计算并添加几个常见的技术指标到该<code>DataFrame</code> 中，最后返回更新后的<code>DataFrame</code>。这些技术指标包括简单移动平均（SMA）、指数移动平均（EMA）、相对强弱指数（RSI）和布林带（BollingerBands）。下面是对每个步骤的详细解释：</p><ol type="1"><li><strong>简单移动平均（SMA）</strong>：<ul><li>使用 <code>rolling(window=10).mean()</code>计算过去10天的收盘价的平均值，结果存储在 <code>data['SMA']</code>中。</li></ul></li><li><strong>指数移动平均（EMA）</strong>：<ul><li>使用 <code>ewm(span=10, adjust=False).mean()</code>计算指数移动平均。这里的 <code>span=10</code>大致相当于传统的平滑系数（alpha）的倒数，但 <code>ewm</code> 方法通过<code>span</code> 参数自动计算平滑系数。<code>adjust=False</code>表示不使用调整因子（即不将EMA的初始值设为第一个值）。结果存储在<code>data['EMA']</code> 中。</li></ul></li><li><strong>相对强弱指数（RSI）</strong>：<ul><li>首先计算收盘价的差异（<code>delta</code>），即当天的收盘价与前一天的收盘价之差。</li><li>然后分别计算过去14天内所有上涨日（<code>gain</code>）和下跌日（<code>loss</code>）的平均值。上涨日定义为<code>delta &gt; 0</code> 的日子，下跌日定义为 <code>delta &lt; 0</code>的日子。注意，这里使用了 <code>where</code>方法来将非上涨/下跌日的值设为0，以便计算平均值。</li><li>计算RS（相对强弱），即上涨平均除以下跌平均。</li><li>最后，使用RS值计算RSI（相对强弱指数），公式为<code>100 - (100 / (1 + rs))</code>。结果存储在 <code>data['RSI']</code>中。</li></ul></li><li><strong>布林带（Bollinger Bands）</strong>：<ul><li>计算过去20天的收盘价的标准差（<code>std()</code>），并以此为基础计算布林带的上限和下限。</li><li>布林带上限是简单移动平均（SMA）加上两倍的标准差，存储在<code>data['Bollinger Upper']</code> 中。</li><li>布林带下限是简单移动平均（SMA）减去两倍的标准差，存储在<code>data['Bollinger Lower']</code> 中。</li></ul></li><li><strong>去除 NaN 值</strong>：<ul><li>使用 <code>dropna()</code>方法去除所有包含NaN值的行。这是必要的，因为计算移动平均、标准差等统计量时，在数据集的开始部分会产生NaN值。</li></ul></li><li><strong>返回更新后的 DataFrame</strong>：<ul><li>函数返回更新后包含新计算的技术指标的 <code>DataFrame</code>。</li></ul></li></ol><p>这个函数是金融数据分析中常用的一个工具，可以帮助投资者和分析师更好地理解股票价格的动态和趋势。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据预处理：标准化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_data</span>(<span class="hljs-params">data</span>):<br>    scaler = MinMaxScaler(feature_range=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>    scaled_data = scaler.fit_transform(data)<br>    <span class="hljs-keyword">return</span> scaled_data, scaler<br></code></pre></td></tr></table></figure><p>这个函数 <code>preprocess_data</code> 的目的是对给定的数据集<code>data</code> 进行预处理，具体来说是进行特征缩放（FeatureScaling），将数据的特征值缩放到一个指定的范围内，这里使用的是 0 到 1的范围。这种预处理步骤对于许多机器学习算法来说是非常重要的，因为它可以帮助改善算法的收敛速度和性能。</p><p>让我们逐行解释这个函数：</p><ol type="1"><li><p><code>scaler = MinMaxScaler(feature_range=(0, 1))</code></p><p>这行代码创建了一个 <code>MinMaxScaler</code> 对象，它是从<code>sklearn.preprocessing</code>模块中导入的。<code>MinMaxScaler</code>将数据缩放到给定的最小值和最大值之间（这里是 0 和1）。默认情况下，<code>MinMaxScaler</code> 会将数据缩放到 [0,1]，但通过设置 <code>feature_range</code>参数，我们可以自定义这个范围。在这个例子中，我们显式地指定了<code>feature_range=(0, 1)</code>，尽管这是默认值。</p></li><li><p><code>scaled_data = scaler.fit_transform(data)</code></p><p>这行代码执行了两个步骤：首先，<code>fit</code>方法计算了数据的最小值和最大值，这是进行缩放所必需的；然后，<code>transform</code>方法使用这些计算出的最小值和最大值将原始数据 <code>data</code>缩放到指定的范围内（即 0 到 1）。这两个步骤通过<code>fit_transform</code>方法合并为一个步骤，以提高效率。<code>scaled_data</code>变量现在包含了缩放后的数据。</p></li><li><p><code>return scaled_data, scaler</code></p><p>最后，函数返回两个值：缩放后的数据 <code>scaled_data</code> 和<code>MinMaxScaler</code> 对象 <code>scaler</code>。返回<code>scaler</code>对象可能很有用，因为它允许我们在未来的数据点（比如测试集或新数据）上使用相同的缩放参数进行缩放，以确保数据的一致性和可比性。</p></li></ol><p>总的来说，这个函数是一个用于数据预处理的实用工具，它通过特征缩放将数据集的特征值缩放到0 到 1 的范围内，并返回缩放后的数据以及用于缩放的<code>MinMaxScaler</code> 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建数据集</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_dataset</span>(<span class="hljs-params">data, seq_length</span>):<br>    X, y = [], []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data) - seq_length - <span class="hljs-number">1</span>):<br>        X.append(data[i:(i + seq_length)])<br>        y.append(data[i + seq_length, <span class="hljs-number">3</span>])  <span class="hljs-comment"># 预测 &#x27;Close&#x27; 价格</span><br>    <span class="hljs-keyword">return</span> np.array(X), np.array(y)<br></code></pre></td></tr></table></figure><p>这个函数 <code>create_dataset</code> 的目的是从给定的数据<code>data</code>中创建一个用于监督学习（特别是时间序列预测）的数据集。它接收两个参数：<code>data</code>和 <code>seq_length</code>。<code>data</code>是一个多维数组，其中包含了时间序列数据；<code>seq_length</code>是一个整数，指定了每个输入序列的长度。函数返回两个数组：<code>X</code>和 <code>y</code>，其中 <code>X</code> 包含输入序列，<code>y</code>包含每个输入序列对应的目标值（即下一个时间步的某个特定特征值）。</p><p>不过，需要注意的是，函数中存在一个潜在的错误或不一致之处，这取决于<code>data</code>的具体结构。下面是对函数行为的详细解释和潜在问题的说明：</p><ol type="1"><li><p><strong>初始化 X 和 y</strong>：函数开始时，通过空列表<code>X</code> 和 <code>y</code> 来存储输入序列和目标值。</p></li><li><p><strong>循环遍历数据</strong>：函数通过一个循环遍历<code>data</code>，从索引 <code>i</code> 开始，直到<code>len(data) - seq_length - 1</code>。这是因为我们需要有足够的后续数据来作为目标值（即<code>y</code>），同时保持每个输入序列的长度为<code>seq_length</code>。</p></li><li><p><strong>构建输入序列 X</strong>：在每次循环中，通过<code>data[i:(i + seq_length)]</code> 从 <code>data</code>中切取一个长度为 <code>seq_length</code> 的序列，并将其添加到<code>X</code> 列表中。</p></li><li><p><strong>构建目标值 y</strong>：这里有一个潜在的问题。代码<code>y.append(data[i + seq_length, 3])</code> 试图从<code>data[i + seq_length]</code> 中获取第四个元素（索引为 3，因为索引从0 开始）。但是，这假设 <code>data</code>是一个二维数组，并且每一行都至少有四个元素。如果 <code>data</code>是一维数组或每行的元素数量少于四个，这将导致错误。此外，如果<code>data</code> 是三维或更高维的，这种索引方式也是不正确的。</p></li><li><p><strong>返回结果</strong>：最后，函数将 <code>X</code> 和<code>y</code> 列表转换为 NumPy 数组并返回它们。</p></li></ol><p><strong>修正建议</strong>：</p><ul><li><p>如果 <code>data</code>是一维时间序列数据，并且你想要预测的是序列中下一个时间步的某个特定值（但不一定是第四个值），你应该首先确认这一点，并在代码中明确这一点。例如，如果你想要预测的是下一个时间步的值，那么你可以将<code>y.append(data[i + seq_length])</code> 改为<code>y.append(data[i + seq_length])</code>（但这会假设你预测的是整个序列的下一个值，而不是某个特定特征）。</p></li><li><p>如果 <code>data</code>是二维或多维的，并且你确实想要获取每个序列的下一个时间步的第四个元素作为目标值，你需要确保<code>data</code> 的形状和结构符合这种索引方式。</p></li><li><p>如果 <code>data</code>的形状和结构不确定，你可能需要添加一些检查来验证这些假设，或者在文档中清楚地说明函数的使用条件和要求。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># LSTM 单元实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LSTMCell</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_size, hidden_size</span>):<br>        <span class="hljs-variable language_">self</span>.input_size = input_size<br>        <span class="hljs-variable language_">self</span>.hidden_size = hidden_size<br>        <span class="hljs-variable language_">self</span>.Wf = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.Wi = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.Wc = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.Wo = np.random.randn(hidden_size, input_size + hidden_size) * <span class="hljs-number">0.01</span><br>        <span class="hljs-variable language_">self</span>.bf = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.bi = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.bc = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.bo = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, h_prev, c_prev</span>):<br>        <span class="hljs-comment"># # 假设 x 和 h_prev 都是一维数组，转换为二维以便拼接</span><br>        <span class="hljs-comment"># x = x.reshape(-1, 1)</span><br>        <span class="hljs-comment"># h_prev = h_prev.reshape(-1, 1)</span><br>        combined = np.concatenate((x, h_prev), axis=<span class="hljs-number">0</span>)<br><br>        ft = sigmoid(np.dot(<span class="hljs-variable language_">self</span>.Wf, combined) + <span class="hljs-variable language_">self</span>.bf)<br>        it = sigmoid(np.dot(<span class="hljs-variable language_">self</span>.Wi, combined) + <span class="hljs-variable language_">self</span>.bi)<br>        c_hat = np.tanh(np.dot(<span class="hljs-variable language_">self</span>.Wc, combined) + <span class="hljs-variable language_">self</span>.bc)<br>        c = ft * c_prev + it * c_hat<br>        ot = sigmoid(np.dot(<span class="hljs-variable language_">self</span>.Wo, combined) + <span class="hljs-variable language_">self</span>.bo)<br>        h = ot * np.tanh(c)<br><br>        <span class="hljs-keyword">return</span> h, c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))<br></code></pre></td></tr></table></figure><p>您提供的 <code>LSTMCell</code> 类实现了一个基本的 LSTM (长短期记忆)单元的前向传播过程。LSTM 是一种特殊的 RNN (循环神经网络)单元，它通过引入“门”机制（遗忘门、输入门、输出门）来解决传统 RNN在处理长序列时容易出现的梯度消失或梯度爆炸问题。下面是对您实现的详细解释和可能需要注意的地方：</p><h4 id="初始化">初始化</h4><p>在 <code>__init__</code> 方法中，您为 LSTM单元的权重和偏置项进行了随机初始化，并将它们乘以一个小的系数（这里是0.01）来减少初始化时的随机性对训练的影响。这是深度学习中的常见做法，称为权重初始化。</p><h4 id="前向传播">前向传播</h4><p>在 <code>forward</code> 方法中，您实现了 LSTM的前向传播过程，这包括计算遗忘门 <code>ft</code>、输入门<code>it</code>、候选单元状态 <code>c_hat</code>、更新后的单元状态<code>c</code> 和输出门 <code>ot</code>，最后输出隐藏状态<code>h</code>。</p><h4 id="注意事项">注意事项</h4><ol type="1"><li><p><strong>维度匹配</strong>：在<code>np.concatenate((x, h_prev), axis=0)</code>中，您沿着第一个轴（axis=0）拼接了输入 <code>x</code> 和前一个隐藏状态<code>h_prev</code>。然而，在 LSTM 中，通常 <code>x</code> 和<code>h_prev</code> 的维度应该是 <code>(input_size,)</code> 和<code>(hidden_size,)</code>，并且它们应该沿着特征维度（即第二维，axis=1）进行拼接。因此，正确的拼接方式应该是<code>np.concatenate((x.reshape(-1, 1), h_prev.reshape(-1, 1)), axis=1)</code>，但更常见的是直接使用<code>np.hstack((x, h_prev))</code> 或者假设 <code>x</code> 和<code>h_prev</code> 已经是二维的，并直接拼接<code>np.concatenate((x, h_prev), axis=1)</code>。</p></li><li><p><strong>广播机制</strong>：在<code>ft * c_prev + it * c_hat</code> 和 <code>ot * np.tanh(c)</code>中，NumPy的广播机制会自动处理不同形状的数组相乘。但是，为了避免潜在的维度问题，确保<code>ft</code>, <code>it</code>, <code>c_prev</code>,<code>c_hat</code>, <code>ot</code>, 和 <code>c</code>的形状符合预期是很重要的。</p></li><li><p><strong>性能优化</strong>：虽然您的实现是教育和研究目的的好例子，但在实际应用中，使用专门的深度学习库（如TensorFlow 或 PyTorch）会更高效，因为这些库经过优化，可以在 GPU上并行处理，并提供自动微分等功能。</p></li></ol><h4 id="示例修正">示例修正</h4><p>假设 <code>x</code> 和 <code>h_prev</code>都是一维数组（或需要被转换为二维数组以便拼接），这里是一个简化的修正版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x, h_prev, c_prev</span>):<br>    <span class="hljs-comment"># 假设 x 和 h_prev 都是一维数组，转换为二维以便拼接</span><br>    x = x.reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    h_prev = h_prev.reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    combined = np.hstack((x, h_prev))<br><br>    <span class="hljs-comment"># ...（接下来的计算保持不变）</span><br><br>    <span class="hljs-keyword">return</span> h, c<br></code></pre></td></tr></table></figure><p>注意，这里假设 <code>x</code> 和 <code>h_prev</code>都是标量或一维数组，并通过 <code>.reshape(-1, 1)</code>转换为二维数组，然后使用 <code>np.hstack</code>沿着第二个轴（特征轴）进行拼接。如果它们已经是二维的，则可以直接使用<code>np.concatenate</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练 LSTM</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_lstm</span>(<span class="hljs-params">X, y, hidden_size, epochs, learning_rate</span>):<br>    input_size = X.shape[<span class="hljs-number">2</span>]<br>    lstm_cell = LSTMCell(input_size, hidden_size)<br>    W_out = np.random.randn(<span class="hljs-number">1</span>, hidden_size) * <span class="hljs-number">0.01</span><br>    b_out = np.zeros((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        total_loss = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">0</span>]):<br>            h_prev = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>            c_prev = np.zeros((hidden_size, <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">1</span>]):<br>                x_t = X[i, t, :].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>                h_prev, c_prev = lstm_cell.forward(x_t, h_prev, c_prev)<br><br>            y_hat = np.dot(W_out, h_prev) + b_out<br>            loss = np.mean((y_hat - y[i]) ** <span class="hljs-number">2</span>)<br>            total_loss += loss<br><br>            <span class="hljs-comment"># 反向传播</span><br>            dW_out = (y_hat - y[i]) * h_prev.T<br>            db_out = (y_hat - y[i])<br><br>            <span class="hljs-comment"># dh_prev = np.dot(W_out.T, (y_hat - y[i]))</span><br><br>            W_out -= learning_rate * dW_out<br>            b_out -= learning_rate * db_out<br><br>        <span class="hljs-keyword">if</span> epoch % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;epoch&#125;</span>, Loss: <span class="hljs-subst">&#123;total_loss / X.shape[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># 返回训练好的模型参数</span><br>    <span class="hljs-keyword">return</span> lstm_cell, W_out, b_out<br></code></pre></td></tr></table></figure><p>您提供的 <code>train_lstm</code> 函数实现了使用单个 LSTM单元进行序列数据训练的基本框架，但是有几个关键的问题和遗漏点需要注意和修正：</p><ol type="1"><li><p><strong>反向传播不完整</strong>：您的代码只实现了输出层的权重和偏置的更新，但没有实现 LSTM单元内部权重（<code>Wf</code>, <code>Wi</code>, <code>Wc</code>,<code>Wo</code> 和对应的偏置 <code>bf</code>, <code>bi</code>,<code>bc</code>, <code>bo</code>）的更新。这意味着 LSTM单元的参数在训练过程中保持不变，这显然是不正确的。</p></li><li><p><strong>损失函数和梯度计算</strong>：您的损失函数是均方误差（MSE），这是合理的。但是，梯度计算<code>dW_out</code> 和 <code>db_out</code>的方式在批量处理时可能不够准确，因为它们只考虑了最后一个时间步的隐藏状态。在序列预测中，通常需要考虑整个序列的损失。</p></li><li><p><strong>LSTM 单元内部更新</strong>： 为了更新 LSTM单元内部的权重，您需要实现 LSTM 的反向传播算法（也称为通过时间反向传播BPTT）。这涉及到计算每个时间步的误差项，并将它们反向传播回 LSTM单元以更新权重。</p></li><li><p><strong>学习率和优化器</strong>：您使用了简单的梯度下降（SGD）来更新参数，这是可行的，但在实际应用中，更复杂的优化器（如Adam、RMSprop 等）可能更有效。</p></li><li><p><strong>序列长度和批量处理</strong>：您的代码目前是按单个序列进行训练的，没有实现批量处理。在实际应用中，为了提高效率，通常会同时处理多个序列。</p></li></ol><p>由于实现 LSTM的完整反向传播算法相当复杂，这里不会给出完整的代码，但我可以提供一些指导思路：</p><ul><li><strong>实现 LSTM的反向传播</strong>：您需要计算每个时间步的误差项，并将其反向传播回 LSTM单元。这涉及到计算关于遗忘门、输入门、候选单元状态和输出门的梯度。</li><li><strong>更新 LSTM 权重</strong>：使用反向传播得到的梯度来更新 LSTM单元的权重和偏置。</li><li><strong>考虑序列和批量处理</strong>：在循环中同时迭代多个序列和每个序列的多个时间步。</li></ul><p>如果您正在学习 LSTM 并希望逐步构建理解，我建议从更简单的 RNN单元开始，并逐步增加复杂性，直到您能够处理 LSTM。同时，使用像 TensorFlow或 PyTorch这样的深度学习框架可以大大简化这些过程，因为它们已经为您处理了大部分底层细节。</p><p>对于您当前的项目，如果您只是想快速了解 LSTM的基本工作原理，并且不打算深入实现其反向传播算法，您可以使用这些框架来构建和训练LSTM 模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试 LSTM</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_lstm</span>(<span class="hljs-params">X, lstm_cell, W_out, b_out</span>):<br>    h_prev = np.zeros((lstm_cell.hidden_size, <span class="hljs-number">1</span>))<br>    c_prev = np.zeros((lstm_cell.hidden_size, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">1</span>]):<br>        x_t = X[t, :].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        h_prev, c_prev = lstm_cell.forward(x_t, h_prev, c_prev)<br>    y_hat = np.dot(W_out, h_prev) + b_out<br>    <span class="hljs-keyword">return</span> y_hat<br></code></pre></td></tr></table></figure><p>您提供的 <code>predict_lstm</code> 函数实现了使用训练好的 LSTM单元进行序列预测的过程。这个函数接收输入序列 <code>X</code>、训练好的LSTM 单元 <code>lstm_cell</code>、输出层的权重 <code>W_out</code> 和偏置<code>b_out</code>，并返回预测的输出<code>y_hat</code>。不过，有几个小地方可能需要调整或注意：</p><ol type="1"><li><p><strong>输入序列的形状</strong>： 在您的函数中，您假设了<code>X</code> 的形状是<code>(time_steps, input_size)</code>，即它是一个二维数组，其中第一维是时间步长，第二维是每个时间步的输入特征数量。这通常是合理的，但请确保这与您训练LSTM 时使用的输入序列形状相匹配。</p></li><li><p><strong>输出形状</strong>： <code>y_hat</code> 的形状将是<code>(1, 1)</code>，因为它是一个单个预测值（假设 <code>W_out</code>的形状是<code>(1, hidden_size)</code>）。如果您的任务是多类别分类或需要多个输出值，您需要相应地调整<code>W_out</code> 的形状。</p></li><li><p><strong>广播机制</strong>： 在<code>np.dot(W_out, h_prev) + b_out</code> 中，NumPy 的广播机制将确保<code>b_out</code>（形状 <code>(1, 1)</code>）被正确地添加到<code>np.dot(W_out, h_prev)</code> 的结果中。但是，请确保<code>W_out</code> 和 <code>h_prev</code> 的形状是兼容的。</p></li><li><p><strong>错误处理</strong>：您的函数没有错误处理机制。在实际应用中，添加一些基本的错误检查（如检查输入形状、权重和偏置的形状等）是一个好习惯。</p></li><li><p><strong>批量预测</strong>：当前函数只能对单个序列进行预测。如果您需要同时预测多个序列，您需要将这个函数包装在一个循环或函数中，以便能够迭代多个输入序列。</p></li><li><p><strong>函数注释</strong>：添加函数注释可以帮助其他开发者（或未来的您）更好地理解函数的用途、参数和返回值。</p></li></ol><p>这里是一个添加了简单注释的 <code>predict_lstm</code> 函数示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_lstm</span>(<span class="hljs-params">X, lstm_cell, W_out, b_out</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用训练好的 LSTM 单元进行序列预测。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数:</span><br><span class="hljs-string">    - X: 输入序列，形状为 (time_steps, input_size)</span><br><span class="hljs-string">    - lstm_cell: 训练好的 LSTMCell 实例</span><br><span class="hljs-string">    - W_out: 输出层的权重矩阵，形状为 (num_outputs, hidden_size)</span><br><span class="hljs-string">    - b_out: 输出层的偏置向量，形状为 (num_outputs, 1)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回:</span><br><span class="hljs-string">    - y_hat: 预测的输出值，形状为 (num_outputs, 1)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    h_prev = np.zeros((lstm_cell.hidden_size, <span class="hljs-number">1</span>))<br>    c_prev = np.zeros((lstm_cell.hidden_size, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(X.shape[<span class="hljs-number">0</span>]):  <span class="hljs-comment"># 注意这里使用 X.shape[0] 遍历时间步</span><br>        x_t = X[t, :].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        h_prev, c_prev = lstm_cell.forward(x_t, h_prev, c_prev)<br>    y_hat = np.dot(W_out, h_prev) + b_out<br>    <span class="hljs-keyword">return</span> y_hat<br></code></pre></td></tr></table></figure><p>请注意，我在遍历时间步时使用了 <code>X.shape[0]</code> 而不是<code>X.shape[1]</code>，因为 <code>X</code> 的形状是<code>(time_steps, input_size)</code>，所以时间步数应该是第一维。如果您的<code>X</code> 形状实际上是<code>(batch_size, time_steps, input_size)</code>（即包含批量处理），则您需要进一步修改这个函数以处理批量数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 主流程</span><br>file_path = <span class="hljs-string">&#x27;data_600519.csv&#x27;</span><br>data = load_stock_data(file_path)<br>data = calculate_technical_indicators(data)<br>scaled_data, scaler = preprocess_data(<br>    data[[<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;SMA&#x27;</span>, <span class="hljs-string">&#x27;EMA&#x27;</span>, <span class="hljs-string">&#x27;RSI&#x27;</span>, <span class="hljs-string">&#x27;Bollinger Upper&#x27;</span>, <span class="hljs-string">&#x27;Bollinger Lower&#x27;</span>]])<br>seq_length = <span class="hljs-number">10</span><br>X, y = create_dataset(scaled_data, seq_length)<br></code></pre></td></tr></table></figure><p>下面是对您提供的代码段进行逐行解释，包括注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义股票数据文件的路径</span><br>file_path = <span class="hljs-string">&#x27;data_600519.csv&#x27;</span><br><br><span class="hljs-comment"># 加载股票数据文件，这里假设load_stock_data是一个自定义函数，用于从CSV文件中读取并处理股票数据</span><br><span class="hljs-comment"># 函数可能返回Pandas DataFrame对象，其中包含股票的各种数据（如开盘价、收盘价等）</span><br>data = load_stock_data(file_path)<br><br><span class="hljs-comment"># 计算技术指标，这里假设calculate_technical_indicators是一个自定义函数</span><br><span class="hljs-comment"># 它接收股票数据DataFrame作为输入，并计算一些技术指标（如简单移动平均SMA、指数移动平均EMA、相对强弱指数RSI、布林带等）</span><br><span class="hljs-comment"># 然后将这些指标作为新列添加到原始DataFrame中，并返回更新后的DataFrame</span><br>data = calculate_technical_indicators(data)<br><br><span class="hljs-comment"># 数据预处理，这里假设preprocess_data是一个自定义函数</span><br><span class="hljs-comment"># 它接收包含选定特征（如开盘价、收盘价、成交量、计算出的技术指标等）的DataFrame作为输入</span><br><span class="hljs-comment"># 函数首先对数据进行缩放（可能是归一化或标准化），以便模型能够更好地学习</span><br><span class="hljs-comment"># 然后返回缩放后的数据以及用于缩放数据的scaler对象（这可能在后续的数据预测中需要用到）</span><br>scaled_data, scaler = preprocess_data(<br>    data[[<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;SMA&#x27;</span>, <span class="hljs-string">&#x27;EMA&#x27;</span>, <span class="hljs-string">&#x27;RSI&#x27;</span>, <span class="hljs-string">&#x27;Bollinger Upper&#x27;</span>, <span class="hljs-string">&#x27;Bollinger Lower&#x27;</span>]]<br>)<br><br><span class="hljs-comment"># 定义序列长度，这是时间序列分析中常用的一个参数</span><br><span class="hljs-comment"># 它决定了模型在预测时考虑的历史数据点的数量</span><br>seq_length = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 创建数据集，这里假设create_dataset是一个自定义函数</span><br><span class="hljs-comment"># 它接收缩放后的数据和序列长度作为输入</span><br><span class="hljs-comment"># 函数的作用是将缩放后的数据转换为适合模型训练的格式</span><br><span class="hljs-comment"># 通常，这意味着将时间序列数据转换为监督学习问题所需的输入（X）和目标（y）</span><br><span class="hljs-comment"># 在时间序列预测中，X通常是多个连续的时间步，而y是紧随其后的时间步的某个值（如下一个时间步的收盘价）</span><br>X, y = create_dataset(scaled_data, seq_length)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练 LSTM</span><br>hidden_size = <span class="hljs-number">10</span><br>epochs = <span class="hljs-number">500</span><br>learning_rate = <span class="hljs-number">0.5</span><br>lstm_cell, W_out, b_out = train_lstm(X, y, hidden_size, epochs, learning_rate)<br><br><span class="hljs-comment"># 预测</span><br>X_test, y_test = create_dataset(scaled_data[-<span class="hljs-number">20</span>:], seq_length)<br>predicted = [predict_lstm(X_test[i], lstm_cell, W_out, b_out)<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X_test))]<br>predicted = np.array(predicted).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 扩展预测值</span><br>num_features = scaled_data.shape[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 原始数据的特征数量</span><br>predicted_full = np.zeros((predicted.shape[<span class="hljs-number">0</span>], num_features))<br>predicted_full[:, <span class="hljs-number">3</span>] = predicted[:, <span class="hljs-number">0</span>]  <span class="hljs-comment"># 假设 &#x27;Close&#x27; 是第 4 列（索引 3）</span><br><span class="hljs-comment"># 进行逆变换</span><br>original_predicted_full = scaler.inverse_transform(predicted_full)<br>original_predicted = original_predicted_full[:, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 提取 &#x27;Close&#x27; 列</span><br>pingjun = np.mean(original_predicted)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测结果: <span class="hljs-subst">&#123;original_predicted&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测结果(平均值): <span class="hljs-subst">&#123;pingjun&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>在您提供的代码段中，您首先训练了一个LSTM模型，并使用该模型进行了预测。然而，有几个地方需要注意或可能需要修改，以确保代码能够正确运行并产生预期的结果。以下是对代码段的详细解释和可能的修改建议：</p><ol type="1"><li><p><strong>训练 LSTM</strong>： 您假设有一个名为<code>train_lstm</code> 的函数，它接收输入数据 <code>X</code>、目标数据<code>y</code>、隐藏层大小 <code>hidden_size</code>、训练轮次<code>epochs</code> 和学习率 <code>learning_rate</code>，并返回训练好的LSTM 单元、输出层权重 <code>W_out</code> 和偏置<code>b_out</code>。这个函数的具体实现不在您提供的代码段中，但它是关键部分，需要确保它正确实现了LSTM 的训练过程。</p></li><li><p><strong>预测</strong>：</p><ul><li>您使用 <code>create_dataset</code> 函数从 <code>scaled_data</code>的最后 20 个时间点中创建了一个测试数据集 <code>X_test</code> 和<code>y_test</code>。请注意，由于您正在使用 LSTM进行预测，因此实际上可能不需要<code>y_test</code>（除非您打算在测试集上评估模型性能）。</li><li>您定义了一个 <code>predict_lstm</code>函数（尽管它的实现细节不在这里），该函数应该接收单个时间步的输入序列<code>X_test[i]</code>、LSTM单元、输出层权重和偏置，并返回预测结果。然而，在 LSTM的上下文中，通常一次预测多个时间步（使用滑动窗口或类似方法），但这里您似乎是对每个时间步单独进行预测。</li><li>您将预测结果收集到一个列表中，并将其转换为 NumPy数组。然后，您创建了一个与原始数据特征数量相同大小的零数组<code>predicted_full</code>，并将预测结果（假设是收盘价）放入该数组的适当列中。</li></ul></li><li><p><strong>逆变换和结果提取</strong>：</p><ul><li>您使用 <code>scaler.inverse_transform</code>方法将缩放后的预测数据转换回原始比例。这是必要的，因为模型是在缩放后的数据上训练的。</li><li>您从转换后的数据中提取了“Close”列的预测值。</li></ul></li><li><p><strong>可能的修改</strong>：</p><ul><li>确保 <code>predict_lstm</code>函数能够处理单个时间步的输入，并返回正确的预测值。如果 LSTM单元设计为处理多个时间步，则可能需要修改该函数以适应这一点。</li><li>如果您的目标是进行多步预测（即预测未来多个时间点的收盘价），则可能需要修改预测循环以生成多个时间步的预测。</li><li>验证 <code>scaler</code>是否确实包含了用于逆变换所需的所有信息（例如，均值和标准差）。</li></ul></li><li><p><strong>输出结果</strong>：</p><ul><li>您打印了预测结果及其平均值。这可以帮助您了解模型的预测性能。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li>LSTM通常用于处理序列数据，并且一次可以处理多个时间步。在您的代码中，您似乎对每个时间步单独进行了预测，这在实际应用中可能不是最优的。</li><li>确保 <code>scaler</code>和其他预处理步骤（如特征选择）在训练和测试数据上保持一致。</li></ul></li></ol><p>以下是一个简化的预测步骤示例，假设 <code>predict_lstm</code>函数已经能够处理整个序列（而不仅仅是单个时间步）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设 predict_lstm 现在可以处理整个序列 X_test</span><br>predicted_full = predict_lstm(X_test, lstm_cell, W_out, b_out)<br><span class="hljs-comment"># 注意：这里 predicted_full 的形状应该与 scaled_data 的相应部分相匹配</span><br><span class="hljs-comment"># 逆变换和结果提取保持不变</span><br>original_predicted_full = scaler.inverse_transform(predicted_full)<br>original_predicted = original_predicted_full[:, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 提取 &#x27;Close&#x27; 列</span><br>pingjun = np.mean(original_predicted)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测结果: <span class="hljs-subst">&#123;original_predicted&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预测结果(平均值): <span class="hljs-subst">&#123;pingjun&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>但是，请注意，这个简化的示例假设 <code>predict_lstm</code>已经被相应地修改以处理整个序列。如果它仍然只能处理单个时间步，则您可能需要使用循环或其他方法来生成整个序列的预测。</p><h2id="用于抓取股价的python代码">用于抓取股价的<code>python</code>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-    --------------Ashare 股票行情数据双核心版( https://github.com/mpquant/Ashare )</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment">#</span><br><br><span class="hljs-comment"># 腾讯日线</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_price_day_tx</span>(<span class="hljs-params">code, end_date=<span class="hljs-string">&#x27;&#x27;</span>, count=<span class="hljs-number">10</span>, frequency=<span class="hljs-string">&#x27;1d&#x27;</span></span>):  <span class="hljs-comment"># 日线获取</span><br>    unit = <span class="hljs-string">&#x27;week&#x27;</span> <span class="hljs-keyword">if</span> frequency <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1w&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;month&#x27;</span> <span class="hljs-keyword">if</span> frequency <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1M&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;day&#x27;</span>  <span class="hljs-comment"># 判断日线，周线，月线</span><br>    <span class="hljs-keyword">if</span> end_date:<br>        end_date = end_date.strftime(<br>            <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(end_date, datetime.date) <span class="hljs-keyword">else</span> end_date.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    end_date = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">if</span> end_date == datetime.datetime.now().strftime(<br>        <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">else</span> end_date  <span class="hljs-comment"># 如果日期今天就变成空</span><br>    URL = <span class="hljs-string">f&#x27;http://web.ifzq.gtimg.cn/appstock/app/fqkline/get?param=<span class="hljs-subst">&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">        code&#125;</span>,<span class="hljs-subst">&#123;unit&#125;</span>,,<span class="hljs-subst">&#123;end_date&#125;</span>,<span class="hljs-subst">&#123;count&#125;</span>,qfq&#x27;</span><br>    st = json.loads(requests.get(URL).content)<br>    ms = <span class="hljs-string">&#x27;qfq&#x27;</span>+unit<br>    stk = st[<span class="hljs-string">&#x27;data&#x27;</span>][code]<br>    buf = stk[ms] <span class="hljs-keyword">if</span> ms <span class="hljs-keyword">in</span> stk <span class="hljs-keyword">else</span> stk[unit]  <span class="hljs-comment"># 指数返回不是qfqday,是day</span><br>    df = pd.DataFrame(<br>        buf, columns=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>], dtype=<span class="hljs-string">&#x27;float&#x27;</span>)<br>    df.time = pd.to_datetime(df.time)<br>    df.set_index([<span class="hljs-string">&#x27;time&#x27;</span>], inplace=<span class="hljs-literal">True</span>)<br>    df.index.name = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 处理索引</span><br>    <span class="hljs-keyword">return</span> df<br><br><span class="hljs-comment"># 腾讯分钟线</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_price_min_tx</span>(<span class="hljs-params">code, end_date=<span class="hljs-literal">None</span>, count=<span class="hljs-number">10</span>, frequency=<span class="hljs-string">&#x27;1d&#x27;</span></span>):  <span class="hljs-comment"># 分钟线获取</span><br>    ts = <span class="hljs-built_in">int</span>(frequency[:-<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> frequency[:-<span class="hljs-number">1</span>].isdigit() <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 解析K线周期数</span><br>    <span class="hljs-keyword">if</span> end_date:<br>        end_date = end_date.strftime(<br>            <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(end_date, datetime.date) <span class="hljs-keyword">else</span> end_date.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    URL = <span class="hljs-string">f&#x27;http://ifzq.gtimg.cn/appstock/app/kline/mkline?param=<span class="hljs-subst">&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">        code&#125;</span>,m<span class="hljs-subst">&#123;ts&#125;</span>,,<span class="hljs-subst">&#123;count&#125;</span>&#x27;</span><br>    st = json.loads(requests.get(URL).content)<br>    buf = st[<span class="hljs-string">&#x27;data&#x27;</span>][code][<span class="hljs-string">&#x27;m&#x27;</span>+<span class="hljs-built_in">str</span>(ts)]<br>    df = pd.DataFrame(<br>        buf, columns=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;n1&#x27;</span>, <span class="hljs-string">&#x27;n2&#x27;</span>])<br>    df = df[[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>]]<br>    df[[<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>]] = df[[<br>        <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>]].astype(<span class="hljs-string">&#x27;float&#x27;</span>)<br>    df.time = pd.to_datetime(df.time)<br>    df.set_index([<span class="hljs-string">&#x27;time&#x27;</span>], inplace=<span class="hljs-literal">True</span>)<br>    df.index.name = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 处理索引</span><br>    df[<span class="hljs-string">&#x27;close&#x27;</span>][-<span class="hljs-number">1</span>] = <span class="hljs-built_in">float</span>(st[<span class="hljs-string">&#x27;data&#x27;</span>][code][<span class="hljs-string">&#x27;qt&#x27;</span>][code][<span class="hljs-number">3</span>])  <span class="hljs-comment"># 最新基金数据是3位的</span><br>    <span class="hljs-keyword">return</span> df<br><br><br><span class="hljs-comment"># sina新浪全周期获取函数，分钟线 5m,15m,30m,60m  日线1d=240m   周线1w=1200m  1月=7200m</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_price_sina</span>(<span class="hljs-params">code, end_date=<span class="hljs-string">&#x27;&#x27;</span>, count=<span class="hljs-number">10</span>, frequency=<span class="hljs-string">&#x27;60m&#x27;</span></span>):  <span class="hljs-comment"># 新浪全周期获取函数</span><br>    frequency = frequency.replace(<span class="hljs-string">&#x27;1d&#x27;</span>, <span class="hljs-string">&#x27;240m&#x27;</span>).replace(<br>        <span class="hljs-string">&#x27;1w&#x27;</span>, <span class="hljs-string">&#x27;1200m&#x27;</span>).replace(<span class="hljs-string">&#x27;1M&#x27;</span>, <span class="hljs-string">&#x27;7200m&#x27;</span>)<br>    mcount = count<br>    ts = <span class="hljs-built_in">int</span>(frequency[:-<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> frequency[:-<span class="hljs-number">1</span>].isdigit() <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 解析K线周期数</span><br>    <span class="hljs-keyword">if</span> (end_date != <span class="hljs-string">&#x27;&#x27;</span>) &amp; (frequency <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;240m&#x27;</span>, <span class="hljs-string">&#x27;1200m&#x27;</span>, <span class="hljs-string">&#x27;7200m&#x27;</span>]):<br>        end_date = pd.to_datetime(end_date) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(<br>            end_date, datetime.date) <span class="hljs-keyword">else</span> end_date  <span class="hljs-comment"># 转换成datetime</span><br>        unit = <span class="hljs-number">4</span> <span class="hljs-keyword">if</span> frequency == <span class="hljs-string">&#x27;1200m&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">29</span> <span class="hljs-keyword">if</span> frequency == <span class="hljs-string">&#x27;7200m&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 4,29多几个数据不影响速度</span><br>        <span class="hljs-comment"># 结束时间到今天有多少天自然日(肯定 &gt;交易日)</span><br>        count = count+(datetime.datetime.now()-end_date).days//unit<br>        <span class="hljs-comment"># print(code,end_date,count)</span><br>    URL = <span class="hljs-string">f&#x27;http://money.finance.sina.com.cn/quotes_service/api/json_v2.php/CN_MarketData.getKLineData?symbol=<span class="hljs-subst">&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">        code&#125;</span>&amp;scale=<span class="hljs-subst">&#123;ts&#125;</span>&amp;ma=5&amp;datalen=<span class="hljs-subst">&#123;count&#125;</span>&#x27;</span><br>    dstr = json.loads(requests.get(URL).content)<br>    <span class="hljs-comment"># df=pd.DataFrame(dstr,columns=[&#x27;day&#x27;,&#x27;open&#x27;,&#x27;high&#x27;,&#x27;low&#x27;,&#x27;close&#x27;,&#x27;volume&#x27;],dtype=&#x27;float&#x27;)</span><br>    df = pd.DataFrame(<br>        dstr, columns=[<span class="hljs-string">&#x27;day&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>])<br>    df[<span class="hljs-string">&#x27;open&#x27;</span>] = df[<span class="hljs-string">&#x27;open&#x27;</span>].astype(<span class="hljs-built_in">float</span>)<br>    df[<span class="hljs-string">&#x27;high&#x27;</span>] = df[<span class="hljs-string">&#x27;high&#x27;</span>].astype(<span class="hljs-built_in">float</span>)  <span class="hljs-comment"># 转换数据类型</span><br>    df[<span class="hljs-string">&#x27;low&#x27;</span>] = df[<span class="hljs-string">&#x27;low&#x27;</span>].astype(<span class="hljs-built_in">float</span>)<br>    df[<span class="hljs-string">&#x27;close&#x27;</span>] = df[<span class="hljs-string">&#x27;close&#x27;</span>].astype(<span class="hljs-built_in">float</span>)<br>    df[<span class="hljs-string">&#x27;volume&#x27;</span>] = df[<span class="hljs-string">&#x27;volume&#x27;</span>].astype(<span class="hljs-built_in">float</span>)<br>    df.day = pd.to_datetime(df.day)<br>    df.set_index([<span class="hljs-string">&#x27;day&#x27;</span>], inplace=<span class="hljs-literal">True</span>)<br>    df.index.name = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 处理索引</span><br>    <span class="hljs-keyword">if</span> (end_date != <span class="hljs-string">&#x27;&#x27;</span>) &amp; (frequency <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;240m&#x27;</span>, <span class="hljs-string">&#x27;1200m&#x27;</span>, <span class="hljs-string">&#x27;7200m&#x27;</span>]):<br>        <span class="hljs-keyword">return</span> df[df.index &lt;= end_date][-mcount:]  <span class="hljs-comment"># 日线带结束时间先返回</span><br>    <span class="hljs-keyword">return</span> df<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_price</span>(<span class="hljs-params">code, end_date=<span class="hljs-string">&#x27;&#x27;</span>, count=<span class="hljs-number">10</span>, frequency=<span class="hljs-string">&#x27;1d&#x27;</span>, fields=[]</span>):<br>    <span class="hljs-comment"># 对外暴露只有唯一函数，这样对用户才是最友好的</span><br>    xcode = code.replace(<span class="hljs-string">&#x27;.XSHG&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;.XSHE&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 证券代码编码兼容处理</span><br>    xcode = <span class="hljs-string">&#x27;sh&#x27;</span>+xcode <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;XSHG&#x27;</span> <span class="hljs-keyword">in</span> code) <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;sz&#x27;</span> + \<br>        xcode <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;XSHE&#x27;</span> <span class="hljs-keyword">in</span> code) <span class="hljs-keyword">else</span> code<br><br>    <span class="hljs-keyword">if</span> frequency <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;1d&#x27;</span>, <span class="hljs-string">&#x27;1w&#x27;</span>, <span class="hljs-string">&#x27;1M&#x27;</span>]:  <span class="hljs-comment"># 1d日线  1w周线  1M月线</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 主力</span><br>            <span class="hljs-keyword">return</span> get_price_sina(xcode, end_date=end_date, count=count, frequency=frequency)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-comment"># 备用</span><br>            <span class="hljs-keyword">return</span> get_price_day_tx(xcode, end_date=end_date, count=count, frequency=frequency)<br><br>    <span class="hljs-keyword">if</span> frequency <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;1m&#x27;</span>, <span class="hljs-string">&#x27;5m&#x27;</span>, <span class="hljs-string">&#x27;15m&#x27;</span>, <span class="hljs-string">&#x27;30m&#x27;</span>, <span class="hljs-string">&#x27;60m&#x27;</span>]:  <span class="hljs-comment"># 分钟线 ,1m只有腾讯接口  5分钟5m   60分钟60m</span><br>        <span class="hljs-keyword">if</span> frequency <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1m&#x27;</span>:<br>            <span class="hljs-keyword">return</span> get_price_min_tx(xcode, end_date=end_date, count=count, frequency=frequency)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 主力</span><br>            <span class="hljs-keyword">return</span> get_price_sina(xcode, end_date=end_date, count=count, frequency=frequency)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-comment"># 备用</span><br>            <span class="hljs-keyword">return</span> get_price_min_tx(xcode, end_date=end_date, count=count, frequency=frequency)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    df = get_price(<span class="hljs-string">&#x27;sh000001&#x27;</span>, frequency=<span class="hljs-string">&#x27;1d&#x27;</span>,<br>                   count=<span class="hljs-number">10</span>)  <span class="hljs-comment"># 支持&#x27;1d&#x27;日, &#x27;1w&#x27;周, &#x27;1M&#x27;月</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;上证指数日线行情\n&#x27;</span>, df)<br><br>    <span class="hljs-comment"># 支持&#x27;1m&#x27;,&#x27;5m&#x27;,&#x27;15m&#x27;,&#x27;30m&#x27;,&#x27;60m&#x27;</span><br>    df = get_price(<span class="hljs-string">&#x27;000001.XSHG&#x27;</span>, frequency=<span class="hljs-string">&#x27;15m&#x27;</span>, count=<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;上证指数分钟线\n&#x27;</span>, df)<br><br><span class="hljs-comment"># Ashare 股票行情数据( https://github.com/mpquant/Ashare )</span><br><br><br><br><span class="hljs-comment"># 具体用法</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;获取股票历史价格&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> Ashare<br><br>gupiao = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入代码：&#x27;</span>)<br><span class="hljs-comment"># count为想要获取的天数</span><br><span class="hljs-keyword">if</span> gupiao[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;6&#x27;</span>:<br>df = Ashare.get_price(<span class="hljs-string">f&#x27;sh<span class="hljs-subst">&#123;gupiao&#125;</span>&#x27;</span>, frequency=<span class="hljs-string">&#x27;1d&#x27;</span>, count=<span class="hljs-number">100</span>)<br><span class="hljs-keyword">else</span>:<br>    df = Ashare.get_price(<span class="hljs-string">f&#x27;sz<span class="hljs-subst">&#123;gupiao&#125;</span>&#x27;</span>, frequency=<span class="hljs-string">&#x27;1d&#x27;</span>, count=<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;上证指数历史行情\n&#x27;</span>, df)<br><br>output_File = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;gupiao&#125;</span>&#x27;</span><br>df.to_csv(<span class="hljs-string">f&#x27;data_<span class="hljs-subst">&#123;output_File&#125;</span>.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据已经存储到data_<span class="hljs-subst">&#123;output_File&#125;</span>.csv&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络编程</title>
    <link href="/2024/10/04/2024-10-04-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/10/04/2024-10-04-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="神经网络编程">神经网络编程</h1><h2 id="框架代码">框架代码</h2><p>神经网络类至少需要3个函数：</p><ul><li>初始化函数————设定输入层节点、隐藏层节点和输出层节点的数量、学习率、权重、激活函数</li><li>训练————学习给定训练集样本后，优化权重</li><li>查询————给定输入，从输出节点给出答案</li></ul><h2 id="权重">权重</h2><ul><li>在输入层与隐藏层之间的链接权重矩阵为<spanclass="math inline">\(W_{input-hidden}\)</span>，大小为<code>hidden_nodes乘以input_nodes</code></li><li>在隐藏层与输出层之间的链接权重矩阵为<spanclass="math inline">\(W_{hidden-output}\)</span>，大小为<code>outpu_nodes乘以hidden_nodes</code></li></ul><h2 id="查询网络">查询网络</h2><ul><li>链接权重点乘输入层就可以得到隐藏层的输入信号<spanclass="math inline">\(X_{hidden}=W_{input-hidden}\cdot I\)</span></li><li>为了获得从隐藏层节点处出现的信号，使用sigmoid激活函数<spanclass="math inline">\(O_{hidden}=sigmod(X_{hidden})\)</span>,sigmod函数：1/(1+exp(-x))；exp(-x)就是e的-x次方</li><li>同理链接权重点乘隐藏层可以得到输出层的输入信号<spanclass="math inline">\(X_{output}=W_{hidden-output}\cdot H\)</span></li><li>通过将输出层的输入信号带入激活函数得到输出层的输出信号</li></ul><h1 id="训练网络">训练网络</h1><ul><li>针对给定的训练样本计算输出</li><li>将计算得到的输出与所需的输出对比，使用差值来指导网络权重的更新</li><li>通过隐藏层节点反向传播误差<spanclass="math inline">\(error_{hidden}=W^T_{hidden-output}\cdoterror_{output}\)</span> T代表需要转置权重</li><li>更新节点j与其下一层节点k之间链接权重的矩阵表达式<spanclass="math inline">\(\DeltaW_{j,k}+=\alpha*E_k*sigmoid(O_k)*(1-sigmoid(O_k))\cdot O_j\)</span> &gt;<spanclass="math inline">\(\alpha\)</span>是学习率，sigmoid是激活函数，*是普通乘法，<spanclass="math inline">\(\cdot\)</span> 是点乘矩阵点积</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入库</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.special <span class="hljs-keyword">import</span> expit<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 神经网络类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">neuralNetwork</span>:<br>    <span class="hljs-comment"># 初始化神经网络</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, inputnodes, hiddennodes, outputnodes, learningrate</span>):<br>        <span class="hljs-comment"># 初始化输入层、隐藏层、输出层</span><br>        <span class="hljs-variable language_">self</span>.inodes = inputnodes<br>        <span class="hljs-variable language_">self</span>.hnodes = hiddennodes<br>        <span class="hljs-variable language_">self</span>.onodes = outputnodes<br>        <br>        <span class="hljs-comment"># 初始化学习率</span><br>        <span class="hljs-variable language_">self</span>.lr = learningrate<br><br>        <span class="hljs-comment"># 初始化权重参数（输入到隐藏，隐藏到输出）传播时，前面的为列，后面的为行,W表示权重</span><br>        <span class="hljs-comment"># 使用正态分布初始化权重(中心设定为0.0，与下一层节点相关用标准方差表达式，第三个参数是数组形状大小)normal(loc=0.0, scale=1.0, size=None)</span><br>        <span class="hljs-variable language_">self</span>.wih = np.random.normal(<span class="hljs-number">0.0</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.hnodes, -<span class="hljs-number">0.5</span>),(<span class="hljs-variable language_">self</span>.hnodes, <span class="hljs-variable language_">self</span>.inodes))<br>        <span class="hljs-variable language_">self</span>.who = np.random.normal(<span class="hljs-number">0.0</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.onodes, -<span class="hljs-number">0.5</span>),(<span class="hljs-variable language_">self</span>.onodes, <span class="hljs-variable language_">self</span>.hnodes))<br><br>        <span class="hljs-comment"># 激活函数，公式为：1 / 1 + e ** x</span><br>        <span class="hljs-variable language_">self</span>.activation_function = <span class="hljs-keyword">lambda</span> x: expit(x)<br><br>        <br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># 训练神经网络</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, inputs_list, targets_list</span>):<br><br>        <span class="hljs-comment"># 转置 2D 数组的行和列</span><br>        inputs = np.array(inputs_list, ndmin=<span class="hljs-number">2</span>).T<br>        targets = np.array(targets_list, ndmin=<span class="hljs-number">2</span>).T<br>        <span class="hljs-comment"># 用点乘获取隐藏层输入信号</span><br>        hidden_inputs = np.dot(<span class="hljs-variable language_">self</span>.wih, inputs)<br>        <span class="hljs-comment"># 通过激活函数获取隐藏层输出信号</span><br>        hidden_outputs = <span class="hljs-variable language_">self</span>.activation_function(hidden_inputs)<br>        <span class="hljs-comment"># 用点乘获取输出层输入信号</span><br>        final_inputs = np.dot(<span class="hljs-variable language_">self</span>.who, hidden_outputs)<br>        <span class="hljs-comment"># 用激活函数获取输出层的输出层信号</span><br>        final_outputs = <span class="hljs-variable language_">self</span>.activation_function(final_inputs)<br><br>        <span class="hljs-comment"># 反向传播--计算误差</span><br>        output_errors = targets - final_outputs<br>        <span class="hljs-comment"># 通过点乘权重获取隐藏层误差</span><br>        hidden_error = np.dot(<span class="hljs-variable language_">self</span>.who.T, output_errors)<br>        <span class="hljs-comment"># 更新输出层和隐藏层的链接权重</span><br>        <span class="hljs-variable language_">self</span>.who += <span class="hljs-variable language_">self</span>.lr * np.dot((output_errors * final_outputs * (<span class="hljs-number">1.0</span> - final_outputs)),np.transpose(hidden_outputs))<br>        <span class="hljs-comment"># 更新隐藏层和输入层的链接权重</span><br>        <span class="hljs-variable language_">self</span>.wih += <span class="hljs-variable language_">self</span>.lr * np.dot((hidden_error * hidden_outputs * (<span class="hljs-number">1.0</span> - hidden_outputs)),np.transpose(inputs))<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># 查询神经网络</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">self, inputs_list</span>):<br><br>        <span class="hljs-comment"># 转置 2D 数组的行和列</span><br>        inputs = np.array(inputs_list, ndmin=<span class="hljs-number">2</span>).T<br>        <span class="hljs-comment"># 用点乘获取隐藏层输入信号</span><br>        hidden_inputs = np.dot(<span class="hljs-variable language_">self</span>.wih, inputs)<br>        <span class="hljs-comment"># 通过激活函数获取隐藏层输出信号</span><br>        hidden_outputs = <span class="hljs-variable language_">self</span>.activation_function(hidden_inputs)<br>        <span class="hljs-comment"># 用点乘获取输出层输入信号</span><br>        final_inputs = np.dot(<span class="hljs-variable language_">self</span>.who, hidden_outputs)<br>        <span class="hljs-comment"># 用激活函数获取输出层的输出层信号</span><br>        final_outputs = <span class="hljs-variable language_">self</span>.activation_function(final_inputs)<br>        <span class="hljs-comment"># 返回最终输出</span><br>        <span class="hljs-keyword">return</span> final_outputs<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置节点和学习率</span><br>input_nodes = <span class="hljs-number">784</span><br>hidden_nodes = <span class="hljs-number">200</span><br>output_nodes = <span class="hljs-number">10</span><br>learning_rate = <span class="hljs-number">0.1</span><br><br><span class="hljs-comment"># 创建一个神经网络对象</span><br>n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入训练数据</span><br>training_data_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../GPT神经网络学习/mnist_train.csv&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>training_data_list = training_data_file.readlines()<br>training_data_file.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练神经网络</span><br><span class="hljs-comment"># 设置训练次数，这里设置为5</span><br>epochs = <span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> training_data_list:<br>        <span class="hljs-comment"># 分割数据</span><br>        all_values = record.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-comment"># 缩放数据</span><br>        inputs = (np.asfarray(all_values[<span class="hljs-number">1</span>:]) / <span class="hljs-number">255.0</span> * <span class="hljs-number">0.99</span>) + <span class="hljs-number">0.01</span><br>        <span class="hljs-comment"># 创建训练目标</span><br>        targets = np.zeros(output_nodes) + <span class="hljs-number">0.01</span><br>        <span class="hljs-comment"># 设置训练目标，就是数据的标签数据设置为答案</span><br>        targets[<span class="hljs-built_in">int</span>(all_values[<span class="hljs-number">0</span>])] = <span class="hljs-number">0.99</span><br>        <span class="hljs-comment"># 训练数据</span><br>        n.train(inputs, targets)<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入测试数据</span><br>test_data_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../GPT神经网络学习/mnist_test.csv&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>test_data_list = test_data_file.readlines()<br>test_data_file.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试神经网络</span><br><span class="hljs-comment"># 创建计分卡</span><br>scorecard = []<br><br><span class="hljs-comment"># 测试模型并计分</span><br><span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> test_data_list:<br>    <span class="hljs-comment"># 分割数据</span><br>    all_values = record.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-comment"># 设置列表的第一列元素为答案</span><br>    correct_label = <span class="hljs-built_in">int</span>(all_values[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 缩放数据</span><br>    inputs = (np.asfarray(all_values[<span class="hljs-number">1</span>:]) / <span class="hljs-number">255.0</span> * <span class="hljs-number">0.99</span>) + <span class="hljs-number">0.01</span><br>    <span class="hljs-comment"># 查询神经网络</span><br>    outputs = n.query(inputs)<br>    <span class="hljs-comment"># 筛选输出的最大值</span><br>    label = np.argmax(outputs)<br>    <span class="hljs-comment"># 添加到计分卡</span><br>    <span class="hljs-keyword">if</span> (label == correct_label):<br>        <span class="hljs-comment"># 列表最大值的下标如果等于列表第一列，那就是正确的</span><br>        scorecard.append(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 否则就把0添加到计分卡</span><br>        scorecard.append(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">pass</span><br>        <br>    <span class="hljs-keyword">pass</span><br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 显示计分卡分数</span><br>scorecard_array = np.asarray(scorecard)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试得分: &quot;</span>, scorecard_array.<span class="hljs-built_in">sum</span>() / scorecard_array.size)<br></code></pre></td></tr></table></figure><pre><code class="hljs">测试得分:  0.975</code></pre><h1 id="识别手写数字">识别手写数字</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开下载的训练和测试集</span><br>training_data_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../GPT神经网络学习/mnist_train.csv&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>training_data_list = training_data_file.readlines()<br>training_data_file.close()<br></code></pre></td></tr></table></figure><p>用<code>imshow()</code>函数绘制矩形数组</p><ul><li>将由逗号分隔，长的文本字符串值，拆分成单个值，在逗号处进行分割</li><li>忽略第一个值，一般是标签，将剩余的值转换成28*28的矩阵</li><li>绘制数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">all_values = training_data_list[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>image_array = np.asfarray(all_values[<span class="hljs-number">1</span>:]).reshape([<span class="hljs-number">28</span>,<span class="hljs-number">28</span>])<br>plt.imshow(image_array, cmap=<span class="hljs-string">&#x27;Greys&#x27;</span>,interpolation=<span class="hljs-string">&#x27;None&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;matplotlib.image.AxesImage at 0x1525b492b10&gt;</code></pre><p>​<br /><img src="/img/output_14_1.png" alt="png" /> ​</p><h2 id="准备mnist训练数据">准备MNIST训练数据</h2><ul><li>将数据的范围缩小到0.01--0.99</li><li>因为是训练识别数字，我们的输出层节点应该有10个，输入层为数据的节点784个，隐藏层不好设置，可以先默认为100个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 缩放数据为 0.01 到 1.00之间</span><br>scaled_input = (np.asfarray(all_values[<span class="hljs-number">1</span>:]) / <span class="hljs-number">255.0</span> * <span class="hljs-number">0.99</span>) + <span class="hljs-number">0.01</span><br><span class="hljs-comment"># print(scaled_input)</span><br><br><span class="hljs-comment"># 设置输出层节点，并设置数据标签为训练目标，也就是正确答案</span><br>onodes = <span class="hljs-number">10</span><br>targets = np.zeros(onodes) + <span class="hljs-number">0.01</span><br>targets[<span class="hljs-built_in">int</span>(all_values[<span class="hljs-number">0</span>])] = <span class="hljs-number">0.99</span><br></code></pre></td></tr></table></figure><h3 id="训练神经网络">训练神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置节点和学习率</span><br>input_nodes = <span class="hljs-number">784</span><br>hidden_nodes = <span class="hljs-number">100</span><br>output_nodes = <span class="hljs-number">10</span><br>learning_rate = <span class="hljs-number">0.3</span><br><br><span class="hljs-comment"># 创建一个神经网络对象</span><br>n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)<br><br><span class="hljs-comment"># 导入数据</span><br>training_data_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../GPT神经网络学习/mnist_train.csv&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>training_data_list = training_data_file.readlines()<br>training_data_file.close()<br><br><span class="hljs-comment"># 训练神经网络</span><br><span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> training_data_list:<br>    <span class="hljs-comment"># 分割数据</span><br>    all_values = record.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-comment"># 缩放数据</span><br>    inputs = (np.asfarray(all_values[<span class="hljs-number">1</span>:]) / <span class="hljs-number">255.0</span> * <span class="hljs-number">0.99</span>) + <span class="hljs-number">0.01</span><br>    <span class="hljs-comment"># 创建训练目标</span><br>    targets = np.zeros(output_nodes) + <span class="hljs-number">0.01</span><br>    <span class="hljs-comment"># 设置训练目标，就是数据的标签数据设置会答案</span><br>    targets[<span class="hljs-built_in">int</span>(all_values[<span class="hljs-number">0</span>])] = <span class="hljs-number">0.99</span><br>    <span class="hljs-comment"># 训练数据</span><br>    n.train(inputs, targets)<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能学习笔记</title>
    <link href="/2024/10/04/2024-10-04-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/04/2024-10-04-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="人工智能学习笔记">人工智能学习笔记</h1><hr /><h2 id="什么是人工智能">什么是人工智能？</h2><p>:star:人制造出来的机器，来模仿人的行为。还有就是能够自主学习及解决问题更新自己的知识库。让机器能够像人一样思考和行动。比如以下几种：</p><ul><li>人脸识别、车牌识别、自动驾驶</li><li>机器翻译、人机互动、GPT</li><li>智能机器人、AlphaGO等等</li></ul><p>人工智能实现方法：</p><ul><li><p>符号学习：原理是基于逻辑与规则的学习方法，其原理主要为物理符号系统假设和有限合理性原理，不能升级模型。</p></li><li><p>:star:机器学习：从数据中寻找规律、建立关系，根据建立的关系去解决问题的方法，从数据中学习并且实现自我优化升级，其原理是数据驱动。</p><blockquote><p>:bulb:机器学习是一种实现人工智能的<strong>方法</strong>，从数据中学习然后对真实世界的时间做出决策和预测，比如，垃圾邮件检测、房价预测等等。</p><p>:bulb:深度学习是一种实现机器学习的<strong>技术</strong>。模仿人类神经网络，建立模型，进行数据分析，比如，人脸识别、无人驾驶等等。</p></blockquote></li></ul><p>工具安装：</p><ul><li>python 官网下载安装</li><li>jupyter notebook</li><li>pandas、matplib、numpy</li></ul><p>在系统的一个位置新建一个文件夹，比如：e:_log</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建虚拟环境</span><br>E:\learning_log&gt; python -m venv ai_env<br><br><span class="hljs-comment"># 激活虚拟环境 关闭虚拟环境用 deactivate</span><br>E:\learning_log&gt; ai_env\Scripts\activate<br><br><span class="hljs-comment"># 安装jupyter notebook</span><br>(ll_env) E:\learning_log&gt; python.exe -m pip install --upgrade pip<br>(ll_env) E:\learning_log&gt; pip install notebook<br></code></pre></td></tr></table></figure><p>在虚拟环境的目录下创建一个<code>txt</code>文件并该后缀为<code>bat</code>，编辑内容为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-keyword">call</span> E:\learning_log&gt; ai_env\Scripts\activate<br>jupyter notebook --browser=edge<br># 这个bat文件是放在和虚拟环境文件夹同个目录，需要复制网址打开编辑器<br><br># 如果需要直接启动的话需要在虚拟环境（激活）下输入jupyter notebook --generate-config<br># 这时C盘用户文件夹就会出现一个 C:\Users\用户名\.jupyter 的文件夹<br># 打开里面的 jupyter_notebook_config.py 添加一行 c.NotebookApp.use_redirect_file = False<br>(ll_env) E:\learning_log&gt;jupyter notebook<br><br># 删除虚拟环境<br>直接删除文件目录就可以了，确保没有激活虚拟环境！<br></code></pre></td></tr></table></figure><p>这就启动了jupyter了</p><p>安装pandas等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 国内镜像安装</span><br>pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br>pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br></code></pre></td></tr></table></figure><h2 id="工具使用和介绍">工具使用和介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><h4 id="安装和使用matplotlib">安装和使用matplotlib</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment"># 让图形展示的%代码</span><br>%matplotlib inline<br>fig1 = plt.figure(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>plt.plot(x,y)<br>plt.title(<span class="hljs-string">&#x27;y vs x&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 散点图plt.scatter(x,y)</span><br>fig2 = plt.figure(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>plt.scatter(x,y)<br>plt.title(<span class="hljs-string">&#x27;y vs x&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>plt.show()<br>    <br></code></pre></td></tr></table></figure><h4 id="安装和使用numpy">安装和使用numpy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.eye(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;numpy.ndarray&#39;&gt;[[1. 0. 0. 0. 0.] [0. 1. 0. 0. 0.] [0. 0. 1. 0. 0.] [0. 0. 0. 1. 0.] [0. 0. 0. 0. 1.]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">b = np.ones([<span class="hljs-number">5</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 显示行列</span><br><span class="hljs-built_in">print</span>(b.shape)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]](5, 5)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">c = a + b<br><span class="hljs-built_in">print</span>(c.shape)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(5, 5)[[2. 1. 1. 1. 1.] [1. 2. 1. 1. 1.] [1. 1. 2. 1. 1.] [1. 1. 1. 2. 1.] [1. 1. 1. 1. 2.]]</code></pre><h4 id="安装和使用pandas">安装和使用pandas</h4><p>这里有个提示：就是有时候windows的路径是反斜杠，我们需要改成正斜杠。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = pd.read_csv(<span class="hljs-string">&#x27;./data.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><pre><code class="hljs">      Name  Age         City0    Alice   24     New York1      Bob   27  Los Angeles2  Charlie   22      Chicago3    David   32      Houston4      Eve   29      Phoenix</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name = data.loc[:,<span class="hljs-string">&#x27;Name&#x27;</span>]<br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0      Alice1        Bob2    Charlie3      David4        EveName: Name, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age = data.loc[:,<span class="hljs-string">&#x27;Age&#x27;</span>]<br><span class="hljs-built_in">print</span>(age)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0    241    272    223    324    29Name: Age, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 筛选</span><br>c = data.loc[:,<span class="hljs-string">&#x27;Age&#x27;</span>][age&gt;<span class="hljs-number">25</span>]<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><pre><code class="hljs">1    273    324    29Name: Age, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pandas转换为numpy</span><br>data_array = np.array(data)<br><span class="hljs-built_in">print</span>(data_array)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[[&#39;Alice&#39; 24 &#39;New York&#39;] [&#39;Bob&#39; 27 &#39;Los Angeles&#39;] [&#39;Charlie&#39; 22 &#39;Chicago&#39;] [&#39;David&#39; 32 &#39;Houston&#39;] [&#39;Eve&#39; 29 &#39;Phoenix&#39;]]</code></pre><p>保存为本地文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">data_new = age + <span class="hljs-number">1</span><br>data_new.head()<br><span class="hljs-comment"># 保存,如果要去除索引列 to_csv( &#x27;1.csv&#x27;,index=None)</span><br>data_new.to_csv(<span class="hljs-string">&#x27;data_new.csv&#x27;</span>,index=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><hr /><h2 id="机器学习线性回归">机器学习——线性回归</h2><p>机器学习是一种实现人工智能的<strong>方法</strong>，从数据中寻找规律、建立关系，根据建立的关系去解决问题。</p><p>机器学习应用场景：</p><ul><li>数据挖掘</li><li>计算机视觉</li><li>自然语言处理</li><li>证券分析</li><li>医学诊断</li><li>机器人</li><li>DNA测序等等</li></ul><p>机器学习基本框架：数据——&gt;函数——&gt;解决问题</p><p>机器学习类别：</p><ul><li><p>监督学习</p><blockquote><p>告诉机器什么是对的</p><ul><li>线性回归</li><li>逻辑回归</li><li>决策树</li><li>神经网络、卷积神经网络、循环神经网络</li></ul></blockquote></li><li><p>无监督学习</p><blockquote><p>让机器自己去数据中寻找规律</p><ul><li>聚类算法</li></ul></blockquote></li><li><p>半监督学习</p><blockquote><p>告诉机器一部分正确的，剩下的让机器自己去理解</p></blockquote></li><li><p>强化学习（深度学习）</p><blockquote><p>根据每次结果收获的奖惩进行学习，实现优化</p></blockquote></li></ul><h3 id="线性回归">线性回归</h3><p>找到两个（或两个以上）数据对应关系的一条线，通过拟合这条线进行新的预测。</p><p><span class="math inline">\(y = ax +b\)</span><code>其中a为斜率，b为截距（y为0或者x为0的时候另一个点在哪里）</code></p><p><span class="math inline">\(y = f(x_1,x_2\dots x_n)\)</span></p><ul><li>一元回归：<span class="math inline">\(y=f(x)\)</span></li><li>多元回归：<span class="math inline">\(y = f(x_1,x_2\dotsx_n)\)</span></li><li>线性回归：<span class="math inline">\(y=ax+b\)</span></li><li>非线性回归：<span class="math inline">\(y=ax^2+bx+c\)</span></li></ul><p><span class="math inline">\(j = \frac{1}{2m}\sum_{i=1}^{m}(y_1-y)^2 =\frac{1}{2m}\sum_{i=1}^{m}(ax_i+b-y_i)^2 = g(a,b)\)</span><code>j的值越小，就代表越接近真实的值。</code></p><h3 id="线性回归实战准备">线性回归实战准备</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Scikit-learn```是针对机器学习的一款开源框架（算法库），其可以实现数据预处理、分类、回归、降维等等。"><br>任务：基于generated_data.csv数据，建立线性回归模型，预测x=3.5对应的y值，评估模型表现(lr.model.coef_和lr_model.intercept_)<br><br><br>```python<br># 加载数据<br>import pandas as pd<br>data = pd.read_csv(&#x27;./data/generated_data.csv&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.head()<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>x</th><th>y</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>7</td></tr><tr><td>1</td><td>2</td><td>9</td></tr><tr><td>2</td><td>3</td><td>11</td></tr><tr><td>3</td><td>4</td><td>13</td></tr><tr><td>4</td><td>5</td><td>15</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据赋值</span><br>x = data.loc[:,<span class="hljs-string">&#x27;x&#x27;</span>]<br>y = data.loc[:,<span class="hljs-string">&#x27;y&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 展示图形</span><br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br>plt.figure(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>plt.scatter(x,y)<br>plt.show()<br></code></pre></td></tr></table></figure><h3id="python调用sklearn实现线性回归">python调用Sklearn实现线性回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 建立线性回归模型</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>lr_model = LinearRegression()<br><br><span class="hljs-comment"># 用numpy将一维数据转换为二维数据</span><br>x = np.array(x)<br>x = x.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>y = np.array(y)<br>y = y.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>lr_model.fit(x,y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 预测模型</span><br>y_predict = lr_model.predict(x)<br><span class="hljs-comment"># print(y_predict)</span><br><br><span class="hljs-comment"># 这里需要注意，如果直接给数值预测会报错，我们需要把数值转换成二维的，就是[[3.5]]这个样子</span><br>y_predict_2 = lr_model.predict([[<span class="hljs-number">3.5</span>]])<br><span class="hljs-built_in">print</span>(y_predict_2)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[[12.]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印a、b就是y = ax + b中的，a是斜率，b是截距</span><br>a = lr_model.coef_<br>b = lr_model.intercept_<br><span class="hljs-built_in">print</span>(a,b)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[[2.]] [5.]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 评估模型----MSE越接近0越好，r2越接近1越好</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error,r2_score<br>MSE = mean_squared_error(y,y_predict)<br>R2 = r2_score(y,y_predict)<br><span class="hljs-built_in">print</span>(MSE,R2)<br><br>plt.figure()<br>plt.plot(y,y_predict)<br>plt.show()<br></code></pre></td></tr></table></figure><pre><code class="hljs">3.1554436208840474e-31 1.0</code></pre><p>Ashare用法</p><p>from Ashare import *</p><p>df=get_price('sh000001',frequency='1d',count=5)#默认获取今天往前5天的日线实时行情 print('上证指数日线行情',df)</p><p>df=get_price('000001.XSHG',frequency='1d',count=5,end_date='2021-04-30')#可以指定结束日期，获取历史行情 print('上证指数历史行情',df)</p><p>df=get_price('000001.XSHG',frequency='1w',count=5,end_date='2018-06-15')#支持'1d'日, '1w'周, '1M'月<br />print('上证指数历史周线',df)</p><p>df=get_price('sh600519',frequency='15m',count=5)#分钟线实时行情，可用'1m','5m','15m','30m','60m'print('贵州茅台15分钟线',df)</p><p>df=get_price('600519.XSHG',frequency='60m',count=6)#分钟线实时行情，可用'1m','5m','15m','30m','60m'print('贵州茅台60分钟线',df)</p><h3 id="完整代码多家公司股价预测">完整代码：多家公司股价预测</h3><h4 id="安装依赖包">1. 安装依赖包</h4><p>确保你已经安装了必要的库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pandas numpy scikit-learn matplotlib<br></code></pre></td></tr></table></figure><h4 id="准备-csv-文件">2. 准备 CSV 文件</h4><p>假设你的 CSV 文件结构如下（文件名为<code>stock_data.csv</code>）：</p><table><thead><tr><th>Date</th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th></tr></thead><tbody><tr><td>2024-01-01</td><td>150.00</td><td>155.00</td><td>148.00</td><td>152.00</td><td>1000000</td></tr><tr><td>2024-01-02</td><td>210.00</td><td>215.00</td><td>208.00</td><td>212.00</td><td>1500000</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr></tbody></table><h4 id="机器学习代码">3. 机器学习代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 加载数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;stock_data.csv&#x27;</span>)<br><br><span class="hljs-comment"># 查看数据</span><br><span class="hljs-built_in">print</span>(data.head())<br><br><span class="hljs-comment"># 数据预处理</span><br>data[<span class="hljs-string">&#x27;Date&#x27;</span>] = pd.to_datetime(data[<span class="hljs-string">&#x27;Date&#x27;</span>])<br>data.set_index(<span class="hljs-string">&#x27;Date&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 为每个公司添加前一天的收盘价和开盘价作为特征</span><br>data[<span class="hljs-string">&#x27;Prev_Close&#x27;</span>] = data[<span class="hljs-string">&#x27;Close&#x27;</span>].shift(<span class="hljs-number">1</span>)<br>data[<span class="hljs-string">&#x27;Prev_Open&#x27;</span>] = data[<span class="hljs-string">&#x27;Open&#x27;</span>].shift(<span class="hljs-number">1</span>)<br>data.dropna(inplace=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 删除缺失值</span><br><br><span class="hljs-comment"># 特征和标签</span><br>features = data[[<span class="hljs-string">&#x27;Prev_Close&#x27;</span>, <span class="hljs-string">&#x27;Prev_Open&#x27;</span>]]<br>target = data[<span class="hljs-string">&#x27;Close&#x27;</span>]<br><br><span class="hljs-comment"># 分割数据集</span><br>X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 构建模型</span><br>model = LinearRegression()<br>model.fit(X_train, y_train)<br><br><span class="hljs-comment"># 预测</span><br>predictions = model.predict(X_test)<br><br><span class="hljs-comment"># 评估模型</span><br>mse = mean_squared_error(y_test, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Mean Squared Error: <span class="hljs-subst">&#123;mse&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 查看预测值和实际值</span><br>result = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Actual&#x27;</span>: y_test, <span class="hljs-string">&#x27;Predicted&#x27;</span>: predictions&#125;)<br><span class="hljs-built_in">print</span>(result.head())<br><br><span class="hljs-comment"># 绘制预测值和实际值对比图</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))<br>plt.plot(result.index, result[<span class="hljs-string">&#x27;Actual&#x27;</span>], label=<span class="hljs-string">&#x27;Actual&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.plot(result.index, result[<span class="hljs-string">&#x27;Predicted&#x27;</span>], label=<span class="hljs-string">&#x27;Predicted&#x27;</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, marker=<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Date&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Stock Price&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Stock Price Prediction&#x27;</span>)<br>plt.legend()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="使用方法说明">4. 使用方法说明</h4><ol type="1"><li><strong>加载数据</strong>:<ul><li>将你的 CSV 文件（如<code>stock_data.csv</code>）存放在脚本的同一目录中，或使用绝对路径。</li><li>使用 <code>pandas.read_csv()</code> 函数加载 CSV 数据。</li></ul></li><li><strong>数据预处理</strong>:<ul><li>将日期列转换为 <code>datetime</code> 类型并设为索引。</li><li>为所有记录添加前一天的开盘价和收盘价作为特征，并删除缺失值。</li></ul></li><li><strong>数据分割</strong>:<ul><li>使用 <code>train_test_split()</code>将数据集分为训练集和测试集。<code>test_size=0.2</code> 表示 20%的数据用于测试。</li></ul></li><li><strong>模型训练</strong>:<ul><li>使用 <code>LinearRegression</code> 构建线性回归模型。</li><li>调用 <code>fit()</code> 方法训练模型。</li></ul></li><li><strong>预测与评估</strong>:<ul><li>使用 <code>predict()</code> 方法对测试集进行预测。</li><li>计算均方误差（MSE）评估模型性能。</li></ul></li><li><strong>结果展示</strong>:<ul><li>将预测值和实际值显示出来，以比较模型的预测效果。</li></ul></li><li><strong>图形化展示</strong>:<ul><li>使用 <code>matplotlib</code>库绘制预测值与实际值的对比图，帮助你直观地了解模型的表现。</li></ul></li></ol><h3 id="注意事项">注意事项</h3><ul><li>你可以将 CSV文件替换为你自己的股票数据，确保文件的格式与示例相匹配。</li><li>该示例使用简单的线性回归模型，可以尝试其他高级模型（如LSTM、XGBoost）以提高预测效果。</li><li>数据中的噪声和不可预测性可能会影响预测准确性，在实际应用中需要小心处理。</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Python打包exe文件</title>
    <link href="/2024/10/03/2024-10-03-Python%E6%89%93%E5%8C%85exe%E6%96%87%E4%BB%B6/"/>
    <url>/2024/10/03/2024-10-03-Python%E6%89%93%E5%8C%85exe%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>将Python程序打包成可执行文件（.exe）是一种常见的方式，以便在不需要安装Python解释器的情况下在其他计算机上运行它。你可以使用一个称为PyInstaller的工具来完成这个任务。以下是一个简单的步骤，以将你的Python程序打包成.exe文件：</p><ol type="1"><li><p><strong>安装PyInstaller</strong>：</p><p>如果你还没有安装PyInstaller，可以使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pyinstaller<br></code></pre></td></tr></table></figure></li><li><p><strong>在命令行中使用PyInstaller</strong>：</p><p>打开命令行终端，并导航到你的Python程序所在的目录。然后运行以下命令，将你的Python程序打包成.exe文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyinstaller --onefile your_program.py<br></code></pre></td></tr></table></figure><p>这里的<code>your_program.py</code>应该是你的Python程序的文件名。<code>--onefile</code>选项将生成一个独立的可执行文件，而不是一堆相关文件。</p></li><li><p><strong>等待打包完成</strong>：</p><p>PyInstaller将开始分析你的Python程序，并将其打包成可执行文件。这可能需要一些时间，具体取决于你的程序的复杂性。</p></li><li><p><strong>找到可执行文件</strong>：</p><p>打包完成后，你可以在<code>dist</code>目录下找到生成的可执行文件。这个文件的名称通常与你的Python脚本的名称相同，但没有.py扩展名。</p></li><li><p><strong>测试可执行文件</strong>：</p><p>运行生成的可执行文件，确保它可以正常工作。</p></li></ol><p>请注意，打包Python程序成可执行文件时，可能会导致一些文件路径和资源加载问题，因此确保你的程序中没有依赖于特定文件路径的硬编码。如果你的程序需要访问其他文件，确保这些文件与可执行文件位于同一目录或指定正确的路径。</p><p>这是一个简单的指南，帮助你将Python程序打包成可执行文件。如果你的程序包含了其他依赖项，你可能需要进一步配置PyInstaller以确保这些依赖项也包含在可执行文件中。不过，基本上，你应该能够使用上述步骤来创建一个可执行的.exe文件。</p><p>如果你的Python程序依赖于<code>tkinter</code>和<code>messagebox</code>模块，并且你已经使用PyInstaller将程序打包成可执行文件，通常情况下，这两个依赖应该已经包含在可执行文件中。<code>tkinter</code>是Python的标准库，因此不需要额外的步骤来包含它。<code>messagebox</code>模块通常也是<code>tkinter</code>的一部分。</p><p>当你运行生成的可执行文件时，它应该能够正常使用这两个模块。如果你在打包过程中遇到问题，可以尝试以下方法：</p><ol type="1"><li><p><strong>在Python中使用虚拟环境：</strong>确保在你的项目中使用了虚拟环境。这可以帮助隔离你的项目依赖于系统Python的情况。你可以使用<code>venv</code>模块创建虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv venv<br></code></pre></td></tr></table></figure><p>然后在虚拟环境中安装所需的依赖项，包括<code>tkinter</code>和<code>messagebox</code>。</p></li><li><p><strong>在PyInstaller中包含依赖项：</strong>如果PyInstaller没有正确地包含<code>tkinter</code>和<code>messagebox</code>模块，你可以尝试手动指定它们。在运行PyInstaller时，使用<code>--hidden-import</code>选项指定这些模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyinstaller --onefile --hidden-import=tkinter --hidden-import=tkinter.messagebox your_program.py<br></code></pre></td></tr></table></figure><p>这将强制PyInstaller包含<code>tkinter</code>和<code>messagebox</code>模块。</p></li><li><p><strong>更新PyInstaller：</strong>确保你正在使用最新版本的PyInstaller。有时，更新到最新版本可以解决依赖项问题。</p></li><li><p><strong>检查打包日志：</strong>打包过程中，PyInstaller会生成一个详细的日志文件。查看这个日志文件以查找任何有关依赖项问题的信息。通常，日志文件位于<code>dist</code>目录下的<code>.spec</code>文件所指定的位置。</p></li></ol><p>根据你的具体情况，上述其中一种方法应该能够帮助你解决依赖项问题，并确保打包后的可执行文件可以正常运行。</p><p>出现终端窗口的问题通常是在使用PyInstaller或类似工具打包时的一个常见情况，特别是在Windows上。这是由于默认情况下，PyInstaller在运行时会创建一个控制台窗口，而不是一个纯粹的GUI窗口。</p><p>要解决这个问题，你可以尝试以下几种方法：</p><ol type="1"><li><p><strong>使用<code>--noconsole</code>选项：</strong>在运行PyInstaller时，可以使用<code>--noconsole</code>选项来阻止创建终端窗口。示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyinstaller --onefile --noconsole your_program.py<br></code></pre></td></tr></table></figure><p>这将告诉PyInstaller创建一个没有终端窗口的可执行文件。请注意，这可能会导致在程序崩溃时无法查看错误消息。</p></li><li><p><strong>使用PyInstaller生成.spec文件：</strong>如果你的应用有复杂的依赖关系或特殊配置，你可以首先生成一个.spec文件，然后手动编辑该文件以指定<code>--noconsole</code>选项。然后使用.spec文件来构建你的可执行文件。</p><ol type="a"><li><p>生成.spec文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyinstaller your_program.py --name your_app_name --onefile --windowed --noconsole --log-level=WARN<br></code></pre></td></tr></table></figure></li><li><p>编辑.spec文件：找到.spec文件，搜索<code>console=True</code>并将其更改为<code>console=False</code>。</p></li><li><p>使用.spec文件构建可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyinstaller your_app_name.spec<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>使用其他工具：</strong>除了PyInstaller，还有其他工具，如cx_Freeze和py2exe，可以用于将Python程序打包成可执行文件。你可以尝试使用其中之一，看看是否能够解决终端窗口问题。</p></li></ol><p>记得备份你的项目文件或.spec文件，以免不小心弄坏了。如果上述方法仍然不能解决问题，可以考虑使用其他工具或查看PyInstaller的文档和社区支持来获取更多帮助。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Python制作双色球游戏</title>
    <link href="/2024/10/03/2024-10-03-%E5%8F%8C%E8%89%B2%E7%90%83%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/10/03/2024-10-03-%E5%8F%8C%E8%89%B2%E7%90%83%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>双色球模拟游戏----(Python)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-comment"># from pathlib import Path</span><br><span class="hljs-comment"># 添加音乐模块</span><br><span class="hljs-keyword">import</span> pygame<br><span class="hljs-comment"># 统计历史出现次数，添加计数模块</span><br><span class="hljs-keyword">import</span> collections<br><br><span class="hljs-comment"># 添加音乐</span><br>url = <span class="hljs-string">&#x27;bg_jz.mp3&#x27;</span><br>pygame.mixer.init()<br>pygame.mixer.music.load(url)<br><br><br><span class="hljs-comment"># 统计号码出现次数函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">analyze_ball_appearances</span>(<span class="hljs-params">numbers</span>):<br>    <span class="hljs-comment"># numbers需要是一个列表</span><br>    <span class="hljs-comment"># Counter返回的是一个字典</span><br>    counter = collections.Counter(numbers)<br>    <span class="hljs-comment"># 通过值对字典排序</span><br>    sorted_keys = <span class="hljs-built_in">sorted</span>(<br>        counter.keys(), key=<span class="hljs-keyword">lambda</span> k: counter[k], reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 遍历排序号的字典</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>        value = counter[key]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>出现了<span class="hljs-subst">&#123;value&#125;</span>次.&quot;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br><br>    max_value = <span class="hljs-built_in">max</span>(counter.values())  <span class="hljs-comment"># 寻找字典最大值</span><br>    min_value = <span class="hljs-built_in">min</span>(counter.values())  <span class="hljs-comment"># 寻找字典最小值</span><br>    max_keys = [key <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> counter.items() <span class="hljs-keyword">if</span> value ==<br>                max_value]  <span class="hljs-comment"># 找到对应最大值的键</span><br>    min_keys = [key <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> counter.items() <span class="hljs-keyword">if</span> value ==<br>                min_value]  <span class="hljs-comment"># 找到对应最小值的键</span><br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---&quot;</span> * <span class="hljs-number">10</span>)<br>    <span class="hljs-comment"># path = Path(&quot;tongji.txt&quot;)</span><br>    <span class="hljs-comment"># xie = &#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现次数最多的是：&quot;</span>)<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> max_keys:<br>        <span class="hljs-comment"># xie += f&quot;&#123;key&#125;出现了&#123;max_value&#125;次.&quot;</span><br>        <span class="hljs-comment"># path.write_text(f&#x27;&#123;xie&#125;&#x27;, encoding=&#x27;utf-8&#x27;)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>出现了<span class="hljs-subst">&#123;max_value&#125;</span>次.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出现次数最少的是：&quot;</span>)<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> min_keys:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>出现了<span class="hljs-subst">&#123;min_value&#125;</span>次.&quot;</span>)<br><br><br><span class="hljs-comment"># 抽奖测试</span><br><span class="hljs-comment"># 双色球测试</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shuangseqiu</span>(<span class="hljs-params">money: <span class="hljs-built_in">float</span> = <span class="hljs-number">2</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    玩法说明</span><br><span class="hljs-string">    输入6个红球(1-32)和一个蓝球号码(1-16)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 我的抽奖号码</span><br>    my_red = <span class="hljs-built_in">set</span>()<br>    my_bule = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 默认抽奖次数</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 中奖次数统计</span><br>    zj_01,zj_02,zj_03，zj_04，zj_05，zj_06 = <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-comment"># 统计红球出现的历史次数</span><br>    red_number = []<br>    <span class="hljs-comment"># 统计篮球出现的历史次数</span><br>    bule_number = []<br>    <span class="hljs-comment"># 红球列表</span><br>    lis = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>,<br>           <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>]<br>    <span class="hljs-comment"># 蓝球列表</span><br>    lis_01 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-comment"># 中奖号码</span><br>    hongqiu = <span class="hljs-built_in">set</span>()<br>    lanqiu = <span class="hljs-built_in">set</span>()<br>    <br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">f&quot;我们设置了6个等级的奖项,分别是:一等奖<span class="hljs-subst">&#123;money * (<span class="hljs-number">1</span> + <span class="hljs-number">49999</span>)&#125;</span>元,二等奖<span class="hljs-subst">&#123;money * (<span class="hljs-number">1</span> + <span class="hljs-number">19999</span>)&#125;</span>元,三等奖<span class="hljs-subst">&#123;money * (<span class="hljs-number">1</span> + <span class="hljs-number">1499</span>)&#125;</span>元,四等奖<span class="hljs-subst">&#123;money * (<span class="hljs-number">1</span> + <span class="hljs-number">99</span>)&#125;</span>元,五等奖<span class="hljs-subst">&#123;money * (<span class="hljs-number">1</span> + <span class="hljs-number">4</span>)&#125;</span>元,六等奖<span class="hljs-subst">&#123;money * (<span class="hljs-number">1</span> + <span class="hljs-number">1.5</span>)&#125;</span>元&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;玩一次的费用是&#123;:.1f&#125;元钱&quot;</span>.<span class="hljs-built_in">format</span>(money))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;双色球娱乐，请按规则输入号码&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请先设置要玩几个红球的游戏:&quot;</span>))<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你输入有误或没有输入数字, 默认设置了6个球&quot;</span>)<br>        q = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> q &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> q &gt; <span class="hljs-number">6</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;只能玩1至6个球的游戏&quot;</span>)<br>            <span class="hljs-keyword">try</span>:<br>                q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请先设置要玩几个红球的游戏:&quot;</span>))<br>            <span class="hljs-keyword">except</span> ValueError:<br>                q = <span class="hljs-number">6</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你输入有误或没有输入数字, 默认设置了<span class="hljs-subst">&#123;q&#125;</span>个球&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 循环输入红球并添加控制</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(hongqiu) != q:<br>        <span class="hljs-keyword">try</span>:<br>            red = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;请输入第<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(hongqiu) + <span class="hljs-number">1</span>&#125;</span>个红球(1-32)号码：&quot;</span>))<br>        <span class="hljs-keyword">except</span> ValueError:<br>            red = choice(lis)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你输入有误或没有输入数字, 随机选择了: <span class="hljs-subst">&#123;red&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">if</span> red <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hongqiu <span class="hljs-keyword">and</span> <span class="hljs-number">32</span> &gt;= red &gt;= <span class="hljs-number">1</span>:<br>            hongqiu.add(red)<br>            lis.remove(red)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你输入了错误的号码，请重新输入.&quot;</span>)<br>    <span class="hljs-comment"># 输入蓝球并添加控制</span><br>    <span class="hljs-keyword">try</span>:<br>        bule_01 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入蓝球(1-16)号码：&quot;</span>))<br>    <span class="hljs-keyword">except</span> ValueError:<br>        bule_01 = choice(lis_01)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你输入有误或没有输入数字, 随机选择了: <span class="hljs-subst">&#123;bule_01&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> bule_01 &gt; <span class="hljs-number">16</span> <span class="hljs-keyword">or</span> bule_01 &lt; <span class="hljs-number">1</span>:<br>            bule_01 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;超出范围了，请重新输入蓝球(1-16)号码：&quot;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            lanqiu.add(bule_01)<br>            lis_01.remove(bule_01)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入抽多少次奖:&quot;</span>))<br>    <span class="hljs-keyword">except</span> ValueError:<br>        n = <span class="hljs-number">10</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你输入有误或没有输入数字, 默认是<span class="hljs-subst">&#123;n&#125;</span>次.&quot;</span>)<br><br>    <span class="hljs-comment"># 循环抽奖</span><br>    <span class="hljs-keyword">while</span> my_bule != lanqiu <span class="hljs-keyword">or</span> my_red != hongqiu <span class="hljs-keyword">or</span> n &gt;= count:<br>        list_red = []<br>        list_bule = []<br>        lis = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>,<br>               <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>]<br>        lis_01 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;你买的号码是---红球：<span class="hljs-subst">&#123;hongqiu&#125;</span> 蓝球：<span class="hljs-subst">&#123;lanqiu&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这是第<span class="hljs-subst">&#123;count + <span class="hljs-number">1</span>&#125;</span>次。&#x27;</span>)<br>        <span class="hljs-comment"># 红球</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hongqiu)):<br>            num_red = choice(lis[:<span class="hljs-built_in">len</span>(lis) + <span class="hljs-number">1</span> - i])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>个是:&#x27;</span>, num_red)<br>            list_red.append(num_red)<br>            red_number.append(num_red)<br>            lis.remove(num_red)<br>        <span class="hljs-comment"># 蓝球</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lanqiu)):<br>            num_bule = choice(lis_01[:<span class="hljs-built_in">len</span>(lis_01) + <span class="hljs-number">1</span> - i])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;蓝球是:&#x27;</span>, num_bule)<br>            list_bule.append(num_bule)<br>            bule_number.append(num_bule)<br>            lis_01.remove(num_bule)<br>        <span class="hljs-comment"># 得到的号码列表赋值给集合</span><br>        my_red = <span class="hljs-built_in">set</span>(list_red)<br>        my_bule = <span class="hljs-built_in">set</span>(list_bule)<br>        <span class="hljs-comment"># 打印彩票号码</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开奖号码是：红球 &quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_red:<br>            <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;蓝球 &quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_bule:<br>            <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n抽了<span class="hljs-subst">&#123;count + <span class="hljs-number">1</span>&#125;</span>次奖了&quot;</span>)<br>        <span class="hljs-comment"># 判断中奖与否</span><br>        <span class="hljs-keyword">if</span> my_bule != lanqiu <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(my_red.intersection(hongqiu)) &lt;= <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n很遗憾,你没有中奖&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> my_bule == lanqiu:<br>                zj_06 += <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n恭喜你中了六等奖,奖金&#123;:.1f&#125;元人民币&quot;</span>.<span class="hljs-built_in">format</span>((money * (<span class="hljs-number">1</span> + <span class="hljs-number">1.5</span>))))<br>                <span class="hljs-comment"># 通过intersection()方法查找我的号码和开奖号码的--并集</span><br>            <span class="hljs-keyword">if</span> my_bule == lanqiu <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(my_red.intersection(hongqiu)) &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(my_red.intersection(hongqiu)) &gt;= <span class="hljs-number">4</span>:<br>                zj_05 += <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n恭喜你中了五等奖,奖金&#123;:.1f&#125;元人民币&quot;</span>.<span class="hljs-built_in">format</span>((money * (<span class="hljs-number">1</span> + <span class="hljs-number">4</span>))))<br>                <span class="hljs-keyword">if</span> my_bule == lanqiu <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(my_red.intersection(hongqiu)) &gt;= <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(<br>                        my_red.intersection(hongqiu)) &gt;= <span class="hljs-number">5</span>:<br>                    zj_04 += <span class="hljs-number">1</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n恭喜你中了四等奖,奖金&#123;:.1f&#125;元人民币&quot;</span>.<span class="hljs-built_in">format</span>((money * (<span class="hljs-number">1</span> + <span class="hljs-number">99</span>))))<br>                    <span class="hljs-keyword">if</span> my_bule == lanqiu <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(my_red.intersection(hongqiu)) &gt;= <span class="hljs-number">5</span>:<br>                        zj_03 += <span class="hljs-number">1</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n恭喜你中了三等奖,奖金&#123;:.1f&#125;元人民币&quot;</span>.<span class="hljs-built_in">format</span>(<br>                            (money * (<span class="hljs-number">1</span> + <span class="hljs-number">1499</span>))))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(my_red.intersection(hongqiu)) &gt;= <span class="hljs-number">6</span>:<br>                zj_02 += <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n恭喜你中了二等奖,奖金&#123;:.1f&#125;元人民币&quot;</span>.<span class="hljs-built_in">format</span>((money * (<span class="hljs-number">1</span> + <span class="hljs-number">19999</span>))))<br>                <span class="hljs-keyword">if</span> my_bule == lanqiu:<br>                    zj_01 += <span class="hljs-number">1</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n恭喜你中了一等奖,奖金&#123;:.1f&#125;元人民币&quot;</span>.<span class="hljs-built_in">format</span>(<br>                        (money * (<span class="hljs-number">1</span> + <span class="hljs-number">49999</span>))))<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---&quot;</span> * <span class="hljs-number">10</span>)<br>        <br>        <span class="hljs-comment"># 判断是否达到游玩次数</span><br>        <span class="hljs-keyword">if</span> count &gt;= n:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;红球历史出现次数&quot;</span>)<br>            analyze_ball_appearances(red_number)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---&quot;</span> * <span class="hljs-number">10</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;蓝球历史出现次数&quot;</span>)<br>            analyze_ball_appearances(bule_number)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---&quot;</span> * <span class="hljs-number">10</span>)<br><br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">f&quot;你总共的中奖次数为：\n一等奖:<span class="hljs-subst">&#123;zj_01&#125;</span>次\n二等奖:<span class="hljs-subst">&#123;zj_02&#125;</span>次\n三等奖:<span class="hljs-subst">&#123;zj_03&#125;</span>次\n四等奖:<span class="hljs-subst">&#123;zj_04&#125;</span>次\n五等奖:<span class="hljs-subst">&#123;zj_05&#125;</span>次\n六等奖:<span class="hljs-subst">&#123;zj_06&#125;</span>次&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你总共用了&#123;:.1f&#125;元钱。&quot;</span>.<span class="hljs-built_in">format</span>(n * money))<br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">f&quot;合计奖金为:<span class="hljs-subst">&#123;zj_01 * (money * (<span class="hljs-number">1</span> + <span class="hljs-number">49999</span>)) + zj_02 * (money * (<span class="hljs-number">1</span> + <span class="hljs-number">19999</span>)) + zj_03 * (money * (<span class="hljs-number">1</span> + <span class="hljs-number">1499</span>)) + zj_04 * (money * (<span class="hljs-number">1</span> + <span class="hljs-number">99</span>)) + zj_05 * (money * (<span class="hljs-number">1</span> + <span class="hljs-number">4</span>)) + zj_06 * (money * (<span class="hljs-number">1</span> + <span class="hljs-number">1.5</span>))&#125;</span>元.&quot;</span>)<br><br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lianxu</span>():<br>    shuangseqiu()<br>    y = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n退出输入(q)：&quot;</span>)<br>    <span class="hljs-keyword">if</span> y == <span class="hljs-string">&quot;q&quot;</span>:<br>        <span class="hljs-comment"># 停止播放背景音乐</span><br>        pygame.mixer.music.stop()<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        lianxu()<br><br><br><span class="hljs-comment"># 播放背景音乐 -1 代表无线循环</span><br>pygame.mixer.music.play(loops=-<span class="hljs-number">1</span>)<br>lianxu()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Python获取网络数据</title>
    <link href="/2024/10/03/2024-10-03-%E7%94%A8Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90-1/"/>
    <url>/2024/10/03/2024-10-03-%E7%94%A8Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90-1/</url>
    
    <content type="html"><![CDATA[<h2 id="用python获取网络数据">用Python获取网络数据</h2><p>网络数据采集是 Python语言非常擅长的领域，上节课我们讲到，实现网络数据采集的程序通常称之为网络爬虫或蜘蛛程序。即便是在大数据时代，数据对于中小企业来说仍然是硬伤和短板，有些数据需要通过开放或付费的数据接口来获得，其他的行业数据和竞对数据则必须要通过网络数据采集的方式来获得。不管使用哪种方式获取网络数据资源，Python语言都是非常好的选择，因为 Python的标准库和三方库都对网络数据采集提供了良好的支持。</p><h3 id="requests库">requests库</h3><p>要使用 Python 获取网络数据，我们推荐大家使用名为<code>requests</code>的三方库，这个库我们在之前的课程中其实已经使用过了。按照官方网站的解释，<code>requests</code>是基于Python 标准库进行了封装，简化了通过 HTTP 或 HTTPS访问网络资源的操作。上课我们提到过，HTTP是一个请求响应式的协议，当我们在浏览器中输入正确的 <ahref="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_URL">URL</a>（通常也称为网址）并按下Enter 键时，我们就向网络上的 <ahref="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_web_server">Web服务器</a>发送了一个 HTTP 请求，服务器在收到请求后会给我们一个 HTTP响应。在 Chrome浏览器中的菜单中打开“开发者工具”切换到“Network”选项卡就能够查看 HTTP请求和响应到底是什么样子的，如下图所示。</p><p><imgsrc="https://gitee.com/jackfrued/mypic/raw/master/20210822093434.png" /></p><p>通过<code>requests</code>库，我们可以让 Python 程序向浏览器一样向 Web服务器发起请求，并接收服务器返回的响应，从响应中我们就可以提取出想要的数据。浏览器呈现给我们的网页是用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a>编写的，浏览器相当于是 HTML 的解释器环境，我们看到的网页中的内容都包含在HTML 的标签中。在获取到 HTML代码后，就可以从标签的属性或标签体中提取内容。下面例子演示了如何获取网页HTML代码，我们通过<code>requests</code>库的<code>get</code>函数，获取了搜狐首页的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>resp = requests.get(<span class="hljs-string">&#x27;https://www.sohu.com/&#x27;</span>)<br><span class="hljs-keyword">if</span> resp.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(resp.text)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面代码中的变量<code>resp</code>是一个<code>Response</code>对象（<code>requests</code>库封装的类型），通过该对象的<code>status_code</code>属性可以获取响应状态码，而该对象的<code>text</code>属性可以帮我们获取到页面的HTML 代码。</p></blockquote><p>由于<code>Response</code>对象的<code>text</code>是一个字符串，所以我们可以利用之前讲过的正则表达式的知识，从页面的HTML 代码中提取新闻的标题和链接，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">import</span> requests<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;a.*?href=&quot;(.*?)&quot;.*?title=&quot;(.*?)&quot;.*?&gt;&#x27;</span>)<br>resp = requests.get(<span class="hljs-string">&#x27;https://www.sohu.com/&#x27;</span>)<br><span class="hljs-keyword">if</span> resp.status_code == <span class="hljs-number">200</span>:<br>    all_matches = pattern.findall(resp.text)<br>    <span class="hljs-keyword">for</span> href, title <span class="hljs-keyword">in</span> all_matches:<br>        <span class="hljs-built_in">print</span>(href)<br>        <span class="hljs-built_in">print</span>(title)<br></code></pre></td></tr></table></figure><p>除了文本内容，我们也可以使用<code>requests</code>库通过 URL获取二进制资源。下面的例子演示了如何获取百度 Logo并保存到名为<code>baidu.png</code>的本地文件中。可以在百度的首页上右键点击百度Logo，并通过“复制图片地址”菜单项获取图片的URL。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>resp = requests.get(<span class="hljs-string">&#x27;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;baidu.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(resp.content)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>Response</code>对象的<code>content</code>属性可以获得服务器响应的二进制数据。</p></blockquote><p><code>requests</code>库非常好用而且功能上也比较强大和完整，具体的内容我们在使用的过程中为大家一点点剖析。想解锁关于<code>requests</code>库更多的知识，可以阅读它的<ahref="https://docs.python-requests.org/zh_CN/latest/">官方文档</a>。</p><h3 id="编写爬虫代码">编写爬虫代码</h3><p>接下来，我们以“豆瓣电影”为例，为大家讲解如何编写爬虫代码。按照上面提供的方法，我们先使用<code>requests</code>获取到网页的HTML代码，然后将整个代码看成一个长字符串，这样我们就可以使用正则表达式的捕获组从字符串提取我们需要的内容。下面的代码演示了如何从<ahref="https://movie.douban.com/">豆瓣电影</a>获取排前250名的电影的名称。<ahref="https://movie.douban.com/top250">豆瓣电影Top250</a>的页面结构和对应代码如下图所示，可以看出，每页共展示了25部电影，如果要获取到Top250 数据，我们共需要访问10个页面，对应的地址是<ahref="https://movie.douban.com/top250?start=xxx"class="uri">https://movie.douban.com/top250?start=xxx</a>，这里的<code>xxx</code>如果为<code>0</code>就是第一页，如果<code>xxx</code>的值是<code>100</code>，那么我们可以访问到第五页。为了代码简单易读，我们只获取电影的标题和评分。</p><p><imgsrc="https://gitee.com/jackfrued/mypic/raw/master/20210822093447.png" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    resp = requests.get(<br>        url=<span class="hljs-string">f&#x27;https://movie.douban.com/top250?start=<span class="hljs-subst">&#123;(page - <span class="hljs-number">1</span>) * <span class="hljs-number">25</span>&#125;</span>&#x27;</span>,<br>        <span class="hljs-comment"># 如果不设置HTTP请求头中的User-Agent，豆瓣会检测出不是浏览器而阻止我们的请求。</span><br>        <span class="hljs-comment"># 通过get函数的headers参数设置User-Agent的值，具体的值可以在浏览器的开发者工具查看到。</span><br>        <span class="hljs-comment"># 用爬虫访问大部分网站时，将爬虫伪装成来自浏览器的请求都是非常重要的一步。</span><br>        headers=&#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>&#125;<br>    )<br>    <span class="hljs-comment"># 通过正则表达式获取class属性为title且标签体不以&amp;开头的span标签并用捕获组提取标签内容</span><br>    pattern1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;title&quot;&gt;([^&amp;]*?)&lt;/span&gt;&#x27;</span>)<br>    titles = pattern1.findall(resp.text)<br>    <span class="hljs-comment"># 通过正则表达式获取class属性为rating_num的span标签并用捕获组提取标签内容</span><br>    pattern2 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;rating_num&quot;.*?&gt;(.*?)&lt;/span&gt;&#x27;</span>)<br>    ranks = pattern2.findall(resp.text)<br>    <span class="hljs-comment"># 使用zip压缩两个列表，循环遍历所有的电影标题和评分</span><br>    <span class="hljs-keyword">for</span> title, rank <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(titles, ranks):<br>        <span class="hljs-built_in">print</span>(title, rank)<br>    <span class="hljs-comment"># 随机休眠1-5秒，避免爬取页面过于频繁</span><br>    time.sleep(random.random() * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：通过分析豆瓣网的robots协议，我们发现豆瓣网并不拒绝百度爬虫获取它的数据，因此我们也可以将爬虫伪装成百度的爬虫，将<code>get</code>函数的<code>headers</code>参数修改为：<code>headers=&#123;'User-Agent': 'BaiduSpider'&#125;</code>。</p></blockquote><h3 id="使用-ip-代理">使用 IP 代理</h3><p>让爬虫程序隐匿自己的身份对编写爬虫程序来说是比较重要的，很多网站对爬虫都比较反感的，因为爬虫会耗费掉它们很多的网络带宽并制造很多无效的流量。要隐匿身份通常需要使用<strong>商业IP代理</strong>（如蘑菇代理、芝麻代理、快代理等），让被爬取的网站无法获取爬虫程序来源的真实IP 地址，也就无法简单的通过 IP 地址对爬虫程序进行封禁。</p><p>下面以<ahref="http://www.moguproxy.com/">蘑菇代理</a>为例，为大家讲解商业 IP代理的使用方法。首先需要在该网站注册一个账号，注册账号后就可以<ahref="http://www.moguproxy.com/buy">购买</a>相应的套餐来获得商业 IP代理。作为商业用途，建议大家购买不限量套餐，这样可以根据实际需要获取足够多的代理IP地址；作为学习用途，可以购买包时套餐或根据自己的需求来决定。蘑菇代理提供了两种接入代理的方式，分别是API 私密代理和 HTTP 隧道代理，前者是通过请求蘑菇代理的 API接口获取代理服务器地址，后者是直接使用统一的入口（蘑菇代理提供的域名）进行接入。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210829080647.png" width="75%"></p><p>下面，我们以HTTP隧道代理为例，为大家讲解接入 IP代理的方式，大家也可以直接参考蘑菇代理官网提供的代码来为爬虫设置代理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>APP_KEY = <span class="hljs-string">&#x27;Wnp******************************XFx&#x27;</span><br>PROXY_HOST = <span class="hljs-string">&#x27;secondtransfer.moguproxy.com:9001&#x27;</span><br><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    resp = requests.get(<br>        url=<span class="hljs-string">f&#x27;https://movie.douban.com/top250?start=<span class="hljs-subst">&#123;(page - <span class="hljs-number">1</span>) * <span class="hljs-number">25</span>&#125;</span>&#x27;</span>,<br>        <span class="hljs-comment"># 需要在HTTP请求头设置代理的身份认证方式</span><br>        headers=&#123;<br>            <span class="hljs-string">&#x27;Proxy-Authorization&#x27;</span>: <span class="hljs-string">f&#x27;Basic <span class="hljs-subst">&#123;APP_KEY&#125;</span>&#x27;</span>,<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>,<br>            <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&#x27;</span><br>        &#125;,<br>        <span class="hljs-comment"># 设置代理服务器</span><br>        proxies=&#123;<br>            <span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">f&#x27;http://<span class="hljs-subst">&#123;PROXY_HOST&#125;</span>&#x27;</span>,<br>            <span class="hljs-string">&#x27;https&#x27;</span>: <span class="hljs-string">f&#x27;https://<span class="hljs-subst">&#123;PROXY_HOST&#125;</span>&#x27;</span><br>        &#125;,<br>        verify=<span class="hljs-literal">False</span><br>    )<br>    pattern1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;title&quot;&gt;([^&amp;]*?)&lt;/span&gt;&#x27;</span>)<br>    titles = pattern1.findall(resp.text)<br>    pattern2 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;rating_num&quot;.*?&gt;(.*?)&lt;/span&gt;&#x27;</span>)<br>    ranks = pattern2.findall(resp.text)<br>    <span class="hljs-keyword">for</span> title, rank <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(titles, ranks):<br>        <span class="hljs-built_in">print</span>(title, rank)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码需要修改<code>APP_KEY</code>为自己创建的订单对应的<code>Appkey</code>值，这个值可以在用户中心用户订单中查看到。蘑菇代理提供了免费的API 代理和 HTTP隧道代理试用，但是试用的代理接通率不能保证，建议大家还是直接购买一个在自己支付能力范围内的代理服务来体验。</p></blockquote><h3 id="简单的总结">简单的总结</h3><p>Python 语言能做的事情真的很多，就网络数据采集这一项而言，Python几乎是一枝独秀的，大量的企业和个人都在使用 Python从网络上获取自己需要的数据，这可能也是你将来日常工作的一部分。另外，用编写正则表达式的方式从网页中提取内容虽然可行，但是写出一个能够满足需求的正则表达式本身也不是件容易的事情，这一点对于新手来说尤为明显。在下一节课中，我们将会为大家介绍另外两种从页面中提取数据的方法，虽然从性能上来讲，它们可能不如正则表达式，但是却降低了编码的复杂性，相信大家会喜欢上它们的。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Python解析HTML页面</title>
    <link href="/2024/10/03/2024-10-03-%E7%94%A8Python%E8%A7%A3%E6%9E%90HTML%E9%A1%B5%E9%9D%A2-2/"/>
    <url>/2024/10/03/2024-10-03-%E7%94%A8Python%E8%A7%A3%E6%9E%90HTML%E9%A1%B5%E9%9D%A2-2/</url>
    
    <content type="html"><![CDATA[<h2 id="用python解析html页面">用Python解析HTML页面</h2><p>在前面的课程中，我们讲到了使用<code>request</code>三方库获取网络资源，还介绍了一些前端的基础知识。接下来，我们继续探索如何解析HTML代码，从页面中提取出有用的信息。之前，我们尝试过用正则表达式的捕获组操作提取页面内容，但是写出一个正确的正则表达式也是一件让人头疼的事情。为了解决这个问题，我们得先深入的了解一下HTML 页面的结构，并在此基础上研究另外的解析页面的方法。</p><h3 id="html-页面的结构">HTML 页面的结构</h3><p>我们在浏览器中打开任意一个网站，然后通过鼠标右键菜单，选择“显示网页源代码”菜单项，就可以看到网页对应的HTML 代码。</p><figure><imgsrc="https://gitee.com/jackfrued/mypic/raw/master/20210822094218.png"alt="image-20210822094218269" /><figcaption aria-hidden="true">image-20210822094218269</figcaption></figure><p>代码的第<code>1</code>行是文档类型声明，第<code>2</code>行的<code>&lt;html&gt;</code>标签是整个页面根标签的开始标签，最后一行是根标签的结束标签<code>&lt;/html&gt;</code>。<code>&lt;html&gt;</code>标签下面有两个子标签<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>，放在<code>&lt;body&gt;</code>标签下的内容会显示在浏览器窗口中，这部分内容是网页的主体；放在<code>&lt;head&gt;</code>标签下的内容不会显示在浏览器窗口中，但是却包含了页面重要的元信息，通常称之为网页的头部。HTML页面大致的代码结构如下所示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 页面的元信息，如字符编码、标题、关键字、媒体查询等 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 页面的主体，显示在浏览器窗口中的内容 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签、层叠样式表（CSS）、JavaScript 是构成 HTML页面的三要素，其中标签用来承载页面要显示的内容，CSS 负责对页面的渲染，而JavaScript 用来控制页面的交互式行为。要实现 HTML 页面的解析，可以使用XPath 的语法，它原本是 XML 的一种查询语法，可以根据 HTML标签的层次结构提取标签中的内容或标签属性；此外，也可以使用 CSS选择器来定位页面元素，就跟用 CSS 渲染页面元素是同样的道理。</p><h3 id="xpath-解析">XPath 解析</h3><p>XPath 是在 XML（eXtensible MarkupLanguage）文档中查找信息的一种语法，XML 跟 HTML类似也是一种用标签承载数据的标签语言，不同之处在于 XML的标签是可扩展的，可以自定义的，而且 XML 对语法有更严格的要求。XPath使用路径表达式来选取 XML文档中的节点或者节点集，这里所说的节点包括元素、属性、文本、命名空间、处理指令、注释、根节点等。下面我们通过一个例子来说明如何使用XPath 对页面进行解析。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;eng&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于上面的 XML 文件，我们可以用如下所示的 XPath语法获取文档中的节点。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>/bookstore</code></td><td>选取根元素 bookstore。<strong>注意</strong>：假如路径起始于正斜杠( /)，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td><code>//book</code></td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td><code>//@lang</code></td><td>选取名为 lang 的所有属性。</td></tr><tr><td><code>/bookstore/book[1]</code></td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td><code>/bookstore/book[last()]</code></td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td><code>/bookstore/book[last()-1]</code></td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td><code>/bookstore/book[position()&lt;3]</code></td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td><code>//title[@lang]</code></td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td><code>//title[@lang='eng']</code></td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td><code>/bookstore/book[price&gt;35.00]</code></td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于35.00。</td></tr><tr><td><code>/bookstore/book[price&gt;35.00]/title</code></td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price元素的值须大于 35.00。</td></tr></tbody></table><p>XPath还支持通配符用法，如下所示。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>/bookstore/*</code></td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td><code>//*</code></td><td>选取文档中的所有元素。</td></tr><tr><td><code>//title[@*]</code></td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table><p>如果要选取多个节点，可以使用如下所示的方法。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>//book/title \| //book/price</code></td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td><code>//title \| //price</code></td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td><code>/bookstore/book/title \| //price</code></td><td>选取属于 bookstore 元素的 book 元素的所有 title元素，以及文档中所有的 price 元素。</td></tr></tbody></table><blockquote><p><strong>说明</strong>：上面的例子来自于“菜鸟教程”网站上的 <ahref="https://www.runoob.com/xpath/xpath-tutorial.html">XPath教程</a>，有兴趣的读者可以自行阅读原文。</p></blockquote><p>当然，如果不理解或不熟悉 XPath语法，可以在浏览器的开发者工具中按照如下所示的方法查看元素的 XPath语法，下图是在 Chrome浏览器的开发者工具中查看豆瓣网电影详情信息中影片标题的 XPath 语法。</p><p><imgsrc="https://gitee.com/jackfrued/mypic/raw/master/20210822093707.png" /></p><p>实现 XPath 解析需要三方库<code>lxml</code>的支持，可以使用下面的命令安装<code>lxml</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">pip install lxml<br></code></pre></td></tr></table></figure><p>下面我们用 XPath 解析方式改写之前获取豆瓣电影Top250的代码，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    resp = requests.get(<br>        url=<span class="hljs-string">f&#x27;https://movie.douban.com/top250?start=<span class="hljs-subst">&#123;(page - <span class="hljs-number">1</span>) * <span class="hljs-number">25</span>&#125;</span>&#x27;</span>,<br>        headers=&#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;BaiduSpider&#x27;</span>&#125;<br>    )<br>    tree = etree.HTML(resp.text)<br>    <span class="hljs-comment"># 通过XPath语法从页面中提取电影标题</span><br>    title_spans = tree.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;content&quot;]/div/div[1]/ol/li/div/div[2]/div[1]/a/span[1]&#x27;</span>)<br>    <span class="hljs-comment"># 通过XPath语法从页面中提取电影评分</span><br>    rank_spans = tree.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;content&quot;]/div/div[1]/ol/li[1]/div/div[2]/div[2]/div/span[2]&#x27;</span>)<br>    <span class="hljs-keyword">for</span> title_span, rank_span <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(title_spans, rank_spans):<br>        <span class="hljs-built_in">print</span>(title_span.text, rank_span.text)<br></code></pre></td></tr></table></figure><h3 id="css-选择器解析">CSS 选择器解析</h3><p>对于熟悉 CSS 选择器和 JavaScript 的开发者来说，通过 CSS选择器获取页面元素可能是更为简单的选择，因为浏览器中运行的 JavaScript本身就可以<code>document</code>对象的<code>querySelector()</code>和<code>querySelectorAll()</code>方法基于CSS 选择器获取页面元素。在 Python中，我们可以利用三方库<code>beautifulsoup4</code>或<code>pyquery</code>来做同样的事情。BeautifulSoup 可以用来解析 HTML 和 XML文档，修复含有未闭合标签等错误的文档，通过为待解析的页面在内存中创建一棵树结构，实现对从页面中提取数据操作的封装。可以用下面的命令来安装Beautiful Soup。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">pip install beautifulsoup4<br></code></pre></td></tr></table></figure><p>下面是使用<code>bs4</code>改写的获取豆瓣电影Top250电影名称的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    resp = requests.get(<br>        url=<span class="hljs-string">f&#x27;https://movie.douban.com/top250?start=<span class="hljs-subst">&#123;(page - <span class="hljs-number">1</span>) * <span class="hljs-number">25</span>&#125;</span>&#x27;</span>,<br>        headers=&#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;BaiduSpider&#x27;</span>&#125;<br>    )<br>    <span class="hljs-comment"># 创建BeautifulSoup对象</span><br>    soup = bs4.BeautifulSoup(resp.text, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    <span class="hljs-comment"># 通过CSS选择器从页面中提取包含电影标题的span标签</span><br>    title_spans = soup.select(<span class="hljs-string">&#x27;div.info &gt; div.hd &gt; a &gt; span:nth-child(1)&#x27;</span>)<br>    <span class="hljs-comment"># 通过CSS选择器从页面中提取包含电影评分的span标签</span><br>    rank_spans = soup.select(<span class="hljs-string">&#x27;div.info &gt; div.bd &gt; div &gt; span.rating_num&#x27;</span>)<br>    <span class="hljs-keyword">for</span> title_span, rank_span <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(title_spans, rank_spans):<br>        <span class="hljs-built_in">print</span>(title_span.text, rank_span.text)<br></code></pre></td></tr></table></figure><p>关于 BeautifulSoup 更多的知识，可以参考它的<ahref="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">官方文档</a>。</p><h3 id="简单的总结">简单的总结</h3><p>下面我们对三种解析方式做一个简单比较。</p><table><thead><tr><th>解析方式</th><th>对应的模块</th><th>速度</th><th>使用难度</th></tr></thead><tbody><tr><td>正则表达式解析</td><td><code>re</code></td><td>快</td><td>困难</td></tr><tr><td>XPath 解析</td><td><code>lxml</code></td><td>快</td><td>一般</td></tr><tr><td>CSS 选择器解析</td><td><code>bs4</code>或<code>pyquery</code></td><td>不确定</td><td>简单</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
