<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>投资最重要的事学习笔记</title>
    <link href="/2024/10/26/2024-10-26-%E6%8A%95%E8%B5%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/26/2024-10-26-%E6%8A%95%E8%B5%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>投资最重要的事学习笔记</h1><h2 id="⭐第一章学习第二层次思维">⭐第一章学习第二层次思维</h2><h3 id="什么是第二层次思维？">什么是第二层次思维？</h3><p>要理解第二层次思维，要先知道什么是第一层次思维。</p><p>这里我们先理解什么是第一层次思维，我理解的第一层次思维就是<strong>大众共识</strong>，简单的说就是对于事物的表面认识，行为和反应、思考是和大众一样的。</p><p>那么第二层次思维呢？我理解为是和大众共识对立的或者是与众不同的，大家都认为是好的时候，不一定是好的，大家都认为是坏的时候，也不一定是坏的。</p><h3 id="第二层次思维是怎么运用的？">第二层次思维是怎么运用的？</h3><ul><li><strong>第一层次思维说</strong>：这是一家好公司。让我们买进公司的股票吧。<strong>第二层次思维说</strong>：这是一家好公司，但是人人都认为它是一家好公司，因此它不是一家好公司。因为股票的估价和定价都过高，让我们卖出股票吧。</li><li><strong>第一层次思维说</strong>：会出现增长低迷、通货膨胀加重的前景。让我们卖出股票吧。<strong>第二层次思维说</strong>：前景糟糕透顶，但是所有人都在恐慌中卖出股票。我们应该买进。</li></ul><p>第二层次思维和第一层次思维之间的工作量差异是巨大的。第一层次思维者所需的只是一种对于未来的看法，譬如：公司前景是光明的，表示股票会上涨。而第二层次思维者则需要考虑更多的东西，比如：</p><ul><li>未来可能出现的结果会再什么范围之内？</li><li>我认为会出现什么样的结果？</li><li>我正确的概率有多大？</li><li>人们的共识是什么？</li><li>我的预期与人们的共识有多大的差异？</li><li>资产的当前价格与大众所认为的未来价格以及我所认为的未来价格相符的程度如何？</li><li>价格中所反映的共识心理是过于乐观还是过于悲观？</li><li>如果大众的看法是正确的，资产价格将会发生怎么样的改变？如果我是正确的，资产价格有会怎么样？</li></ul><h3 id="为什么要有第二层次思维？">为什么要有第二层次思维？</h3><p>你不可能在和他人做着相同事情的时候期待胜出，如果你的行为是常规性的，你很可能就会得到常规性的结果（无论好坏）。只有当你的行为是非常规性的时候，你的表现才有可能是非常规性的，而只有当你的判断高人一等时，你的表现才会高于平均水平。</p><p>我们投资的目的不是达到平均水平，我们想要的是<strong>超越平均水平</strong>。因此，我们的思维必须比别人更好、更强有力、水平更高。其他投资者也许非常聪明、消息灵通，因此我们必须找出一种他们所不具备的优势。想他们所未想，见他们所未见，我们的反应与行为必须<strong>与众不同</strong>。简而言之，保持正确可能是投资成功的必要条件（无之者不然），但不是充分条件（有之必然），我们必须比其他人做的更加正确。</p><p>为了取得优异的投资结果，我们必须对价值有非常规性的并且必须是正确的看法。这并不容易。</p><p>很多人认为投资过程简单，没有第二层次思维的需要，甚至有的还不知道有第二层次思维的存在。所以很多人被误导了，相信人人都能成为一名成功的投资者。其实并不是人人都能成功的，现在的唯一好消息是，第一层次思维者的广泛存在使得第二层次思维者的可得收益增加了。为了持之以恒地获得优异的投资回报，我们必须成为第二层次思维的人。</p><h2 id="第二章理解市场有效性及局限性">第二章理解市场有效性及局限性</h2><h3 id="什么是有效市场理论？">什么是有效市场理论？</h3><p>有效市场假说最重要的结论是“你无法战胜市场”。只能取得和大众一样的收益。</p><h3 id="有效市场理论是怎么运用的？">有效市场理论是怎么运用的？</h3><p>根据有效市场投资理论，人们有规避风险的本能，即人们普遍愿意承担更少的风险。想要他们进行风险性更高的投资，必须以更高的收益承诺来诱导。</p><p>为了获得更高的收益，他们唯一要做的就是进行高风险投资。这里其实有个悖论：<strong>如果可以指望通过高风险投资来实现高收益的话，那些投资其实就不是高风险了</strong>。</p><h3 id="有效市场理论的局限性和无效市场理论的理解？">有效市场理论的局限性和无效市场理论的理解？</h3><p>市场价格永远是正确的是不可能的。因为有效市场理论的观点或其运作方式都是<strong>主观性</strong>的。<strong>缺少客观性</strong>。恰恰就是这一点为无效市场理论奠定了基础。</p><p>没有一个市场是完全有效或无效的，它只是一个程度问题。但是我们要认识到，有效性并没有普遍到我们该放弃良好业绩的程度。今天存在的有效性并不意味着有效性会永远存在。</p><p><strong>认为市场无效性</strong>是杰出投资的必要条件。错误总会发生，有时候某些资产定价过低，有时候又定价过高。我们必须具有比其他人更深刻的洞察力，才能更多的买到定价过低的资产。</p><p>有效市场理论应提<strong>供信息辅助我们决策而不是控制决策</strong>。如果完全无视该理论，可能会犯下大错。</p><h2 id="⭐第三章准确估计价值">⭐第三章准确估计价值</h2><p>投资要想取得切实成功，<strong>对内在价值的准确估计是根本出发点</strong>。没有它，投资者任何取得持续投资成功的希望都仅仅是希望。</p><p>这里有一个词，就是<strong>资产的内在价值</strong>。我们常规或者说应该做的就是，以低于内在价值的价格买进，以更高的价格卖出。</p><h3 id="内在价值是什么？">内在价值是什么？</h3><p>要了解内在价值是什么，我们要对投资股票或企业有一个基础的认识。一般方法可以被分为两种基本类型：</p><ul><li>基于公司特性的分析，就是基本面的分析。</li><li>基于证券自身价格行为的研究。</li></ul><p>简单来说投资者有两种基本选择：</p><ol><li>判断证券的内在价值并在价格偏离内在价值时买进或卖出</li><li>将决策完全建立在对未来价格走势的预期的基础上。</li></ol><p>公司的内在价值都是基于公司<strong>基本面</strong>来做分析的。理性的投资者或者是基于内在价值的投资者又分为两种：</p><ul><li>价值投资</li><li>成长型投资</li></ul><p>价值投资者的目标是得出证券当前的内在价值，并在价格低于当前价值时买进，而成长型投资者的目标则是寻找未来将迅速增值（公司内在价值增加）的证券。这两种投资者没有明确的界限，用一句话来说就是：<em>成长型投资关心未来，而价值投资强调当前，但不可避免地要面对未来。</em></p><p>这里我们可以大概知道了，公司的价值体现在，公司财力、资源、管理、商业模式、专利、人力资源、商标、增长潜力，以及最重要的——⭐<strong>创造收益和现金流的能力</strong>。</p><h3 id="如何估算内在价值？">如何估算内在价值？</h3><p>这里书中没有给出明确的方法论。不过我自己对估算内在价值是有一定的学习的😄，所以这段内容是我自己的经验总结。方法有以下几种：</p><ul><li>现金流折现法（这种方法适用于现金流稳定的行业，比如消费、医药等）</li><li>市净率估值法（适用于银行）</li><li>PEV内含价值（这个指标适用于保险行业，因为这个行业的保单是负债但未来会转化为利润）</li><li>NAV估值法（这种方法适用于地产行业，就是净资产价值，包括土地储备等）</li><li>周期行业估值方法比较特殊，这里彼得林奇的方法是可取的，就是根据市盈率和市净率反着买，当市盈率高而市净率低的时候买入，当市盈率低而市净率高的时候卖出。这是因为低市盈率表示行业景气，那价格和价值都应该是体现了的，所以无法以一个很好的价格买到。</li></ul><p>巴菲特举了一个例子：</p><blockquote><p>我们从这里向北走了30英里，我们发现那里的农场每英亩可以生产120蒲式耳的玉米，每英亩可以生产45蒲式耳的大豆，我们知道化肥的成本、收入的税收成本，我们也知道我们需要向农民支付多少钱才能真正完成相关的工作。然后我们会得到一些我们可以用相当保守的假设得出的每英亩的利润。当你通过计算，你可以每英亩赚70美元而无需自己干更多的工作</p></blockquote><p><strong>那么问题的关键就在于，为这70美元你花了多少钱？以及你是否认为，随着时间的推移，你的产量会更高一点吗？农作物价格会随着时间的推移而上涨吗？农业的前景会变得更好一些吗？</strong></p><p>如果你综合来看，现在可能有7%的回报就很棒了，那你相当于觉得每英亩1000美元<code>70/7%</code>的价格就很好，如果此时农田卖900美元，那么你会有一个买入信号，如果他的售价是1200美元，你就会去看别的东西。</p><h3 id="为什么要估算内在价值？">为什么要估算内在价值？</h3><p>我们的目的是以低于内在价值的价格买入，那么这个内在价值我们不知道或计算不准确的话就让我们无法看清我们买的到底是什么。</p><p>如果没有对价值的准确估计，那么我们可能会高价买进自以为的特价股，对于我们来说，任何取得持续成功的希望都仅仅是希望而已。</p><p>我们只有准确估算了内在价值才能在证券下跌或上涨的时候胸有成竹的买进或卖出。实际上只有准确估算了内在价值我们才能在一个下跌的市场上获利，通过学习上面两章，我觉得我们只要在上涨的市场中保持和指数差不多的涨幅，而下跌的市场中低于指数的跌幅，我们就已经胜过绝大部分投资者了。这里有几个基本要素要讲讲：<strong>我们必须了解内在价值；同时我们必须足够自信，坚定的持有股票不断在下跌过程中买进，即使价格已经跌倒似乎在暗示我们做错了的时候，还有最重要的是我们必须估算正确。</strong></p><h2 id="⭐第四章价格与价值的关系">⭐第四章价格与价值的关系</h2><p>成功的投资不仅仅在于“买好的”，还要“买得好”。</p><h3 id="价格与价值有什么关系？">价格与价值有什么关系？</h3><p>在格雷厄姆所作的《聪明的投资者》中指出，<strong>价格是围绕价值上下波动的</strong>，我认为这是价格与价值的一般关系。</p><p>价格是怎么来的？这个问题毫无疑问的关系基本面价值，不过大多数情况还受到另外两个因素的影响：<strong>心理</strong>和<strong>技术</strong>。</p><h3 id="价格与价值的关系是怎么运行的？">价格与价值的关系是怎么运行的？</h3><p>我们除了要知道企业的内在价值（上一章所学）外，我们还要考察相对于资产价值的资产价格。</p><p>⭐建立：基本面——价值——价格之间的关系。</p><p>确定价值的关键是熟练的财务分析，而理解价格、价值关系及其前景的关键，则主要依赖对其他投资者思维的洞察。投资者心理几乎可以导致证券在短期内出现任何定价，而无论<strong>基本面</strong>如何。因此在这里我觉得我们必须投入时间和精力去了解<strong>市场心理</strong>。只有这样做，我们才会知道什么时候会有买入和卖出的好时机。</p><p>以公平价值的价格买进某种证券，那么你可以得到的也只是公平收益，这也就是“市场有效假说”的基本前提。如果我们对内在价值的估计是大概正确的，那么随着时间推移，资产价格将会与资产价值趋于一致。</p><h3 id="为什么我们要知道价格与价值的关系？">为什么我们要知道价格与价值的关系？</h3><p>这里有个重点是市场心理，也就是<strong>心理学</strong>。从买进证券的那一刻起我们就必须了解，基本面价值（内在价值）只是决定证券价格的因素之一，我们还要设法让心理和技术为我们所用。</p><p>在泡沫时期和暴跌时期，对市场势头的迷恋取代了价值和公平价格的观念，贪婪和恐惧会占据人们的心理取代智慧。</p><p>我们真正需要是知道的是，资产的<strong>内在价值的增长</strong>（就是公司业绩的上升）也会带动资产的价格上涨。但我们要警惕预测未来是个不太可靠的事情。</p><p>如果我们现在估算的内在价值是正确的，以低于其价值的价格买进现在看是好的，也有可能企业经营不善，其内在价值降低了，那么其价格也会降低，我们就会发现<strong>当初估算的价值低于现在的价格了</strong>，所以我们需要动态的调整我们的估算。</p><p>也就是说在所有可能的投资获利途径中，低价买进显然是最可靠的一种。但也要注意，我们可能错误估计了当前价值。或者可能会出现价值降低的事件，或者我们的态度与市场的冷淡导致证券以更低的价格出售。也可能价格与价值趋于一致所需的时间比我们想象的要长得多。</p><p>⭐低于价值的价格买进并非万无一失，但它是我们最好的机会。</p><h2 id="第五章理解风险">第五章理解风险</h2><p>风险意味着可能发生的事件多于确定发生的事件。</p><h3 id="风险是什么？">风险是什么？</h3><p>风险意味着可能发生的事件多于确定发生的事件。在投资中风险定义为：首要的是⭐<strong>永久性损失的概率</strong>，但我们还应该认识其他的风险：</p><ul><li><strong>没有达到目标的风险</strong>：比如我们预期的每年8%的收益是我们日常开支的需求，我们投资的收益只有6%的收益，这就出现了风险。</li><li>业绩不佳的风险：收益跟不上指数。</li><li>职业风险：当资金管理者和所有者不是同一人的情况下，会出现管理者如果业绩不好怕失业而承担的风险。</li><li>非常规风险：也就是与众不同也是有风险的。</li><li>流动性风险：也就是资金的流动性，如果急需一笔钱开销，那么投资的资金就会出现风险。</li></ul><h3 id="怎么去理解风险？">怎么去理解风险？</h3><p>风险很大程度上是一个见仁见智的问题。基本面弱的企业、业绩欠佳的企业的股票，如果买进的价格足够低，也能成为一项非常成功的投资。损失风险主要归因于心理过于积极，以及由此导致的价格过高。理论认为高收益伴随着高风险，但我们应该认识到，<strong>在以低于内在价值的价格买进证券时，高收益和低风险是可以同时实现的</strong>。</p><p>⭐判断风险的主要依据应该是<strong>价值的稳定性和可靠性</strong>，以及<strong>价格与价值之间的关系</strong>。</p><p>概率与结果之间存在巨大差异。可能的事情没有发生，不可能的事情却发生了。这是我们对于投资应该知道的最重要的事。</p><h3 id="为什么要理解风险？">为什么要理解风险？</h3><p>投资只关乎一件事，就是应对未来。没有人能够确切地预知未来，所以风险是不可避免的。因此应对风险是投资中一个必不可少的要素。找到好的投资标的并不难，但是如果我们不能正确地应对风险，那么我们的成功是不可能长久的。应对风险主要有三步：</p><ul><li>理解风险</li><li>识别风险</li><li>控制风险</li></ul><p>为什么说风险评估是投资过程中必不可少的要素呢？主要有三个理由：</p><ul><li><strong>风险是件坏事</strong>，大多数头脑清醒的人都希望避免风险或将其最小化。</li><li><strong>在考虑某项投资时</strong>，投资决策应将风险以及潜在收益考虑在内。简单的讲，国债和企业债都是7%的收益，你肯定会选择国债。因为相比企业债，国债风险更小。因为买国债的人多，所以国债的价格一定会比企业债的价格高。</li><li><strong>在考虑投资结果时</strong>，收益仅仅代表收益，评估所承担的风险是必须的。要评估我们的收益是承担很小的风险还是很大的风险得来的。</li></ul><h2 id="第六章识别风险">第六章识别风险</h2><p>人们普遍认为，风险在经济衰退以及经济由盛转衰时增大，与此相反，认为风险在经济上升时增加，并且随着经济失衡的扩大在衰退期化为现实的想法，可能更好。</p><p>无论基本面有多好，人类的贪婪与犯错倾向都会把事情搞得一团糟。</p><p>承接上一章，我们要<strong>控制风险就需要识别风险，要识别风险就要理解风险</strong>。这里再说一下风险的定义：⭐风险意味着即将发生的结果的不确定，以及不利结果发生时损失概率的不确定。</p><h3 id="如何识别风险？">如何识别风险？</h3><p>识别风险往往从投资者盲目乐观并因此对某项资产出价过高的时候开始。换句话说就是，<strong>高风险主要伴随高价格出现</strong>。无论是对被估价过高从而定价过高的单项证券或其他资产，还是对在看涨情绪支持下价格高企的整体市场，⭐<strong>在高价时不知规避反而蜂拥而上都是风险的主要来源</strong>。</p><p>我认为高风险和低预期收益不过是同一硬币的两面，二者都源自于高价格。因此，⭐<strong>洞察价格与价值之间的关系是成功应对风险的重要组成部分</strong>。<em>当市场价格被推高，以至价格意味着更多的损失而不是潜在回报时，风险就增加了。</em></p><p>普遍相信没有风险本身就是最大的风险。</p><h3 id="为什么要识别风险？">为什么要识别风险？</h3><p>风险的实现远比感知风险来得简单粗暴。人们过高地估计了自己认识风险的能力，过低地估计了规避风险所需的条件；因此人们在不知不觉中接受了风险，由此促进了风险的产生。这也就是我们为什么要用<em>第二层次思维</em>来思考这个问题所在的原因了。</p><h2 id="第七章控制风险">第七章控制风险</h2><p>投资者的工作是以盈利为目的聪明的承担风险。能够出色的做到这一点，是最好的投资者与其他投资者之间的区别。</p><h3 id="如何控制风险？">如何控制风险？</h3><p>无论风险控制取得怎样的成绩，在繁荣时期是永远也表现不出来的，因为风险是隐蔽的，不可见的。能观察到的是损失，而损失通常只在风险与负面事件相碰撞时才会发生。⭐重要的是我们要意识到，即使没有发生损失，风险也有可能存在。因此没有损失并不一定意味着投资组合是安全的。我们应该在繁荣时更加注意自己的投资组合，并观察它是低风险还是高风险。</p><p>这里有两个点值得一说：</p><ul><li>承担同样的风险，但收益比普通投资者高一些</li><li>获取同样的收益，但承担的风险比普通投资者小一些</li></ul><p>作者认为第二种是杰出投资者的表现。</p><h3 id="为什么要控制风险？">为什么要控制风险？</h3><p>首先我们要明确一点，⚡ 就是<strong>风险控制</strong>与<strong>风险规避</strong>之间的重要区别。风险控制是规避损失的最佳方法。反之，风险规避则很有可能会连同收益一起规避。</p><p>贯穿长期投资成功之路的，是风险控制而不是冒进。在整个投资生涯中，大多数投资者取得的结果将更多的取决于<strong>失败投资</strong>的次数及程度，而不是<strong>成功投资</strong>的程度，因为良好的风险控制是优秀投资者的标志。</p><h2 id="⭐第八章关注周期">⭐第八章关注周期</h2><p>牢记万物皆有周期是至关重要的。周期永远胜在最后。任何东西都不可能朝同一个方向永远发展下去。坚持以今天的事件推测未来是对投资者健康最大的危害。<strong>反者道之动</strong></p><h3 id="什么是周期？">什么是周期？</h3><p>很少有事物是直线发展的。事物有进有退，有盛有衰。经济、市场和企业同样如此：<strong>起伏不定</strong>。</p><p>周期是自我修正的，周期的逆转不一定依赖外源性时间。周期的发展趋势本身就是造成周期逆转的原因。因此我又要提到我们的一句老话：<strong>祸兮福之所倚，福兮祸之所伏</strong>。</p><p>世界具有周期性的根本原因是人类的参与，人是情绪化并且善变的，缺乏稳定性和客观性。周期的极端性主要源自人类的情绪与弱点、主观与矛盾。</p><h3 id="怎么去关注周期？">怎么去关注周期？</h3><p>作为投资者，我们应重点关注☢️<strong>信贷周期</strong>，它具有必然性、极端波动性，也具有为适应它的投资者创造机会的能力。只要经济有微小的波动，就能导致信贷可得性的巨大波动，并对<strong>资产价格及其背后的整体经济</strong>造成巨大影响。</p><p>这个过程如下：</p><ol><li>经济进入繁荣期。资金提供者增多，资本基础增加。</li><li>坏消息极少，因此贷款风险与投资风险似乎“已经减少”。</li><li>风险规避消失。</li><li>金融机构开始扩大业务，通过降息、降准等提供更多资本。</li><li>资本提供者开始为不具备资格的借款人和项目提供资本，即资本投资项目的资本成本超过其资本收益最终导致没有资本收益。这时候————周期的上升部分就开始出现逆转。❗</li><li>损失导致借款人畏难回避。</li><li>风险规避增加，伴随着利率、信贷限制与条款要求的提高。</li><li>可得资本减少————在周期的谷底，只有资质最好的借款人才能借到资本。</li><li>企业迫切需要资本。借款人无法展期债务，导致债务违约及企业破产。</li><li>这一过程导致并加剧经济萎缩。</li></ol><p>还有一点比较重要，认为周期性已经结束所体现的思维方式，基于一个危险的前提——“<strong>这次是不同的</strong>”。这6个字应该警醒我们，或许对我们还预示着赢利的机会。<strong>因此当出现这种形式的错误时，具有识别它的能力是至关重要的</strong>。</p><h3 id="为什么要关注周期？">为什么要关注周期？</h3><p>投资就像生活一样，完全有把握的事非常少。价值可以消失，预测可能出错，环境可以改变，“有把握的事”可能失败。但我们应该把握住两个概念：</p><ul><li>⭐法则一：多数事物都是周期性的。</li><li>⭐法则二：当别人忘记法则一时，某些最大的盈亏机会就会到来。</li></ul><p>证明“一切会更好”的最佳时机是存在的，那就是当市场触底、人人都以廉价抛售的时候。</p><p>危险发生在市场创记录地触及以往从未达到过的高点的时候。这种情况过去有，未来也将会再次发生。</p><p><strong>我们应该意识到，周期是永远不会中断的，并将这种认识转化为自身的优势</strong>。</p><p>😄<strong>我们无法预测，但我们可以准备</strong></p><h2 id="⭐第九章钟摆意识">⭐第九章钟摆意识</h2><p>当形式良好、价格高企时，投资者迫不及待地买进，把所有谨慎忘在脑后。随后，当四周一片混乱，资产廉价待沽时，他们又完全丧失了承担风险的意愿，迫不及待地卖出。永远如此。</p><h3 id="什么是钟摆意识？">什么是钟摆意识？</h3><p>投资市场遵循钟摆式摆动：</p><ul><li>处于<strong>兴奋</strong>与<strong>沮丧</strong>之间</li><li>处于值得庆祝的<strong>积极发展</strong>与令人困扰的<strong>消极发展</strong>之间</li><li>因此，处于<strong>定价过高</strong>与<strong>定价过低</strong>之间</li></ul><p>这种摆动是投资世界最可靠的特征之一。当投资者风险容忍过度时，证券价格体现的是更高的风险而不是收益。当投资者过度规避风险时，价格体现出来的收益高于风险。</p><p>作者在这一章将投资的主要风险归结为两个：<strong>亏损的风险</strong>和<strong>错失机会的风险</strong>。简而言之就是当整体市场或单个企业过于热情的时候会出现亏损的风险，而当市场或单个企业过于冷淡的时候会出现错失机会的风险。😄理想状态下，投资者会使两者达到平衡。当钟摆摆动到最高点时，一种风险或另一种风险一次又一次的占据上风。</p><p>这里我们总结一下作者对钟摆的认识：</p><ul><li>理论上，恐惧与贪婪是两个极端，多数时候钟摆应处于两极之间，但它在中点停留的时间并不长</li><li>投资者心理是主要因素，在它的影响下，钟摆通常处于摆向端点或从端点摆回的过程中</li><li>钟摆不可能永远朝向某个端点摆动，或永远停留在端点处</li><li>与钟摆类似，投资者心理朝向某个极端的摆动，最终回成为促进反方向回摆的力量</li><li>自端点摆回的速度通常更快——因此，比朝向端点摆动的事件要短得多</li></ul><h3 id="怎么去利用钟摆意识？">怎么去利用钟摆意识？</h3><p>牛市有三个阶段：</p><ul><li>第一阶段，少数有远见的人开始相信一切会更好。</li><li>第二阶段，大多数投资者意识到进步的确已经发生。</li><li>第三阶段，人人断言一切永远会更好。</li></ul><p>熊市也有三个阶段：</p><ul><li>第一阶段，少数善于思考的投资者意识到，尽管形势一片大好，但不可能永远称心如意。</li><li>第二阶段，大多数投资者意识到势态的恶化。</li><li>第三阶段，人人相信形势只会更糟</li></ul><p>一切都是相辅相成的。任何事件都不是孤立的或偶然的。相反，他们都是一定的循环模式的组成部分，是可以掌握并从中获利的。</p><h3 id="为什么要有钟摆意识？">为什么要有钟摆意识？</h3><p>我们能够肯定的事情之一是，极端市场行为会发生逆转。相信钟摆将朝着一个方向永远摆动——或永远停留在端点的人，最终将损失惨重；了解钟摆行为的人则将受益无穷。</p><h2 id="第十章抵御消极影响">第十章抵御消极影响</h2><p>得到更多的渴望、担心错过的恐惧、与他人比较的倾向、群体的影响以及对胜利的期望——这些因素几乎是普遍存在的。因此它们对大多数投资者和市场都有着深远的影响。结果就是错误——频繁的、普遍的、不断重复发生的错误。</p><h3 id="消极影响有哪些？">消极影响有哪些？</h3><ul><li><p><strong>贪婪</strong>（对财富或利润过度的或无节制的占有欲）</p><blockquote><p>对利润的渴望是驱动市场及整体经济运转的最重要的因素之一。⚡危险就产生于<strong>渴望</strong>变成<strong>贪婪</strong>的时候。</p></blockquote></li><li><p><strong>恐惧</strong></p><blockquote><p>在投资领域，这个词不代表理性的、明智的风险规避。相反，恐惧就像贪婪一样，意味着过度。因此有时恐惧更像是恐慌。恐惧是一种过度忧虑，妨碍了投资者采取本应采取的积极行动。</p></blockquote></li><li><p><strong>自愿终止怀疑</strong>。这种情绪是的人们愿意接受任何能让他们致富的可疑的建议。在投资过程中需要大量的怀疑，而怀疑并不会导致投资损失。</p></li><li><p><strong>从众心理</strong>。即使群体共识存在显而易见的荒谬，也不坚持己见。不从众会感觉受到了排斥。从众的压力和赚钱的欲望致使人们放弃了自己的<strong>独立性和怀疑精神</strong>，将与生俱来的风险规避抛诸脑后，转而去相信毫无意义的东西。</p></li><li><p><strong>嫉妒</strong>。一个在孤立环境下感觉快乐的人，当他看到别人做的更好时，可能会变得痛苦不堪。在投资领域大多难以坐视别人赚钱比自己多这一事实。</p><blockquote><p>这里作者举了一个例子：一个防御型投资基金年收益16%，但是同行的23%令他沮丧不堪。但后来这只防御型基金只有3%的收益，而同行大多出现亏损，他反而兴高采烈。这很有意思。当16%的收益时他沮丧，而3%时他却很高兴。这就是人们都有与别人相比较的倾向，这种倾向会对投资过程产生不利的影响。</p></blockquote></li><li><p><strong>自负</strong>。就是在得到更好的收益时，要认清是自己的能力还是运气，这一点很多人容易搞混，认为运气是实力的一部分。而我要说的是——<strong>运气带来的东西，也会被运气带走</strong>。实力带来的东西，即使短暂的被运气拿走了，但是实力还会再带来更多。</p></li><li><p><strong>妥协</strong>。这种现象通常出现在周期后期的投资行为特征。投资者会尽他们的最大努力坚持自己的信念，但是当经济和心理压力变得无法抗拒时，他们会放弃并跟风倒。</p></li></ul><p>⭐我们应该默默无闻的认真工作，在好的年份赚取稳定的收益，在坏的年份承担更低的损失。</p><p>这一章还讲了一个比较有意思的词😄“银弹”——当市场、个体或一种投资技术获得短期高额收益时，它通常会吸引人们的过度（盲目）崇拜。</p><p>作者的结论是，⚡理性者有可能屈服于情感的破坏性力量。</p><h3 id="怎样抵御消极影响？">怎样抵御消极影响？</h3><p>没有告诉我们市场已经摆向非理性极端的公式；没有保证我们永远做出正确决策的完美工具；也没有保护我们不受消极情绪影响的魔法药丸。我们应该注意下面这几点：</p><ul><li><strong>对内在价值有坚定的认识</strong>。</li><li><strong>当价格偏离价值时，坚持做该做的事</strong>。</li><li><strong>足够了解以往的周期</strong>——先从<strong>阅读</strong>和与经验丰富的投资者交谈开始，之后通过<strong>经验积累</strong>——从而了解市场过度膨胀或过度萎缩最终得到的是惩罚而不是奖励。</li><li><strong>透彻理解市场对极端市场投资过程的潜在影响</strong>。</li><li><strong>当事情看起来“好到不像真的”时，它们通常不是真的</strong>。</li><li><strong>当市场错误估价的程度越来越深以致自己貌似错误的时候，愿意承受这样的结果</strong>。</li><li><strong>与志趣相投的朋友或同时相互支持</strong>。</li></ul><p>😄这些方法并不一定奏效，但它们能够赋予我们可以一搏的机会。</p><h3 id="为什么要抵御消极影响？">为什么要抵御消极影响？</h3><p>很多人会通过分析得出相似的认知结论。但是，因为各自所受的心理的影响不同，他们在这些结论的基础上所采取的行动各不相同。⭐最大的投资错误不是来自信息因素或分析因素，而是来自<strong>消极心理因素</strong>。这些因素往往会导致错误决策。</p><h2 id="⭐第十一章逆向投资">⭐第十一章逆向投资</h2><p>在别人沮丧地抛售时买进，在别人兴奋地买进时抛售需要最大的勇气，但它能带来最大的收益。</p><h3 id="什么是逆向投资？">什么是逆向投资？</h3><p>这里我们要先知道，大多数投资者都是——趋势跟踪者，而杰出的投资者恰恰相反。</p><p>卓越投资需要第二层次思维——一种不同于常人的更复杂、更具洞察力的思维方式。从定义上来看。大多数投资者不具备这种思维能力，因此成功的关键不可能是群体的判断。</p><p>这里有几点可以让我们能很好的理解逆向投资的原理：</p><ul><li>我们永远不知道市场的钟摆能摆多远，也不知道什么时候会发生逆转。</li><li>可以肯定的是，一旦市场达到极端，它最终会摆回。</li><li>由于影响市场的各种因素的易变性，没有任何工具是完全靠得住的（包括逆向投资）。</li><li>逆向投资并不是稳赚不赔的方法，在大多数情况下，没有值得下注的<strong>过度市场</strong>。</li><li><strong>估价过高与明天就会跌</strong>是截然不同的。市场可以被高估或低估，并且能够将这种状态维持一段时间有时候长有时候短。</li><li>⭐有时候<strong>逆向投资</strong>本身会变得过于热门，从而有可能会被误以为是群体行为。</li></ul><h3 id="怎么去逆向投资？">怎么去逆向投资？</h3><p>“低买高卖”是一句古老的名言，但是被卷入市场周期中的投资者却常常反其道而行之。正确的做法应该是逆向投资：</p><p>⭐在人们冷落时买入，在人们追捧时卖出。这样做需要很大的勇气。</p><p>有时候我们仅仅做与大众相反的投资是不够的。我们必须在推理和分析的基础上，辨别如何脱离群体思维才能获利，我们必须在进行逆向投资的时候，知道与大众的做法相反，还要知道大众错在哪里。</p><p>投资成功需要坚定的立场，即使它因为与群体共识存在分歧而<strong>令人不安</strong>。如果我相信别人都相信的故事，我就会和他们做同样的事。显然这不是逆向投资者应该做的。</p><p>😄我们应时刻保持怀疑，在恰当的时间说出：<strong>不对，事情好到不像真的</strong>。或者，<strong>不对，事情坏到不像真的</strong>。比如最近的中国2024年7、8月份，大家都抛售房地产行业，以致于房地产行业股票的价格低到令人发指，但是有少部分人已经认识到，事情好像坏道不是真的。果真如此？到2024年10月份房地产行业的股票价格短短两个月就上升了50%至100%。</p><p>我们需要认识到，我们<strong>不可能买在最低点和卖在最高点</strong>，当我们去接<em>刀子</em>时，如果<em>刀子</em>停止下落，尘埃已然落定，不确定性得到解决的时候，<strong>利润丰厚的特价股也将不复存在</strong>。</p><h3 id="为什么要逆向投资？">为什么要逆向投资？</h3><p>几乎所有的最佳投资中，他们通常都是<strong>逆向投资</strong>。作为逆向投资者，⚡我们的任务就是尽可能谨慎熟练的接住落下的“刀子”。这也是<strong>内在价值</strong>的概念如此重要的原因。如果我们对价值的认识能够让我们在<strong>别人都在卖出的时候买进</strong>——并且如果我们的<strong>观点事后被证明是正确的</strong>——那么这就是以<strong>最低风险获取最高回报</strong>的途径。</p><h2 id="第十二章寻找便宜货">第十二章寻找便宜货</h2><p>⭐在大多数人不愿做的事情中，通常能够发掘出最佳机会。</p><h3 id="如何定义便宜货？">如何定义便宜货？</h3><p><strong>价格显著低于内在价值的公司</strong>，大众所厌恶的。但其基本面是稳定的（就像彼得林奇说的，没有负债的公司，你想让他破产都是见非常困难的事）但表面看上去是有问题的。</p><h3 id="怎么寻找并构建便宜货投资组合？">怎么寻找并构建便宜货投资组合？</h3><p>便宜货一般具有下列特征：</p><ul><li>鲜为人知或人们一知半解。</li><li>表面上看基本面有问题的。</li><li>有争议、不合时宜或令人恐慌的。</li><li>被认为不适于“正规”投资组合的。</li><li>不被欣赏、不受欢迎和不受追捧的。</li><li>收益不佳的追踪记录。</li><li>最近有亏损问题、没有资本增益的。</li></ul><p>⚡便宜货存在的必要条件是感觉必须远不如现实。也就是说，最好的机会通常是在大多数人不愿做的事情中发掘出来的。</p><p>构建投资组合的过程是卖出不那么好的投资从而留出空间买进最好的投资（⭐投资是相对选择的训练），不碰最差的投资，这个过程需要以下步骤：</p><ul><li>潜在投资的清单⭐（在能力圈范围的投资，超出认知的就不要放在这个清单里面）</li><li>对它们内在价值的估计</li><li>对其价格相对于内在价值的感知</li><li>对每种投资涉及到的风险及其对在建投资组合的影响的了解</li></ul><h3 id="为什么要寻找便宜货？">为什么要寻找便宜货？</h3><p>我们改变不了市场，若想参与其中，我们唯一的选择就是从现存的可能性中选择最好的。这就是相对决策。</p><p>便宜货的价值在于其<strong>不合理的低价位</strong>——因而具有不寻常的收益风险比率，因此它们呢就是投资者的“圣杯”。😄我们是积极投资者，因为我们相信我们可以通过识别好的机会而击败市场。另一方面，<strong>许多摆在我们面前的“特殊交易”好到不像真的，避开它们是取得投资成功的关键</strong>。因此，我们要对<strong>有效市场假说的怀疑和成为一个积极的投资者两方面保持平衡</strong>。投资者可能会因心理弱点、错误分析或拒绝进入不确定领域而犯错。⚡这些错误为能够看到别人错误的第二层次思维者创造了便宜货。</p><p>公平定价的资产从来不是我们的目标，因为他们只能带来有风险的一般收益，当然，定价过高的资产对我们更没有任何好处。我们的目标是寻找估价过低的资产。</p><h2 id="第十三章耐心等待机会">第十三章耐心等待机会</h2><p>市场不是有求必应的机器，它不会仅仅因为你需要就提供高额收益。</p><h3 id="什么对于我们来说是机会？">什么对于我们来说是机会？</h3><p>在低收益环境（普遍价格偏高）中要想得到较高收益，需要具备逆流而上的能力，以及找到相对较少的制胜投资的能力。这显然不是我们所说的机会。⭐高收益环境（普遍价格较低）所提供的高额收益机会是通过低价买进实现的，并且通常是低风险的，这才是我们所说的<strong>机会</strong>。比如，2000年的互联网泡沫后，2008年的危机后。这些时机都出现了高额收益的机会，而且是通过<strong>损失概率</strong>很小的投资做到这一点的。</p><h3 id="如何耐心等待机会？">如何耐心等待机会？</h3><p>我们要等待投资机会的到来而不是追逐投资机会。在卖家积极卖出的东西中挑选，而不是固守想要什么才买什么的观念，这样的交易往往会更划算。</p><p>买入的绝佳机会出现在资产持有者被迫卖出的时候，在经济危机中这样的人比比皆是。比如近期中国从2021年开始，房地产泡沫开始破裂后，大部分基金投资者开始赎回他们的投资，所以基金经理不得不<strong>被迫卖出</strong>所持有的资产，这个时间段一直持续到了至今（2024年9月），国家开始出台强效政策试图救活房地产行业在经济中的流动性，才有所缓止。但是否有效，我们静心观之。⚡但是2023到2024这个过程中确实出现了我们所说的机会（有一部分优质公司，因房地产行业下行的带动下，股价跌到了非常低的水平）。</p><p>😄潜在卖家会在卖个好价和尽快卖掉之间做出权衡。而强制卖家的妙处在于他们别无选择，他们必须不计价格卖出。如果我们是交易的另一方，那么“不计价格”这四个字将是世界上最美妙的词汇。</p><p>在危机中关键要做到远离强制卖出的力量，并<strong>把自己定位为买家</strong>。要达到这一标准，我们需要做到以下几点：</p><ul><li>坚信价值</li><li>少用或不用杠杆</li><li>有长期资本和顽强的意志力</li></ul><p>在逆向投资态度和强大资产负债表支撑下，耐心等待机会，便能在灾难中收获惊人的收益。</p><h3 id="为什么要等待机会？">为什么要等待机会？</h3><p>在周期中逆势而动的逆向投资者们有了扬名立万的黄金机遇，但并不是总有伟大的事情等着我们去做，有时候我们可以通过敏锐的洞察和相对消极的行动将成果最大化。耐心等待机会——等待便宜货——往往是最好的策略。</p><h2 id="第四十章认识预测的局限性">第四十章认识预测的局限性</h2><p>😸世界上有两类预言家：无知的，和不知道自己无知的。赔钱的人有两种：<strong>一无所知</strong>的和<strong>无所不知</strong>的。</p><h3 id="预测的局限性有哪些？">预测的局限性有哪些？</h3><p>我们有可能推知未来将会发生什么，但是在最需要预测的紧要关头，我们却几乎无法预测未来将会发生什么。</p><ul><li>多数时候人们会根据以往预测未来。</li><li>人们不一定是错的：未来多数时候在很大程度上是以往的重复。</li><li>然而根据以往的经验作出的准确预测并不具备太大价值（概率太小）。</li><li>然而，未来每隔一段时间就会与过去大不相同。此时的准确预测具有巨大价值，但也是预测最难准确的时候。</li><li>某些关键时刻（比如2000年，2008年）作出的预测能最终被证实是对的，表明准确地预测关键事件是有可能的，但同一个人持续做出准确预测是不太可能的。</li><li>总而言之，预测的价值很小。</li></ul><p>这里我补充一点：巴菲特在1999年提示过，美国股市泡沫严重。2007年也提示过股市泡沫。两次他都用行动（抛售）证明了，人狂热的时候做出逆向决策是多么重要，也说明有人能大概推测未来，但并不是所有人都可以，他也只是<strong>个例</strong>。但仔细观察会发现，其实他遵循的就是<strong>价值和价格的关系</strong>这一点。</p><h3 id="怎么去认识预测的局限性？">怎么去认识预测的局限性？</h3><p>如何去看待说自己能预测，并预测准确的人呢？</p><p>😄这里我们可以借用<strong>塔勒布</strong>的《随机致富的傻瓜》一书中的知识。</p><blockquote><p>概率中的一个经典现象——⭐<strong>幸存者偏差</strong>，由于我们只看到成功者，而由此形成的对机遇的歪曲看法。</p><p>比如说，我们常会认为长得英俊漂亮的人薪水会比较高，其实这是因为我们经常只会注意到那些薪水比较高的人，或者说那些薪水比较高的人容易被我们注意到罢了。</p><p>这部分举了一个很有名的例子，就是让很多很多的猴子放在打字机前，他们肯定会有那么一两只会打出一字不差的《伊利亚特》叙事诗。换句话说，从事商业的人数越多，其中某个人单靠机遇便能有惊人表现的可能性就越高。</p><p>作者还引用了<strong>生日悖论</strong>，随便找一个人，你和他生日是同一天的概率是<code>0.27%</code>，可是如果一个房间内有<code>23</code>个人，有两个生日相同的概率高达<code>50%</code>，在生活中，我们随处遭遇着幸存者偏差，把一个变量的极大值分布误作为那个变量本身。</p><p>用投资的思维看的话，就是我们通常只会关注在投资领域成功的投资者，比如巴菲特等，我们会对我们也可以成为像他一样成功的投资者产生误解，就连巴菲特自己都说过，他只不过是中了<strong>卵巢红利</strong>（生在一个对的地方，并做了一些对的事情）。我们只要仔细观察我们的股市就会发现，中国股民有接近3亿，但是成功的寥寥可数。</p></blockquote><p>很少有人把预测未来转化为投资优势的知识，<strong>但是我们对细节关注越多，越有可能获得知识优势。我们应尽量弄清自己在周期和钟摆中所处的阶段。这不会令未来变得可知，但是它能帮助我们为可能的发展作好准备</strong>。简单的说是，我们不能靠预测的结果指导我们的行为，但是我们可以细心观察或预测大概概率（就像，我不需要精确的错误，我需要的是模糊的正确），并作好准备应对。</p><h3 id="为什么要认识预测的局限性？">为什么要认识预测的局限性？</h3><p>无论是进行脑外科手术、数学竞赛还是投资，过高估计自己的认知或行动能力都是<strong>极度危险</strong>的。正确认识自己的<strong>可知范围</strong>（巴菲特说的能力圈）——适度行动而不冒险越界——会令我们获益匪浅。</p><h2 id="⭐第十五章正确认识自身">⭐第十五章正确认识自身</h2><p>我们不知道一个趋势会持续多久，不知道它何时反转，也不知道导致反转的因素以及反转的程度。但我们应该相信，趋势迟早都会终止。没有任何东西能够永远存在。</p><h3 id="自身指的是什么？">自身指的是什么？</h3><p>这里我们说的自身是以下两点：</p><ul><li>自己的知识、常识、情绪</li><li>自己的资源（可以利用的投资资金）</li></ul><p>当然这其中还有，自身现在处于市场周期的那个阶段。</p><h3 id="在投资中怎么认识自身处于周期的哪个阶段？">在投资中怎么认识自身处于周期的哪个阶段？</h3><p>我们在投资中面对周期，我们或许永远不会知道要去往何处，但最好弄明白我们身在何处。也就是说，即使我们不能预测周期性波动的时间和幅度，力争<strong>弄清我们处于周期的哪个阶段并采取相应的行动</strong>也是很重要的。这并不是说知道自己处于哪个阶段就会准确地预知接下来的事情。但对我们自身处境的正确认识会为我们了解未来事件、采取相应对策提供宝贵的洞见。</p><p>下面几点做法在对认识自身中或许会有帮助：</p><ul><li>当市场已经到达极端的时候，保持警惕。</li><li>相应地调整我们的行为。</li><li>⭐拒绝向<strong>导致无数投资者在市场顶部或底部犯下致命错误的群体行为</strong>看齐。</li></ul><p>😄了解未来很困难，但是了解现在没有那么难。第九章的牛市和熊市的几个阶段也可以用来观察。</p><p>我们必须力求了解我们身边所发生的事情的含义。当其他人盲目自信、积极买入时，我们应加倍小心；当其他人不知所措或恐慌性抛售时，我们应该更加积极。</p><ul><li><p>收益率差（利差）是收窄还是扩大？——收益率差 = 企业债券收益率 - 国债收益率</p><blockquote><p><strong>利差收窄</strong></p><p>在信用风险降低的情况下，低等级债券与无风险债券之间的收益率差可能会减小。⚡通常发生在经济环境改善、企业盈利能力增强、违约风险降低、经济稳定增长、通货膨胀率较低、央行政策利率保持稳定的时期。</p><p><strong>利差扩大</strong></p><p>在信用风险方面，收益率差扩大可能反映市场对某些行业或企业的担忧增加。例如，在经济衰退或行业不景气的情况下，特定行业或企业的违约风险可能会上升，导致相关债券的收益率差扩大。⚡通常发生在经济不确定性增加、通货膨胀率上升、央行政策利率调整或市场预期未来利率变化较大的时期。</p></blockquote></li></ul><p>作者这里给出了个表格用于测试市场温度（市场现在的阶段），当<strong>呆滞项</strong>逐渐变成<strong>活跃项</strong>时是往牛市走，反过来则是往熊市走。全部项目都在一个大项里面就代表最高和最低了。</p><table><thead><tr><th style="text-align:center">经济</th><th style="text-align:center">活跃</th><th style="text-align:center">呆滞</th></tr></thead><tbody><tr><td style="text-align:center">前景</td><td style="text-align:center">积极</td><td style="text-align:center">消极</td></tr><tr><td style="text-align:center">贷款人</td><td style="text-align:center">急切</td><td style="text-align:center">谨慎</td></tr><tr><td style="text-align:center">资本市场</td><td style="text-align:center">宽松</td><td style="text-align:center">紧缩</td></tr><tr><td style="text-align:center">资本</td><td style="text-align:center">充足</td><td style="text-align:center">短缺</td></tr><tr><td style="text-align:center">贷款条款</td><td style="text-align:center">宽松</td><td style="text-align:center">严格</td></tr><tr><td style="text-align:center">利率</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">利差</td><td style="text-align:center">窄</td><td style="text-align:center">宽</td></tr><tr><td style="text-align:center">投资者</td><td style="text-align:center">乐观、自信、渴望买入</td><td style="text-align:center">悲观、担忧、丧失购买兴趣</td></tr><tr><td style="text-align:center">资产持有人</td><td style="text-align:center">乐于持有</td><td style="text-align:center">急于出手</td></tr><tr><td style="text-align:center">卖家</td><td style="text-align:center">少</td><td style="text-align:center">多</td></tr><tr><td style="text-align:center">市场（整个市场交易量）</td><td style="text-align:center">拥挤</td><td style="text-align:center">急需关注</td></tr><tr><td style="text-align:center">基金</td><td style="text-align:center">申购门栏高、每天都有新基金</td><td style="text-align:center">对所有人开放、只有最好的才能募到资金</td></tr><tr><td style="text-align:center">近期表现</td><td style="text-align:center">强</td><td style="text-align:center">弱</td></tr><tr><td style="text-align:center">资产价格</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">预期的回报</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">风险</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">人群特征</td><td style="text-align:center">积极进取、广泛投资</td><td style="text-align:center">谨慎守纪、有选择地投资</td></tr></tbody></table><h3 id="为什么要认识自身？">为什么要认识自身？</h3><p>市场在周期性运动，有涨有跌。钟摆在不断摆动，极少停留在弧线的中点。这是危险还是机会？投资者该如何应对？对于这两个问题我们只要💪<strong>努力了解我们身边所发生的事情，并以此指导我们的行动</strong>。</p><h2 id="第十六章重视运气">第十六章重视运气</h2><p>每隔一段时间，就会有一个在不可能或不明朗的结果上下了高风险赌注的人，结果他看起来像个天才。但我们应该认识到，他之所以能够成功，靠的是运气和勇气。而不是技能。（幸存者偏差）</p><h3 id="怎么识别运气？">怎么识别运气？</h3><p>随机性（运气）对结果起着巨大的作用，我们应区别对待<strong>随机事件</strong>与<strong>非随机事件</strong>带来的结果。我们在评判投资结果是否具有<strong>可重复性</strong>时，必须考虑随机性对我们的影响，必须考虑我们的业绩靠的是<strong>技能</strong>还是单纯的<strong>运气</strong>。</p><p>例：有一个投资者在2023年获得200%的收益，超过了所有人，但其他年份收益率却表现平平只有3%甚至有时是负的，你认为他的业绩靠的是运气还是技能？</p><p>例：另一个投资者从1956年开始直到2023年，每年平均收益而19%左右，很显然2023年他的收益远远低于200%，那你认为他的投资业绩是靠运气还是技能？</p><h3 id="为什么要重视运气？">为什么要重视运气？</h3><p>有很大概率发生并不代表一定发生，也有可能发生小概率事件。在一个人成功的时候，运气看起来就像是技能一样。作为投资者所取得的成功深受偶然因素的影响。</p><p>⭐适度尊重风险，知道未来不能预知，明白未来是概率分布的并相应地进行投资，坚持防御型投资，强调避免错误的重要性，这点在作者看来，就是有关聪明投资的一切。</p><h2 id="第十七章多元化投资">第十七章多元化投资</h2><p>有老投资者，有大胆的投资者，但没有大胆的老投资者。</p><h3 id="什么是多元化投资？">什么是多元化投资？</h3><p>投资不同领域、不同的产业，通过分散投资来降低整体投资组合的风险。⚡多元化投资属于防御型投资，反之，集中化投资属于进攻型投资。这两种策略的<strong>思维模型</strong>有很大的不同。</p><h3 id="怎么去多元化投资？">怎么去多元化投资？</h3><p>多元化投资是防御型投资的关键策略之一。通过投资多个不同的资产，可以分散风险，提高投资组合的稳定性。比如我常有的如下比例：</p><ul><li>国债15%</li><li>货币基金或企业债券    39%</li><li>黄金    8%</li><li>大宗商品    8%</li><li>股票    30%</li></ul><h3 id="为什么要多元化投资？">为什么要多元化投资？</h3><p>在主流股票市场主动寻求<strong>致胜投资</strong>未必有好处。相反，投资者应尽量避免<strong>致败投资</strong>。换句话说，攻守选择没有对错之分。条条大陆通罗马，我们的决策必须基于我们的性格与学识、我们对自己能力的信任程度以及我们所在的市场。</p><p>这本书强调的也是<strong>防御型投资</strong>（就是避免错误投资），也就是在投资组合中要有足够的<strong>安全边际</strong>。这里可以用一个例子来解释安全边际：</p><blockquote><p>⭐我们通过计算、分析，发现一些估值为100元的资产。如果90元买进，我们就得到一个获利的好机会，同时，如果我们推断过于乐观，也会有一定的损失概率。但是如果我们用60元而不是90元买进，我们的损失概率就会减少。减少的这30元就为我们的失误提供了额外的空间，同时仍然有很好的获利机会。低价是安全边际的源泉。</p></blockquote><p>我们在长期的投资生涯中持续性是我们能够存活的根基，所以防守型投资是我们这样的业余投资者最好的选择。尤其在资金不断增长后，越是大资金越寻求的是安全。</p><h2 id="⭐第十八章避免错误">⭐第十八章避免错误</h2><p>投资者几乎无须做对什么事，他只需能够避免犯重大错误。</p><h3 id="有哪些错误？">有哪些错误？</h3><p>错误的形式多种多样——多到不胜枚举。以下是一些常见的错误：</p><ul><li>分析过程中数据或计算错误导致错误股价。<strong>（分析错误）</strong></li><li>对各种可能性及其后果估计不足。<strong>（想象无能错误）</strong></li><li>贪婪、恐惧、嫉妒、自负、终止怀疑、盲从和屈服达到极致。最终，风险承担或风险容忍过度。<strong>（心理错误）</strong></li><li>价格显著偏离价值，投资者没有注意到这种偏离甚至还要推波助澜。<strong>（认识错误）</strong></li></ul><h3 id="怎么去避免错误？">怎么去避免错误？</h3><p>对于分析错误，我们应该更仔细的收集资料，以及对不同资产的估值方式区别对待，没有一种估值方式可以估计所有资产类别。</p><p>对于想象无能错误，我们要理解一种资产可能会对另一种资产的变化做出反应。理解并预测相关性的影响——进而理解并预测多元化的局限——是风险控制和投资组合管理的主要任务，这很难实现。但是<strong>不能正确预测投资组合内的协同运动是投资失败的一个关键原因</strong>。*比如，一家汽车制造商的股票下跌，共同因素将会导致所有汽车股同时下跌等。*如果我们的投资组合内类别不同且有良好的比例控制可以避免这样的情况出现。</p><p>对于心理错误，我们必须保持警惕，尤其是当人们狂热的时候。</p><p>对于认识错误，市场就是课堂，每天都在传授着各种经验教训。投资成功的关键在于<strong>观察和学习</strong>。</p><p>😄尽管识别和避免具体错误并不容易，但这是一个很好的时机，令我们意识到有许多错误潜伏在暗处，进而持有防御型更强的仓位。做不到这一点也是一个巨大的错误。我们应该做到以下几点：</p><ul><li>留意他人的轻率举动。</li><li>做好应对低迷的心理准备。</li><li>卖出资产，或至少卖出风险更高的资产。</li><li>减少杠杆。</li><li>筹集现金。</li><li>加强投资组合的防御性。</li></ul><p>从定义来看，大多数人都会犯错误，因为如果不是他们的一致性，错误就不会存在。采取相反的行动<strong>需要逆向投资态度</strong>，而长期逆向投资会带来<strong>孤独感</strong>和<strong>错误感</strong>。</p><h3 id="为什么要避免错误？">为什么要避免错误？</h3><p>设法<strong>避免损失</strong>比<strong>争取伟大的成功</strong>更加重要。后者有时会实现，但偶尔失败可能会导致严重后果。前者可能是我们可以更经常做的，并且更可靠，失败的结果也更容易接受。</p><ul><li>投资组合风险过高时，向下的波动会令我们失去信心或低价抛售。</li><li>投资组合风险过低时，会令我们在牛市中表现不佳，但从未有人曾经因此而失败。</li></ul><p>普通的投资者能避免错误就算万幸了，而优秀的投资者期待的却是从错误中获利。</p><h2 id="第十九章增值的意义">第十九章增值的意义</h2><p>增值型投资者的表现是<strong>不对称</strong>的。他们获得的市场收益率高于他们蒙受的损失率，只有依靠技术，才能保证有利环境中的收益高于不利环境中的损失。这就是我们寻找的投资不对称性。</p><p>不对称性——（牛市收益率尽量跟随指数，熊市收益率超过指数或损失低于指数。）</p><h3 id="增值对于经验丰富的投资者的意义是什么？">增值对于经验丰富的投资者的意义是什么？</h3><p>这里作者讲了两个投资理论术语：:😄我们可以仅当参考。</p><ul><li><p>β系数。衡量投资组合相对市场走势的敏感度。<strong>公式为</strong>：$投资组合β系数=w_1<em>β_1+w_2</em>β_2+\cdots+w_n*β_n $（其中 <strong>w</strong> 代表组合中每支股票的资金比例， <strong>β</strong> 代表每只股票的被系数，可以通过金融软件来获取每只股票的β系数）</p><blockquote><p>如果β为1，则市场上涨10%，股票上涨10%；市场下滑10%，股票相应下滑10%。</p><p>如果β为1.1，市场上涨10%时，股票上涨11%；市场下滑10%时，股票下滑11%。</p><p>如果β为0.9，市场上涨10%时，股票上涨9%；市场下滑10%时，股票下滑9%。</p><ul><li><strong>β &gt; 1</strong>：投资组合的波动性高于市场。</li><li><strong>β = 1</strong>：投资组合的波动性与市场一致。</li><li><strong>β &lt; 1</strong>：投资组合的波动性低于市场。</li><li><strong>β = 0</strong>：投资组合与市场完全不相关。</li><li><strong>β &lt; 0</strong>：投资组合与市场呈负相关，即当市场上涨时下跌，反之亦然。</li></ul></blockquote></li><li><p>α系数。个人投资技术，与市场走势无关的获利能力。</p><blockquote><p>假设有一投资组合，通过对其的风险水平分析，资本资产定价模型预测其每年回报率为14%。但是该投资组合的实际回报率为每年19%。此时，这个投资组合的α系数为5%（19%－14%），即表示该组合的实际回报率超过由资本资产定价模型预测的回报率5个百分点。</p><p>α＞0，表示基金或股票的价格可能被低估，建议买入。亦即表示该基金或股票以投资技术获得平均比预期回报大的实际回报。</p><p>α＜0，表示基金或股票的价格可能被高估，建议卖空。亦即表示该基金或股票以投资技术获得平均比预期回报小的实际回报。</p><p>α=0，表示基金或股票的价格准确反映其内在价值，未被高估也未被低估。亦即表示该基金或股票以投资技术获得平均与预期回报相等的实际回报。</p></blockquote></li></ul><p>⚡$投资组合的表现 = α + β * x$(其中x为市场平均收益)</p><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">市场平均收益</th><th style="text-align:center">投资组合收益</th></tr></thead><tbody><tr><td style="text-align:center">❌1</td><td style="text-align:center">10</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">❌2</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">❌3</td><td style="text-align:center">-10</td><td style="text-align:center">-20</td></tr><tr><td style="text-align:center">⭕4</td><td style="text-align:center">10</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">⭕5</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">⭕6</td><td style="text-align:center">-10</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">✔️7</td><td style="text-align:center">10</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">✔️8</td><td style="text-align:center">0</td><td style="text-align:center">-5</td></tr><tr><td style="text-align:center">✔️9</td><td style="text-align:center">-10</td><td style="text-align:center">-15</td></tr></tbody></table><p>上面这个表格粗略的表示了一个投资组合风格的好坏：</p><ul><li>❌表示并不是一个好的组合或一个好的资风格</li><li>⭕表示一个比较好的组合或投资风格</li><li>✔️如果能容忍波动，这个组合或这种投资风格就是技术最高的。</li></ul><h3 id="如何利用技术实现增值？">如何利用技术实现增值？</h3><p>我们怎么实现增值取决于，我们要认清周期，也就是第十五章说的内容。在衰退期，防御型投资者的损失少于积极进取型投资者，在繁荣期，积极进取型投资者比防御性投资者赚得更多。但他们提升价值了吗？未必。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">积极进取型投资者</th><th style="text-align:center">防御型投资者</th></tr></thead><tbody><tr><td style="text-align:center">无技术</td><td style="text-align:center">市场上涨时获利丰厚，市场下跌时损失惨重</td><td style="text-align:center">市场下跌时损失不多，但市场上涨时获利也不多</td></tr><tr><td style="text-align:center">有技术</td><td style="text-align:center">市场上涨时获利丰厚，下跌时不会同等程度下跌</td><td style="text-align:center">市场下跌时损失不多，但上涨时获利颇丰</td></tr></tbody></table><p>😁我个人认为这里讲的<strong>技术</strong>就是：</p><ul><li><strong>准确估值、时刻记住安全边际、保持良好的心态、仔细观察周期的变化</strong>✔️</li></ul><h3 id="为什么要知道增值的意义？">为什么要知道增值的意义？</h3><p>就风险与收益来看，达到市场一致的表现并不难，难的是比市场表现的更好：增值。这里就又要回到第二层次思维者身上去思考。</p><p>⭐为了在市场表现良好时与市场表现一致，一个投资组合必须有适当的β系数和市场相关性，但是，如果市场在上涨时我们得益于β系数，它们会不会在市场下跌的时候伤害我们？如果我们能持之以恒地做到在市场衰退时损失更少、在市场上涨时充分参与，那么原因只有一个：<strong>α系数</strong>，或技术。</p><p>不对称性——上涨时收益高于下跌时的损失，并且超过单纯投资风格所致的结果——应成为我们的目标。</p><p>⚡$投资组合的表现 = α + β * x$(其中x为市场平均收益)</p><h2 id="⭐第二十章最重要的事">⭐第二十章最重要的事</h2><p>成功的投资或成功的投资生涯的基础，是<strong>价值</strong>。我们必须清楚的认识到我们想买进的东西的价值。价值简单来说就是：</p><ul><li><p>账面现金和有形资产价值（账面价值）</p></li><li><p>公司或资产产生现金流的能力（商业模式）</p></li><li><p>以及所有这些东西的增值潜力（增长潜力）</p><blockquote><p>这里可以将增长潜力设置一个<strong>置信区</strong>（参考现实经济形势），比如，你依照以往来看，下一年该公司盈利能力可能增长30%，但是任何事物都有周期，不可能好的一直好，坏的一直坏，我们假设置信区为50%，那么我们得到公司增长潜力就是<code>30%*50%=15%</code></p></blockquote></li></ul><p>为了取得卓越的投资结果，<strong>我们必须学会别人不会的东西、以不同的视角看待问题、对问题分析得更到位</strong>。</p><h2 id="评语">评语</h2><p>本书主要讲解了<strong>逆向思维</strong>的重要性，通过逆向思维来理解市场周期，理解风险，和定义投资风格的好坏，并强调<strong>价值和价格的关系</strong>是最重要的事。</p><p>我认为作者的理论论证是符合现实情况的。但有些时候是有些执着和路径依赖的，虽然防御性投资风格在很多时候是理性并且好的，但是也有很多进攻型投资风格取得连续很好的成绩，比如巴菲特，费雪等。</p><p>作为投资者的我来理解是，不管进攻性还是防御性投资风格，最重要的是要认识到<strong>资产的价值</strong>并在合适的周期阶段进行投资动作（买入和卖出），还要衡量资产比重（仓位），才能取得好的结果，这才是关键。这一点在所有投资大师身上都可以看得到，本杰明格雷厄、巴菲特、彼得林奇、费雪、格林布拉特、西蒙斯等，当然还有本书的作者霍华德马克思。</p><p>一个合理的组合应该是根据市场而定：</p><p>经济周期：繁荣——衰退——萧条——复苏</p><ul><li>经济衰退、萧条期，防御型资产占比应该为70%-80%，进攻型资产占比为30%-20%</li><li>经济复苏、繁荣期，进攻型资产占比应该为70%-80%，防御型资产占比为30%-20%</li><li>平常期（这个时间段非常短），防御型和进攻型各占50%</li></ul>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo制作博客教程</title>
    <link href="/2024/10/25/2024-10-25-Hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <url>/2024/10/25/2024-10-25-Hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Hexo常用命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">1</span>. 文章的书写<br>hexo new [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br><span class="hljs-function"></span><br><span class="hljs-function">eg: <span class="hljs-title">hexo</span> <span class="hljs-title">new</span> &quot;<span class="hljs-title">post</span> <span class="hljs-title">title</span> <span class="hljs-title">with</span> <span class="hljs-title">whitespace</span>&quot; 其中 <span class="hljs-title">layout</span>为<span class="hljs-title">_config.yml</span>中的默认参数值。</span><br><span class="hljs-function"></span><br><span class="hljs-function">-<span class="hljs-title">p</span> --<span class="hljs-title">path</span> 自定义新文章</span><br><span class="hljs-function">-<span class="hljs-title">r</span> --<span class="hljs-title">replace</span> 存在同名文章，替换</span><br><span class="hljs-function">-<span class="hljs-title">s</span> --<span class="hljs-title">slug</span> 文章的<span class="hljs-title">slug</span>，作为新文章的文件名和发布后的<span class="hljs-title">URL</span></span><br><span class="hljs-function"><span class="hljs-title">eg</span>： <span class="hljs-title">hexo</span> <span class="hljs-title">new</span> <span class="hljs-title">page</span> --<span class="hljs-title">path</span> <span class="hljs-title">about</span>/<span class="hljs-title">me</span> &quot;<span class="hljs-title">About</span> <span class="hljs-title">me</span>&quot;</span><br><span class="hljs-function"></span><br><span class="hljs-function">2. 生成静态文件</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">generate</span> 或 <span class="hljs-title">hexo</span> <span class="hljs-title">g</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">-<span class="hljs-title">d</span> 或--<span class="hljs-title">deploy</span> 文件生成后部署网站</span><br><span class="hljs-function">-<span class="hljs-title">w</span> 或--<span class="hljs-title">watch</span> 监视文件变动</span><br><span class="hljs-function">-<span class="hljs-title">b</span> 或--<span class="hljs-title">bail</span> 生成过程中出现异常则抛出。</span><br><span class="hljs-function">-<span class="hljs-title">f</span> 或--<span class="hljs-title">force</span> 强制重新生成文件</span><br><span class="hljs-function">-<span class="hljs-title">c</span> 或--<span class="hljs-title">concurrency</span> 最大同时生成文件数量，默认无限制。</span><br><span class="hljs-function">3. 发布草稿</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">publish</span> [<span class="hljs-title">layout</span>] &lt;<span class="hljs-title">filename</span>&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">4.启动服务器</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">server</span> 启动服务器，<span class="hljs-title">ctrl</span>+<span class="hljs-title">c</span> 结束，默认地址为：<span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:4000/</span><br><span class="hljs-function"></span><br><span class="hljs-function">5.部署网站</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">deploy</span> 或<span class="hljs-title">hexo</span> <span class="hljs-title">d</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">-<span class="hljs-title">g</span> 或--<span class="hljs-title">generate</span> 部署之前写成静态文件</span><br><span class="hljs-function">6.渲染文件</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">render</span> &lt;<span class="hljs-title">file1</span>&gt; [<span class="hljs-title">file2</span>]</span><br><span class="hljs-function"></span><br><span class="hljs-function">-<span class="hljs-title">o</span>或--<span class="hljs-title">output</span> 设置输出路径</span><br><span class="hljs-function">7. 清除缓存文件</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">clean</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">8. 列出网站资料</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">list</span> &lt;<span class="hljs-title">type</span>&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">9. 显示草稿</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> --<span class="hljs-title">deaft</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">10. 自定义当前工作目录</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> --<span class="hljs-title">cwd</span> /<span class="hljs-title">path</span>/<span class="hljs-title">to</span>/<span class="hljs-title">cwd</span></span><br></code></pre></td></tr></table></figure><p>建立一个基于GitHub的个人博客网站是一个既实用又能提升技术能力的好项目。以下是一个详细的步骤清单，帮助你从零开始搭建个人博客：</p><h2 id="第一步注册">第一步注册</h2><h3 id="1-注册和设置GitHub账户">1. <strong>注册和设置GitHub账户</strong></h3><ul><li><strong>注册GitHub</strong>：如果你还没有GitHub账户，需要先注册一个。</li><li><strong>设置个人信息</strong>：完善你的个人资料，包括头像、简介等，这将展示在你的博客页面上。</li></ul><h3 id="2-选择博客框架-工具">2. <strong>选择博客框架/工具</strong></h3><ul><li><strong>静态网站生成器</strong>：如Jekyll（Ruby）、Hugo（Go）、Hexo（Node.js）等，它们可以从Markdown文件生成静态HTML页面。</li><li><strong>主题选择</strong>：选择一个你喜欢的主题，很多框架都有现成的主题库可以选择，也可以自定义。</li></ul><h3 id="3-安装和配置博客框架">3. <strong>安装和配置博客框架</strong></h3><ul><li><strong>安装必要的软件</strong>：根据你选择的框架，安装相应的软件（如Ruby、Node.js等）。</li><li><strong>初始化博客</strong>：按照框架的官方文档，通过命令行工具初始化一个新的博客项目。</li><li><strong>配置_config.yml</strong>（以Jekyll为例）：修改配置文件，设置博客的基本信息，如标题、作者、社交链接等。</li></ul><h3 id="4-创建和编辑内容">4. <strong>创建和编辑内容</strong></h3><ul><li><strong>Markdown文件</strong>：使用Markdown编写你的文章，存放在指定的文件夹中（通常是<code>_posts</code>）。</li><li><strong>添加页面</strong>：根据需要添加其他页面，如关于我、作品集等，也是使用Markdown编写。</li></ul><h3 id="5-本地预览">5. <strong>本地预览</strong></h3><ul><li><strong>运行博客</strong>：在本地运行博客，预览效果。大多数框架都提供了命令行工具来启动一个本地服务器。</li><li><strong>调试和修改</strong>：根据预览效果，调整文章内容和样式。</li></ul><h3 id="6-部署到GitHub-Pages">6. <strong>部署到GitHub Pages</strong></h3><ul><li><strong>创建仓库</strong>：在GitHub上创建一个新的仓库，命名为<code>username.github.io</code>（<code>username</code>是你的GitHub用户名），这是GitHub Pages的默认域名。</li><li><strong>推送代码</strong>：将你的博客代码推送到这个仓库。</li><li><strong>启用GitHub Pages</strong>：在仓库的设置中，找到“Pages”部分，选择“main”或“gh-pages”分支（取决于你的配置），然后保存设置。</li><li><strong>自定义域名</strong>（可选）：如果你想使用自己的域名，可以在Pages设置中添加CNAME记录，并在域名提供商处配置A记录指向GitHub Pages的IP地址。</li></ul><h3 id="7-优化和维护">7. <strong>优化和维护</strong></h3><ul><li><strong>SEO优化</strong>：添加meta标签，使用SEO友好的URL结构，确保内容易于被搜索引擎索引。</li><li><strong>更新内容</strong>：定期发布新文章，保持博客活跃。</li><li><strong>备份</strong>：定期备份你的博客代码和文章，以防万一。</li><li><strong>安全性</strong>：注意GitHub仓库的安全设置，避免敏感信息泄露。</li></ul><h3 id="8-推广和互动">8. <strong>推广和互动</strong></h3><ul><li><strong>社交媒体</strong>：通过社交媒体分享你的文章，增加曝光度。</li><li><strong>读者互动</strong>：添加评论系统（如Disqus、Utterances），鼓励读者留言反馈。</li><li><strong>加入社区</strong>：参与技术社区，与其他博主交流，互相学习。</li></ul><p>完成以上步骤后，你就拥有了一个基于GitHub的个人博客网站。记得持续学习和探索，不断优化你的博客，让它成为你展示才华和分享知识的平台。</p><p>没问题，即使你对编程不太熟悉，我们仍然可以一步一步地搭建你的个人博客。既然你已经完成了GitHub账户的注册和设置，接下来我们将选择并配置一个适合初学者的博客框架。</p><h2 id="第二步：选择博客框架-工具">第二步：选择博客框架/工具</h2><p>对于初学者来说，我推荐使用<strong>Hexo</strong>或<strong>Hugo</strong>这样的静态网站生成器，因为它们相对简单且易于上手，尤其是Hexo，它使用Markdown编写内容，非常适合不熟悉编程的人。</p><h4 id="选择Hexo的原因：">选择Hexo的原因：</h4><ul><li><strong>Markdown支持</strong>：你可以使用Markdown语法来编写文章，这是一种轻量级标记语言，易于学习和使用。</li><li><strong>主题丰富</strong>：Hexo有大量的第三方主题可供选择，你可以很容易地找到一个你喜欢的样式。</li><li><strong>插件支持</strong>：Hexo有丰富的插件生态系统，可以扩展博客的功能，比如添加评论系统、SEO优化等。</li><li><strong>部署简单</strong>：Hexo可以轻松地将你的博客部署到GitHub Pages上。</li></ul><h4 id="安装Hexo">安装Hexo</h4><ol><li><p><strong>安装Node.js和npm</strong>：</p><ul><li>首先，你需要安装Node.js，这是Hexo运行的基础。你可以从Node.js的官方网站（<a href="https://nodejs.org/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%E9%80%82%E5%90%88%E4%BD%A0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://nodejs.org/）下载并安装适合你操作系统的版本。</a></li><li>安装Node.js时，npm（Node Package Manager）会一并安装。</li></ul></li><li><p><strong>全局安装Hexo</strong>：</p><ul><li>打开你的命令行工具（在Windows上是CMD或PowerShell，在macOS或Linux上是Terminal）。</li><li>输入以下命令来全局安装Hexo：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li>这将安装Hexo的命令行工具，允许你通过命令行来创建和管理Hexo博客。</li></ul></li><li><p><strong>初始化Hexo博客</strong>：</p><ul><li>选择一个你想要存放博客代码的文件夹，并导航到该文件夹。</li><li>输入以下命令来初始化一个新的Hexo博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br></code></pre></td></tr></table></figure></li><li>这将创建一个名为<code>myblog</code>的新文件夹，里面包含了Hexo博客的基本结构和默认主题。</li><li>进入<code>myblog</code>文件夹：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>安装依赖</strong>：</p><ul><li>在<code>myblog</code>文件夹内，运行以下命令来安装博客所需的依赖项：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>启动本地服务器</strong>：</p><ul><li>输入以下命令来启动Hexo的本地服务器，并预览你的博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure></li><li>默认情况下，服务器会在<code>http://localhost:4000</code>上运行。你可以在浏览器中打开这个地址来查看你的博客。</li></ul></li><li><p><strong>创建和编辑文章</strong>：</p><ul><li>在<code>myblog/source/_posts</code>文件夹中，你可以创建新的Markdown文件来编写文章。</li><li>Hexo会自动将这些Markdown文件转换为HTML页面，并在你启动本地服务器时显示。</li></ul></li><li><p><strong>生成静态文件</strong>：</p><ul><li>当你准备好将博客部署到GitHub Pages时，你可以使用以下命令来生成静态HTML文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure></li><li>这将在<code>myblog/public</code>文件夹中生成静态文件。</li></ul></li><li><p><strong>部署到GitHub Pages</strong>（我们将在后续步骤中详细讨论）。</p></li></ol><p>现在你已经成功安装了Hexo，并创建了一个基本的博客。</p><h2 id="第三步：创建和编辑内容">第三步：创建和编辑内容</h2><h4 id="1-了解Hexo的文件结构">1. <strong>了解Hexo的文件结构</strong></h4><p>在你之前初始化的Hexo博客文件夹（比如<code>myblog</code>）中，有几个重要的文件夹和文件：</p><ul><li><code>source/</code>：存放你的原始内容，包括Markdown文章、图片等。</li><li><code>source/_posts/</code>：存放你的文章，每个文章都是一个<code>.md</code>文件。</li><li><code>themes/</code>：存放你选择的Hexo主题。</li><li><code>_config.yml</code>：Hexo博客的全局配置文件。</li></ul><h4 id="2-编写新文章">2. <strong>编写新文章</strong></h4><ol><li><p><strong>创建Markdown文件</strong>：</p><ul><li>进入<code>source/_posts/</code>文件夹。</li><li>创建一个新的Markdown文件，文件名通常遵循<code>YYYY-MM-DD-title.md</code>的格式，其中<code>YYYY</code>是年份，<code>MM</code>是月份，<code>DD</code>是日期，<code>title</code>是你的文章标题（用英文短横线<code>-</code>分隔单词）。</li></ul></li><li><p><strong>编写文章头部信息</strong>（Front-matter）：</p><ul><li>在Markdown文件的顶部，添加如下信息（用三个短横线<code>---</code>包围）：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">你的文章标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-string">HH:MM:SS</span> <span class="hljs-comment"># 发布日期和时间</span><br><span class="hljs-attr">categories:</span> <span class="hljs-comment"># 文章的分类</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类2</span><br><span class="hljs-attr">tags:</span> <span class="hljs-comment"># 文章的标签</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li><li>替换<code>你的文章标题</code>、<code>YYYY-MM-DD HH:MM:SS</code>、<code>分类1</code>、<code>分类2</code>、<code>标签1</code>和<code>标签2</code>为实际的内容。</li></ul></li><li><p><strong>编写文章内容</strong>：</p><ul><li>在Front-matter之后，你可以开始编写你的文章内容了。使用Markdown语法来格式化文本，比如标题、段落、列表、图片、链接等。</li></ul></li><li><p><strong>保存文件</strong>：</p><ul><li>完成文章编写后，保存Markdown文件。</li></ul></li></ol><h4 id="3-预览文章">3. <strong>预览文章</strong></h4><ul><li>回到你的命令行工具，确保Hexo的本地服务器还在运行（如果关闭了，重新运行<code>hexo server</code>）。</li><li>在浏览器中打开<code>http://localhost:4000</code>，你应该能看到你的新文章已经出现在博客上了。</li></ul><h4 id="4-编辑现有文章">4. <strong>编辑现有文章</strong></h4><ul><li>如果需要编辑现有的文章，只需在<code>source/_posts/</code>文件夹中找到对应的Markdown文件，进行修改，然后保存。</li><li>Hexo会自动检测文件的更改，并刷新本地服务器上的预览。</li></ul><h4 id="5-添加其他页面">5. <strong>添加其他页面</strong></h4><ul><li>除了文章之外，你还可以添加其他页面，比如关于我、作品集等。</li><li>创建一个新的Markdown文件，放在<code>source/</code>文件夹中（而不是<code>_posts/</code>），然后按照文章的方式编写头部信息和内容。</li><li>在Hexo的主题配置文件中，你可能需要添加一些路由规则来确保这些页面能够正确显示。</li></ul><p>现在你已经知道如何创建和编辑Hexo博客的内容了。</p><h2 id="第四步：本地预览和调试">第四步：本地预览和调试</h2><h4 id="1-启动Hexo本地服务器">1. <strong>启动Hexo本地服务器</strong></h4><p>确保你的Hexo博客项目文件夹（比如<code>myblog</code>）是打开的，然后在命令行工具中导航到该文件夹。运行以下命令来启动Hexo的本地服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>或者，如果你安装了<code>hexo-cli</code>并且想要从任何位置启动服务器，你可以使用全局命令（但需要先导航到博客项目文件夹的父目录，然后使用相对路径或绝对路径指定博客文件夹）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server -d myblog<br></code></pre></td></tr></table></figure><p>其中<code>myblog</code>是你的博客项目文件夹的名称。</p><h4 id="2-在浏览器中预览">2. <strong>在浏览器中预览</strong></h4><p>默认情况下，Hexo的本地服务器会在<code>http://localhost:4000</code>上运行。打开你的网页浏览器，输入这个地址，你应该能看到你的博客的本地预览。</p><h4 id="3-浏览和导航">3. <strong>浏览和导航</strong></h4><ul><li>点击博客上的链接，确保导航正常。</li><li>检查文章的布局和样式，确保它们符合你的期望。</li><li>如果你的博客有侧边栏、页脚等组件，也请确保它们显示正确。</li></ul><h4 id="4-调试和修改">4. <strong>调试和修改</strong></h4><ul><li>如果发现任何问题（比如布局错乱、链接失效等），回到你的Markdown文件或主题配置文件中进行修改。</li><li>修改后，保存文件，然后刷新浏览器页面，查看更改是否生效。</li><li>重复这个过程，直到你对博客的预览满意为止。</li></ul><h4 id="5-使用Hexo的内置命令">5. <strong>使用Hexo的内置命令</strong></h4><ul><li>在调试过程中，你可能会频繁地生成静态文件和重启服务器。Hexo提供了一些方便的命令来简化这些操作：<ul><li><code>hexo clean</code>：删除生成的静态文件（在<code>public</code>文件夹中）。</li><li><code>hexo generate</code>（或简写为<code>hexo g</code>）：生成静态文件。</li><li><code>hexo server</code>（或简写为<code>hexo s</code>）：启动本地服务器。</li><li>你可以组合这些命令来简化工作流程，比如<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>。</li></ul></li></ul><h4 id="6-检查响应式设计">6. <strong>检查响应式设计</strong></h4><ul><li>如果你的博客主题支持响应式设计（即在不同设备上都能良好显示），请在不同的屏幕尺寸和浏览器上测试你的博客。</li><li>确保在移动设备上也能方便地浏览和导航。</li></ul><p>现在你已经知道如何在本地预览和调试你的Hexo博客了。</p><h2 id="第五步：自定义博客主题和设置">第五步：自定义博客主题和设置</h2><h4 id="1-选择并安装主题">1. <strong>选择并安装主题</strong></h4><p>Hexo拥有丰富的第三方主题，你可以根据自己的喜好选择一个。以下是如何安装一个主题的步骤：</p><ol><li><p><strong>浏览Hexo主题</strong>：</p><ul><li>你可以访问Hexo的官方文档或GitHub上的Hexo主题仓库来浏览可用的主题。</li><li>选择一个你感兴趣的主题，并查看其文档以了解如何安装和配置。</li></ul></li><li><p><strong>下载或克隆主题</strong>：</p><ul><li>根据主题的文档，你可能需要下载主题的ZIP文件，或者通过Git克隆主题的仓库到你的本地计算机。</li></ul></li><li><p><strong>将主题放入Hexo项目</strong>：</p><ul><li>将下载或克隆的主题文件夹放入你的Hexo项目中的<code>themes/</code>文件夹内。</li></ul></li><li><p><strong>更新配置文件</strong>：</p><ul><li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li><li>找到<code>theme</code>字段，并将其值设置为你刚刚安装的主题的文件夹名。</li></ul></li></ol><p>例如，如果你安装了一个名为<code>landscape</code>的主题，你的<code>_config.yml</code>文件中的<code>theme</code>字段应该像这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>生成和预览</strong>：<ul><li>运行<code>hexo generate</code>（或简写为<code>hexo g</code>）来生成静态文件。</li><li>运行<code>hexo server</code>（或简写为<code>hexo s</code>）来启动本地服务器并预览你的博客。</li></ul></li></ol><h4 id="2-自定义主题设置">2. <strong>自定义主题设置</strong></h4><p>大多数Hexo主题都允许你通过修改主题的配置文件来自定义博客的外观和行为。以下是如何自定义主题设置的步骤：</p><ol><li><p><strong>找到主题配置文件</strong>：</p><ul><li>在你安装的主题文件夹内，通常会有一个名为<code>_config.yml</code>的文件（有时可能是其他名称，比如<code>config.yml</code>，具体取决于主题）。</li></ul></li><li><p><strong>编辑主题配置文件</strong>：</p><ul><li>使用文本编辑器打开主题配置文件。</li><li>根据文件中的注释和说明，修改你感兴趣的设置。</li></ul></li></ol><p>例如，你可能想要修改以下设置：</p><ul><li>网站标题和副标题</li><li>菜单项和导航栏</li><li>侧边栏和小工具</li><li>文章布局和样式</li><li>社交媒体链接和分享按钮</li></ul><ol start="3"><li><p><strong>生成和预览更改</strong>：</p><ul><li>每次修改主题配置文件后，都需要运行<code>hexo generate</code>来生成静态文件。</li><li>然后运行<code>hexo server</code>来预览更改。</li></ul></li><li><p><strong>高级自定义</strong>：</p><ul><li>如果你想要进行更高级的自定义（比如修改CSS样式或JavaScript脚本），你可能需要编辑主题文件夹中的其他文件。</li><li>在进行这些更改时，请务必备份原始文件，以便在需要时恢复。</li></ul></li></ol><h4 id="3-测试和调试">3. <strong>测试和调试</strong></h4><ul><li>在进行自定义时，不断测试你的博客以确保所有功能都按预期工作。</li><li>检查不同设备和浏览器上的显示效果。</li><li>如果遇到问题，请查阅主题的文档或寻求社区的帮助。</li></ul><p>现在你已经知道如何自定义Hexo博客的主题和设置了。</p><h2 id="第六步：将博客部署到GitHub-Pages">第六步：将博客部署到GitHub Pages</h2><h4 id="1-创建GitHub仓库">1. <strong>创建GitHub仓库</strong></h4><ol><li><p><strong>登录GitHub</strong>：</p><ul><li>使用你的GitHub账户登录到GitHub网站。</li></ul></li><li><p><strong>创建新仓库</strong>：</p><ul><li>点击右上角的加号（+）图标，然后选择“New repository”（新建仓库）。</li><li>为你的仓库命名，通常使用<code>username.github.io</code>的格式，其中<code>username</code>是你的GitHub用户名。这样命名的仓库会自动启用GitHub Pages。</li><li>设置仓库为“Public”（公开），因为GitHub Pages不支持私有仓库。</li><li>初始化仓库时可以选择添加一个README文件，但这对于Hexo部署不是必需的。</li><li>点击“Create repository”（创建仓库）按钮。</li></ul></li></ol><h4 id="2-配置Hexo以部署到GitHub-Pages">2. <strong>配置Hexo以部署到GitHub Pages</strong></h4><ol><li><p><strong>安装<code>hexo-deployer-git</code>插件</strong>：</p><ul><li>在你的Hexo项目文件夹中，运行以下命令来安装<code>hexo-deployer-git</code>插件，这个插件允许你将Hexo生成的静态文件部署到Git仓库中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save-dev<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>配置部署设置</strong>：</p><ul><li>打开你的Hexo项目中的<code>_config.yml</code>文件。</li><li>在文件底部添加以下部署（deploy）配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;your-repository-url&gt;</span> <span class="hljs-comment"># 替换为你的GitHub仓库的HTTPS URL</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 或者你希望部署到的分支名，通常是main或gh-pages</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;Site updated: <span class="hljs-template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span> <span class="hljs-comment"># 提交时的消息模板</span><br></code></pre></td></tr></table></figure></li><li>将<code>&lt;your-repository-url&gt;</code>替换为你的GitHub仓库的完整HTTPS URL，例如<code>https://github.com/username/username.github.io.git</code>。</li></ul></li></ol><h4 id="3-生成静态文件并部署">3. <strong>生成静态文件并部署</strong></h4><ol><li><p><strong>生成静态文件</strong>：</p><ul><li>在你的Hexo项目文件夹中，运行以下命令来生成静态文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure></li><li>或者使用简写命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>部署到GitHub Pages</strong>：</p><ul><li>运行以下命令来将生成的静态文件部署到你的GitHub仓库中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure></li><li>首次部署时，你可能需要输入你的GitHub用户名和密码（或者使用GitHub提供的个人访问令牌）。</li></ul></li><li><p><strong>验证部署</strong>：</p><ul><li>打开你的浏览器，输入你的GitHub Pages网址（通常是<code>https://username.github.io</code>，其中<code>username</code>是你的GitHub用户名）。</li><li>你应该能看到你的Hexo博客已经成功部署到GitHub Pages上了。</li></ul></li></ol><h4 id="4-更新博客">4. <strong>更新博客</strong></h4><ul><li>每次你更新博客内容时，只需重复生成静态文件和部署的步骤。</li><li>你可以将这两个步骤合并为一个命令，通过添加<code>--deploy</code>选项到<code>hexo generate</code>命令中来实现：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g --deploy<br></code></pre></td></tr></table></figure><ul><li>或者使用简写命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo gd<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>现在你已经知道如何将Hexo博客部署到GitHub Pages上了。</p><h2 id="第七步：维护和更新你的博客">第七步：维护和更新你的博客</h2><h4 id="1-定期更新内容">1. <strong>定期更新内容</strong></h4><ul><li><strong>撰写新文章</strong>：使用Markdown编写新的博客文章，并保存在Hexo项目的<code>source/_posts/</code>目录下。</li><li><strong>发布文章</strong>：每次撰写完新文章后，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件，然后运行<code>hexo deploy</code>将更新推送到GitHub Pages。你也可以使用<code>hexo g --deploy</code>（或<code>hexo gd</code>）一次性完成这两个步骤。</li><li><strong>管理旧文章</strong>：定期回顾和更新你的旧文章，确保它们的信息是最新的，并且没有过时或错误的链接。</li></ul><h4 id="2-监控和分析">2. <strong>监控和分析</strong></h4><ul><li><strong>使用Google Analytics（谷歌分析）</strong>：在Google Analytics中注册一个账户，并将提供的跟踪代码添加到你的Hexo博客的HTML模板中，以便监控博客的流量和访问者行为。</li><li><strong>检查错误和性能</strong>：定期检查你的博客是否有任何错误（如404页面、断开的链接等），并使用工具（如Google PageSpeed Insights）来优化博客的性能。</li></ul><h4 id="3-备份和恢复">3. <strong>备份和恢复</strong></h4><ul><li><strong>定期备份</strong>：定期将你的Hexo项目文件夹和GitHub仓库的内容备份到安全的位置，以防数据丢失。</li><li><strong>恢复数据</strong>：如果出现问题，你可以使用备份的数据来恢复你的博客。</li></ul><h4 id="4-保持主题和插件更新">4. <strong>保持主题和插件更新</strong></h4><ul><li><strong>更新Hexo</strong>：定期检查Hexo的更新，并运行<code>npm update -g hexo</code>来更新到最新版本。</li><li><strong>更新主题和插件</strong>：同样地，定期检查你使用的主题和插件是否有更新，并按照它们的文档进行更新。</li></ul><h4 id="5-安全性">5. <strong>安全性</strong></h4><ul><li><strong>保护你的GitHub账户</strong>：确保你的GitHub账户使用了强密码，并启用了双重身份验证。</li><li><strong>避免敏感信息</strong>：不要在博客中发布任何敏感信息，如密码、密钥或私人电子邮件地址。</li></ul><h4 id="6-与读者互动">6. <strong>与读者互动</strong></h4><ul><li><strong>添加评论系统</strong>：考虑在你的博客中添加一个评论系统，如Disqus或Gitalk，以便与读者互动。</li><li><strong>回复评论和问题</strong>：定期查看并回复读者的评论和问题，以建立和维护与读者的关系。</li></ul><h4 id="7-优化SEO">7. <strong>优化SEO</strong></h4><ul><li><strong>使用关键词</strong>：在撰写文章时，使用相关的关键词，并在标题、元描述和正文中适当地放置它们。</li><li><strong>创建内部链接</strong>：在你的文章之间创建内部链接，以便读者可以轻松地找到相关的内容。</li><li><strong>优化图片</strong>：为图片添加描述性的文件名和alt属性，并使用适当的压缩来优化它们的加载速度。</li></ul><p>现在你已经知道如何维护和更新你的Hexo博客了。</p><h2 id="安装Gitalk">安装Gitalk</h2><ol><li><p><strong>注册Gitalk</strong></p><ul><li>访问<a href="https://gitalk.github.io/">Gitalk官网</a>，点击“开始使用”按钮，跳转到Github页面。</li><li>在Github页面，点击“使用说明”中的“Click here to register”进行注册。</li><li>填写相关信息，包括应用名称（Application name）、主页地址（Homepage URL，<a href="http://xn--4gqp1g39ba821b0cs6c75au59cvq8cj6s.github.io">一般填写域名地址或名称.github.io</a>）、项目描述（Application description，非必需）和认证回调地址（Authorization callback URL，<a href="http://xn--4gqp1g39ba821b0cs6c75au59cvq8cj6s.github.io">一般填写域名地址或名称.github.io</a>）。</li><li>完成注册后，可以修改并更新信息，包括上传新头像和设置背景色。</li></ul></li><li><p><strong>创建Github Application</strong></p><ul><li>登录Github，点击右上角头像，依次进入“Settings”-&gt;“Developer settings”-&gt;“OAuth Apps”-&gt;“New OAuth App”进行基本配置。</li><li>填写应用名称、主页URL、回调URL等信息，并生成Client ID和Client Secret。</li></ul></li><li><p><strong>配置Hexo博客</strong></p><ul><li>进入Hexo博客的主题配置文件（_config.yml），添加Gitalk配置。</li><li>配置项包括：<ul><li><code>enable</code>: 是否启用Gitalk，设置为true。</li><li><code>github_id</code>: Github仓库所有者。</li><li><code>repo</code>: 存储评论的仓库名称。</li><li><code>client_id</code>: Github Application的Client ID。</li><li><code>client_secret</code>: Github Application的Client Secret。</li><li><code>admin_user</code>: Github仓库所有者和协作者，只有他们可以初始化Github issues。</li><li><code>distraction_free_mode</code>: 是否启用无干扰模式，类似于Facebook。</li><li><code>language</code>: 语言设置，如中文设置为zh-CN。</li></ul></li></ul></li></ol><h3 id="二、使用Gitalk">二、使用Gitalk</h3><ol><li><p><strong>在Hexo主题中添加Gitalk容器</strong></p><ul><li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>-&gt;<code>post</code>目录。</li><li>在当前目录下新建一个<code>gitalk.ejs</code>文件，并写入以下代码：</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://priesttomb.github.io/js/md5.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Gitalk</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">clientID</span>: <span class="hljs-string">&#x27;你的Client ID&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">clientSecret</span>: <span class="hljs-string">&#x27;你的Client Secret&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">repo</span>: <span class="hljs-string">&#x27;你的仓库名称&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">owner</span>: <span class="hljs-string">&#x27;你的Github用户名&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">admin</span>: [<span class="hljs-string">&#x27;你的Github用户名&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">id</span>: <span class="hljs-title function_">md5</span>(location.<span class="hljs-property">pathname</span>), <span class="hljs-comment">// 使用md5确保唯一性和长度限制</span></span><br><span class="language-javascript">  <span class="hljs-attr">distractionFreeMode</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;gitalk-container&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注意替换代码中的<code>clientID</code>、<code>clientSecret</code>、<code>repo</code>、<code>owner</code>和<code>admin</code>为实际值。</li></ul><ol start="2"><li><p><strong>在文章模板中添加Gitalk容器引用</strong></p><ul><li>进入主题目录的<code>layout</code>-&gt;<code>_partial</code>目录，找到<code>article.ejs</code>文件。</li><li>在<code>article.ejs</code>文件的最后面加入以下代码：</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% if(theme.gitalk.enable)&#123; %&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gitalk-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  &lt;%- include post/gitalk.ejs %&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li><p><strong>生成并部署Hexo博客</strong></p><ul><li>在Hexo博客的根目录下，运行<code>hexo generate</code>（或<code>hexo g</code>）生成静态文件。</li><li>运行<code>hexo deploy</code>将更新推送到Github Pages。</li></ul></li><li><p><strong>初始化评论</strong></p><ul><li>访问你的Hexo博客文章页面，登录Github后尝试发表评论。</li><li>评论将作为issues存储在指定的Github仓库中，并可以在仓库的issues页面进行管理。</li></ul></li></ol><p>通过以上步骤，你就可以在Hexo博客中成功安装和使用Gitalk评论系统了。记得定期检查和更新你的Gitalk配置和Github仓库，以确保评论系统的正常运行。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聪明的投资者——投资指南</title>
    <link href="/2024/10/25/2024-10-25-%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/25/2024-10-25-%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>防御型投资者和进攻型投资者之间的主要区别在于：</p><ul><li>防御型投资者要限制自己向大的和领先的公司投资</li><li>进攻型投资者的判断力和技巧告诉他这些公司有足够吸引力，那么他可能购买他们的股票</li></ul><p>评估普通股的规则：</p><ul><li><p>评估价值取决于对收益能力的预测，因此要选用合适的倍数，如果必要还要通过调整资产价值来决定</p></li><li><p>收益能力一般代表对未来7年平均收益的预测</p></li><li><p>上面的预测起点就是过去7到10年的真实情况</p></li><li><p>把早些年的价格用到计算中时，应该做出适当的调整，以反映后来的资本额所导致的变动</p></li><li><p>倍数应该反应未来收益更长期的变化</p><blockquote><p>倍数选12对股票的中立预测比较适当，也就是每股收益年预期增长不超过2%，这个数字的增加或家烧依赖于评估者的判断和偏爱，除了异常情况外，<strong>最大的倍数应该是20，最小的倍数应该是8</strong></p></blockquote></li><li><p>如果有形资产价值少于收益能力价值；将收益能力价值超过资产价值2倍的量减少0.25</p></li><li><p>如果净流动资产机制超过了收益能力价值，可以让后者增大到超过最后估定价值的50%</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python入门学习笔记</title>
    <link href="/2024/10/25/2024-10-25-Python%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%AC%E4%B8%89%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/25/2024-10-25-Python%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%AC%E4%B8%89%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>第一部分 基础知识</h1><p><a href="https://zqten.github.io/">回到主頁</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># python更新指令<br>pip install --upgrade python<br># pip更新指令<br>python.exe -m pip install --upgrade pip<br># 国内镜像安装<br>pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br>pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br># pip查看可更新包<br>pip list --outdated<br># 批量升级所有包,升级前先确认<br>pip-review --local --interactive<br># 一键升级所有包<br>pip-review --auto<br></code></pre></td></tr></table></figure><p>前面的安装环节网络上讲得比书上的要详细多了，官方文档也讲得很清楚，所以这里就不在这里说了，有兴趣可以去访问官方网站<a href="https://www.python.org/"><sup>😺</sup></a>。</p><h2 id="第一章变量和简单的数据类型">第一章变量和简单的数据类型</h2><h3 id="变量">变量</h3><p>变量命名有一定的规则</p><ul><li>不能是数字开头，比如：<strong>1_message</strong></li><li>不能包含空格，比如：<strong>mess age</strong></li><li>不能是python里面的关键字，比如：print 或 def 等，python里面有很多关键字一般你打出来会高亮显示</li><li>最好的变量名应该是既简短又有描述性，比如：name、student_name 等等。</li></ul><p>这里message是变量名，'Hello Python World!'是指向message变量的值。变量是可以重复赋值的，但它只会储存最后的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-string">&#x27;Hello Python World!&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br>Hello Python World!<br><br>message = <span class="hljs-string">&#x27;你好!&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br>你好!<br></code></pre></td></tr></table></figure><h3 id="字符串">字符串</h3><p>有双引号或单引号包裹的内容就称为字符串，有些编程语言只有双引号是字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;This is string.&quot;</span><br><span class="hljs-string">&#x27;This is string.&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>1.方法：title()、upper()、lower()</strong></p><p>方法(method)是python对数据执行的操作，name后面的点(.)是让python对name变量执行 <strong>title()</strong> 方法指定的操作，这个方法就是把单词的手写字幕改成大写。**upper()**方法是让所有字母变成大写、**lower()**方法是让所有字母变成小写。还有一个方法修改字符串中的指定单词。**replace()**这个方法我们在后面的练习中会用到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;zheng kai nan&quot;</span><br><span class="hljs-built_in">print</span>(name.title())<br>Zheng Kai Nan<br><br>name = <span class="hljs-string">&quot;Zheng Kai Nan&quot;</span><br><span class="hljs-built_in">print</span>(name.upper())<br>ZHENG KAI NAN<br><span class="hljs-built_in">print</span>(name.lower())<br>zheng kai nan<br><br>name = <span class="hljs-string">&quot;zheng kai nan&quot;</span><br>name_01 = name.replace(<span class="hljs-string">&quot;kai nan&quot;</span>, <span class="hljs-string">&quot;ji zhong&quot;</span>)<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(name_01)<br>zheng kai nan<br>zheng ji zhong<br></code></pre></td></tr></table></figure><p><strong>2.在字符串中插入变量</strong></p><p>这个功能很常用，python的方式是在字符串的引号前面加一个 <strong>f</strong> 字母：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">first_name = <span class="hljs-string">&quot;zheng&quot;</span><br>last_name = <span class="hljs-string">&quot;kai nan&quot;</span><br>full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(full_name)<br>zheng kai nan<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello,<span class="hljs-subst">&#123;full_name.title()&#125;</span>!&quot;</span>)<br>Hello,Zheng Kai Nan!<br></code></pre></td></tr></table></figure><p><strong>3.制表符和换行符控制字符串  \t  \n</strong></p><p>在字符串中添加**\t**、<strong>\n</strong>可以缩进和换行，字符串引号前加**<code>r</code>**可以让取消里面所有转义符号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">message = <span class="hljs-string">&quot;你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>你知道这几种编程语言吗？Python Swift C++ Go Java<br><br>message = <span class="hljs-string">&quot;\t你知道这几种编程语言吗？Python Swift C++ Go Java&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>     你知道这几种编程语言吗？Python Swift C++ Go Java<br><br>message = <span class="hljs-string">&quot;你知道这几种编程语言吗？\nPython Swift C++ Go Java&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>你知道这几种编程语言吗？<br>Python Swift C++ Go Java<br><br><span class="hljs-comment"># 也可以同时使用</span><br>message = <span class="hljs-string">&quot;你知道这几种编程语言吗？\n\tPython \n\tSwift \n\tC++ \n\tGo \n\tJava&quot;</span><br><span class="hljs-built_in">print</span>(message)<br>你知道这几种编程语言吗？<br>Python <br>Swift <br>C++ <br>Go <br>Java<br><span class="hljs-comment"># 取消转义    </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&quot;\nasd&quot;</span>) <br>\nasd<br></code></pre></td></tr></table></figure><p><strong>4.删除字符串里面的空白rstrip()、lstrip()、strip()</strong></p><p>有时候后输入字符串的时候会多输空格，在python里面多一个空格就意味着两个不同的字符串了。这里有3个方法：分别是<strong>rstrip()、lstrip()、strip()</strong>，*rstrip()*是删除字符串右边的空格，*lstrip()*是删除左边的空格，*strip()*是删除两边的空格。但是这种删除只是暂时的，要想永久删除就要重新赋值给变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">language = <span class="hljs-string">&#x27; python &#x27;</span><br><span class="hljs-built_in">print</span>(language.rstrip())<br><span class="hljs-string">&#x27; python&#x27;</span><br><span class="hljs-built_in">print</span>(language.lstrip())<br><span class="hljs-string">&#x27;python &#x27;</span><br><span class="hljs-built_in">print</span>(language.strip())<br><span class="hljs-string">&#x27;python&#x27;</span><br><span class="hljs-comment"># 重新赋值给变量</span><br>language = language.strip()<br><span class="hljs-built_in">print</span>(language)<br><span class="hljs-string">&#x27;python&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>5.删除前缀和后缀 removeprefix()、removesuffix()</strong></p><p>有些内容有统一的前缀，比如你有很多照片，前缀是某一个时间比如2023.7.25+名字或序号，你就只想要序号或名字就可以用到这个功能，还有就是URL里面的<a href="https://xn--ciqs4hjswupt5xe2naq96g">https://这个是网站前缀</a>，就可以用*removeprefix()*括号里面填写你想删除的前缀，用引号括起来。这种方法的删除也是暂时的，要想永久删除需要重新赋值，和上面的删除空白一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除前缀</span><br>Travel_photo = <span class="hljs-string">&quot;2023.7.25-镇远旅游照片&quot;</span><br><span class="hljs-built_in">print</span>(Travel_photo.removeprefix(<span class="hljs-string">&#x27;2023.7.25-&#x27;</span>))<br>镇远旅游照片<br>url = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br><span class="hljs-built_in">print</span>(url.removeprefix(<span class="hljs-string">&#x27;https://&#x27;</span>))<br>www.baidu.com<br><br><span class="hljs-comment">#删除后缀</span><br>file_name = <span class="hljs-string">&#x27;abc.jpg&#x27;</span><br><span class="hljs-built_in">print</span>(file_name.removesuffix(<span class="hljs-string">&#x27;.jpg&#x27;</span>))<br>abc<br></code></pre></td></tr></table></figure><h3 id="数">数</h3><p>可以理解为数学里面的数字，用来计算或可视化数据</p><p><strong>1.整数及其运算</strong></p><p>integer()或简写int()表示整数，<strong>+、-、*、/</strong> 这几个符号表示加减乘除，还有些复杂的后面会讲到，比如(**)两个星号代表乘方运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span> + <span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">3</span> ** <span class="hljs-number">2</span><br><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>2.浮点数</strong></p><p>float() 表示浮点数，就是带有小数点的数称为浮点数，数字同样都可以应用上面的计算符号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span><br><span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure><p><strong>3.数字中的下划线</strong></p><p>下划线用在数字中，并不会有其他的效果，只是方便我们更好观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">1000_000_000</span><br><span class="hljs-built_in">print</span>(number)<br><span class="hljs-number">10000000000</span><br></code></pre></td></tr></table></figure><p><strong>4.同时给多个变量赋值</strong></p><p>同时给多个变量赋值，需要用逗号将变量名分开，对于要赋给变量的值也需要做同样的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">x,y,z = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">2</span><br>z = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 错误演示</span><br>x,y,z = <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(x)<br>发生异常: ValueError x<br><span class="hljs-keyword">not</span> enough values to unpack (expected <span class="hljs-number">3</span>, got <span class="hljs-number">2</span>)<br>  File <span class="hljs-string">&quot;F:\第一章变量和简单数据类型\full_name.py&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    x, y, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>    ^^^^^^^<br>ValueError: <span class="hljs-keyword">not</span> enough values to unpack (expected <span class="hljs-number">3</span>, got <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>5.常量</strong></p><p>Python里面没有常量(就是整个程序的生命周期不改变值的“变量”)，一般是用全大写字母来共同与其他程序员形成约定，遇到全大写字母的变量时，视为常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">NAME = <span class="hljs-string">&quot;太阳&quot;</span><br></code></pre></td></tr></table></figure><p><strong>6.注释</strong></p><p>注释的主要目的是阐述代码要做什么，以及是如何做的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印出Hello World</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="小结">小结</h3><p>本章我们学习了如何使用变量，创建了描述性的变量名，学习了字符串是什么，以及如何使用全大写、全小写和首字母大写的方式显示字符串和制表符、换行符。还学习了如何删除字符串中多余的字符和空格，以及字符串中插入变量的方法。还学习了整数和浮点数，还有学习了写注释的目的。</p><h2 id="第二章列表简介">第二章列表简介</h2><h3 id="列表是什么">列表是什么</h3><p>列表(list)由一系列按<strong>特定顺序</strong>排列的元素组成，一般给列表命名以复数形式，比如：name就用names。<br>在python中列表用“[ ]”表示，每个元素用逗号隔开。列表里面有两个东西要搞清楚，一个是索引，一个是元素的值。要访问列表时使用索引和元素值都可以，列表的索引是从0开始的，所以要访问的n个元素就使用n-1的索引值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表</span><br>bicycles = [<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]<br><span class="hljs-built_in">print</span>(bicycles)<br>[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]<br><span class="hljs-comment"># 利用索引值访问列表元素</span><br><span class="hljs-built_in">print</span>(bicycles[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(bicycles[<span class="hljs-number">3</span>])<br>trek<br>specialized<br><span class="hljs-comment"># 访问列表的倒数第一个元素</span><br><span class="hljs-built_in">print</span>(bicycles[-<span class="hljs-number">1</span>])<br>specialized<br><span class="hljs-comment"># 使用列表里面的元素到其他场景</span><br>message = <span class="hljs-string">f&#x27;我喜欢<span class="hljs-subst">&#123;bicycles[<span class="hljs-number">0</span>]&#125;</span>品牌的摩托车。&#x27;</span><br><span class="hljs-built_in">print</span>(message)<br>我喜欢trek品牌的摩托车。<br></code></pre></td></tr></table></figure><h3 id="修改、添加和删除列表元素">修改、添加和删除列表元素</h3><p>大多数列表将是动态的，意味着列表创建后，随着程序的运行将修改、增加、或删除其中的元素。<br>这中间增加有**append()**方法在列表末尾添加元素，<strong>insert()<strong>在列表的指定位置插入元素。<br>删除有</strong>del 列表元素</strong>将删除列表元素并且无法在访问这个元素了。<br>**pop()**默认删除列表最后一个元素，也可以指定删除列表中的其他元素，在括号里面填上该元素的索引值就可以了。<br>这里说下，pop()删除的元素可以赋值给一个变量继续使用，不像del不能在赋值和访问了。<br>**remove()**方法是删除一个指定的元素值，列表有多个同样的值的话这个方法只删除第一个，要想全部删除就要使用循环。<br>值得一提的是这个方法和pop()一样删除了的元素可以赋值给一个变量继续使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改列表元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>motorcycles[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;da yang&#x27;</span><br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;da yang&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><br><span class="hljs-comment"># 添加列表元素</span><br><span class="hljs-comment">## 在列表末尾添加元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>motorcycles.append(<span class="hljs-string">&#x27;da yang&#x27;</span>)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>, <span class="hljs-string">&#x27;da yang&#x27;</span>]<br><span class="hljs-comment">## 在列表的指定位置插入元素</span><br>motorcycles.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;li fan&#x27;</span>)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;li fan&#x27;</span>, <span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>, <span class="hljs-string">&#x27;da yang&#x27;</span>]<br><br><span class="hljs-comment"># 删除列表元素</span><br><span class="hljs-comment">## del方法删除</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-keyword">del</span> motorcycles[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-comment">## pop方法删除</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>poped_motorcycles = motorcycles.pop()<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>]<br><span class="hljs-built_in">print</span>(poped_motorcycles)<br>suzuki<br><span class="hljs-comment">### pop方法删除指定位置的元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>last_motorcycles = motorcycles.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(last_motorcycles)<br>honda<br><span class="hljs-comment">## remove()根据值删除元素</span><br>motorcycles = [<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br>mid_motorcycles = <span class="hljs-string">&#x27;yamaha&#x27;</span><br>motorcycles.remove(mid_motorcycles)<br><span class="hljs-built_in">print</span>(motorcycles)<br>[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;mid_motorcycles.title()&#125;</span>&#x27;</span>)<br>Yamaha<br></code></pre></td></tr></table></figure><h3 id="列表管理">列表管理</h3><p><strong>1.sort()<strong>方法可以对列表</strong>永久排序</strong>，该方法是将列表按字母顺序或数字从小到大的顺序进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">cars = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br>cars.sort()<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-comment"># 反向排序</span><br>cars.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br><span class="hljs-comment"># 反转列表,这是一种快捷方法</span><br>cars = cars[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>2. sorted()<strong>方法是对列表进行</strong>临时排序</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 临时反向排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(cars, reverse=<span class="hljs-literal">True</span>))<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>3.reverse()<strong>方法是</strong>永久反转排列</strong>列表里面的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cars.reverse()<br><span class="hljs-built_in">print</span>(cars)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><p>**4.len()**方法可以快速获取列表长度，其显示的是列表内有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cars))<br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>5.enumerate()</strong> 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，<strong>同时列出数据和数据下标</strong>，一般用在 for 循环当中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>seq = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i, element <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(seq):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span> i, element<br>...<br><span class="hljs-number">0</span> one<br><span class="hljs-number">1</span> two<br><span class="hljs-number">2</span> three<br></code></pre></td></tr></table></figure><h3 id="小节">小节</h3><p>本章学习了什么是列表，以及如何使用列表内的元素。学习了定义列表，增删改列表内元素，以及如何对列表进行永久排序和临时排序，还学习了反转列表顺序和反向排序。</p><h2 id="第三章-操作列表">第三章 操作列表</h2><h3 id="遍历整个列表">遍历整个列表</h3><p>使用<strong>for</strong>循环可以很轻松的访问整个列表，以及对列表进行操作。这里值得一提的是for循环里面的变量名，在遍历列表是尽可能用列表的单数名，比如列表名为cars，那么for循环的变量尽量写成car。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">magicians = [<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;david&#x27;</span>, <span class="hljs-string">&#x27;carolina&#x27;</span>]<br><span class="hljs-keyword">for</span> magician <span class="hljs-keyword">in</span> magicians:<br>    <span class="hljs-built_in">print</span>(magician)<br><br>alice<br>david<br>carolina<br><span class="hljs-comment"># 进行其他操作</span><br><span class="hljs-keyword">for</span> magician <span class="hljs-keyword">in</span> magicians:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;magician.title()&#125;</span>,你的表演很精彩！&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;谢谢你，<span class="hljs-subst">&#123;magician.title()&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;感谢你们每一个人的表演&#x27;</span>)<br>Alice,你的表演很精彩！<br>谢谢你，Alice<br>David,你的表演很精彩！<br>谢谢你，David<br>Carolina,你的表演很精彩！<br>谢谢你，Carolina<br>感谢你们每一个人的表演<br></code></pre></td></tr></table></figure><h3 id="创建数值列表">创建数值列表</h3><p><strong>range()<strong>函数可以生成一系列数，但它实际上不会打印最后一个数，这是编程语言中常见的</strong>差一</strong>行为结果，要想打印最后个数需要使用**+1或者是使用比最后一个数大1的数**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 打印最后一位</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>+<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br></code></pre></td></tr></table></figure><p>**list()**函数可以将range()的结果直接转换为列表，方法是将range()作为list()的参数，同时range（）还可以指定步长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(number)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-comment"># 从2开始到11结束，指定步长为2</span><br>even_number = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(even_number)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br><span class="hljs-comment"># 用for循环创建数值列表</span><br>squares = []<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    square = value**<span class="hljs-number">2</span><br>    squares.append(square)<br><span class="hljs-built_in">print</span>(squares)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<br></code></pre></td></tr></table></figure><p>使用这几个函数可以对数值列表进行统计<strong>列表作为其参数</strong>，min（）列表里面最小值，max（）列表里面最大值，sum（）列表所有数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 简单统计数值列表</span><br>values = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(values))<br><span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(values))<br><span class="hljs-number">9</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(values))<br><span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p><strong>列表推导式</strong>是一种简化方法，这种方法首先指定一个列表名（变量名），然后等号右边用中括号开始，括号内的排列顺序是表达式------for循环，这种方法需要经常练习。比如创建上面数值列表可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(squares)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 1到50的奇数之和游戏</span><br>jishu_num = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(jishu_num))<br><span class="hljs-number">625</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([jishu <span class="hljs-keyword">for</span> jishu <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>, <span class="hljs-number">2</span>)]))<br><span class="hljs-number">625</span><br></code></pre></td></tr></table></figure><h3 id="使用列表的一部分">使用列表的一部分</h3><p><strong>切片</strong>，要使用列表的一部分，其实就是使用列表的索引。使用的方法是在调用列表时在列表名后面[0:1]，这代表列表的第一个和第二个值，就是在列表索引值0,1的值。这里面也要注意差一行为。在一个班级需要评出前三名或后三名或部分名单时，切片可以起到很好的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 切片</span><br>players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 索引值1到3的元素因为差一行为，所以并不会打印索引值3的元素</span><br><span class="hljs-built_in">print</span>(players[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br>[<span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>]<br><span class="hljs-comment"># 索引值0到3的元素</span><br><span class="hljs-built_in">print</span>(players[:<span class="hljs-number">3</span>])<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>]<br><span class="hljs-comment"># 索引值1到列表最后一个的元素</span><br><span class="hljs-built_in">print</span>(players[<span class="hljs-number">1</span>:])<br>[<span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 索引值0到列表最后一个的元素</span><br><span class="hljs-built_in">print</span>(players[:])<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 索引值为列表最后3个的元素</span><br><span class="hljs-built_in">print</span>(players[-<span class="hljs-number">3</span>:])<br>[<span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><span class="hljs-comment"># 遍历切片</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下面是我们的前三名&#x27;</span>)<br><span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(player.title())<br>下面是我们的前三名<br>Charles<br>Martina<br>Michael<br></code></pre></td></tr></table></figure><p><strong>复制列表或列表切片</strong></p><p>需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变，要复制列表时尽量使用切片复制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><br>yuwen_win = players[:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;语文前三名是：&#x27;</span>)<br><span class="hljs-built_in">print</span>(yuwen_win)<br>语文前三名是：<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>]<br><br>shuxue_win = players[-<span class="hljs-number">3</span>:]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数学前三名是：&#x27;</span>)<br><span class="hljs-built_in">print</span>(shuxue_win)<br>数学前三名是：<br>[<span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br><br><span class="hljs-comment"># 需要注意的是不能直接用列表赋值给新变量，这会使他们指向同一个列表，你操作列表，两个变量都会改变</span><br>new_players = players<br><span class="hljs-built_in">print</span>(new_players)<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>]<br>players.append(<span class="hljs-string">&#x27;AAABBB&#x27;</span>)<br><span class="hljs-built_in">print</span>(new_players)<br>[<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>, <span class="hljs-string">&#x27;AAABBB&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="元组">元组</h3><p>不可以改变值的列表，称为元组（tuple），元组和列表很像，但是列表是用方括号，而元组是用圆括号。虽然不可以修改元组里面的值，但是可以通过重新赋值改变该变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">dimensions = (<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(dimensions)<br>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-comment"># 遍历</span><br>dimensions = (<span class="hljs-number">400</span>, <span class="hljs-number">50</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dimensions:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-number">400</span><br><span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><h3 id="设置代码格式">设置代码格式</h3><p>为什么要设置代码格式？</p><p>代码被阅读的次数远大于编写的次数。在编写完以后的多次阅读中，良好的代码格式可以让阅读花的时间很短。<br>PEP 8 是设置代码指南，它建议每级缩进4个空格。每个编辑器（IDE）都可以设置，通常（tab）使用是最多的。<br>每行长度建议不超过79个字符，但这并不是不可逾越的红线，刚开始学的时候不必在意，不过养成这样的习惯后，会对以后和别人合作带来很多方便。<br>空行建议：不同内容建议用一个空行隔开，不建议使用3、4或多个空行来区隔，主要是空行多了影响阅读。</p><h3 id="小结-v2">小结</h3><p>本章学习了如何高效的处理列表中的元素，如何使用for循环遍历列表，如何创建简单的数值列表以及对数值列表执行的一些操作。还学习了如何使用切片对列表进行操作和复制，最后还学习了元组，以及设置代码格式。</p><h2 id="第四章-if语句">第四章 if语句</h2><p>编程时经常需要检查一系列的条件，并根据此决定采取什么措施。if语句让你能够检查程序的当前状态，并采取相应的措施。每条if语句的核心都是一个值为True或False的表达式。相应的符号有：==、!=、&lt;、&gt;、&lt;=、&gt;=。关键字有：if、elif、else。在检查多个条件时会用到与、或、非：他们的关键词是：and（两个都为真）、or（一个为真）、not（条件为假）。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例</span><br>cars = [<span class="hljs-string">&#x27;audi&#x27;</span>, <span class="hljs-string">&#x27;bmw&#x27;</span>, <span class="hljs-string">&#x27;subaru&#x27;</span>, <span class="hljs-string">&#x27;toyota&#x27;</span>]<br><span class="hljs-keyword">for</span> car <span class="hljs-keyword">in</span> cars:<br>    <span class="hljs-keyword">if</span> car == <span class="hljs-string">&#x27;bmw&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(car.upper())<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(car.title())<br>Audi<br>BMW<br>Subaru<br>Toyota<br></code></pre></td></tr></table></figure><h3 id="条件测试">条件测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>car = <span class="hljs-string">&#x27;bmw&#x27;</span><br><span class="hljs-comment"># ==是相等运算符，目的是比较等式两边的值是否相等，相等就是True否则就是False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>car == <span class="hljs-string">&#x27;bmw&#x27;</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>car == <span class="hljs-string">&#x27;toyota&#x27;</span><br><span class="hljs-literal">False</span><br><span class="hljs-comment"># 检查是忽略大小写可以用到字符串的方法upper（）或title（）等等</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>car.upper() == <span class="hljs-string">&#x27;BMW&#x27;</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>检查是否不等</strong>，这里用的符号是 != 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">requested_topping = <span class="hljs-string">&#x27;mushrooms&#x27;</span><br><span class="hljs-keyword">if</span> requested_topping != <span class="hljs-string">&#x27;anchovies&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hold the anhovies!&#x27;</span>)<br>Hold the anhovies!<br></code></pre></td></tr></table></figure><p><strong>数值比较</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>age = <span class="hljs-number">18</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age == <span class="hljs-number">19</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age == <span class="hljs-number">18</span>  <br><span class="hljs-literal">True</span><br><br>answer = <span class="hljs-number">17</span><br><span class="hljs-keyword">if</span> answer != <span class="hljs-number">42</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个数值不是42，请再次更改变量值！&#x27;</span>)<br>这个数值不是<span class="hljs-number">42</span>，请再次更改变量值！<br></code></pre></td></tr></table></figure><p><strong>检查多个条件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>age_0 = <span class="hljs-number">21</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age_1 = <span class="hljs-number">18</span><br><span class="hljs-comment"># and</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age_0 &gt;=<span class="hljs-number">21</span> <span class="hljs-keyword">and</span> age_1 &gt;=<span class="hljs-number">21</span><br><span class="hljs-literal">False</span><br><span class="hljs-comment"># or</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age_0 &gt;=<span class="hljs-number">21</span> <span class="hljs-keyword">or</span> age_1 &gt;=<span class="hljs-number">21</span>  <br><span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><p><strong>检查某个特定的值是否在或不在列表中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>number = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> <span class="hljs-keyword">in</span> number<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">9</span> <span class="hljs-keyword">in</span> number<br><span class="hljs-literal">False</span><br><br>number = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>number_0 = <span class="hljs-number">8</span><br><span class="hljs-keyword">if</span> number_0 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> number:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;number_0&#125;</span>不在我们的数字列表里面。我们把他加进来吧！&#x27;</span>)<br><span class="hljs-number">8</span>不在我们的数字列表里面。我们把他加进来吧！<br></code></pre></td></tr></table></figure><h3 id="if-语句">if 语句</h3><p>在了解了条件测试之后，就可以编写if 语句了，具体使用哪一种取决于测试的条件数量。</p><p><strong>最简单的if 语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经成年了。&#x27;</span>)<br>你已经成年了。<br></code></pre></td></tr></table></figure><p><strong>if-else语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">age = <span class="hljs-number">17</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经成年了。&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你还是未成年。&#x27;</span>)<br>你还是未成年。<br></code></pre></td></tr></table></figure><p><strong>if-elif-else语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">12</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以免费观看电影。&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以半价购买电影票。&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你需要购买全票。&#x27;</span>)<br>你可以半价购买电影票。<br><span class="hljs-comment"># 有些情况下是可以省略else这个代码块的</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以免费观看电影。&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你可以半价购买电影票。&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你需要购买全票。&#x27;</span>)<br>你可以半价购买电影票。<br></code></pre></td></tr></table></figure><h3 id="使用if-语句处理列表">使用if 语句处理列表</h3><p><strong>检查列表里面是否有相应的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers:<br>    <span class="hljs-keyword">if</span> number == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个列表里3是中间数&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这个列表里有<span class="hljs-subst">&#123;number&#125;</span>.&#x27;</span>)<br>这个列表里有<span class="hljs-number">1.</span><br>这个列表里有<span class="hljs-number">2.</span><br>这个列表里<span class="hljs-number">3</span>是中间数<br>这个列表里有<span class="hljs-number">4.</span><br>这个列表里有<span class="hljs-number">5.</span><br></code></pre></td></tr></table></figure><p><strong>确定列表是不是空列表</strong>，列表为空时都是返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = []<br><span class="hljs-keyword">if</span> numbers:<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;adding <span class="hljs-subst">&#123;number&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n所有数字添加了&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;好像这里面没有数字诶!&#x27;</span>)<br>好像这里面没有数字诶!<br></code></pre></td></tr></table></figure><p><strong>多个列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers_0 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>numbers_1 = [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(numbers_0)<br><span class="hljs-built_in">print</span>(numbers_1)<br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> numbers_1:<br>    <span class="hljs-keyword">if</span> number <span class="hljs-keyword">in</span> numbers_0:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这两个列表都有 <span class="hljs-subst">&#123;number&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第一个列表里面没有 <span class="hljs-subst">&#123;number&#125;</span> 这个数。&#x27;</span>)<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br>第一个列表里面没有 <span class="hljs-number">6</span> 这个数。<br>第一个列表里面没有 <span class="hljs-number">7</span> 这个数。<br>第一个列表里面没有 <span class="hljs-number">8</span> 这个数。<br>第一个列表里面没有 <span class="hljs-number">9</span> 这个数。<br>这两个列表都有 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="小结-v3">小结</h3><p>本章学习了if语句以及相关的关键词和符号，也使用for循环遍历列表时对某些元素做特出处理。</p><h2 id="第五章-字典">第五章 字典</h2><p>字典就是储存多个有两种相关信息的元素，比如姓名及其年龄，单词及其含义等，字典的信息量也不守限制。</p><h3 id="一个简单的字典">一个简单的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;color&#x27;</span>])<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;points&#x27;</span>])<br>bule<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="使用字典">使用字典</h3><p>字典（dictionary）是一系列的<strong>键值对</strong>，每个键都对应一个值，字典用放在花括号{ }中的一系列键值对表示。</p><p><strong>访问字典中的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;color&#x27;</span>])<br>bule<br></code></pre></td></tr></table></figure><p><strong>添加键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br>alien[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(alien）<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建一个空字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;&#125;<br>alien[<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&#x27;blue&#x27;</span><br>alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br>alien[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>修改字典中的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">alien[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">alien[<span class="hljs-string">&#x27;speed&#x27;</span>] = <span class="hljs-string">&#x27;medium&#x27;</span><br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br><span class="hljs-comment"># 删除键值对</span><br><span class="hljs-keyword">del</span> alien[<span class="hljs-string">&#x27;speed&#x27;</span>]<br><span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;x_position&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y_position&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>由类似对象组成字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">favonlie_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;swift&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> favonlie_languages.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key.title()&#125;</span>喜欢使用<span class="hljs-subst">&#123;value.title()&#125;</span>语言编程！&#x27;</span>)<br>Jen喜欢使用Python语言编程！<br>Sarah喜欢使用C语言编程！<br>Edward喜欢使用Swift语言编程！<br>Phil喜欢使用Python语言编程！<br></code></pre></td></tr></table></figure><p><strong>使用get()方法来访问值</strong></p><p>如果你访问的值不存在字典里，你直接访问的话会出现错误，这时候可以使用get()方法来访问，这个方法可以让你在访问不存在的值的时候返回一个默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;bule&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;speed&#x27;</span>])<br><br>发生异常: KeyError<br><span class="hljs-string">&#x27;speed&#x27;</span><br>  File <span class="hljs-string">&quot;favonlie_languages.py&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(alien[<span class="hljs-string">&#x27;speed&#x27;</span>])<br>          ~~~~~^^^^^^^^^<br>KeyError: <span class="hljs-string">&#x27;speed&#x27;</span><br><br><span class="hljs-built_in">print</span>(alien.get(<span class="hljs-string">&#x27;speed&#x27;</span>, <span class="hljs-string">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))<br>不好意思，没有这个索引且没有对应的值<br>alien[<span class="hljs-string">&#x27;speed&#x27;</span>] = <span class="hljs-string">&#x27;medium&#x27;</span><br><span class="hljs-built_in">print</span>(alien.get(<span class="hljs-string">&#x27;speed&#x27;</span>, <span class="hljs-string">&#x27;不好意思，没有这个索引且没有对应的值&#x27;</span>))<br>medium<br></code></pre></td></tr></table></figure><h3 id="遍历字典">遍历字典</h3><p>遍历字典中的内容有3个基本的关键词，items()字典中的键和值，有这个方法需要两个临时变量用于遍历字典、keys()遍历字典中的键、values()遍历字典中的值。</p><p><strong>遍历所有键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">like_number = &#123;<br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;5&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-string">&#x27;9&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> like_number.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key.title()&#125;</span> like number is <span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br>A like number <span class="hljs-keyword">is</span> <span class="hljs-number">8</span><br>B like number <span class="hljs-keyword">is</span> <span class="hljs-number">7</span><br>C like number <span class="hljs-keyword">is</span> <span class="hljs-number">5</span><br>D like number <span class="hljs-keyword">is</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>遍历所有键</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">favonlie_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c#&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;swift&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>&#125;<br><span class="hljs-comment"># 遍历所有键</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> favonlie_languages.keys():<br>    <span class="hljs-built_in">print</span>(name.title())<br>Jen<br>Sarah<br>Edward<br>Phil<br><br><span class="hljs-comment"># 按特定顺序遍历字典中的所有键</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(favonlie_languages.keys()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Thank you <span class="hljs-subst">&#123;name.title()&#125;</span>,you are welcome!&#x27;</span>)<br>Thank you Edward,you are welcome!<br>Thank you Jen,you are welcome!<br>Thank you Phil,you are welcome!<br>Thank you Sarah,you are welcome!<br><br><span class="hljs-comment"># 遍历字典中的所有值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;编程语言&#x27;</span>)<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> favonlie_languages.values():<br>    <span class="hljs-built_in">print</span>(language)<br>编程语言<br>python<br>c<span class="hljs-comment">#</span><br>swift<br>python<br></code></pre></td></tr></table></figure><p>**set()**方法用于提取列表或集合中的不同元素，如果有相同的只会提取一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;编程语言&#x27;</span>)<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(favonlie_languages.values()):<br>    <span class="hljs-built_in">print</span>(language.title())<br>编程语言<br>swift<br>c<span class="hljs-comment">#</span><br>python<br><br><span class="hljs-comment"># 集合表现形式，一般用花括号，但里面是没有键值对的，里面的元素表现跟列表一样</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>number = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>number<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套">嵌套</h3><p>有些时候需要将多个字典储存在列表中或将列表作为值储存在字典中，这中行为就成为嵌套。</p><p><strong>字典列表</strong>就是在列表中储存字典可以应用于用户信息等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">alien_0 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>alien_1 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>alien_2 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">15</span>&#125;<br>aliens = [alien_0, alien_1, alien_2]<br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens:<br>    <span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">15</span>&#125;<br><br><span class="hljs-comment"># 创建一个用于储存外星人的空列表</span><br>aliens = []<br><span class="hljs-comment"># 用for循环创建30个绿色的外星人</span><br><span class="hljs-keyword">for</span> alien_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    new_alien = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>    aliens.append(new_alien)<br><span class="hljs-comment"># 打印前5个外星人</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br><span class="hljs-comment"># 显示创建了多少个外星人</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;创建了多少个外星人:<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(aliens)&#125;</span>&#x27;</span>)<br>创建了多少个外星人:<span class="hljs-number">30</span><br><span class="hljs-comment"># 修改前三个</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">if</span> alien[<span class="hljs-string">&#x27;color&#x27;</span>] == <span class="hljs-string">&#x27;green&#x27;</span>:<br>        alien[<span class="hljs-string">&#x27;color&#x27;</span>] = <span class="hljs-string">&#x27;yellow&#x27;</span><br>        alien[<span class="hljs-string">&#x27;points&#x27;</span>] = <span class="hljs-number">10</span><br>        alien[<span class="hljs-string">&#x27;speed&#x27;</span>] = <span class="hljs-string">&#x27;medium&#x27;</span><br><span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens[:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(alien)<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;medium&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>在字典中储存列表</strong>可以用于食品配方等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">pizza = &#123;<br>    <span class="hljs-string">&#x27;crust&#x27;</span>: <span class="hljs-string">&#x27;think&#x27;</span>,<br>    <span class="hljs-string">&#x27;toppings&#x27;</span>: [<span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">f&#x27;You ordered a <span class="hljs-subst">&#123;pizza[<span class="hljs-string">&quot;crust&quot;</span>]&#125;</span>-crust pizza &#x27;</span><span class="hljs-string">&quot;with the following toppings:&quot;</span>)<br><span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> pizza[<span class="hljs-string">&#x27;toppings&#x27;</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\t<span class="hljs-subst">&#123;topping&#125;</span>&#x27;</span>)<br>You ordered a think-crust pizza <span class="hljs-keyword">with</span> the following toppings:<br>mushrooms<br>extra cheese<br></code></pre></td></tr></table></figure><p><strong>在字典中储存字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">user = &#123;<br>    <span class="hljs-string">&#x27;aeinstein&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;albert&#x27;</span>,<br>        <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;einstein&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;princeton&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-string">&#x27;mcurie&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;marie&#x27;</span>,<br>        <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;curie&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;paris&#x27;</span>,<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> username, user_info <span class="hljs-keyword">in</span> user.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nUsername: <span class="hljs-subst">&#123;username&#125;</span>&#x27;</span>)<br>    full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;first&#x27;</span>]&#125;</span> <span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;last&#x27;</span>]&#125;</span>&quot;</span><br>    location = user_info[<span class="hljs-string">&#x27;location&#x27;</span>]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\tFullname: <span class="hljs-subst">&#123;full_name.title()&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\tLocation: <span class="hljs-subst">&#123;location.title()&#125;</span>&#x27;</span>)<br><br>Username: aeinstein<br>Fullname: Albert Einstein<br>Location: Princeton<br><br>Username: mcurie<br>Fullname: Marie Curie<br>Location: Paris<br></code></pre></td></tr></table></figure><h3 id="小结-v4">小结</h3><p>本章我们学习了如何定义字典，以及如何使用储存在字典中的信息。然后学习了如何访问和修改字典中的元素，以及如何遍历字典中的信息。还学习了如何遍历字典中的所有键值对、所有的键和所有的值。学习了如何在列表中嵌套字典，在字典中如何嵌套列表，在字典中嵌套字典。</p><h2 id="第六章-用户输入和while循环">第六章 用户输入和while循环</h2><h3 id="input-函数的工作原理">input()函数的工作原理</h3><p>input()函数让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量，以便使用。input()函数接受一个参数，即要向用户显示的提示(prompt)。用户输入的内容Python默认为字符串，要想用户输入其他内容需要再input()前面制定类型，比如：要想用户输入的是数值 int(input(“How old are you”))。<br>**注意：**有些文本编辑器不能运行提示用户输入的程序，要运行他们需要从终端运行。在cmd终端里面直接运行python文件就可以了，<strong>格式是</strong>：路径&gt;py 文件名和文件后缀。有些python版本需要使用：路径&gt;python 文件名和文件后缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;tell me something, and I will repeat it back to you:&quot;</span>)<br>tell me something, <span class="hljs-keyword">and</span> I will repeat it back to you: hello world<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(message)<br> hello world<br><span class="hljs-meta">&gt;&gt;&gt; </span>  <br></code></pre></td></tr></table></figure><p><strong>使用int()来获取数值输入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 控制用户输入的内容为数字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How old are you: &quot;</span>))<br>How old are you: <span class="hljs-number">36</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age&gt;<span class="hljs-number">20</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>求模运算</strong>是个很有用的工具，它将两个数相除并返回余数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数，我可以判断是奇数还是偶数：&quot;</span>))<br><span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个数是偶数！&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个数是奇数！&quot;</span>)<br>请输入一个数，我可以判断是奇数还是偶数：<span class="hljs-number">50</span><br>这个数是偶数！<br></code></pre></td></tr></table></figure><h3 id="while-循环简介">while 循环简介</h3><p>for 循环用于针对集合中的每个元素执行一个代码块，而 while 循环这不断地运行，只到指定的条件不再满足为止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> number &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(number, end=<span class="hljs-string">&quot; &quot;</span>)<br>    number += <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>让用户选择何时退出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只要用户输入的不是‘quit’和‘exit’该循环就继续运行。</span><br>prompt = <span class="hljs-string">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span><br>message = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> message != <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message != <span class="hljs-string">&quot;exit&quot;</span>:<br>    <span class="hljs-comment"># 这里添加了一个lower方法目的是让用户输入的内容都变成小写和下面的if进行判断。</span><br>    message = <span class="hljs-built_in">input</span>(prompt).lower()<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class="hljs-number">2</span><br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: <span class="hljs-number">3</span><br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: ExiT<br>恭喜你！<br><br><span class="hljs-comment"># 使用标志让用户选择何时退出</span><br>prompt = <span class="hljs-string">&quot;我们来玩个游戏，看看你知不知道怎么退出这个游戏: &quot;</span><br>active = <span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> active:<br>    message = <span class="hljs-built_in">input</span>(prompt).lower()<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你！&quot;</span>)<br>        active = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再想想退出的英文是什么？&quot;</span>)<br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: qwe<br>再想想退出的英文是什么？<br>我们来玩个游戏，看看你知不知道怎么退出这个游戏: QUIT<br>恭喜你！<br></code></pre></td></tr></table></figure><p><strong>break 退出循环</strong>，不管条件满不满足，想立即退出 while 循环，不再运行后面的代码，可以使用 break 语句。上面的例子已经使用过一次了。我们再使用一个特别的例子。break 还可以用来退出遍历列表或字典的 for 循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请你说说你喜欢哪个城市: &quot;</span>).lower()<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;quit&quot;</span> <span class="hljs-keyword">or</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再见！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;除了<span class="hljs-subst">&#123;message.title()&#125;</span>还有其他的城市么？&quot;</span>)<br>请你说说你喜欢哪个城市: shang hai<br>除了Shang Hai 还有其他的城市么？<br>请你说说你喜欢哪个城市: QUIT<br>再见！<br></code></pre></td></tr></table></figure><p><strong>在循环中使用 continue</strong></p><p>要返回循环的开头，并根据条件测试的结果决定是否继续执行循环，可以使用 continue 语句，他不像 break 那样不执行余下的代码并退出整个循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> number &lt; <span class="hljs-number">10</span>:<br>    number += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(number, end=<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <br></code></pre></td></tr></table></figure><p><strong>避免无线循环</strong></p><p>while 循环一定要设置退出条件，如果没有退出条件，while 循环就会无止境的一直执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">number = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> number &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(number)<br></code></pre></td></tr></table></figure><h3 id="使用-while-循环处理列表和字典">使用 while 循环处理列表和字典</h3><p>for 循环是一种遍历列表的有效方式，但不应该在 for 循环中修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时修改它，可使用 while 循环。通过将 while 循环与列表和字典结合起来使用，可收集、存储并组织大量的输入，供以后查看和使用。<strong>注意</strong>，这里有个有意思的事情，就是列表里面是空的时候它的布尔值是 False ，列表里面有元素的时候，它的布尔值是 True 。</p><p><strong>在列表之间移动元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先创建一个待验证的用户列表</span><br><span class="hljs-comment"># 和一个用户储存已验证用户的空列表</span><br>unconfirmed_users = [<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;zqten&#x27;</span>, <span class="hljs-string">&#x27;candace&#x27;</span>]<br>confirmed_users = []<br><span class="hljs-comment"># 验证每个用户，直到没有未验证的用户为止</span><br><span class="hljs-comment"># 将每个经过验证的用户添加到已验证用户列表中</span><br><span class="hljs-keyword">while</span> unconfirmed_users:<br>    current_user = unconfirmed_users.pop()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Verifying user: <span class="hljs-subst">&#123;current_user.title()&#125;</span>&#x27;</span>)<br>    confirmed_users.append(current_user)<br><span class="hljs-comment"># 显示所有的已验证的用户</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nThe following users have been confirmed:&#x27;</span>)<br><span class="hljs-keyword">for</span> confirmed_user <span class="hljs-keyword">in</span> confirmed_users:<br>    <span class="hljs-built_in">print</span>(confirmed_user.title())<br>    <br>Verifying user: Candace<br>Verifying user: Zqten<br>Verifying user: Admin<br><br>The following users have been confirmed:<br>Candace<br>Zqten<br>Admin<br></code></pre></td></tr></table></figure><p><strong>删除为特定值的所有列表元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除为特定值的所有列表元素</span><br>pets = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]<br><span class="hljs-built_in">print</span>(pets)<br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets:<br>    pets.remove(<span class="hljs-string">&#x27;cat&#x27;</span>)<br><span class="hljs-built_in">print</span>(pets)<br>[<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]<br>[<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong>使用用户输入填充字典</strong></p><p>可以使用 while 循环提示用户输入任意多的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用用户输入填充字典</span><br>responses = &#123;&#125;<br><span class="hljs-comment"># 设置一个标志，指出调查是否继续</span><br>polling_active = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是调查每个人的爱好，请根据提示输入。&#x27;</span>)<br><span class="hljs-keyword">while</span> polling_active:<br>    <span class="hljs-comment"># 提示输入被调查者的名字和回答</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入被调查者的名字：&quot;</span>)<br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入被调查者的回答：&quot;</span>)<br>    <span class="hljs-comment"># 将输入的数据储存在字典中</span><br>    responses[name] = response<br>    <span class="hljs-comment"># 询问用户是否继续调查</span><br>    repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)<br>    <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>:<br>        polling_active = <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 下面这段代码的目的是让用户输入yes和no，输入其他的会提示错误，如果是只判断退出循环条件的话，可以省略下面。</span><br>    <span class="hljs-keyword">elif</span> repeat == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> repeat != <span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">or</span> repeat != <span class="hljs-string">&#x27;no&#x27;</span>:<br>            <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>:<br>                polling_active = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> repeat == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入错误，请重新输入&quot;</span>)<br>                repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否有人继续参与调查？（yes/no）&quot;</span>)<br>        <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>:<br>            polling_active = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 输出调查结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n---调查结果---&#x27;</span>)<br><span class="hljs-keyword">for</span> name, response <span class="hljs-keyword">in</span> responses.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>的爱好是: <span class="hljs-subst">&#123;response&#125;</span>。&quot;</span>)<br><br>这是调查每个人的爱好，请根据提示输入。<br>请输入被调查者的名字：刘翔<br>请输入被调查者的回答：跨栏<br>是否有人继续参与调查？（yes/no）不知道<br>输入错误，请重新输入<br>是否有人继续参与调查？（yes/no）yes<br>请输入被调查者的名字：姚明<br>请输入被调查者的回答：篮球<br>是否有人继续参与调查？（yes/no）不知道<br>输入错误，请重新输入<br>是否有人继续参与调查？（yes/no）no<br><br>---调查结果---<br>刘翔的爱好是: 跨栏。<br>姚明的爱好是: 篮球。<br></code></pre></td></tr></table></figure><h3 id="小结-v5">小结</h3><p>本章学习了如何在程序中使用 input() 来让用户提供信息，如何处理文本和数的输入，以及如何使用 while 循环让程序按用户的要求不断地运行。然后见识了多种控制 while 循环流程的方式：设置活动标志，使用 break 语句，以及使用 continue 语句。还学习了如何使用 while 循环在列表之间移动元素，以及如何从列表中删除所有包含特定值的元素。最后，学习了如何结合使用 while 循环和字典。</p><h2 id="第七章-函数">第七章 函数</h2><p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用（call）该函数。当需要再程序中多次执行同一项任务时，无须反复编写完成该任务的代码，只需要调用执行该任务的函数，让Python运行其中的代码即可。</p><h3 id="定义函数">定义函数</h3><p>定义函数的关键字是 def 。后面是函数名和括号，没有参数时可以是空括号，然后和 for 、while 一样也需要冒号，表示定义完成，换行后缩进表示要执行的代码块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br><br>greet_user()<br>Hello World!<br></code></pre></td></tr></table></figure><p><strong>向函数传递信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>(<span class="hljs-params">uesrname</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示简单的问候语&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello,<span class="hljs-subst">&#123;uesrname&#125;</span>!&quot;</span>)<br><br><br>greet_user(<span class="hljs-string">&#x27;zqten&#x27;</span>)<br>Hello,zqten!<br></code></pre></td></tr></table></figure><p><strong>实参和形参</strong></p><p>在上面的例子中，uesrname是一个形参，即函数完成工作所需要的信息。<br>而 ‘zqten’ 则是实参，即在调用函数时传递给函数的信息。</p><h3 id="传递实参">传递实参</h3><p>传递实参有两种方式，一种是按照位置顺序传递，另一种是按照关键字传递。按照关键字传递实参不用考虑顺序，但要记得关键字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">animal_type, pet_name: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nI have a <span class="hljs-subst">&#123;animal_type&#125;</span>.&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My <span class="hljs-subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="hljs-subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)<br>    <br><span class="hljs-comment"># 按位置顺序传递实参</span><br>describe_pet(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;duoduo&#x27;</span>)<br>I have a cat.<br>My cat<span class="hljs-string">&#x27;s name is Duoduo.</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 按关键字传递实参</span><br><span class="hljs-string">describe_pet(pet_name=&#x27;</span>nai cha<span class="hljs-string">&#x27;, animal_type=&#x27;</span>dog<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">I have a dog.</span><br><span class="hljs-string">My dog&#x27;</span>s name <span class="hljs-keyword">is</span> Nai Cha.<br></code></pre></td></tr></table></figure><p><strong>默认值</strong></p><p>有些时候你想改变某个参数，但有些时候你想让这个参数先有一个默认值，后面调用的时候看情况是否修改。这种情况可以为参数设置一个默认值。如果没有设置默认值，在调用的时候也没有传递参数 Python 就会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">animal_type=<span class="hljs-string">&#x27;cat&#x27;</span>, pet_name=<span class="hljs-string">&#x27;duo duo&#x27;</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示宠物信息&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nI have a <span class="hljs-subst">&#123;animal_type&#125;</span>.&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My <span class="hljs-subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="hljs-subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)<br><span class="hljs-comment"># 有默认值的情况下，可以不用传递参数，也可以看需要传递</span><br>describe_pet()<br>I have a cat.<br>My cat<span class="hljs-string">&#x27;s name is Duo Duo.</span><br><span class="hljs-string"></span><br><span class="hljs-string">describe_pet(&#x27;</span>dog<span class="hljs-string">&#x27;, &#x27;</span>nai cha<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">I have a dog.</span><br><span class="hljs-string">My dog&#x27;</span>s name <span class="hljs-keyword">is</span> Nai Cha.<br></code></pre></td></tr></table></figure><h3 id="返回值">返回值</h3><p>函数并非总是直接显示输出，它还可以处理一些数据，并返回一个或一组值，函数返回的值称为返回值。在函数中 <strong>return</strong> 语句将值返回到调用函数的那行代码，返回值能让你将程序的大部分繁重工作移到函数中，从而简化程序。</p><p><strong>返回简单的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span><br>    full_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>Jimi Hendrix <br></code></pre></td></tr></table></figure><p><strong>让实参变成可选</strong></p><p>就是先设置参数的默认值，但这个默认值是一个空值。不需要的时候就不会出现，需要的时候只需要在调用的时候传递一个参数就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name, middle_name=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span><br>    full_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span> <span class="hljs-subst">&#123;middle_name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>Jimi Hendrix <br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>, <span class="hljs-string">&#x27;YYY&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>Jimi Hendrix Yyy<br></code></pre></td></tr></table></figure><p><strong>返回字典</strong></p><p>这里有个小小的细节，就是 age=None 是一个布尔值并且是 False 。意思就是这个参数并没有值返回 False 。如果为这个参数传递了一个值，它就返回 True 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_person</span>(<span class="hljs-params">first_name, last_name, age=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回一个字典，其中包含一个人的信息&#x27;&#x27;&#x27;</span><br>    person = &#123;<span class="hljs-string">&#x27;first&#x27;</span>: first_name, <span class="hljs-string">&#x27;last&#x27;</span>: last_name&#125;<br>    <span class="hljs-keyword">if</span> age:<br>        person[<span class="hljs-string">&#x27;age&#x27;</span>] = age<br>    <span class="hljs-keyword">return</span> person<br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendeix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br>&#123;<span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;hendeix&#x27;</span>&#125;<br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendeix&#x27;</span>, age=<span class="hljs-number">36</span>)<br><span class="hljs-built_in">print</span>(musician)<br>&#123;<span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;hendeix&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">36</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>结合使用函数和 while 循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name, middle_name=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;返回标准格式的姓名&#x27;&#x27;&#x27;</span><br>    full_name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;first_name&#125;</span> <span class="hljs-subst">&#123;last_name&#125;</span> <span class="hljs-subst">&#123;middle_name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nPleasr tell me your name:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(enter &#x27;q&#x27; at any time to quit.)&quot;</span>)<br><br>    f_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你姓什么：&quot;</span>)<br>    <span class="hljs-keyword">if</span> f_name == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    l_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你的名字是什么：&quot;</span>)<br>    <span class="hljs-keyword">if</span> l_name == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br><br>    full_name = get_formatted_name(f_name, l_name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你好, <span class="hljs-subst">&#123;full_name&#125;</span>&quot;</span>)<br><br>Pleasr tell me your name:<br>(enter <span class="hljs-string">&#x27;q&#x27;</span> at <span class="hljs-built_in">any</span> time to quit.)<br>你姓什么：yao<br>你的名字是什么：ming<br>你好, Yao Ming <br><br>Pleasr tell me your name:<br>(enter <span class="hljs-string">&#x27;q&#x27;</span> at <span class="hljs-built_in">any</span> time to quit.)<br>你姓什么：q<br></code></pre></td></tr></table></figure><h3 id="传递列表">传递列表</h3><p>将列表传递给函数后，函数就能直接访问其内容，进行修改等等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_users</span>(<span class="hljs-params">names</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;向列表中的每个用户发出简单的问候&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, %s!&#x27;</span> % name)<br><br>username = [<span class="hljs-string">&#x27;zqten&#x27;</span>, <span class="hljs-string">&#x27;zhengjizhong&#x27;</span>, <span class="hljs-string">&#x27;zhengkainan&#x27;</span>, <span class="hljs-string">&#x27;zhouhuarong&#x27;</span>]<br>greet_users(username)<br><br>Hello, zqten!<br>Hello, zhengjizhong!<br>Hello, zhengkainan!<br>Hello, zhouhuarong!<br></code></pre></td></tr></table></figure><p><strong>在函数中修改列表</strong>这个程序演示了一个概念：每个函数都应只负责一项具体工作。这有助于将复杂的任务分解成一系列简单的步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">unprinted_designs = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>completed_models = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_models</span>(<span class="hljs-params">unprinted_designs, completed_models</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    模拟打印每个数字，直到没有未打印的数字为止</span><br><span class="hljs-string">    打印每个数字后，都将其移到列表completed_models中</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> unprinted_designs:<br>        current_design = unprinted_designs.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Printing model: %s&#x27;</span> % current_design)<br>        completed_models.append(current_design)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_completed_models</span>(<span class="hljs-params">completed_models</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;显示打印好的所有数字&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nThe following models have been printed:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> completed_model <span class="hljs-keyword">in</span> completed_models:<br>        <span class="hljs-built_in">print</span>(completed_model, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><br>print_models(unprinted_designs, completed_models)<br>show_completed_models(completed_models)<br><span class="hljs-built_in">print</span>(unprinted_designs)<br><br>Printing model: <span class="hljs-number">1</span><br>Printing model: <span class="hljs-number">2</span><br>Printing model: <span class="hljs-number">3</span><br>Printing model: <span class="hljs-number">4</span><br>Printing model: <span class="hljs-number">5</span><br>Printing model: <span class="hljs-number">6</span><br>Printing model: <span class="hljs-number">7</span><br>Printing model: <span class="hljs-number">8</span><br>Printing model: <span class="hljs-number">9</span><br>Printing model: <span class="hljs-number">10</span><br><br>The following models have been printed:<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> []<br><span class="hljs-comment"># 如果不希望传递后列表为空，可以使用副本传递参数 [:] 切片传递</span><br>print_models(unprinted_designs[:], completed_models)<br>show_completed_models(completed_models)<br><span class="hljs-built_in">print</span>(unprinted_designs)<br><br>Printing model: <span class="hljs-number">1</span><br>Printing model: <span class="hljs-number">2</span><br>Printing model: <span class="hljs-number">3</span><br>Printing model: <span class="hljs-number">4</span><br>Printing model: <span class="hljs-number">5</span><br>Printing model: <span class="hljs-number">6</span><br>Printing model: <span class="hljs-number">7</span><br>Printing model: <span class="hljs-number">8</span><br>Printing model: <span class="hljs-number">9</span><br>Printing model: <span class="hljs-number">10</span><br><br>The following models have been printed:<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h3 id="传递任意数量的参数">传递任意数量的参数</h3><p>“ * ” 带形参名中的星号让Python创建一个名为形参名的元组，该元组包含函数收到的所有值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">*toppings</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nMaking a pizza with the following toppings:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings:<br>        <span class="hljs-built_in">print</span>(topping)<br><br>make_pizza(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>make_pizza(<span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br><br>Making a pizza <span class="hljs-keyword">with</span> the following toppings:<br>aaa<br><br>Making a pizza <span class="hljs-keyword">with</span> the following toppings:<br>mushrooms<br>extra cheese<br></code></pre></td></tr></table></figure><p><strong>结合使用位置实参和任意数量的实参</strong></p><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置和关键字实参，再将余下的实参都收集到最后一个形参中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">size, *toppings</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;比如概述要制作的披萨&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nMaking a <span class="hljs-subst">&#123;size&#125;</span>-inch pizza with the following toppings:&#x27;</span>)<br>    <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;- <span class="hljs-subst">&#123;topping&#125;</span>&#x27;</span>)<br><br>make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>make_pizza(<span class="hljs-number">19</span>, <span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- aaa<br><br>Making a <span class="hljs-number">19</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- mushrooms<br>- extra cheese<br></code></pre></td></tr></table></figure><p><strong>使用任意数量的关键字实参</strong></p><p>“ ** ” 带形参名中的两个星号让Python创建一个名为形参名的字典，该字典包含函数收到的所有的键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_profile</span>(<span class="hljs-params">first, last, **user_info</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;创建一个字典，其中包含我们知道的有关用户的一切&#x27;&#x27;&#x27;</span><br>    user_info[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first<br>    user_info[<span class="hljs-string">&#x27;last_name&#x27;</span>] = last<br>    <span class="hljs-keyword">return</span> user_info<br><br>user_profile = build_profile(<br>    <span class="hljs-string">&#x27;zheng&#x27;</span>, <span class="hljs-string">&#x27;ji zhong&#x27;</span>, age=<span class="hljs-number">11</span>, height=<span class="hljs-string">&#x27;147cm&#x27;</span>, weight=<span class="hljs-string">&#x27;48kg&#x27;</span>)<br><span class="hljs-built_in">print</span>(user_profile)<br>&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&#x27;147cm&#x27;</span>, <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-string">&#x27;48kg&#x27;</span>, <span class="hljs-string">&#x27;first_name&#x27;</span>: <span class="hljs-string">&#x27;zheng&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>: <span class="hljs-string">&#x27;ji zhong&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="将函数存储在模块中">将函数存储在模块中</h3><p>将函数存储在称为模块的独立文件中，再将模块导入（import）主程序。可以让代码看起来容易理解。</p><p><strong>导入整个模块</strong></p><p>要让函数是可导入的，得先创建模块。模块是扩展名为 .py 的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pizza<br>pizza.make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>pizza.make_pizza(<span class="hljs-number">17</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">17</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br></code></pre></td></tr></table></figure><p><strong>导入特定的函数</strong></p><p>只想导入模块中的特定函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pizza <span class="hljs-keyword">import</span> make_pizza<br><br>make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>make_pizza(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br></code></pre></td></tr></table></figure><p><strong>使用 as 给函数指定别名</strong></p><p>如果要导入的函数的名称太长或者可能与程序中的其他名称有冲突，可指定简短而独一无二的别名。这个方法也可以应用到给模块指定别名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pizza <span class="hljs-keyword">import</span> make_pizza <span class="hljs-keyword">as</span> mp<br><br>mp(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>mp(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>, <span class="hljs-string">&#x27;fanqie&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br>- fanqie<br><br><span class="hljs-comment"># 也可以给模块指定别名</span><br><span class="hljs-keyword">import</span> pizza <span class="hljs-keyword">as</span> p<br><br>p.make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>p.make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>, <span class="hljs-string">&#x27;fanqie&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br>- fanqie<br><br></code></pre></td></tr></table></figure><p><strong>导入模块中的所有函数</strong></p><p>这种方法一般慎用，因为如果模块中有函数的名称与当前项目中的名称相同，可能导致意想不到的结果。<strong>最好的做法是要么只导入需要使用的函数，要么导入整个模块并使用点号调用</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pizza <span class="hljs-keyword">import</span> *<br><br>make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;zhu rou&#x27;</span>)<br>make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;niu rou&#x27;</span>, <span class="hljs-string">&#x27;bai cai&#x27;</span>, <span class="hljs-string">&#x27;fanqie&#x27;</span>)<br><br>Making a <span class="hljs-number">12</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- zhu rou<br><br>Making a <span class="hljs-number">16</span>-inch pizza <span class="hljs-keyword">with</span> the following toppings:<br>- niu rou<br>- bai cai<br>- fanqie<br><br><span class="hljs-comment"># 导入其他文件夹的模块</span><br><span class="hljs-keyword">from</span> 文件夹名称 <span class="hljs-keyword">import</span> 模块<br><span class="hljs-keyword">from</span> 文件夹名称.模块 <span class="hljs-keyword">import</span> 函数<br></code></pre></td></tr></table></figure><h3 id="函数编写指南">函数编写指南</h3><p>在编写函数时需要牢记几个细节。</p><ul><li>应给函数指定描述性的名称，且只使用小写字母和下划线。</li><li>每个函数都应包含简要阐述其功能的注释。意思就是每个函数都需要编写使用说明的注释。</li><li>形参指定默认值时，等号两边不要有空格。</li><li>如果程序或模块包含多个函数，可以使用两个空行将函数隔开。</li><li>所有的 import 语句都应该放在文件开头。唯一的例外是，你要在文件开头编写整个程序的注释。</li><li>导入自己边学的模块时，尽量把模块和程序放在一个文件夹。</li></ul><h3 id="小结-v6">小结</h3><p>本章学习了如何编写函数，以及如何传递实参，让函数能够访问完成工作所需的信息。然后学习了如何使用位置实参和关键字实参，以及如何接受任意数量的实参，学习了显示输出的函数和返回值的函数，知道了如何将函数与列表、字典、if、语句和 while 循环结合起来使用，以及如何将函数存储在称为模块的独立文件中，让程序文件更简单、更易于理解。最后，了解了函数编写指南，遵循这些指南可让程序始终保持良好的结构。<br>程序员的目标之一是编写简单的代码来完成任务，而函数有助于实现这样的目标。</p><h2 id="第八章-类">第八章 类</h2><p>面向对象编程（object-oriented-programming, OOP）是最有效的软件编写方法之一。在基于类创建对象时，每个对象都自动具备类定义的通用行为。然后，你可根据需要赋予每个对象独特的个性。根据类来创建对象称为<strong>实例化</strong>，这让你能够使用类的实例。</p><p>面相对象变成有助于你像程序员那样看世界，并且真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背后的概念可培养逻辑思维能力，让你能够通过编写程序来解决遇到的几乎任何问题。</p><h3 id="创建和使用类">创建和使用类</h3><p><strong>创建Dog类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建Dog类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟小狗的简单尝试&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化属性name和age&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sit</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;模拟小狗坐下&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> is now sitting.&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_over</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;模拟小狗打滚&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span> rolled over.&quot;</span>)<br></code></pre></td></tr></table></figure><p>“<strong>init</strong>()”方法是类的初始化方法，类中的函数称为方法。这个方法的开头和结尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。<br>这个方法定义成包含三个形参：self 、name、age。这个方法中self 是必不可少，而且必须位于其他形参的前面。self就是类的自身，当我们实例化这个类时，我们传递的参数会通过 self 传递给类自身。<a href="http://self.name">self.name</a> = name 里面 self 前缀的变量可供类中的所有方法使用。</p><p><strong>根据类创建实例</strong></p><p>可以将类视为有关如何创建实例的说明。😋</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建实例</span><br>my_dog = Dog(<span class="hljs-string">&#x27;duoduo&#x27;</span>, <span class="hljs-number">7</span>)<br><span class="hljs-comment"># my_dog.name 就是访问实例的属性</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My dog&#x27;s name is <span class="hljs-subst">&#123;my_dog.name&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My dog&#x27;s age is <span class="hljs-subst">&#123;my_dog.age&#125;</span>&quot;</span>)<br><br>My dog<span class="hljs-string">&#x27;s name is duoduo</span><br><span class="hljs-string">My dog&#x27;</span>s age <span class="hljs-keyword">is</span> <span class="hljs-number">7</span><br><span class="hljs-comment"># 调用方法</span><br>my_dog.sit()<br>my_dog.roll_over()<br><br>duoduo <span class="hljs-keyword">is</span> now sitting.<br>duoduo rolled over.<br><span class="hljs-comment"># 创建多个实例</span><br>your_dog = Dog(<span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Your dog&#x27;s name is <span class="hljs-subst">&#123;your_dog.name&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Your dog&#x27;s age is <span class="hljs-subst">&#123;your_dog.age&#125;</span>&quot;</span>)<br>your_dog.sit()<br><br>Your dog<span class="hljs-string">&#x27;s name is Lucy</span><br><span class="hljs-string">Your dog&#x27;</span>s age <span class="hljs-keyword">is</span> <span class="hljs-number">4</span><br>Lucy <span class="hljs-keyword">is</span> now sitting.<br></code></pre></td></tr></table></figure><h3 id="使用类和实例">使用类和实例</h3><p><strong>Car 类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.make = make<br>        <span class="hljs-variable language_">self</span>.model = model<br>        <span class="hljs-variable language_">self</span>.year = year<br><span class="hljs-comment"># 给属性默认值</span><br>        <span class="hljs-variable language_">self</span>.odometer = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.oli = <span class="hljs-number">240</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span><br>        long_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.year&#125;</span>年 <span class="hljs-subst">&#123;self.make&#125;</span>生产<span class="hljs-subst">&#123;self.model&#125;</span>&quot;</span><br>        <span class="hljs-keyword">return</span> long_name.title()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这两车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.odometer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> mileage &gt;= <span class="hljs-variable language_">self</span>.odometer:<br>            <span class="hljs-variable language_">self</span>.odometer = mileage<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你不能往回设置公里数&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.odometer += mileage<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">car_oli_v</span>(<span class="hljs-params">self, oli</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;描述车辆油箱的容积&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.oli = oli<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这辆车的油箱容积是<span class="hljs-subst">&#123;self.oli&#125;</span>L.&#x27;</span>)<br><br>my_new_car = Car(<span class="hljs-string">&#x27;奥迪汽车公司&#x27;</span>, <span class="hljs-string">&#x27;奥迪A4&#x27;</span>, <span class="hljs-string">&#x27;2003&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_new_car.get_descriptive_name())<br><span class="hljs-comment"># 修改属性值</span><br>my_new_car.odometer = <span class="hljs-number">1</span><br>my_new_car.read_odometer()<br><span class="hljs-comment"># 通过方法修改属性值</span><br>my_new_car.update_odometer(<span class="hljs-number">34</span>)<br>my_new_car.increment_odometer(<span class="hljs-number">12</span>)<br>my_new_car.update_odometer(<span class="hljs-number">12</span>)<br><br><span class="hljs-number">2003</span>年奥迪汽车公司生产奥迪A4<br>这两车已经行驶了<span class="hljs-number">1</span>公里了。<br>这两车已经行驶了<span class="hljs-number">34</span>公里了。<br>这辆车已经行驶了<span class="hljs-number">46</span>公里了。<br>你不能往回设置公里数<br></code></pre></td></tr></table></figure><h3 id="继承">继承</h3><p>编写类的时候并非总是要从头开始，如果要编写的类是一个已经存在的类的特殊版本，可以使用<strong>继承</strong>。当一个类继承另一个类时，将自动获得后者的素有属性和方法。原有类称为<strong>父类</strong>，而新的类称为<strong>子类</strong>。子类不仅继承了父类的所有属性和方法，还可以定义自己的属性和方法。</p><p><strong>子类初始化方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br></code></pre></td></tr></table></figure><p><strong>给子类定义属性和方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery_size = <span class="hljs-number">40</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br>my_leaf.describe_battery()<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br>This car has a <span class="hljs-number">40</span>-KWh battery.<br></code></pre></td></tr></table></figure><p><strong>重写父类中的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery_size = <span class="hljs-number">40</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">car_oli_v</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;电动汽车没有油箱&quot;</span>)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br>my_leaf.describe_battery()<br>my_leaf.car_oli_v()<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br>This car has a <span class="hljs-number">40</span>-KWh battery.<br>电动汽车没有油箱<br></code></pre></td></tr></table></figure><p><strong>将实例用作属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery = Battery()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">car_oli_v</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;电动汽车没有油箱&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;电动汽车没有油箱&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">40</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.battery_size = battery_size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br><br>my_leaf = ElectricCar(<span class="hljs-string">&#x27;nissan&#x27;</span>, <span class="hljs-string">&#x27;leaf&#x27;</span>, <span class="hljs-string">&#x27;2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_leaf.get_descriptive_name())<br>my_leaf.battery.describe_battery()<br><br><span class="hljs-number">2024</span>年Nissan生产Leaf<br>This car has a <span class="hljs-number">40</span>-KWh battery.<br></code></pre></td></tr></table></figure><h3 id="导入类">导入类</h3><p>主要目的是让文件整洁，我们可以将类存储在模块中，然后在主程序导入所需的模块。我们需要整理一下代码，把上面我们学的三个类都复制到一个文件，命名为 <a href="http://car.py">car.py</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟汽车的简单尝试&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化描述汽车属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.make = make<br>        <span class="hljs-variable language_">self</span>.model = model<br>        <span class="hljs-variable language_">self</span>.year = year<br>        <span class="hljs-variable language_">self</span>.odometer = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回格式规范的描述性信息&#x27;&#x27;&#x27;</span><br>        long_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.year&#125;</span>年<span class="hljs-subst">&#123;self.make&#125;</span>生产<span class="hljs-subst">&#123;self.model&#125;</span>&quot;</span><br>        <span class="hljs-keyword">return</span> long_name.title()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.odometer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;设置汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> mileage &gt;= <span class="hljs-variable language_">self</span>.odometer:<br>            <span class="hljs-variable language_">self</span>.odometer = mileage<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你不能往回设置公里数&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;增加汽车里程数&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.odometer += mileage<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这辆车已经行驶了<span class="hljs-subst">&#123;self.odometer&#125;</span>公里了。&quot;</span>)<br>        <br><span class="hljs-comment"># 电池模组</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">40</span>, car_model_isoli=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化电池的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.battery_size = battery_size<br>        <span class="hljs-string">&#x27;&#x27;&#x27;默认是电动汽车,如果是汽油车可以设置会Ture.&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.car_model_isoli = car_model_isoli<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条描述电池容量的消息&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.car_model_isoli <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是一辆油车，没有电池.&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;This car has a <span class="hljs-subst">&#123;self.battery_size&#125;</span>-KWh battery.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;升级电池容量&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.battery_size != <span class="hljs-number">65</span>:<br>            <span class="hljs-variable language_">self</span>.battery_size = <span class="hljs-number">65</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_range</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印一条消息，指出汽车的续航里程&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.battery_size == <span class="hljs-number">40</span>:<br>            <span class="hljs-built_in">range</span> = <span class="hljs-number">150</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.battery_size == <span class="hljs-number">65</span>:<br>            <span class="hljs-built_in">range</span> = <span class="hljs-number">225</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;这辆车的续航里程为<span class="hljs-subst">&#123;<span class="hljs-built_in">range</span>&#125;</span>公里.&#x27;</span>)<br><br><span class="hljs-comment"># 电动车</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;模拟电动汽车&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;初始化父类属性,在初始化电动汽车特有的属性&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        <span class="hljs-variable language_">self</span>.battery = Battery()<br></code></pre></td></tr></table></figure><p><strong>导入单个类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> Car<br></code></pre></td></tr></table></figure><p><strong>导入多个类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> Car, ElectricCar<br></code></pre></td></tr></table></figure><p><strong>导入整个模块</strong></p><p>这里我把上面的代码分成了两个文件，Car类单独储存成 <a href="http://car.py">car.py</a> ，电池模组和电动车储存为 electric_car.py 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> car<br><span class="hljs-comment"># 用法就是用点引用该模块的类</span><br>my_car = car.Car(<span class="hljs-string">&quot;柳州五菱&quot;</span>, <span class="hljs-string">&quot;五菱之光&quot;</span>, <span class="hljs-number">2008</span>)<br><br><span class="hljs-comment"># 还有下面这种方法，但是不推荐用，因为可能会引起很多难以诊断的错误，比如出现同名的类</span><br><span class="hljs-comment"># 这种方法是导入模块的所有类</span><br><span class="hljs-keyword">from</span> car <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><p><strong>使用别名</strong></p><p>就是给导入的模块或类更改使用名，这并不会影响该模块和类的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给模块使用别名</span><br><span class="hljs-keyword">import</span> electric_car <span class="hljs-keyword">as</span> ec<br><span class="hljs-comment"># 给类使用别名</span><br><span class="hljs-keyword">from</span> electric_car <span class="hljs-keyword">import</span> ElectricCar <span class="hljs-keyword">as</span> EC<br></code></pre></td></tr></table></figure><h3 id="合适的工作流程">合适的工作流程</h3><p>首先尝试在一个文件中完成所有工作，确定一切都能正确运行后，在将类移到独立的模块中。</p><p>这里讲一下 <strong>VMC</strong> 模式：</p><ul><li>V： 就是视窗，用户界面等可视化的代码。</li><li>M：就是模块或类等等的代码。</li><li>C：就是整个程序的运行逻辑，流程控制等等的代码。</li></ul><p>这个模式可以简单的理解为建立三个文件夹，分别存放这三种类型的文件。这样可以让自己的代码更加简洁高效，别人理解也更容易。</p><h3 id="Python标准库">Python标准库</h3><p>Python标准库是一组模块，在安装Python时已经包含在内了。我们可以使用标准可中的任何函数和类。查看Python标准库，可以在命令行输入  <strong>help(“modules”)</strong> 命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 随机数模组，返回两个数之间的随机一个数。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-meta">&gt;&gt;&gt; </span>randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">4</span>   <br><span class="hljs-comment"># 返回一个列表里随机一个元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice <br><span class="hljs-meta">&gt;&gt;&gt; </span>players = [<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-string">&#x27;ddd&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>choice(players)<br><span class="hljs-string">&#x27;ccc&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="类的编程风格">类的编程风格</h3><p>编写复杂程序时采用以下几项：</p><ul><li>类名：驼峰命名法。例：MyNewCar 。类名不使用下划线。</li><li>模块名和实例名都采用全小写格式，并在单词之间采用下划线。</li><li>每个类都要在定义后面和函数一样需要描述类功能的文档字符串。</li><li>当需要导入标准库中的模块和自己编写的模块时，优先导入标准库中的模块，在导入自己编写的模块。</li></ul><h3 id="小结-v7">小结</h3><p>本章我们学习了如何编写类，如何使用属性在类中存储的信息，以及如何编写方法让类具备所需的行为。然后学习了 init 初始化方法。了解了如何修改实例的属性，包括直接修改以及通过方法修改。还了解到使用继承可简化相关类的创建工作，将一个类的实例用作另一个类的属性能让类更简洁。<br>明白了，通过将类存储在模块（文件）中，并在需要使用这些类的文件中导入它们，可让项目变的更简洁。开始了解python标准库，还看了一个random模块，最后学习了编写类时应遵循的Python约定。</p><h2 id="第九章-文件和异常">第九章 文件和异常</h2><p>处理文件，让程序能够快速地分析大量数据；错误处理，避免程序在面对意外情况时崩溃；异常是Python创建特殊对象，用于管理程序运行时出现的错误；还将学习使用 json 模块保存用户数据，以免这些数据在程序结束运行后丢失。</p><h3 id="读取文件">读取文件</h3><p>读取文件对数据分析应用程序很有用。要使用文本文件中的信息，首先需要将信息读取到内存中。既可以一次性读取文件的全部内容，也可以逐行读取。</p><p><strong>读取文件的全部内容</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-params">#</span> 这是一个txt文件<br>3.1415926535<br>  8979323846<br>  2643383279<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取文件</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-comment"># 这里值得注意的是VScode里面用的斜杠是反的</span><br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br>contents = path.read_text()<br><span class="hljs-comment"># 删除文档中的空格</span><br><span class="hljs-comment"># contents = contents.strip()</span><br><span class="hljs-built_in">print</span>(contents)<br><br><span class="hljs-number">3.1415926535</span><br>  <span class="hljs-number">8979323846</span><br>  <span class="hljs-number">2643383279</span><br></code></pre></td></tr></table></figure><p><strong>相对文件路径和绝对文件路径</strong></p><p><strong>相对文件路径</strong>让 Python 到相对于当前运行的程序所在目录的指定位置去查找。比如上面的文件可以这样读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&quot;text_files/pi_digits.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>绝对文件路径</strong>可以读取系统中任何地方的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在最简单的做法是，要么将数据文件存储在程序文件所在的目录中，要么将其存储在存续文件所在目录下的一个文件夹中。</p><p><strong>注意</strong>：在显示文件路径时，windows 系统使用反斜杠（ \ ）而不是斜杠（ / ）但是你在代码中应该始终使用斜杠（ / ），即便在windows系统中也是如此。在与你或其他用户的系统交互时，pathlib 库会自动使用正确的路径表示方法。</p><p><strong>访问文件中的各行</strong></p><p>使用 <strong>splitlines()</strong> 方法可以将字符串转换为一系列行，在使用 for 循环遍历文件中的每一行，splitlines() 方法返回一个列表，其中包含文件中所有的行。可以把这个列表赋值给变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br>contents = path.read_text()<br>lines = contents.splitlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(line)<br><br><span class="hljs-number">3.1415926535</span><br>  <span class="hljs-number">8979323846</span><br>  <span class="hljs-number">2643383279</span><br></code></pre></td></tr></table></figure><p><strong>使用文件的内容</strong></p><p>读取文件后才能使用这些数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;E:/text_files/pi_digits.txt&quot;</span>)<br>contents = path.read_text()<br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br>lines = contents.splitlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line<br><br><span class="hljs-built_in">print</span>(pi_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><span class="hljs-number">3.1415926535</span>  <span class="hljs-number">8979323846</span>  <span class="hljs-number">2643383279</span><br><span class="hljs-number">36</span><br><br><span class="hljs-comment"># 删除左边空格</span><br>--snip--<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.lstrip()<br><br><span class="hljs-built_in">print</span>(pi_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><span class="hljs-number">3.141592653589793238462643383279</span><br><span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：读取文本文件时，python 将其中的所有文本都解释为字符串。如果读取的是数，并且要将其作为数字使用，就必须使用 int() 函数将其转换为整数，或者使用 float() 函数将其转为浮点数。</p><p><strong>大型文件</strong>可以做切片等列表的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">--snip--<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.lstrip()<br><br><span class="hljs-built_in">print</span>(pi_string[:<span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><span class="hljs-number">3.14159265</span><br><span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p><strong>趣味小练习</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 圆周率中包含你的生日吗</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;pi_million_digits.txt&quot;</span>)<br>contents = path.read_text()<br><br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br>lines = contents.splitlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.strip()<br><br>birthday = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你的生日如(20200506):&quot;</span>)<br><span class="hljs-keyword">if</span> birthday <span class="hljs-keyword">in</span> pi_string:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率包含了你的生日&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率没有你的生日哦...&quot;</span>)<br>    <br>你的生日如(<span class="hljs-number">20200506</span>):<span class="hljs-number">20200506</span><br>圆周率没有你的生日哦...<br></code></pre></td></tr></table></figure><h3 id="写入文件">写入文件</h3><p>保存数据的最简单的方式之一是将其写入文件。</p><p><strong>写入一行</strong></p><p><strong>注意</strong>：在python调用 <strong>write_text()</strong> 方法时，如果指定文件已存在，这个方法会将其内容<strong>替换</strong>为你要写入的内容。**replace()**方法可以将字符串中的特定单词替换为另一个单词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 写入一行文字</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&#x27;programming.txt&#x27;</span>)<br>path.write_text(<span class="hljs-string">&quot;hello world&quot;</span>)<br><br>programming.txt<br>hello world<br><span class="hljs-comment"># 替换字符串 replace()</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">&#x27;How are you?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.replace(<span class="hljs-string">&#x27;you&#x27;</span>,<span class="hljs-string">&#x27;me&#x27;</span>)<br><span class="hljs-string">&#x27;How are me?&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：Python 只能将字符串写入文本，如果要将数值数据存储到文本文件中，须使用 str() 函数将其转换为字符串格式。</p><p><strong>写入多行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&#x27;programming.txt&#x27;</span>)<br>contents = <span class="hljs-string">&quot;nihao&quot;</span><br>contents += <span class="hljs-string">&quot;\nwohao&quot;</span><br>contents += <span class="hljs-string">&quot;\ndajiahao&quot;</span><br>path.write_text(contents)<br><br>programming.txt<br>nihao<br>wohao<br>dajiahao<br></code></pre></td></tr></table></figure><p><strong>趣味小练习</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复写入多个词语</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>path = Path(<span class="hljs-string">&quot;guest.txt&quot;</span>)<br>n = <span class="hljs-number">0</span><br>c = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> n != <span class="hljs-number">5</span>:<br>    b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入内容：&quot;</span>)<br>    c += <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;b&#125;</span>\n&quot;</span><br>    n += <span class="hljs-number">1</span><br>    path.write_text(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c&#125;</span>&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="异常">异常</h3><p>异常是使用 try-except 代码块处理的。也就是说你运行一段代码，如过出错了会根据你编写的代码执行，如果没有对异常进行处理，程序出错了就会停止。<strong>如果你运行一段代码出错，编辑器会提示你是什么错误，你可以针对这个错误给出处理方法，就像下面的 0 不能作为除数的错误是：ZeroDivisionError</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span>/<span class="hljs-number">0</span>)<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p><strong>使用 try-except 代码块</strong></p><p>当你认为可能会发生错误的时候，可以使用这个代码块来处理可能引发的错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">5</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0不能作为除数。&quot;</span>)<br>    <br><span class="hljs-number">0</span>不能作为除数。<br></code></pre></td></tr></table></figure><p><strong>处理 FileNotFoundError 异常</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;alice.txt&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有找到这个文件。&quot;</span>)<br><br>没有找到这个文件。<br></code></pre></td></tr></table></figure><p><strong>分析文本</strong></p><p>split() 方法是把一个很长的字符串转换成很多单词的列表的一个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;alice.txt&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有找到这个文件。&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 计算文件大概包含多少个单词</span><br>    words = contents.split()<br>    num_words = <span class="hljs-built_in">len</span>(words)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The file <span class="hljs-subst">&#123;path&#125;</span> has about <span class="hljs-subst">&#123;num_words&#125;</span> words&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>读取多个文件</strong></p><p>利用函数我们可以读取多个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_words</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;没有找到<span class="hljs-subst">&#123;path&#125;</span>这个文件。&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 计算文件大概包含多少个单词</span><br>        words = contents.split()<br>        num_words = <span class="hljs-built_in">len</span>(words)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The file <span class="hljs-subst">&#123;path&#125;</span> has about <span class="hljs-subst">&#123;num_words&#125;</span> words&quot;</span>)<br><br><br>filenames = [<span class="hljs-string">&#x27;alice.txt&#x27;</span>, <span class="hljs-string">&#x27;little_women.txt&#x27;</span>, <span class="hljs-string">&#x27;moby_dick.txt&#x27;</span>, <span class="hljs-string">&#x27;kkk.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>    path = Path(filename)<br>    count_words(path)<br>   <br>The file alice.txt has about <span class="hljs-number">29594</span> words<br>The file little_women.txt has about <span class="hljs-number">189142</span> words<br>The file moby_dick.txt has about <span class="hljs-number">215864</span> words<br>没有找到kkk.txt这个文件。<br></code></pre></td></tr></table></figure><p><strong>静默失败</strong></p><p>并非每次错误都需要告诉用户，有时候有错误什么也不做，但是就是让程序继续运行可以使用 pass 语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_words</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        contents = path.read_text(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 计算文件大概包含多少个单词</span><br>        words = contents.split()<br>        num_words = <span class="hljs-built_in">len</span>(words)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The file <span class="hljs-subst">&#123;path&#125;</span> has about <span class="hljs-subst">&#123;num_words&#125;</span> words&quot;</span>)<br><br>filenames = [<span class="hljs-string">&#x27;alice.txt&#x27;</span>, <span class="hljs-string">&#x27;little_women.txt&#x27;</span>, <span class="hljs-string">&#x27;moby_dick.txt&#x27;</span>, <span class="hljs-string">&#x27;kkk.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>    path = Path(filename)<br>    count_words(path)<br><br>The file alice.txt has about <span class="hljs-number">29594</span> words<br>The file little_women.txt has about <span class="hljs-number">189142</span> words<br>The file moby_dick.txt has about <span class="hljs-number">215864</span> words<br></code></pre></td></tr></table></figure><h3 id="存储数据">存储数据</h3><p>json 模块能够将简单的Python数据结构转换为JSON格式的字符串，并在程序再次运行时从文件中加载数据。</p><p>**注意：**JSON格式最初是为 JavaScript 开发的，但后来成为了一种通用格式，被众多语言采用。</p><p><strong>json.dumps() 和 json.loads()</strong></p><p>json.dumps() 接受一个参数，即要转换为JSON格式的数据。这个函数返回一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 存储数据 json.dumps()</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>number = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br>path = Path(<span class="hljs-string">&#x27;number.json&#x27;</span>) <span class="hljs-comment"># 文件路径，如果没有就会自动创建这个文件</span><br>contents = json.dumps(number) <span class="hljs-comment"># 数据通过json.dumps()转化文JSON格式，存储在变量contents中</span><br>path.write_text(contents) <span class="hljs-comment"># 把contents中的数据写入number.json这个文件中</span><br><span class="hljs-comment"># number.json文件内容</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-comment"># 读取数据 json.loads()</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>path = Path(<span class="hljs-string">&#x27;number.json&#x27;</span>) <span class="hljs-comment"># 文件路径，如果没有就会自动创建这个文件</span><br>contents = path.read_text() <span class="hljs-comment"># 把读取的数据存储在变量contents中</span><br>number = json.loads(contents)<span class="hljs-comment"># contents中的数据通过json.loads()转化文JSON格式，并存储在变量number中</span><br><span class="hljs-built_in">print</span>(number)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p><strong>保存和读取用户生成的数据</strong></p><p>保存数据很有必要，因为如果不以某种方式进行存储，用户的信息就会在程序停止运行时丢失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存用户数据</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>)<br>path = Path(<span class="hljs-string">&#x27;username.json&#x27;</span>)<br>contents = json.dumps(username)<br>path.write_text(contents, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我们将储存你的名字。&quot;</span>)<br>请输入你的名字：zqten<br>我们将储存你的名字。<br><span class="hljs-comment"># username.json文件</span><br><span class="hljs-string">&quot;zqten&quot;</span><br><br><span class="hljs-comment"># 读取用户生成的数据</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br>path = Path(<span class="hljs-string">&quot;username.json&quot;</span>)<br>contents = path.read_text()<br>username = json.loads(contents)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome back <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>Welcome back zqten<br></code></pre></td></tr></table></figure><p>Path 类提供了很多有用的方法。如果指定的文件或文件夹存在，<strong>exists()</strong> 方法返回 True ，否则返回 False 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br>path = Path(<span class="hljs-string">&#x27;username.json&#x27;</span>)<br><span class="hljs-keyword">if</span> path.exists():<br>    contents = path.read_text()<br>    username = json.loads(contents)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome back <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>)<br>    contents = json.dumps(username)<br>    path.write_text(contents, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我们将储存你的名字。<span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>Welcome back zqten<br></code></pre></td></tr></table></figure><p><strong>重构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存用户数据</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_stored_username</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;如果用户存储了用户名，我们就获取他&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> path.exists():<br>        contents = path.read_text()<br>        username = json.loads(contents)<br>        <span class="hljs-keyword">return</span> username<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_username</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;提示用户输入用户名&#x27;&#x27;&#x27;</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>)<br>    contents = json.dumps(username)<br>    path.write_text(contents, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> username<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;问候用户，并指出其名字&#x27;&#x27;&#x27;</span><br>    path = Path(<span class="hljs-string">&#x27;username.json&#x27;</span>)<br>    username = get_stored_username(path)<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome back <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        username = get_new_username(path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我们将储存你的名字，<span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br><br>greet_user()<br>请输入你的名字：zqten<br>我们将储存你的名字，zqten<br><span class="hljs-comment"># 在运行一次</span><br>greet_user()<br>Welcome back zqten<br></code></pre></td></tr></table></figure><h3 id="小结-v8">小结</h3><p>本章学习了如何使用文件，包括如何读取整个文件，如何读取文件中的各行，以及如何根据需要将任意数量的文本写入文件。然后学习了异常，以及如何处理程序可能引发的异常。最后学习了如何存储Python数据结构，以保存用户提供的信息，避免让用户在每次运行程序时都重新提供。</p><h2 id="第十章-测试代码">第十章 测试代码</h2><p>本章使用的是pip安装的pytest库来进行测试代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台安装</span><br>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pytest<br></code></pre></td></tr></table></figure><h3 id="测试函数">测试函数</h3><p>测试基本分为下面几种：</p><ul><li>单元测试，用于核实函数的某个方面没有问题。</li><li>测试用例，是一组单元测试，核实函数在各种情况下的行为都符合要求。</li><li>全覆盖，测试一整套单元测试，涵盖了各种可能的函数使用方式。</li></ul><p>测试函数，需要新建一个文件，导入需要测试的函数，然后定义一个测试函数（这个函数的命名规范是：必须以 test 加下划线打头）。在测试过程中，<strong>pytest</strong>会找出并运行所有以 test 加下划线打头的函数。运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># name_function.py 文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">frist, last, middle=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> middle:<br>        full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;frist&#125;</span> <span class="hljs-subst">&#123;middle&#125;</span> <span class="hljs-subst">&#123;last&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        full_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;frist&#125;</span> <span class="hljs-subst">&#123;last&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> full_name.title()<br><br><span class="hljs-comment"># test_name_function.py 测试文件</span><br><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_frist_last_name</span>():<br>    formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> formatted_name == <span class="hljs-string">&#x27;Janis Joplin&#x27;</span><br>    <br><span class="hljs-comment"># 运行测试，需要在终端进入到要测试的程序的文件夹，输入pytest就会出现下面的测试内容。</span><br>======================== test session starts ========================<br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">1</span> item<br><br>test_name_function.py .                                     [<span class="hljs-number">100</span>%]<br><br>======================== <span class="hljs-number">1</span> passed <span class="hljs-keyword">in</span> <span class="hljs-number">0.01</span>s ==========================<br><br><br><span class="hljs-comment"># 未通过测试示例</span><br>===================== test session starts ============================<br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">1</span> item<br><br>test_name_function.py F                                         [<span class="hljs-number">100</span>%]<br><br>====================== FAILURES ====================================== <br>__________________ test_frist_last_name_______________________________ <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_frist_last_name</span>():<br>        formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>)<br>&gt;       <span class="hljs-keyword">assert</span> formatted_name == <span class="hljs-string">&#x27;Janis Joplil&#x27;</span><br>E       AssertionError: <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;Janis Joplin&#x27;</span> == <span class="hljs-string">&#x27;Janis Joplil&#x27;</span><br>E         - Janis Joplil<br>E         ?            ^<br>E         + Janis Joplin<br>E         ?            ^<br><br>test_name_function.py:<span class="hljs-number">6</span>: AssertionError<br>============= short test summary info =========================================== <br>FAILED test_name_function.py:<br>:test_frist_last_name - AssertionError: <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;Janis Joplin&#x27;</span> == <span class="hljs-string">&#x27;Janis Joplil&#x27;</span><br>============= <span class="hljs-number">1</span> failed <span class="hljs-keyword">in</span> <span class="hljs-number">0.05</span>s ================================================= <br></code></pre></td></tr></table></figure><h3 id="测试类">测试类</h3><p>上面是测试了函数，现在我们针对类进行测试。</p><p><strong>各种断言：</strong></p><ul><li>assert a == b断言两个值相等</li><li>assert a != b             断言两个值不等</li></ul><p>这里只列出了两个，测试能包含任意可用条件语句表示的断言，比如 not 、in等等。</p><p><strong>要测试的类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试类 survey.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousSurvey</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;收集匿名调查问卷&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, question</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;存储一个问题，并为存储答案做准备&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.question = question<br>        <span class="hljs-variable language_">self</span>.responses = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_question</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;显示调查问卷&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.question)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">store_response</span>(<span class="hljs-params">self, new_response</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;存储单个调查答卷&#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.responses.append(new_response)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_results</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;显示收集到的所有答案&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;所有问卷结果:&quot;</span>)<br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.responses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;- <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 实例化 language_survey.py</span><br><span class="hljs-comment"># survey类的实例</span><br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><span class="hljs-comment"># 定义个问题，并创建一个表示调查的 AnonymousSurvey 对象</span><br>question = <span class="hljs-string">&quot;你学习了几种语言？&quot;</span><br>language_survey = AnonymousSurvey(question)<br><br><span class="hljs-comment"># 显示问题并存储答案</span><br>language_survey.show_question()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按&#x27;q&#x27;退出。\n&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你学习的语言: &quot;</span>)<br>    <span class="hljs-keyword">if</span> response == <span class="hljs-string">&quot;q&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    language_survey.store_response(response)<br><br><span class="hljs-comment"># 显示答案</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n你学习的语言有&quot;</span>)<br>language_survey.show_results()<br><br>你学习了几种语言？<br>按<span class="hljs-string">&#x27;q&#x27;</span>退出。       <br><br>输入你学习的语言: 汉语<br>输入你学习的语言: 英语<br>输入你学习的语言: 日语<br>输入你学习的语言: 德语<br>输入你学习的语言: q<br><br>你学习的语言有<br>所有问卷结果: <br>- 汉语        <br>- 英语        <br>- 日语        <br>- 德语  <br></code></pre></td></tr></table></figure><p><strong>测试AnonymousSurvey类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试AnonymousSurvey类 test_survey.py</span><br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_single_response</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>    language_survey = AnonymousSurvey(question)<br>    language_survey.store_response(<span class="hljs-string">&#x27;English&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;English&#x27;</span> <span class="hljs-keyword">in</span> language_survey.responses<br>    <br>==================== test session starts ============================== <br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">1</span> items                                                                                                                       <br><br>test_survey.py .                               [<span class="hljs-number">100</span>%] <br><br>===================== <span class="hljs-number">1</span> passed <span class="hljs-keyword">in</span> <span class="hljs-number">0.02</span>s ===============================     <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_three_response</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>    language_survey = AnonymousSurvey(question)<br>    responses = [<span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-string">&#x27;Spanish&#x27;</span>, <span class="hljs-string">&#x27;Chinese&#x27;</span>]<br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        language_survey.store_response(response)<br><br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        <span class="hljs-keyword">assert</span> response <span class="hljs-keyword">in</span> language_survey.responses<br><br>========================= test session starts ===============================<br>platform win32 -- Python <span class="hljs-number">3.11</span><span class="hljs-number">.3</span>, pytest-<span class="hljs-number">7.4</span><span class="hljs-number">.0</span>, pluggy-<span class="hljs-number">1.3</span><span class="hljs-number">.0</span><br>rootdir: E:Python\第十章测试代码<br>collected <span class="hljs-number">2</span> items                                                                                                                       <br><br>test_survey.py ..                   [<span class="hljs-number">100</span>%] <br><br>========================= <span class="hljs-number">2</span> passed <span class="hljs-keyword">in</span> <span class="hljs-number">0.02</span>s =================================<br></code></pre></td></tr></table></figure><p><strong>使用夹具</strong></p><p>夹具（@pytest.fixture）可帮助我们搭建测试环境，用于测试多个项目。这个需要导入（import pytest）。夹具使用方法是放在函数定义前面的指令。要使用夹具时，可编写一个函数来生成供多个测试函数使用的资源再对这个函数应用装饰器@pytest.fixture，并让使用该资源的每个测试函数都接受一个与该函数同名的形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><span class="hljs-comment"># 测试AnonymousSurvey类</span><br><br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">language_survey</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;一个可供所有测试函数使用的AnonymousSurvey实例&#x27;&#x27;&#x27;</span><br>    question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>    language_survey = AnonymousSurvey(question)<br>    <span class="hljs-keyword">return</span> language_survey<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_single_response</span>(<span class="hljs-params">language_survey</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试单个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    language_survey.store_response(<span class="hljs-string">&#x27;English&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;English&#x27;</span> <span class="hljs-keyword">in</span> language_survey.responses<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_store_three_response</span>(<span class="hljs-params">language_survey</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;测试多个答案会被妥善地存储&#x27;&#x27;&#x27;</span><br>    responses = [<span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-string">&#x27;Spanish&#x27;</span>, <span class="hljs-string">&#x27;Chinese&#x27;</span>]<br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        language_survey.store_response(response)<br><br>    <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>        <span class="hljs-keyword">assert</span> response <span class="hljs-keyword">in</span> language_survey.responses<br></code></pre></td></tr></table></figure><h3 id="小结-v9">小结</h3><p>本章学习了如何使用 pytest 模块中的工具来为函数和类编写测试。不仅学习了如何编写测试函数，以核实函数和类的行为符合预期，而且学习了如何使用夹具来高效地创建可在测试文件中的多个测试函数中使用的资源。</p><h1>第二部分 项目</h1><h2 id="第十二章-武装飞船">第十二章 武装飞船</h2><h3 id="外星人入侵项目规划">外星人入侵项目规划</h3><ul><li>玩家控制着一艘武装飞船出现在屏幕底部中央，玩家可以使用方向键左右移动飞船，使用空格键进行射击。</li><li>当游戏开始时，一个外形舰队出现在天空中，并向屏幕下方移动。</li><li>玩家的任务是消灭这些外星人。</li><li>玩家将万星人消灭干净后，将出现一个新的外形舰队，其移动速度更快。</li><li>只要有万星人撞到玩家的飞船或到达屏幕下边缘，玩家就损失一艘飞船。玩家损失三艘飞船游戏结束。</li></ul><p><strong>安装Pygame</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pygame<br></code></pre></td></tr></table></figure><h3 id="开始游戏项目">开始游戏项目</h3><p><strong>创建 Pygame 窗口及响应用户输入</strong></p><p>这里有及个新方法：</p><ul><li>pygame.display.set_mode((1200,800)) 设置显示画面的大小</li><li>pygame.display.set_caption(“Alien Invasion”) 设置标题和logo</li><li>pygame.display.flip() 让渲染的可见</li><li>pygame.time.Clock() 设置游戏帧率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        pygame.init()<br><br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-number">1200</span>,<span class="hljs-number">800</span>))<br>        pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>            <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>                <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                    sys.exit()<br>            <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>            pygame.display.flip()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建游戏实例并运行游戏</span><br>    ai = AlienInvasion()<br>    ai.run_game()<br></code></pre></td></tr></table></figure><p><strong>控制帧率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        pygame.init()<br>        <span class="hljs-comment"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span><br>        <span class="hljs-variable language_">self</span>.clock = pygame.time.Clock()<br>        --snip--<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            --snip--<br>            <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>            pygame.display.flip()    <br>            <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><p><strong>设置背景颜色</strong></p><p>fill() 方法是填充背景颜色，该方法只接受一个表示颜色的实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>   --snip--<br>       pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br>       <span class="hljs-comment"># 设置背景颜色</span><br>       <span class="hljs-variable language_">self</span>.bg_color = (<span class="hljs-number">230</span>,<span class="hljs-number">230</span>,<span class="hljs-number">230</span>)<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>       --snip--<br>       <span class="hljs-comment"># 每次循环时都重绘制屏幕</span><br>           <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.bg_color)<br>       <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>           pygame.display.flip()<br></code></pre></td></tr></table></figure><p><strong>创建 Settings 类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 屏幕设置</span><br>        <span class="hljs-variable language_">self</span>.screen_width = <span class="hljs-number">1200</span><br>        <span class="hljs-variable language_">self</span>.screen_height = <span class="hljs-number">800</span><br>        <span class="hljs-variable language_">self</span>.screen_color = (<span class="hljs-number">230</span>, <span class="hljs-number">230</span>, <span class="hljs-number">230</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span>        <br>        --snip--<br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-variable language_">self</span>.settings.screen_width, <span class="hljs-variable language_">self</span>.settings.screen_height))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        --snip--<br>            <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br></code></pre></td></tr></table></figure><h3 id="添加飞船图像">添加飞船图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen = ai_game.screen<br>        <span class="hljs-variable language_">self</span>.screen_rect = ai_game.screen.get_rect()<br><br>        <span class="hljs-comment"># 加载飞船图像并获取其外接矩形</span><br>        <span class="hljs-variable language_">self</span>.image = pygame.image.load(<span class="hljs-string">&#x27;images/ship.bmp&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.rect = <span class="hljs-variable language_">self</span>.image.get_rect()<br><br>        <span class="hljs-comment"># 每艘新飞船都放在屏幕底部的中央</span><br>        <span class="hljs-variable language_">self</span>.rect.midbottom = <span class="hljs-variable language_">self</span>.screen_rect.midbottom<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">blitme</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen.blit(<span class="hljs-variable language_">self</span>.image, <span class="hljs-variable language_">self</span>.rect)<br></code></pre></td></tr></table></figure><p>**注意：**在 pygame 中，原点（0,0）位于屏幕左上角，当一个点向右下方移动时，它的坐标值将增大，在1200X800的屏幕上，原点位于左上角，右下角的坐标为（1200,800）。这些坐标对应的是游戏窗口，而不是物理屏幕。</p><p><strong>在屏幕上绘制飞船</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ship <span class="hljs-keyword">import</span> Ship<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>    --snip--<br>    pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br>    <span class="hljs-variable language_">self</span>.ship = Ship(<span class="hljs-variable language_">self</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>    --snip--<br>            <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br>            <span class="hljs-variable language_">self</span>.ship.blitme()<br></code></pre></td></tr></table></figure><h3 id="重构：-check-events-方法和-update-screen-方法">重构：_check_events() 方法和 _update_screen() 方法</h3><p>在Python中辅助方法的名称以单下划线打头</p><p>_ <em>check_events() 方法和</em> _update_screen()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-variable language_">self</span>._check_events()<br>        <span class="hljs-variable language_">self</span>._update_screen()<br>        <span class="hljs-comment"># 每秒60帧</span><br>        <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            sys.exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_screen</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 每次循环时都重绘制屏幕</span><br>    <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br>    <span class="hljs-variable language_">self</span>.ship.blitme()<br>    <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>    pygame.display.flip()<br></code></pre></td></tr></table></figure><h3 id="驾驶飞船">驾驶飞船</h3><p><strong>响应按键</strong></p><p>pygame中，事件都是通过 pygame.event.get() 方法获取的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">--snip--<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>            <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>                <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                    sys.exit()<br>                <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                        <span class="hljs-comment"># 飞船向右移动</span><br>                        <span class="hljs-variable language_">self</span>.ship.rect.x += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>持续移动</strong></p><p>pygame.KEYDOWN 和 pygame.KEYUP 两个事件是，按下键盘，和释放键盘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>                <span class="hljs-variable language_">self</span>._check_events()<br>                <span class="hljs-comment"># 调用飞船位置更新函数</span><br>                <span class="hljs-variable language_">self</span>.ship.update()<br>                <span class="hljs-comment"># 更新画面</span><br>                <span class="hljs-variable language_">self</span>._update_screen()<br>                <span class="hljs-comment"># 每秒60帧</span><br>                <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-comment"># 飞船向右移动</span><br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>                    <br><span class="hljs-comment"># ship.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        --snip--<br>        <span class="hljs-comment"># 移动标志（飞船一开始不移动）</span><br>        <span class="hljs-variable language_">self</span>.moving_right = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right:<br>            <span class="hljs-variable language_">self</span>.rect.x += <span class="hljs-number">1</span><br>        --snip--<br></code></pre></td></tr></table></figure><p><strong>左右移动</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br>--snip--<br>        <span class="hljs-comment"># 移动标志（飞船一开始不移动）</span><br>        <span class="hljs-variable language_">self</span>.moving_right = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.moving_left = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right:<br>            <span class="hljs-variable language_">self</span>.rect.x += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left:<br>            <span class="hljs-variable language_">self</span>.rect.x -= <span class="hljs-number">1</span><br>        --snip--<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br>                <span class="hljs-comment"># 飞船移动</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>                <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>                    <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">False</span>    <br></code></pre></td></tr></table></figure><p><strong>调整飞船的速度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        --snip--<br>        <span class="hljs-comment"># 飞船的设置</span><br>        <span class="hljs-variable language_">self</span>.ship_speed = <span class="hljs-number">1.5</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span>    <br>        --snip--<br>        <span class="hljs-comment"># 在飞创的属性X中存储一个浮点数</span><br>        <span class="hljs-variable language_">self</span>.x = <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>.rect.x)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right:<br>            <span class="hljs-variable language_">self</span>.x += <span class="hljs-variable language_">self</span>.settings.ship_speed<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left:<br>            <span class="hljs-variable language_">self</span>.x -= <span class="hljs-variable language_">self</span>.settings.ship_speed<br><br>        <span class="hljs-comment"># 根据self.x更新self.rect.x</span><br>        <span class="hljs-variable language_">self</span>.rect.x = <span class="hljs-variable language_">self</span>.x        <br></code></pre></td></tr></table></figure><p><strong>限制飞船的活动范围</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span> <br>        --snip--    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.right &lt; <span class="hljs-variable language_">self</span>.screen_rect.right:<br>            <span class="hljs-variable language_">self</span>.x += <span class="hljs-variable language_">self</span>.settings.ship_speed<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.left &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.x -= <span class="hljs-variable language_">self</span>.settings.ship_speed        <br></code></pre></td></tr></table></figure><p><strong>重构：_check_events() 方法</strong></p><p>检查事件方法越来越长，我们将其部分代码放在两个方法中，一个处理键盘按下(KEYDOWN)，一个处理键盘释放(KEYUP)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            sys.exit()<br>            <span class="hljs-comment"># 飞船移动</span><br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>            <span class="hljs-variable language_">self</span>._check_keydown_events(event)<br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>            <span class="hljs-variable language_">self</span>._check_keyup_events(event)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keydown_events</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keyup_events</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><strong>按 Q 退出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keydown_events</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:<br>        <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> event.key == pygame.K_q:<br>        sys.exit()<br></code></pre></td></tr></table></figure><p><strong>在全屏模式下运行游戏</strong></p><p>在创建屏幕时，传入(0, 0), pygame.FULLSCREEN ，这让pygame生成一个覆盖整个显示器的屏幕。由于无法知道屏幕的宽度和高度，所有后面接着要更新屏幕的 rect 的属性宽和高来更新对象 settings 。pygame不提供全屏模式下退出游戏的默认方式，所以运行前，确保可以使用 ‘q’ 退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        --snip--<br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), pygame.FULLSCREEN)<br>        <span class="hljs-variable language_">self</span>.settings.screen_width = <span class="hljs-variable language_">self</span>.screen.get_rect().width<br>        <span class="hljs-variable language_">self</span>.settings.screen_height = <span class="hljs-variable language_">self</span>.screen.get_rect().height        <br></code></pre></td></tr></table></figure><h3 id="简单回顾">简单回顾</h3><p>下面将添加射击功能，所以需要新增一个名为 <a href="http://bullet.py">bullet.py</a> 的文件，并修改一些原有的文件，在添加其他功能前，先回顾一下这些文件，以便对这个项目的组织结构有清楚的认识。</p><ul><li><p>alien_invasion.py<br>这个文件包含 AlienInvasion 类，这个类创建在游戏的很多地方会用到的一系列属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">from</span> settings <span class="hljs-keyword">import</span> Settings<br><span class="hljs-keyword">from</span> ship <span class="hljs-keyword">import</span> Ship<br><span class="hljs-keyword">from</span> bullet <span class="hljs-keyword">import</span> Bullet<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlienInvasion</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理游戏资源和行为的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏并创建游戏资源&quot;&quot;&quot;</span><br>        pygame.init()<br>        <span class="hljs-comment"># 创建游戏时钟，保证在其他系统都是相同的速度（帧率）运行</span><br>        <span class="hljs-variable language_">self</span>.clock = pygame.time.Clock()<br>        <span class="hljs-comment"># 设置背景颜色和窗口大小</span><br>        <span class="hljs-variable language_">self</span>.settings = Settings()<br>        <span class="hljs-comment"># 独立窗口运行程序</span><br>        <span class="hljs-variable language_">self</span>.screen = pygame.display.set_mode((<span class="hljs-variable language_">self</span>.settings.screen_width, <span class="hljs-variable language_">self</span>.settings.screen_height))<br>        <span class="hljs-comment"># 全屏模式游戏 &#x27;q&#x27; 退出</span><br>        <span class="hljs-comment"># self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)</span><br>        <span class="hljs-comment"># self.settings.screen_width = self.screen.get_rect().width</span><br>        <span class="hljs-comment"># self.settings.screen_height = self.screen.get_rect().height</span><br>        pygame.display.set_caption(<span class="hljs-string">&quot;Alien Invasion&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.ship = Ship(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.bullets = pygame.sprite.Group()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;开始游戏主循环&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>            <span class="hljs-variable language_">self</span>._check_events()<br>            <span class="hljs-comment"># 调用飞船位置更新函数</span><br>            <span class="hljs-variable language_">self</span>.ship.update()<br>            <span class="hljs-comment"># 更新子弹的位置并删除已消失的子弹</span><br>            <span class="hljs-variable language_">self</span>._update_bullets()<br>            <span class="hljs-comment"># 更新画面</span><br>            <span class="hljs-variable language_">self</span>._update_screen()<br>            <span class="hljs-comment"># 每秒60帧</span><br>            <span class="hljs-variable language_">self</span>.clock.tick(<span class="hljs-number">60</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_events</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 监听键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br>                <span class="hljs-comment"># 飞船移动</span><br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>                <span class="hljs-variable language_">self</span>._check_keydown_events(event)<br>            <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>                <span class="hljs-variable language_">self</span>._check_keyup_events(event)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keydown_events</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;响应按下键盘&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> event.key == pygame.K_q:<br>            sys.exit()<br>        <span class="hljs-keyword">elif</span> event.key == pygame.K_SPACE:<br>            <span class="hljs-variable language_">self</span>._fire_bullet()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_keyup_events</span>(<span class="hljs-params">self, event</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;响应释放键盘&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_right = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>            <span class="hljs-variable language_">self</span>.ship.moving_left = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fire_bullet</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;创建一颗子弹，并将其加入编著bullets &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.bullets) &lt; <span class="hljs-variable language_">self</span>.settings.bullet_allowed:<br>            new_bullet = Bullet(<span class="hljs-variable language_">self</span>)<br>            <span class="hljs-variable language_">self</span>.bullets.add(new_bullet)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_bullets</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;更新子弹的位置并删除已消失的子弹&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新子弹位置</span><br>        <span class="hljs-variable language_">self</span>.bullets.update()<br>        <span class="hljs-comment"># 删除已消失的子弹</span><br>        <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.bullets.copy():<br>            <span class="hljs-keyword">if</span> bullet.rect.bottom &lt;= <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.bullets.remove(bullet)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_screen</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 每次循环时都重绘制屏幕</span><br>        <span class="hljs-variable language_">self</span>.screen.fill(<span class="hljs-variable language_">self</span>.settings.screen_color)<br>        <span class="hljs-comment"># 子弹绘制        </span><br>        <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.bullets.sprites():<br>            bullet.draw_bullet()<br>        <span class="hljs-variable language_">self</span>.ship.blitme()<br>        <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br>        pygame.display.flip()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建游戏实例并运行游戏</span><br>    ai = AlienInvasion()<br>    ai.run_game()<br></code></pre></td></tr></table></figure></li><li><p><a href="http://settings.py">settings.py</a><br>这个文件包含 Settings 类，这个类只有一个方法，这个文件主要用于初始化控制游戏外观和飞船速度的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储游戏《外星人入侵》中所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 屏幕设置</span><br>        <span class="hljs-variable language_">self</span>.screen_width = <span class="hljs-number">1200</span><br>        <span class="hljs-variable language_">self</span>.screen_height = <span class="hljs-number">800</span><br>        <span class="hljs-variable language_">self</span>.screen_color = (<span class="hljs-number">230</span>, <span class="hljs-number">230</span>, <span class="hljs-number">230</span>)<br><br>        <span class="hljs-comment"># 飞船的设置</span><br>        <span class="hljs-variable language_">self</span>.ship_speed = <span class="hljs-number">1.5</span><br><br>        <span class="hljs-comment"># 子弹设置</span><br>        <span class="hljs-variable language_">self</span>.bullet_speed = <span class="hljs-number">2.0</span><br>        <span class="hljs-variable language_">self</span>.bullet_width = <span class="hljs-number">3</span><br>        <span class="hljs-variable language_">self</span>.bullet_height = <span class="hljs-number">15</span><br>        <span class="hljs-variable language_">self</span>.bullet_color = (<span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>)<br>        <span class="hljs-comment"># 屏幕上最多出现的子弹数量</span><br>        <span class="hljs-variable language_">self</span>.bullet_allowed = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p><a href="http://ship.py">ship.py</a><br>这个文件包含 Ship 类，这个类主要用于在屏幕上绘制飞船</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen = ai_game.screen<br>        <span class="hljs-variable language_">self</span>.settings = ai_game.settings<br>        <span class="hljs-variable language_">self</span>.screen_rect = ai_game.screen.get_rect()<br><br>        <span class="hljs-comment"># 加载飞船图像并获取其外接矩形</span><br>        <span class="hljs-variable language_">self</span>.image = pygame.image.load(<span class="hljs-string">&#x27;images/ship.bmp&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.rect = <span class="hljs-variable language_">self</span>.image.get_rect()<br><br>        <span class="hljs-comment"># 每艘新飞船都放在屏幕底部的中央</span><br>        <span class="hljs-variable language_">self</span>.rect.midbottom = <span class="hljs-variable language_">self</span>.screen_rect.midbottom<br><br>        <span class="hljs-comment"># 在飞船的属性X中存储一个浮点数</span><br>        <span class="hljs-variable language_">self</span>.x = <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>.rect.x)<br><br>        <span class="hljs-comment"># 移动标志（飞船一开始不移动）</span><br>        <span class="hljs-variable language_">self</span>.moving_right = <span class="hljs-literal">False</span><br>        <span class="hljs-variable language_">self</span>.moving_left = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新飞船的属性 x 的值，而不是其外接矩形的属性 x 的值</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_right <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.right &lt; <span class="hljs-variable language_">self</span>.screen_rect.right:<br>            <span class="hljs-variable language_">self</span>.x += <span class="hljs-variable language_">self</span>.settings.ship_speed<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.moving_left <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.rect.left &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.x -= <span class="hljs-variable language_">self</span>.settings.ship_speed<br><br>        <span class="hljs-comment"># 根据self.x更新self.rect.x</span><br>        <span class="hljs-variable language_">self</span>.rect.x = <span class="hljs-variable language_">self</span>.x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">blitme</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.screen.blit(<span class="hljs-variable language_">self</span>.image, <span class="hljs-variable language_">self</span>.rect)<br></code></pre></td></tr></table></figure></li></ul><h3 id="射击">射击</h3><ul><li><a href="http://bullett.py">bullett.py</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">from</span> pygame.sprite <span class="hljs-keyword">import</span> Sprite<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bullet</span>(<span class="hljs-title class_ inherited__">Sprite</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;管理飞船所发射子弹的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_game</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在飞船的当前位置创建一个子弹对象&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.screen = ai_game.screen<br>        <span class="hljs-variable language_">self</span>.settings = ai_game.settings<br>        <span class="hljs-variable language_">self</span>.color = <span class="hljs-variable language_">self</span>.settings.bullet_color<br><br>        <span class="hljs-comment"># 在（0,0）处创建一个表示子弹的矩形，再设置正确的位置</span><br>        <span class="hljs-variable language_">self</span>.rect = pygame.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">self</span>.settings.bullet_width, <span class="hljs-variable language_">self</span>.settings.bullet_height)<br>        <span class="hljs-variable language_">self</span>.rect.midtop = ai_game.ship.rect.midtop<br><br>        <span class="hljs-comment"># 存储用浮点数表示的子弹位置</span><br>        <span class="hljs-variable language_">self</span>.y = <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>.rect.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 更新子弹的准确位置</span><br>        <span class="hljs-variable language_">self</span>.y -= <span class="hljs-variable language_">self</span>.settings.bullet_speed<br>        <span class="hljs-comment"># 更新表示子弹的 rect 的位置</span><br>        <span class="hljs-variable language_">self</span>.rect.y = <span class="hljs-variable language_">self</span>.y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_bullet</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span><br>        pygame.draw.rect(<span class="hljs-variable language_">self</span>.screen, <span class="hljs-variable language_">self</span>.color, <span class="hljs-variable language_">self</span>.rect)<br></code></pre></td></tr></table></figure></li></ul><h3 id="小结-v10">小结</h3><p>本章学习了游戏开发计划的指定以及使用Pygame编写的游戏的基本结构。接着学习了如何设置背景色，以及如何将设置存储在独立的类中。然后学习了如何在屏幕上绘制图像，以及如何让玩家控制游戏元素的移动。不仅创建了能自动移动的元素，还删除了不再需要的对象。最后学习了经常性重构是如何为项目的后续开发提供便利的。</p><h2 id="第十三章-外星人">第十三章 外星人</h2><h3 id="项目回顾">项目回顾</h3><p>本章将完成下列开发：</p><ul><li>[ ] 在屏幕左上角添加一个外星人，并指定合适的边距。</li><li>[ ] 沿屏幕上边缘添加一行万星人，再不断地添加成行的外星人，直到填满屏幕的上半部分。</li><li>[ ] 让外星人向两侧和向下移动，直到外星舰队被全部击落、有外星人撞到飞船或有外星人抵达屏幕的下边缘。如果外星舰队都被击落，将再创建一个外星舰队；如果有外星人撞到飞船或抵达屏幕下边缘，就销毁飞船并再创建一个外星舰队。<br><strong>注意</strong>：pygame里面的精灵碰撞和对象碰撞是两个方法<ul><li>pygame.sprite.groupcollide(精灵1，精灵2，1是否参与碰撞，2是否参与碰撞)。<strong>这个是直接赋值给变量就可以了。和 input 差不多</strong></li><li>pygame.sprite.spritecollideany(对象，精灵)。<strong>这个是返回一个bool值</strong></li></ul></li><li>[ ] 限制玩家可用的飞船数量，分配的飞船被用完后，游戏将结束。</li></ul><h3 id="创建第一个外星人">创建第一个外星人</h3><h3 id="小结-v11">小结</h3><p>本章通过创建外星舰队学习了如何在游戏中添加大量相同的元素，如何使用嵌套循环来创建成行成列的整齐元素，以及如何通过调用每个元素的 <code>update()</code>方法移动大量的元素。接着学习了如何控制对象在屏幕上的移动方向，以及如何响应特定的情形，如有外星人到达屏幕边缘。然后学习了如何检测并相应子弹和外星人的碰撞以及外星人和飞创的碰撞。最后学习了如何在游戏中跟踪统计信息，以及如何使用标志 <code> game_active</code>来判断游戏是否结束。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑小技巧（持续更新）</title>
    <link href="/2024/10/25/2024-10-25-%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/10/25/2024-10-25-%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="WIN系统睡眠问题">WIN系统睡眠问题</h2><p><a href="https://zqten.github.io/">回到主頁</a></p><p>运行WIN+R，powershell 回车</p><p>进入命令行输入： powercfg /devicequery wake_armed 查看哪些设备可以唤醒计算机。</p><p>输入：powercfg /lastwake 可以查看最近一次唤醒计算机的硬件是什么。</p><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/design/device-experiences/powercfg-command-line-options">Powercfg 命令行选项 | Microsoft Learn</a></p><p>⚡<strong>还有可能是服务问题，禁用除Microsoft以外的所有服务</strong></p><table><thead><tr><th>/?, -help</th><th>显示有关命令行参数的信息。</th></tr></thead><tbody><tr><td>/list, /L</td><td>列出所有电源方案。</td></tr><tr><td>/query, /Q</td><td>显示电源方案的内容。</td></tr><tr><td>/change, /X</td><td>修改当前电源方案中的设置值。</td></tr><tr><td>/changename</td><td>修改电源方案的名称和描述。</td></tr><tr><td>/duplicatescheme</td><td>复制电源方案。</td></tr><tr><td>/delete, /D</td><td>删除电源方案。</td></tr><tr><td>/deletesetting</td><td>删除电源设置。</td></tr><tr><td>/setactive, /S</td><td>使电源方案在系统上处于活动状态。</td></tr><tr><td>/getactivescheme</td><td>检索当前活动电源方案。</td></tr><tr><td>/setacvalueindex</td><td>设置系统由交流电源供电时与电源设置关联的值。</td></tr><tr><td>/setdcvalueindex</td><td>设置系统由 DC 电源供电时与电源设置关联的值。</td></tr><tr><td>/import</td><td>从文件导入所有电源设置。</td></tr><tr><td>/export</td><td>将电源方案导出到文件。</td></tr><tr><td>/aliases</td><td>显示所有别名及其对应的 GUID。</td></tr><tr><td>/getsecuritydescriptor</td><td>获取与指定电源设置、电源方案或操作关联的安全描述符。</td></tr><tr><td>/setsecuritydescriptor</td><td>设置与电源设置、电源方案或操作关联的安全描述符。</td></tr><tr><td>/hibernate, /H</td><td>启用和禁用休眠功能。</td></tr><tr><td>/availablesleepstates, /A</td><td>报告系统上可用的睡眠状态。</td></tr><tr><td>/devicequery</td><td>返回满足指定条件的设备列表。</td></tr><tr><td>/deviceenableawake</td><td>使设备能够将系统从睡眠状态唤醒。</td></tr><tr><td>/devicedisablewake</td><td>禁止设备将系统从睡眠状态唤醒。</td></tr><tr><td>/lastwake</td><td>报告有关系统从上次睡眠转换中唤醒的信息。</td></tr><tr><td>/waketimers</td><td>枚举活动唤醒计时器。</td></tr><tr><td>/requests</td><td>枚举应用程序和驱动程序电源请求。</td></tr><tr><td>/requestsoverride</td><td>设置特定进程、服务或驱动程序的 Power Request 替代。</td></tr><tr><td>/energy</td><td>分析系统常见的能效和电池寿命问题。</td></tr><tr><td>/batteryreport</td><td>生成电池使用情况报告。</td></tr><tr><td>/sleepstudy</td><td>生成诊断系统电源转换报告。</td></tr><tr><td>/srumutil</td><td>从系统资源使用情况监视器 （SRUM） 转储能量估算数据。</td></tr><tr><td>/systemsleepdiagnostics</td><td>生成系统睡眠转换的诊断报告。</td></tr><tr><td>/systempowerreport</td><td>生成诊断系统电源转换报告。</td></tr></tbody></table><h2 id="激活windows10-11">激活windows10/11</h2><p>管理员运行PowerShell</p><p>站点：massgrave.dev 激活命令：irm <a href="https://massgrave.dev/get">https://massgrave.dev/get</a> | iex</p><h2 id="极品垃圾电脑配置表">极品垃圾电脑配置表</h2><p>处理器 E5 2690V3           淘宝 53元<br>显卡  华擎580 8G 矿卡     夕夕 221元<br>散热器  冰蝶4热管           夕夕35元<br>主板  精粤X99MH-D4       淘宝221元<br>硬盘   杂牌256G M2         夕夕60元<br>电源    EVGA  450W铜牌    闲鱼65元<br>机箱   主板盒</p><h2 id="Python安装（下载地址）">Python安装（下载地址）</h2><p><a href="https://www.python.org/downloads/windows/">Python Releases for Windows | Python.org</a></p><h2 id="Python-pip">Python-pip</h2><p>安装pip命令</p><p><a href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a> 先将这个文件保存到电脑，再用cmd命令到该文件的目录下，执行下面的命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python get-pip.py<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 或者是这个<br>python -m ensurepip --upgrade<br></code></pre></td></tr></table></figure><p>更新pip</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><p>pip安装python库</p><p>临时使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple &#x27;库名称&#x27;<br></code></pre></td></tr></table></figure><p>设为默认python安装库的网址</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h2 id="PyCharm下载地址">PyCharm下载地址</h2><p>分为专业版和社区版，专业版需要付费。</p><p><a href="https://www.jetbrains.com.cn/en-us/pycharm/download/?section=windows">Download PyCharm: Python IDE</a></p><p><a href="https://pan.baidu.com/s/1swyNqTFg-kuAFn0l7P3_KA">激活工具</a><br>提取码：cCn4</p><h2 id="vscode里面python要读取相同目录的文件">vscode里面python要读取相同目录的文件</h2><p>需要再launch.json里面添加一行代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,<br></code></pre></td></tr></table></figure><h2 id="项目结构">项目结构</h2><p><strong>Web App</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs 1c">awesome<span class="hljs-punctuation">-</span>python3<span class="hljs-punctuation">-</span>webapp/  &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 根目录<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> backup/               &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 备份目录<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> conf/                 &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 配置文件<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> dist/                 &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 打包目录<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> www/                  &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> Web目录，存放.py文件<br><span class="hljs-string">|  |</span><br><span class="hljs-string">|  +- static/            &lt;-- 存放静态文件</span><br><span class="hljs-string">|  |</span><br><span class="hljs-string">|  +- templates/         &lt;-- 存放模板文件</span><br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> mobile/               &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 存放移动平台 App工程<br><span class="hljs-string">|</span><br><span class="hljs-punctuation">+</span><span class="hljs-punctuation">-</span> LICENSE               &lt;<span class="hljs-punctuation">-</span><span class="hljs-punctuation">-</span> 代码LICENSE<br></code></pre></td></tr></table></figure><h2 id="HTML特殊字符对照表">HTML特殊字符对照表</h2><p><a href="https://www.cnblogs.com/samlin/archive/2009/07/28/html-entity-chart.html">网址⚡</a></p><h2 id="GitHub高级搜索">GitHub高级搜索</h2><p><a href="https://github.com/search/advanced">GitHub高级搜索</a></p><h2 id="ChatGPT提示词模板">ChatGPT提示词模板</h2><p>我想让你成为我的 Prompt 创作者。你的目标是帮助我创建最佳的 Prompt ，这个 Prompt 将由你 ChatGPT 使用。你将遵循以下过程：</p><ol><li><p>首先，你会问我 Prompt 是关于什么的。我会告诉你，但我们需要通过不断的重复来改进它，通过则进行下一步。</p></li><li><p>根据我的输入，你会创建三个部分：</p><p>a）修订后的 Prompt （你编写修订后的 Prompt ，应该清晰、精确、易于理解）</p><p>b）建议（你提出建议，哪些细节应该包含在 Prompt 中，以使其更好）</p><p>c）问题（你提出相关问题，询问我需要哪些额外信息来改进 Prompt ）</p></li><li><p>你提供的 Prompt 应该采用我发出请求的形式，有 ChatGPT 执行。</p></li><li><p>我们将继续这个迭代过程，我会提供更多的信息，你会更新 “修订后的 Prompt” 不分的请求，直到它完整为止。</p></li></ol><h2 id="windows关闭端口">windows关闭端口</h2><p>查询端口：netstat -ano | findstr 8080</p><p>关闭端口：taskkill -PID 9172 -F       9172是进程ID</p><h2 id="PowerShell新手命令">PowerShell新手命令</h2><p>一、在当前目录下</p><p>新建文件</p><p>New-item空格1（文件名）.doc（文件类型后缀doc\txt等）</p><p>New-item  1.doc</p><p>删除文件</p><p>remove-item空格1（文件名）.doc（文件类型后缀doc\txt等）</p><p>remove-item  1.doc</p><p>对文件添加内容</p><p>Set-content 空格1.txt（文件名+后缀）空格-value空格”123（内容）”</p><p>Set-content  1.txt  -value  “123”</p><p>在文件中加内容</p><p>add-content空格1.txt(文件名+后缀)空格-value 空格&quot;123”（要添加的内容）</p><p>add-content   1.doc  -value  “123”</p><p>删除文件内容</p><p>Clear-content空格1.txt（文件名）</p><p>Clear-content  1.txt</p><p>打开创建的文件</p><p>.\1.txt</p><p>.\文件名+后缀</p><p>二、在其他目录</p><p>新建文件</p><p>new-item空格C:\Users\aa\Desktop(创建目录)\2.ps1(文件名+后缀)</p><p>new-item  C:\Users\aa\Desktop\2.ps1</p><p>删除文件</p><p>Remove-item空格      C:\Users\aa\Desktop（路径）\1.txt（\文件名+后缀）</p><p>remove-item  C:\Users\aa\Desktop\1.txt</p><p>添加内容</p><p>Set-content空格C:\Users\aa\Desktop\1.txt（路径\文件名+后缀）空格 -value空格”1111”(“添加的内容”)</p><p>set-content  C:\Users\aa\Desktop\1.txt -value “1111”</p><p>增加内容</p><p>add-content空格 C:\Users\aa\Desktop\1.txt（路径\文件名+后缀）空格 -value “111”(“添加的内容”)</p><p>add-content  C:\Users\aa\Desktop\1.txt  -value “111”</p><p>删除文件内容</p><p>clear-content空格 C:\Users\aa\Desktop\1.txt（路径\文件名+后缀）</p><p>clear-content   C:\Users\aa\Desktop\1.txt</p><p>打开文件</p><p>C:\Users\aa\Desktop\1.txt（路径\文件名+后缀）</p><p>C:\Users\aa\Desktop\1.txt</p><h2 id="Google搜索语法">Google搜索语法</h2><p>所有这些语法都可以组合使用，比如2和5里面**<code>intitle:&quot;标题关键词&quot; intext:&quot;内容关键词&quot;</code>。**</p><ol><li>用<code>&quot;关键词&quot;</code>限定关键词搜索，<code>&quot; &quot;</code>内的关键词是必须出现的。</li><li>用<code>intitle:标题关键词</code>前缀搜索，会以关键词为标题进行搜索。</li><li>用<code>allintitle:关键词A 关键词B</code>，限定标题多个关键词。</li><li>用<code>intext:内容关键词</code>，限定内容关键词。</li><li>用<code>inurl:网址关键词</code>，限定搜索网址的关键词。例：<code>李子柒 inurl:cctv</code></li><li>用<code>site:网址</code>，限定网址来源。例：<code>李子柒 site:zhihu.com</code></li><li>用<code>-搜索排除项</code>,可以排除包含有排除项搜索结果。</li><li>用<code>*</code>，表示通配符。例：<code>搜索*擎</code>，就会出现搜索引擎、搜索巨擎等。</li><li>用<code>imagesize:想要的图片尺寸（2560x1440）</code>，限定图片尺寸。</li><li>用<code>文件名 filetype:文件后缀</code>，限定文件格式。</li></ol><h2 id="RAR-PDF等文件破解流程">RAR,PDF等文件破解流程</h2><p>首先下载两个软件：</p><ul><li><a href="https://hashcat.net/hashcat/">hashcat</a></li><li><a href="https://www.openwall.com/john/">John the Ripper</a></li></ul><ol><li>进入John the Ripper文件夹下的run文件夹，把需要破解的压缩包文件拖进去并重命名。<br>以RAR为例：<code>test.rar</code></li><li>在该文件夹下的地址栏输入<code>cmd</code>进入命令行。windows10系统，其他系统可以通过命令行进入该文件夹。</li><li>输入命令：<code>rar2john.exe test.rar</code>，会得到一个以<code>$</code>开头的加密值，把它复制到<code>txt</code>文件。</li><li>进入到<code>hashcat</code>文件夹，在地址栏输入<code>cmd</code>进入命令行。</li><li>输入破解命令：hashcat.exe -m 13000 -a 3 上面$开头的哈希值 -o password.txt<br>这里的13000可以是哈希值为rar5的开头的值，如果是其他哈希值，可以通过<a href="https://hashcat.net/wiki/doku.php?id=example_hashes">点击这里</a>查询<br>-a 是要使用的破解模式<code>-a 0</code>字典攻击，<code>-a 1</code>组合攻击，<code>-a 3</code>掩码攻击<br>-o 是破解后输出明文密码的文件</li></ol><h2 id="MarkDown小技巧">MarkDown小技巧</h2><p>链接本地文件：</p><ul><li>绝对地址方法：<code>C:/文件夹/文件名.后缀</code></li><li>相对地址方法：<code>../文件夹/文件名.后缀</code></li><li>当前目录文件：<code>文件名.后缀</code></li></ul><h2 id="输入法切换">输入法切换</h2><p>当只有一个输入法或语言时：<code>win+空格</code>不能切换，需要添加一个语言才可以。</p><h2 id="删除右键菜单项目">删除右键菜单项目</h2><ul><li><p>注册表：计算机\HKEY_CLASSES_ROOT\Directory\Background</p><blockquote><p>这里面的<code>shell</code>是在桌面的情况下的右键菜单</p></blockquote></li><li><p>注册表：计算机\HKEY_CLASSES_ROOT\Directory\shell</p><blockquote><p>这个里面的<code>shell</code>是在<strong>右键点击文件</strong>的菜单</p></blockquote></li></ul><h2 id="安装激活-sublime-text4-4180">安装激活 sublime text4 4180</h2><p><a href="https://segmentfault.com/a/1190000045171775">运维 - Sublime Text4 4180 安装激活 - 个人文章 - SegmentFault 思否</a></p><h2 id="steam市场批量卖出">steam市场批量卖出</h2><p><a href="https://steamcommunity.com/market/multisell?appid=730&amp;contextid=2&amp;items%5B%5D=Kilowatt%20Case">https://steamcommunity.com/market/multisell?appid=730&amp;contextid=2&amp;items[]=Kilowatt Case</a></p><p>⭐最后等号后面为物品代码（可以到市场点击物品查看复制）</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>常识</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
